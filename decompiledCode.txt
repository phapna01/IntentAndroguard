
    public abstract boolean getCanRetrieveWindowContent();

    public abstract String getDescription();

    public abstract String getId();

    public abstract android.content.pm.ResolveInfo getResolveInfo();

    public abstract String getSettingsActivityName();

    AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl()
    {
        return;
    }

    public boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public String getDescription(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public String getId(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl()
    {
        return;
    }

    public boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getCanRetrieveWindowContent(p2);
    }

    public String getDescription(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getDescription(p2);
    }

    public String getId(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getId(p2);
    }

    public android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getResolveInfo(p2);
    }

    public String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getSettingsActivityName(p2);
    }

    static AccessibilityServiceInfoCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl();
        } else {
            android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl();
        }
        return;
    }

    private AccessibilityServiceInfoCompat()
    {
        return;
    }

    public static String feedbackTypeToString(int p4)
    {
        StringBuilder v0_1 = new StringBuilder();
        v0_1.append("[");
        while (p4 > 0) {
            int v1 = (1 << Integer.numberOfTrailingZeros(p4));
            p4 &= (v1 ^ -1);
            if (v0_1.length() > 1) {
                v0_1.append(", ");
            }
            switch (v1) {
                case 1:
                    v0_1.append("FEEDBACK_SPOKEN");
                    break;
                case 2:
                    v0_1.append("FEEDBACK_HAPTIC");
                    break;
                case 4:
                    v0_1.append("FEEDBACK_AUDIBLE");
                    break;
                case 8:
                    v0_1.append("FEEDBACK_VISUAL");
                    break;
                case 16:
                    v0_1.append("FEEDBACK_GENERIC");
                    break;
                default:
            }
        }
        v0_1.append("]");
        return v0_1.toString();
    }

    public static String flagToString(int p1)
    {
        String v0;
        switch (p1) {
            case 1:
                v0 = "DEFAULT";
                break;
            default:
                v0 = 0;
        }
        return v0;
    }

    public static boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getCanRetrieveWindowContent(p1);
    }

    public static String getDescription(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getDescription(p1);
    }

    public static String getId(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getId(p1);
    }

    public static android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getResolveInfo(p1);
    }

    public static String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getSettingsActivityName(p1);
    }

    AccessibilityServiceInfoCompatIcs()
    {
        return;
    }

    public static boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getCanRetrieveWindowContent();
    }

    public static String getDescription(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getDescription();
    }

    public static String getId(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getId();
    }

    public static android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getResolveInfo();
    }

    public static String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getSettingsActivityName();
    }

    public ActivityCompat()
    {
        return;
    }

    public static boolean invalidateOptionsMenu(android.app.Activity p2)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = 0;
        } else {
            android.support.v4.app.ActivityCompatHoneycomb.invalidateOptionsMenu(p2);
            v0_1 = 1;
        }
        return v0_1;
    }

    public static boolean startActivities(android.app.Activity p2, android.content.Intent[] p3)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = 0;
        } else {
            android.support.v4.app.ActivityCompatHoneycomb.startActivities(p2, p3);
            v0_1 = 1;
        }
        return v0_1;
    }

    ActivityCompatHoneycomb()
    {
        return;
    }

    static void dump(android.app.Activity p0, String p1, java.io.FileDescriptor p2, java.io.PrintWriter p3, String[] p4)
    {
        p0.dump(p1, p2, p3, p4);
        return;
    }

    static void invalidateOptionsMenu(android.app.Activity p0)
    {
        p0.invalidateOptionsMenu();
        return;
    }

    static void startActivities(android.app.Activity p0, android.content.Intent[] p1)
    {
        p0.startActivities(p1);
        return;
    }

    BackStackRecord$Op()
    {
        return;
    }

    public FragmentTransaction()
    {
        return;
    }

    public abstract android.support.v4.app.FragmentTransaction add();

    public abstract android.support.v4.app.FragmentTransaction add();

    public abstract android.support.v4.app.FragmentTransaction add();

    public abstract android.support.v4.app.FragmentTransaction addToBackStack();

    public abstract android.support.v4.app.FragmentTransaction attach();

    public abstract int commit();

    public abstract int commitAllowingStateLoss();

    public abstract android.support.v4.app.FragmentTransaction detach();

    public abstract android.support.v4.app.FragmentTransaction disallowAddToBackStack();

    public abstract android.support.v4.app.FragmentTransaction hide();

    public abstract boolean isAddToBackStackAllowed();

    public abstract boolean isEmpty();

    public abstract android.support.v4.app.FragmentTransaction remove();

    public abstract android.support.v4.app.FragmentTransaction replace();

    public abstract android.support.v4.app.FragmentTransaction replace();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbTitle();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbTitle();

    public abstract android.support.v4.app.FragmentTransaction setCustomAnimations();

    public abstract android.support.v4.app.FragmentTransaction setCustomAnimations();

    public abstract android.support.v4.app.FragmentTransaction setTransition();

    public abstract android.support.v4.app.FragmentTransaction setTransitionStyle();

    public abstract android.support.v4.app.FragmentTransaction show();

    public abstract CharSequence getBreadCrumbShortTitle();

    public abstract int getBreadCrumbShortTitleRes();

    public abstract CharSequence getBreadCrumbTitle();

    public abstract int getBreadCrumbTitleRes();

    public abstract int getId();

    public abstract String getName();

    public BackStackRecord(android.support.v4.app.FragmentManagerImpl p2)
    {
        this.mAllowAddToBackStack = 1;
        this.mManager = p2;
        return;
    }

    private void doAddOp(int p5, android.support.v4.app.Fragment p6, String p7, int p8)
    {
        p6.mFragmentManager = this.mManager;
        if (p7 != null) {
            if ((p6.mTag == null) || (p7.equals(p6.mTag))) {
                p6.mTag = p7;
            } else {
                throw new IllegalStateException(new StringBuilder().append("Can\'t change tag of fragment ").append(p6).append(": was ").append(p6.mTag).append(" now ").append(p7).toString());
            }
        }
        if (p5 != 0) {
            if ((p6.mFragmentId == 0) || (p6.mFragmentId == p5)) {
                p6.mFragmentId = p5;
                p6.mContainerId = p5;
            } else {
                throw new IllegalStateException(new StringBuilder().append("Can\'t change container ID of fragment ").append(p6).append(": was ").append(p6.mFragmentId).append(" now ").append(p5).toString());
            }
        }
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = p8;
        v0_1.fragment = p6;
        this.addOp(v0_1);
        return;
    }

    public android.support.v4.app.FragmentTransaction add(int p3, android.support.v4.app.Fragment p4)
    {
        this.doAddOp(p3, p4, 0, 1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction add(int p2, android.support.v4.app.Fragment p3, String p4)
    {
        this.doAddOp(p2, p3, p4, 1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment p3, String p4)
    {
        this.doAddOp(0, p3, p4, 1);
        return this;
    }

    void addOp(android.support.v4.app.BackStackRecord$Op p2)
    {
        if (this.mHead != null) {
            p2.prev = this.mTail;
            this.mTail.next = p2;
            this.mTail = p2;
        } else {
            this.mTail = p2;
            this.mHead = p2;
        }
        p2.enterAnim = this.mEnterAnim;
        p2.exitAnim = this.mExitAnim;
        p2.popEnterAnim = this.mPopEnterAnim;
        p2.popExitAnim = this.mPopExitAnim;
        this.mNumOp = (this.mNumOp + 1);
        return;
    }

    public android.support.v4.app.FragmentTransaction addToBackStack(String p3)
    {
        if (this.mAllowAddToBackStack) {
            this.mAddToBackStack = 1;
            this.mName = p3;
            return this;
        } else {
            throw new IllegalStateException("This FragmentTransaction is not allowed to be added to the back stack.");
        }
    }

    public android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 7;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    void bumpBackStackNesting(int p7)
    {
        if (this.mAddToBackStack) {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("BackStackEntry", new StringBuilder().append("Bump nesting in ").append(this).append(" by ").append(p7).toString());
            }
            android.support.v4.app.BackStackRecord$Op v1 = this.mHead;
            while (v1 != null) {
                String v3_2 = v1.fragment;
                v3_2.mBackStackNesting = (v3_2.mBackStackNesting + p7);
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("BackStackEntry", new StringBuilder().append("Bump nesting of ").append(v1.fragment).append(" to ").append(v1.fragment.mBackStackNesting).toString());
                }
                if (v1.removed != null) {
                    int v0 = (v1.removed.size() - 1);
                    while (v0 >= 0) {
                        android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) v1.removed.get(v0));
                        v2_1.mBackStackNesting = (v2_1.mBackStackNesting + p7);
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("BackStackEntry", new StringBuilder().append("Bump nesting of ").append(v2_1).append(" to ").append(v2_1.mBackStackNesting).toString());
                        }
                        v0--;
                    }
                }
                v1 = v1.next;
            }
        }
        return;
    }

    public int commit()
    {
        return this.commitInternal(0);
    }

    public int commitAllowingStateLoss()
    {
        return this.commitInternal(1);
    }

    int commitInternal(boolean p4)
    {
        if (!this.mCommitted) {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("BackStackEntry", new StringBuilder().append("Commit: ").append(this).toString());
            }
            this.mCommitted = 1;
            if (!this.mAddToBackStack) {
                this.mIndex = -1;
            } else {
                this.mIndex = this.mManager.allocBackStackIndex(this);
            }
            this.mManager.enqueueAction(this, p4);
            return this.mIndex;
        } else {
            throw new IllegalStateException("commit already called");
        }
    }

    public android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 6;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction disallowAddToBackStack()
    {
        if (!this.mAddToBackStack) {
            this.mAllowAddToBackStack = 0;
            return this;
        } else {
            throw new IllegalStateException("This transaction is already being added to the back stack");
        }
    }

    public void dump(String p7, java.io.FileDescriptor p8, java.io.PrintWriter p9, String[] p10)
    {
        p9.print(p7);
        p9.print("mName=");
        p9.print(this.mName);
        p9.print(" mIndex=");
        p9.print(this.mIndex);
        p9.print(" mCommitted=");
        p9.println(this.mCommitted);
        if (this.mTransition != 0) {
            p9.print(p7);
            p9.print("mTransition=#");
            p9.print(Integer.toHexString(this.mTransition));
            p9.print(" mTransitionStyle=#");
            p9.println(Integer.toHexString(this.mTransitionStyle));
        }
        if ((this.mEnterAnim != 0) || (this.mExitAnim != 0)) {
            p9.print(p7);
            p9.print("mEnterAnim=#");
            p9.print(Integer.toHexString(this.mEnterAnim));
            p9.print(" mExitAnim=#");
            p9.println(Integer.toHexString(this.mExitAnim));
        }
        if ((this.mPopEnterAnim != 0) || (this.mPopExitAnim != 0)) {
            p9.print(p7);
            p9.print("mPopEnterAnim=#");
            p9.print(Integer.toHexString(this.mPopEnterAnim));
            p9.print(" mPopExitAnim=#");
            p9.println(Integer.toHexString(this.mPopExitAnim));
        }
        if ((this.mBreadCrumbTitleRes != 0) || (this.mBreadCrumbTitleText != null)) {
            p9.print(p7);
            p9.print("mBreadCrumbTitleRes=#");
            p9.print(Integer.toHexString(this.mBreadCrumbTitleRes));
            p9.print(" mBreadCrumbTitleText=");
            p9.println(this.mBreadCrumbTitleText);
        }
        if ((this.mBreadCrumbShortTitleRes != 0) || (this.mBreadCrumbShortTitleText != null)) {
            p9.print(p7);
            p9.print("mBreadCrumbShortTitleRes=#");
            p9.print(Integer.toHexString(this.mBreadCrumbShortTitleRes));
            p9.print(" mBreadCrumbShortTitleText=");
            p9.println(this.mBreadCrumbShortTitleText);
        }
        if (this.mHead != null) {
            p9.print(p7);
            p9.println("Operations:");
            String v1 = new StringBuilder().append(p7).append("    ").toString();
            android.support.v4.app.BackStackRecord$Op v3 = this.mHead;
            while (v3 != null) {
                p9.print(p7);
                p9.print("  Op #");
                p9.print(0);
                p9.println(":");
                p9.print(v1);
                p9.print("cmd=");
                p9.print(v3.cmd);
                p9.print(" fragment=");
                p9.println(v3.fragment);
                if ((v3.enterAnim != 0) || (v3.exitAnim != 0)) {
                    p9.print(p7);
                    p9.print("enterAnim=#");
                    p9.print(Integer.toHexString(v3.enterAnim));
                    p9.print(" exitAnim=#");
                    p9.println(Integer.toHexString(v3.exitAnim));
                }
                if ((v3.popEnterAnim != 0) || (v3.popExitAnim != 0)) {
                    p9.print(p7);
                    p9.print("popEnterAnim=#");
                    p9.print(Integer.toHexString(v3.popEnterAnim));
                    p9.print(" popExitAnim=#");
                    p9.println(Integer.toHexString(v3.popExitAnim));
                }
                if ((v3.removed != null) && (v3.removed.size() > 0)) {
                    int v0 = 0;
                    while (v0 < v3.removed.size()) {
                        p9.print(v1);
                        if (v3.removed.size() != 1) {
                            p9.println("Removed:");
                            p9.print(v1);
                            p9.print("  #");
                            p9.print(0);
                            p9.print(": ");
                        } else {
                            p9.print("Removed: ");
                        }
                        p9.println(v3.removed.get(v0));
                        v0++;
                    }
                }
                v3 = v3.next;
            }
        }
        return;
    }

    public CharSequence getBreadCrumbShortTitle()
    {
        CharSequence v0_1;
        if (this.mBreadCrumbShortTitleRes == 0) {
            v0_1 = this.mBreadCrumbShortTitleText;
        } else {
            v0_1 = this.mManager.mActivity.getText(this.mBreadCrumbShortTitleRes);
        }
        return v0_1;
    }

    public int getBreadCrumbShortTitleRes()
    {
        return this.mBreadCrumbShortTitleRes;
    }

    public CharSequence getBreadCrumbTitle()
    {
        CharSequence v0_1;
        if (this.mBreadCrumbTitleRes == 0) {
            v0_1 = this.mBreadCrumbTitleText;
        } else {
            v0_1 = this.mManager.mActivity.getText(this.mBreadCrumbTitleRes);
        }
        return v0_1;
    }

    public int getBreadCrumbTitleRes()
    {
        return this.mBreadCrumbTitleRes;
    }

    public int getId()
    {
        return this.mIndex;
    }

    public String getName()
    {
        return this.mName;
    }

    public int getTransition()
    {
        return this.mTransition;
    }

    public int getTransitionStyle()
    {
        return this.mTransitionStyle;
    }

    public android.support.v4.app.FragmentTransaction hide(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 4;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    public boolean isAddToBackStackAllowed()
    {
        return this.mAllowAddToBackStack;
    }

    public boolean isEmpty()
    {
        int v0_1;
        if (this.mNumOp != 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void popFromBackStack(boolean p11)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("BackStackEntry", new StringBuilder().append("popFromBackStack: ").append(this).toString());
        }
        this.bumpBackStackNesting(-1);
        android.support.v4.app.BackStackRecord$Op v3 = this.mTail;
        while (v3 != null) {
            switch (v3.cmd) {
                case 1:
                    android.support.v4.app.Fragment v0_0 = v3.fragment;
                    v0_0.mNextAnim = v3.popExitAnim;
                    this.mManager.removeFragment(v0_0, android.support.v4.app.FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle);
                    break;
                case 2:
                    android.support.v4.app.Fragment v0_6 = v3.fragment;
                    v0_6.mNextAnim = v3.popExitAnim;
                    this.mManager.removeFragment(v0_6, android.support.v4.app.FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle);
                    if (v3.removed == null) {
                    } else {
                        int v1 = 0;
                        while (v1 < v3.removed.size()) {
                            android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) v3.removed.get(v1));
                            v2_1.mNextAnim = v3.popEnterAnim;
                            this.mManager.addFragment(v2_1, 0);
                            v1++;
                        }
                    }
                    break;
                case 3:
                    android.support.v4.app.Fragment v0_5 = v3.fragment;
                    v0_5.mNextAnim = v3.popEnterAnim;
                    this.mManager.addFragment(v0_5, 0);
                    break;
                case 4:
                    android.support.v4.app.Fragment v0_4 = v3.fragment;
                    v0_4.mNextAnim = v3.popEnterAnim;
                    this.mManager.showFragment(v0_4, android.support.v4.app.FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle);
                    break;
                case 5:
                    android.support.v4.app.Fragment v0_3 = v3.fragment;
                    v0_3.mNextAnim = v3.popExitAnim;
                    this.mManager.hideFragment(v0_3, android.support.v4.app.FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle);
                    break;
                case 6:
                    android.support.v4.app.Fragment v0_2 = v3.fragment;
                    v0_2.mNextAnim = v3.popEnterAnim;
                    this.mManager.attachFragment(v0_2, android.support.v4.app.FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle);
                    break;
                case 7:
                    android.support.v4.app.Fragment v0_1 = v3.fragment;
                    v0_1.mNextAnim = v3.popEnterAnim;
                    this.mManager.detachFragment(v0_1, android.support.v4.app.FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle);
                    break;
                default:
                    throw new IllegalArgumentException(new StringBuilder().append("Unknown cmd: ").append(v3.cmd).toString());
            }
            v3 = v3.prev;
        }
        if (p11) {
            this.mManager.moveToState(this.mManager.mCurState, android.support.v4.app.FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle, 1);
        }
        if (this.mIndex >= 0) {
            this.mManager.freeBackStackIndex(this.mIndex);
            this.mIndex = -1;
        }
        return;
    }

    public android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 3;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction replace(int p2, android.support.v4.app.Fragment p3)
    {
        return this.replace(p2, p3, 0);
    }

    public android.support.v4.app.FragmentTransaction replace(int p3, android.support.v4.app.Fragment p4, String p5)
    {
        if (p3 != 0) {
            this.doAddOp(p3, p4, p5, 2);
            return this;
        } else {
            throw new IllegalArgumentException("Must use non-zero containerViewId");
        }
    }

    public void run()
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("BackStackEntry", new StringBuilder().append("Run: ").append(this).toString());
        }
        if ((!this.mAddToBackStack) || (this.mIndex >= 0)) {
            this.bumpBackStackNesting(1);
            android.support.v4.app.BackStackRecord$Op v3 = this.mHead;
            while (v3 != null) {
                switch (v3.cmd) {
                    case 1:
                        android.support.v4.app.Fragment v0_0 = v3.fragment;
                        v0_0.mNextAnim = v3.enterAnim;
                        this.mManager.addFragment(v0_0, 0);
                        break;
                    case 2:
                        android.support.v4.app.Fragment v0_6 = v3.fragment;
                        if (this.mManager.mAdded != null) {
                            int v1 = 0;
                            while (v1 < this.mManager.mAdded.size()) {
                                android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) this.mManager.mAdded.get(v1));
                                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                    android.util.Log.v("BackStackEntry", new StringBuilder().append("OP_REPLACE: adding=").append(v0_6).append(" old=").append(v2_1).toString());
                                }
                                if (v2_1.mContainerId == v0_6.mContainerId) {
                                    if (v3.removed == null) {
                                        v3.removed = new java.util.ArrayList();
                                    }
                                    v3.removed.add(v2_1);
                                    v2_1.mNextAnim = v3.exitAnim;
                                    if (this.mAddToBackStack) {
                                        v2_1.mBackStackNesting = (v2_1.mBackStackNesting + 1);
                                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                            android.util.Log.v("BackStackEntry", new StringBuilder().append("Bump nesting of ").append(v2_1).append(" to ").append(v2_1.mBackStackNesting).toString());
                                        }
                                    }
                                    this.mManager.removeFragment(v2_1, this.mTransition, this.mTransitionStyle);
                                }
                                v1++;
                            }
                        }
                        v0_6.mNextAnim = v3.enterAnim;
                        this.mManager.addFragment(v0_6, 0);
                        break;
                    case 3:
                        android.support.v4.app.Fragment v0_5 = v3.fragment;
                        v0_5.mNextAnim = v3.exitAnim;
                        this.mManager.removeFragment(v0_5, this.mTransition, this.mTransitionStyle);
                        break;
                    case 4:
                        android.support.v4.app.Fragment v0_4 = v3.fragment;
                        v0_4.mNextAnim = v3.exitAnim;
                        this.mManager.hideFragment(v0_4, this.mTransition, this.mTransitionStyle);
                        break;
                    case 5:
                        android.support.v4.app.Fragment v0_3 = v3.fragment;
                        v0_3.mNextAnim = v3.enterAnim;
                        this.mManager.showFragment(v0_3, this.mTransition, this.mTransitionStyle);
                        break;
                    case 6:
                        android.support.v4.app.Fragment v0_2 = v3.fragment;
                        v0_2.mNextAnim = v3.exitAnim;
                        this.mManager.detachFragment(v0_2, this.mTransition, this.mTransitionStyle);
                        break;
                    case 7:
                        android.support.v4.app.Fragment v0_1 = v3.fragment;
                        v0_1.mNextAnim = v3.enterAnim;
                        this.mManager.attachFragment(v0_1, this.mTransition, this.mTransitionStyle);
                        break;
                    default:
                        throw new IllegalArgumentException(new StringBuilder().append("Unknown cmd: ").append(v3.cmd).toString());
                }
                v3 = v3.next;
            }
            this.mManager.moveToState(this.mManager.mCurState, this.mTransition, this.mTransitionStyle, 1);
            if (this.mAddToBackStack) {
                this.mManager.addBackStackState(this);
            }
            return;
        } else {
            throw new IllegalStateException("addToBackStack() called after commit()");
        }
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(int p2)
    {
        this.mBreadCrumbShortTitleRes = p2;
        this.mBreadCrumbShortTitleText = 0;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(CharSequence p2)
    {
        this.mBreadCrumbShortTitleRes = 0;
        this.mBreadCrumbShortTitleText = p2;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbTitle(int p2)
    {
        this.mBreadCrumbTitleRes = p2;
        this.mBreadCrumbTitleText = 0;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbTitle(CharSequence p2)
    {
        this.mBreadCrumbTitleRes = 0;
        this.mBreadCrumbTitleText = p2;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setCustomAnimations(int p2, int p3)
    {
        return this.setCustomAnimations(p2, p3, 0, 0);
    }

    public android.support.v4.app.FragmentTransaction setCustomAnimations(int p1, int p2, int p3, int p4)
    {
        this.mEnterAnim = p1;
        this.mExitAnim = p2;
        this.mPopEnterAnim = p3;
        this.mPopExitAnim = p4;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setTransition(int p1)
    {
        this.mTransition = p1;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setTransitionStyle(int p1)
    {
        this.mTransitionStyle = p1;
        return this;
    }

    public android.support.v4.app.FragmentTransaction show(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 5;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    BackStackState$1()
    {
        return;
    }

    public android.support.v4.app.BackStackState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.app.BackStackState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.BackStackState[] newArray(int p2)
    {
        android.support.v4.app.BackStackState[] v0 = new android.support.v4.app.BackStackState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static BackStackState()
    {
        android.support.v4.app.BackStackState.CREATOR = new android.support.v4.app.BackStackState$1();
        return;
    }

    public BackStackState(android.os.Parcel p2)
    {
        this.mOps = p2.createIntArray();
        this.mTransition = p2.readInt();
        this.mTransitionStyle = p2.readInt();
        this.mName = p2.readString();
        this.mIndex = p2.readInt();
        this.mBreadCrumbTitleRes = p2.readInt();
        this.mBreadCrumbTitleText = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p2));
        this.mBreadCrumbShortTitleRes = p2.readInt();
        this.mBreadCrumbShortTitleText = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p2));
        return;
    }

    public BackStackState(android.support.v4.app.FragmentManagerImpl p9, android.support.v4.app.BackStackRecord p10)
    {
        int v2 = 0;
        android.support.v4.app.BackStackRecord$Op v3_1 = p10.mHead;
        while (v3_1 != null) {
            if (v3_1.removed != null) {
                v2 += v3_1.removed.size();
            }
            v3_1 = v3_1.next;
        }
        int v6_21 = new int[((p10.mNumOp * 7) + v2)];
        this.mOps = v6_21;
        if (p10.mAddToBackStack) {
            android.support.v4.app.BackStackRecord$Op v3_0 = p10.mHead;
            int v5_0 = 0;
            while (v3_0 != null) {
                int v4_4;
                int v4_1 = (v5_0 + 1);
                this.mOps[v5_0] = v3_0.cmd;
                int v5_1 = (v4_1 + 1);
                this.mOps[v4_1] = v3_0.fragment.mIndex;
                int v4_2 = (v5_1 + 1);
                this.mOps[v5_1] = v3_0.enterAnim;
                int v5_2 = (v4_2 + 1);
                this.mOps[v4_2] = v3_0.exitAnim;
                int v4_3 = (v5_2 + 1);
                this.mOps[v5_2] = v3_0.popEnterAnim;
                int v5_3 = (v4_3 + 1);
                this.mOps[v4_3] = v3_0.popExitAnim;
                if (v3_0.removed == null) {
                    v4_4 = (v5_3 + 1);
                    this.mOps[v5_3] = 0;
                } else {
                    int v0 = v3_0.removed.size();
                    int v4_5 = (v5_3 + 1);
                    this.mOps[v5_3] = v0;
                    int v1 = 0;
                    int v5_4 = v4_5;
                    while (v1 < v0) {
                        int v4_6 = (v5_4 + 1);
                        this.mOps[v5_4] = ((android.support.v4.app.Fragment) v3_0.removed.get(v1)).mIndex;
                        v1++;
                        v5_4 = v4_6;
                    }
                    v4_4 = v5_4;
                }
                v3_0 = v3_0.next;
                v5_0 = v4_4;
            }
            this.mTransition = p10.mTransition;
            this.mTransitionStyle = p10.mTransitionStyle;
            this.mName = p10.mName;
            this.mIndex = p10.mIndex;
            this.mBreadCrumbTitleRes = p10.mBreadCrumbTitleRes;
            this.mBreadCrumbTitleText = p10.mBreadCrumbTitleText;
            this.mBreadCrumbShortTitleRes = p10.mBreadCrumbShortTitleRes;
            this.mBreadCrumbShortTitleText = p10.mBreadCrumbShortTitleText;
            return;
        } else {
            throw new IllegalStateException("Not on back stack");
        }
    }

    public int describeContents()
    {
        return 0;
    }

    public android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl p13)
    {
        android.support.v4.app.BackStackRecord v1_1 = new android.support.v4.app.BackStackRecord(p13);
        int v5_1 = 0;
        while (v5_1 < this.mOps.length) {
            android.support.v4.app.BackStackRecord$Op v4_1 = new android.support.v4.app.BackStackRecord$Op();
            int v6_1 = (v5_1 + 1);
            v4_1.cmd = this.mOps[v5_1];
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("BSE ").append(v1_1).append(" set base fragment #").append(this.mOps[v6_1]).toString());
            }
            int v5_2 = (v6_1 + 1);
            v4_1.fragment = ((android.support.v4.app.Fragment) p13.mActive.get(this.mOps[v6_1]));
            int v6_2 = (v5_2 + 1);
            v4_1.enterAnim = this.mOps[v5_2];
            int v5_3 = (v6_2 + 1);
            v4_1.exitAnim = this.mOps[v6_2];
            int v6_3 = (v5_3 + 1);
            v4_1.popEnterAnim = this.mOps[v5_3];
            int v5_4 = (v6_3 + 1);
            v4_1.popExitAnim = this.mOps[v6_3];
            int v6_0 = (v5_4 + 1);
            int v0 = this.mOps[v5_4];
            if (v0 > 0) {
                v4_1.removed = new java.util.ArrayList(v0);
                int v3 = 0;
                while (v3 < v0) {
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("BSE ").append(v1_1).append(" set remove fragment #").append(this.mOps[v6_0]).toString());
                    }
                    int v5_0 = (v6_0 + 1);
                    v4_1.removed.add(((android.support.v4.app.Fragment) p13.mActive.get(this.mOps[v6_0])));
                    v3++;
                    v6_0 = v5_0;
                }
            }
            v5_1 = v6_0;
            v1_1.addOp(v4_1);
        }
        v1_1.mTransition = this.mTransition;
        v1_1.mTransitionStyle = this.mTransitionStyle;
        v1_1.mName = this.mName;
        v1_1.mIndex = this.mIndex;
        v1_1.mAddToBackStack = 1;
        v1_1.mBreadCrumbTitleRes = this.mBreadCrumbTitleRes;
        v1_1.mBreadCrumbTitleText = this.mBreadCrumbTitleText;
        v1_1.mBreadCrumbShortTitleRes = this.mBreadCrumbShortTitleRes;
        v1_1.mBreadCrumbShortTitleText = this.mBreadCrumbShortTitleText;
        v1_1.bumpBackStackNesting(1);
        return v1_1;
    }

    public void writeToParcel(android.os.Parcel p3, int p4)
    {
        p3.writeIntArray(this.mOps);
        p3.writeInt(this.mTransition);
        p3.writeInt(this.mTransitionStyle);
        p3.writeString(this.mName);
        p3.writeInt(this.mIndex);
        p3.writeInt(this.mBreadCrumbTitleRes);
        android.text.TextUtils.writeToParcel(this.mBreadCrumbTitleText, p3, 0);
        p3.writeInt(this.mBreadCrumbShortTitleRes);
        android.text.TextUtils.writeToParcel(this.mBreadCrumbShortTitleText, p3, 0);
        return;
    }

    static Fragment()
    {
        android.support.v4.app.Fragment.sClassMap = new java.util.HashMap();
        return;
    }

    public Fragment()
    {
        this.mState = 0;
        this.mIndex = -1;
        this.mTargetIndex = -1;
        this.mMenuVisible = 1;
        this.mUserVisibleHint = 1;
        return;
    }

    public static android.support.v4.app.Fragment instantiate(android.content.Context p1, String p2)
    {
        return android.support.v4.app.Fragment.instantiate(p1, p2, 0);
    }

    public static android.support.v4.app.Fragment instantiate(android.content.Context p6, String p7, android.os.Bundle p8)
    {
        try {
            Class v0_1 = ((Class) android.support.v4.app.Fragment.sClassMap.get(p7));
        } catch (IllegalAccessException v1_2) {
            throw new android.support.v4.app.Fragment$InstantiationException(new StringBuilder().append("Unable to instantiate fragment ").append(p7).append(": make sure class name exists, is public, and has an").append(" empty constructor that is public").toString(), v1_2);
        } catch (IllegalAccessException v1_1) {
            throw new android.support.v4.app.Fragment$InstantiationException(new StringBuilder().append("Unable to instantiate fragment ").append(p7).append(": make sure class name exists, is public, and has an").append(" empty constructor that is public").toString(), v1_1);
        } catch (IllegalAccessException v1_0) {
            throw new android.support.v4.app.Fragment$InstantiationException(new StringBuilder().append("Unable to instantiate fragment ").append(p7).append(": make sure class name exists, is public, and has an").append(" empty constructor that is public").toString(), v1_0);
        }
        if (v0_1 == null) {
            v0_1 = p6.getClassLoader().loadClass(p7);
            android.support.v4.app.Fragment.sClassMap.put(p7, v0_1);
        }
        android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) v0_1.newInstance());
        if (p8 != null) {
            p8.setClassLoader(v2_1.getClass().getClassLoader());
            v2_1.mArguments = p8;
        }
        return v2_1;
    }

    public void dump(String p4, java.io.FileDescriptor p5, java.io.PrintWriter p6, String[] p7)
    {
        p6.print(p4);
        p6.print("mFragmentId=#");
        p6.print(Integer.toHexString(this.mFragmentId));
        p6.print(" mContainerId#=");
        p6.print(Integer.toHexString(this.mContainerId));
        p6.print(" mTag=");
        p6.println(this.mTag);
        p6.print(p4);
        p6.print("mState=");
        p6.print(this.mState);
        p6.print(" mIndex=");
        p6.print(this.mIndex);
        p6.print(" mWho=");
        p6.print(this.mWho);
        p6.print(" mBackStackNesting=");
        p6.println(this.mBackStackNesting);
        p6.print(p4);
        p6.print("mAdded=");
        p6.print(this.mAdded);
        p6.print(" mRemoving=");
        p6.print(this.mRemoving);
        p6.print(" mResumed=");
        p6.print(this.mResumed);
        p6.print(" mFromLayout=");
        p6.print(this.mFromLayout);
        p6.print(" mInLayout=");
        p6.println(this.mInLayout);
        p6.print(p4);
        p6.print("mHidden=");
        p6.print(this.mHidden);
        p6.print(" mDetached=");
        p6.print(this.mDetached);
        p6.print(" mMenuVisible=");
        p6.print(this.mMenuVisible);
        p6.print(" mHasMenu=");
        p6.println(this.mHasMenu);
        p6.print(p4);
        p6.print("mRetainInstance=");
        p6.print(this.mRetainInstance);
        p6.print(" mRetaining=");
        p6.print(this.mRetaining);
        p6.print(" mUserVisibleHint=");
        p6.println(this.mUserVisibleHint);
        if (this.mFragmentManager != null) {
            p6.print(p4);
            p6.print("mFragmentManager=");
            p6.println(this.mFragmentManager);
        }
        if (this.mActivity != null) {
            p6.print(p4);
            p6.print("mActivity=");
            p6.println(this.mActivity);
        }
        if (this.mArguments != null) {
            p6.print(p4);
            p6.print("mArguments=");
            p6.println(this.mArguments);
        }
        if (this.mSavedFragmentState != null) {
            p6.print(p4);
            p6.print("mSavedFragmentState=");
            p6.println(this.mSavedFragmentState);
        }
        if (this.mSavedViewState != null) {
            p6.print(p4);
            p6.print("mSavedViewState=");
            p6.println(this.mSavedViewState);
        }
        if (this.mTarget != null) {
            p6.print(p4);
            p6.print("mTarget=");
            p6.print(this.mTarget);
            p6.print(" mTargetRequestCode=");
            p6.println(this.mTargetRequestCode);
        }
        if (this.mNextAnim != 0) {
            p6.print(p4);
            p6.print("mNextAnim=");
            p6.println(this.mNextAnim);
        }
        if (this.mContainer != null) {
            p6.print(p4);
            p6.print("mContainer=");
            p6.println(this.mContainer);
        }
        if (this.mView != null) {
            p6.print(p4);
            p6.print("mView=");
            p6.println(this.mView);
        }
        if (this.mInnerView != null) {
            p6.print(p4);
            p6.print("mInnerView=");
            p6.println(this.mView);
        }
        if (this.mAnimatingAway != null) {
            p6.print(p4);
            p6.print("mAnimatingAway=");
            p6.println(this.mAnimatingAway);
            p6.print(p4);
            p6.print("mStateAfterAnimating=");
            p6.println(this.mStateAfterAnimating);
        }
        if (this.mLoaderManager != null) {
            p6.print(p4);
            p6.println("Loader Manager:");
            this.mLoaderManager.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        return;
    }

    public final boolean equals(Object p2)
    {
        return super.equals(p2);
    }

    public final android.support.v4.app.FragmentActivity getActivity()
    {
        return this.mActivity;
    }

    public final android.os.Bundle getArguments()
    {
        return this.mArguments;
    }

    public final android.support.v4.app.FragmentManager getFragmentManager()
    {
        return this.mFragmentManager;
    }

    public final int getId()
    {
        return this.mFragmentId;
    }

    public android.view.LayoutInflater getLayoutInflater(android.os.Bundle p2)
    {
        return this.mActivity.getLayoutInflater();
    }

    public android.support.v4.app.LoaderManager getLoaderManager()
    {
        android.support.v4.app.LoaderManagerImpl v0_2;
        if (this.mLoaderManager == null) {
            if (this.mActivity != null) {
                this.mCheckedForLoaderManager = 1;
                this.mLoaderManager = this.mActivity.getLoaderManager(this.mIndex, this.mLoadersStarted, 1);
                v0_2 = this.mLoaderManager;
            } else {
                throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
            }
        } else {
            v0_2 = this.mLoaderManager;
        }
        return v0_2;
    }

    public final android.content.res.Resources getResources()
    {
        if (this.mActivity != null) {
            return this.mActivity.getResources();
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    public final boolean getRetainInstance()
    {
        return this.mRetainInstance;
    }

    public final String getString(int p2)
    {
        return this.getResources().getString(p2);
    }

    public final varargs String getString(int p2, Object[] p3)
    {
        return this.getResources().getString(p2, p3);
    }

    public final String getTag()
    {
        return this.mTag;
    }

    public final android.support.v4.app.Fragment getTargetFragment()
    {
        return this.mTarget;
    }

    public final int getTargetRequestCode()
    {
        return this.mTargetRequestCode;
    }

    public final CharSequence getText(int p2)
    {
        return this.getResources().getText(p2);
    }

    public boolean getUserVisibleHint()
    {
        return this.mUserVisibleHint;
    }

    public android.view.View getView()
    {
        return this.mView;
    }

    public final int hashCode()
    {
        return super.hashCode();
    }

    void initState()
    {
        this.mIndex = -1;
        this.mWho = 0;
        this.mAdded = 0;
        this.mRemoving = 0;
        this.mResumed = 0;
        this.mFromLayout = 0;
        this.mInLayout = 0;
        this.mRestored = 0;
        this.mBackStackNesting = 0;
        this.mFragmentManager = 0;
        this.mActivity = 0;
        this.mFragmentId = 0;
        this.mContainerId = 0;
        this.mTag = 0;
        this.mHidden = 0;
        this.mDetached = 0;
        this.mRetaining = 0;
        this.mLoaderManager = 0;
        this.mLoadersStarted = 0;
        this.mCheckedForLoaderManager = 0;
        return;
    }

    public final boolean isAdded()
    {
        if ((this.mActivity == null) || (!this.mAdded)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final boolean isDetached()
    {
        return this.mDetached;
    }

    public final boolean isHidden()
    {
        return this.mHidden;
    }

    final boolean isInBackStack()
    {
        int v0_1;
        if (this.mBackStackNesting <= 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public final boolean isInLayout()
    {
        return this.mInLayout;
    }

    public final boolean isRemoving()
    {
        return this.mRemoving;
    }

    public final boolean isResumed()
    {
        return this.mResumed;
    }

    public final boolean isVisible()
    {
        if ((!this.isAdded()) || ((this.isHidden()) || ((this.mView == null) || ((this.mView.getWindowToken() == null) || (this.mView.getVisibility() != 0))))) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public void onActivityCreated(android.os.Bundle p2)
    {
        this.mCalled = 1;
        return;
    }

    public void onActivityResult(int p1, int p2, android.content.Intent p3)
    {
        return;
    }

    public void onAttach(android.app.Activity p2)
    {
        this.mCalled = 1;
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        this.mCalled = 1;
        return;
    }

    public boolean onContextItemSelected(android.view.MenuItem p2)
    {
        return 0;
    }

    public void onCreate(android.os.Bundle p2)
    {
        this.mCalled = 1;
        return;
    }

    public android.view.animation.Animation onCreateAnimation(int p2, boolean p3, int p4)
    {
        return 0;
    }

    public void onCreateContextMenu(android.view.ContextMenu p2, android.view.View p3, android.view.ContextMenu$ContextMenuInfo p4)
    {
        this.getActivity().onCreateContextMenu(p2, p3, p4);
        return;
    }

    public void onCreateOptionsMenu(android.view.Menu p1, android.view.MenuInflater p2)
    {
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p2, android.view.ViewGroup p3, android.os.Bundle p4)
    {
        return 0;
    }

    public void onDestroy()
    {
        this.mCalled = 1;
        if (!this.mCheckedForLoaderManager) {
            this.mCheckedForLoaderManager = 1;
            this.mLoaderManager = this.mActivity.getLoaderManager(this.mIndex, this.mLoadersStarted, 0);
        }
        if (this.mLoaderManager != null) {
            this.mLoaderManager.doDestroy();
        }
        return;
    }

    public void onDestroyOptionsMenu()
    {
        return;
    }

    public void onDestroyView()
    {
        this.mCalled = 1;
        return;
    }

    public void onDetach()
    {
        this.mCalled = 1;
        return;
    }

    public void onHiddenChanged(boolean p1)
    {
        return;
    }

    public void onInflate(android.app.Activity p2, android.util.AttributeSet p3, android.os.Bundle p4)
    {
        this.mCalled = 1;
        return;
    }

    public void onLowMemory()
    {
        this.mCalled = 1;
        return;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return 0;
    }

    public void onOptionsMenuClosed(android.view.Menu p1)
    {
        return;
    }

    public void onPause()
    {
        this.mCalled = 1;
        return;
    }

    public void onPrepareOptionsMenu(android.view.Menu p1)
    {
        return;
    }

    public void onResume()
    {
        this.mCalled = 1;
        return;
    }

    public void onSaveInstanceState(android.os.Bundle p1)
    {
        return;
    }

    public void onStart()
    {
        this.mCalled = 1;
        if (!this.mLoadersStarted) {
            this.mLoadersStarted = 1;
            if (!this.mCheckedForLoaderManager) {
                this.mCheckedForLoaderManager = 1;
                this.mLoaderManager = this.mActivity.getLoaderManager(this.mIndex, this.mLoadersStarted, 0);
            }
            if (this.mLoaderManager != null) {
                this.mLoaderManager.doStart();
            }
        }
        return;
    }

    public void onStop()
    {
        this.mCalled = 1;
        return;
    }

    public void onViewCreated(android.view.View p1, android.os.Bundle p2)
    {
        return;
    }

    void performDestroyView()
    {
        this.onDestroyView();
        if (this.mLoaderManager != null) {
            this.mLoaderManager.doReportNextStart();
        }
        return;
    }

    void performReallyStop()
    {
        if (this.mLoadersStarted) {
            this.mLoadersStarted = 0;
            if (!this.mCheckedForLoaderManager) {
                this.mCheckedForLoaderManager = 1;
                this.mLoaderManager = this.mActivity.getLoaderManager(this.mIndex, this.mLoadersStarted, 0);
            }
            if (this.mLoaderManager != null) {
                if (this.mActivity.mRetaining) {
                    this.mLoaderManager.doRetain();
                } else {
                    this.mLoaderManager.doStop();
                }
            }
        }
        return;
    }

    void performStart()
    {
        this.onStart();
        if (this.mLoaderManager != null) {
            this.mLoaderManager.doReportStart();
        }
        return;
    }

    void performStop()
    {
        this.onStop();
        return;
    }

    public void registerForContextMenu(android.view.View p1)
    {
        p1.setOnCreateContextMenuListener(this);
        return;
    }

    final void restoreViewState()
    {
        if (this.mSavedViewState != null) {
            this.mInnerView.restoreHierarchyState(this.mSavedViewState);
            this.mSavedViewState = 0;
        }
        return;
    }

    public void setArguments(android.os.Bundle p3)
    {
        if (this.mIndex < 0) {
            this.mArguments = p3;
            return;
        } else {
            throw new IllegalStateException("Fragment already active");
        }
    }

    public void setHasOptionsMenu(boolean p2)
    {
        if (this.mHasMenu != p2) {
            this.mHasMenu = p2;
            if ((this.isAdded()) && (!this.isHidden())) {
                this.mActivity.supportInvalidateOptionsMenu();
            }
        }
        return;
    }

    final void setIndex(int p3)
    {
        this.mIndex = p3;
        this.mWho = new StringBuilder().append("android:fragment:").append(this.mIndex).toString();
        return;
    }

    public void setInitialSavedState(android.support.v4.app.Fragment$SavedState p3)
    {
        if (this.mIndex < 0) {
            if ((p3 == null) || (p3.mState == null)) {
                android.os.Bundle v0_3 = 0;
            } else {
                v0_3 = p3.mState;
            }
            this.mSavedFragmentState = v0_3;
            return;
        } else {
            throw new IllegalStateException("Fragment already active");
        }
    }

    public void setMenuVisibility(boolean p2)
    {
        if (this.mMenuVisible != p2) {
            this.mMenuVisible = p2;
            if ((this.mHasMenu) && ((this.isAdded()) && (!this.isHidden()))) {
                this.mActivity.supportInvalidateOptionsMenu();
            }
        }
        return;
    }

    public void setRetainInstance(boolean p1)
    {
        this.mRetainInstance = p1;
        return;
    }

    public void setTargetFragment(android.support.v4.app.Fragment p1, int p2)
    {
        this.mTarget = p1;
        this.mTargetRequestCode = p2;
        return;
    }

    public void setUserVisibleHint(boolean p3)
    {
        if ((!this.mUserVisibleHint) && ((p3) && (this.mState < 4))) {
            this.mFragmentManager.performPendingDeferredStart(this);
        }
        android.support.v4.app.FragmentManagerImpl v0_1;
        this.mUserVisibleHint = p3;
        if (p3) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.mDeferStart = v0_1;
        return;
    }

    public void startActivity(android.content.Intent p4)
    {
        if (this.mActivity != null) {
            this.mActivity.startActivityFromFragment(this, p4, -1);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    public void startActivityForResult(android.content.Intent p4, int p5)
    {
        if (this.mActivity != null) {
            this.mActivity.startActivityFromFragment(this, p4, p5);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        android.support.v4.util.DebugUtils.buildShortClassTag(this, v0_1);
        if (this.mIndex >= 0) {
            v0_1.append(" #");
            v0_1.append(this.mIndex);
        }
        if (this.mFragmentId != 0) {
            v0_1.append(" id=0x");
            v0_1.append(Integer.toHexString(this.mFragmentId));
        }
        if (this.mTag != null) {
            v0_1.append(" ");
            v0_1.append(this.mTag);
        }
        v0_1.append(125);
        return v0_1.toString();
    }

    public void unregisterForContextMenu(android.view.View p2)
    {
        p2.setOnCreateContextMenuListener(0);
        return;
    }

    public DialogFragment()
    {
        this.mStyle = 0;
        this.mTheme = 0;
        this.mCancelable = 1;
        this.mShowsDialog = 1;
        this.mBackStackId = -1;
        return;
    }

    public void dismiss()
    {
        this.dismissInternal(0);
        return;
    }

    void dismissInternal(boolean p5)
    {
        if (this.mDialog != null) {
            this.mDialog.dismiss();
            this.mDialog = 0;
        }
        this.mRemoved = 1;
        if (this.mBackStackId < 0) {
            android.support.v4.app.FragmentTransaction v0 = this.getFragmentManager().beginTransaction();
            v0.remove(this);
            if (!p5) {
                v0.commit();
            } else {
                v0.commitAllowingStateLoss();
            }
        } else {
            this.getFragmentManager().popBackStack(this.mBackStackId, 1);
            this.mBackStackId = -1;
        }
        return;
    }

    public android.app.Dialog getDialog()
    {
        return this.mDialog;
    }

    public android.view.LayoutInflater getLayoutInflater(android.os.Bundle p3)
    {
        android.view.Window v0_6;
        if (this.mShowsDialog) {
            this.mDialog = this.onCreateDialog(p3);
            this.mDestroyed = 0;
            switch (this.mStyle) {
                case 1:
                case 2:
                    this.mDialog.requestWindowFeature(1);
                    break;
                case 3:
                    this.mDialog.getWindow().addFlags(24);
                    break;
            }
            v0_6 = ((android.view.LayoutInflater) this.mDialog.getContext().getSystemService("layout_inflater"));
        } else {
            v0_6 = super.getLayoutInflater(p3);
        }
        return v0_6;
    }

    public boolean getShowsDialog()
    {
        return this.mShowsDialog;
    }

    public int getTheme()
    {
        return this.mTheme;
    }

    public boolean isCancelable()
    {
        return this.mCancelable;
    }

    public void onActivityCreated(android.os.Bundle p5)
    {
        super.onActivityCreated(p5);
        if (this.mShowsDialog) {
            android.view.View v1 = this.getView();
            if (v1 != null) {
                if (v1.getParent() == null) {
                    this.mDialog.setContentView(v1);
                } else {
                    throw new IllegalStateException("DialogFragment can not be attached to a container view");
                }
            }
            this.mDialog.setOwnerActivity(this.getActivity());
            this.mDialog.setCancelable(this.mCancelable);
            this.mDialog.setOnCancelListener(this);
            this.mDialog.setOnDismissListener(this);
            if (p5 != null) {
                android.os.Bundle v0 = p5.getBundle("android:savedDialogState");
                if (v0 != null) {
                    this.mDialog.onRestoreInstanceState(v0);
                }
            }
        }
        return;
    }

    public void onCancel(android.content.DialogInterface p1)
    {
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        int v0_10;
        super.onCreate(p4);
        if (this.mContainerId != 0) {
            v0_10 = 0;
        } else {
            v0_10 = 1;
        }
        this.mShowsDialog = v0_10;
        if (p4 != null) {
            this.mStyle = p4.getInt("android:style", 0);
            this.mTheme = p4.getInt("android:theme", 0);
            this.mCancelable = p4.getBoolean("android:cancelable", 1);
            this.mShowsDialog = p4.getBoolean("android:showsDialog", this.mShowsDialog);
            this.mBackStackId = p4.getInt("android:backStackId", -1);
        }
        return;
    }

    public android.app.Dialog onCreateDialog(android.os.Bundle p4)
    {
        return new android.app.Dialog(this.getActivity(), this.getTheme());
    }

    public void onDestroyView()
    {
        super.onDestroyView();
        this.mDestroyed = 1;
        if (this.mDialog != null) {
            this.mRemoved = 1;
            this.mDialog.dismiss();
            this.mDialog = 0;
        }
        return;
    }

    public void onDismiss(android.content.DialogInterface p2)
    {
        if (!this.mRemoved) {
            this.dismissInternal(1);
        }
        return;
    }

    public void onSaveInstanceState(android.os.Bundle p4)
    {
        super.onSaveInstanceState(p4);
        if (this.mDialog != null) {
            android.os.Bundle v0 = this.mDialog.onSaveInstanceState();
            if (v0 != null) {
                p4.putBundle("android:savedDialogState", v0);
            }
        }
        if (this.mStyle != 0) {
            p4.putInt("android:style", this.mStyle);
        }
        if (this.mTheme != 0) {
            p4.putInt("android:theme", this.mTheme);
        }
        if (!this.mCancelable) {
            p4.putBoolean("android:cancelable", this.mCancelable);
        }
        if (!this.mShowsDialog) {
            p4.putBoolean("android:showsDialog", this.mShowsDialog);
        }
        if (this.mBackStackId != -1) {
            p4.putInt("android:backStackId", this.mBackStackId);
        }
        return;
    }

    public void onStart()
    {
        super.onStart();
        if (this.mDialog != null) {
            this.mRemoved = 0;
            this.mDialog.show();
        }
        return;
    }

    public void onStop()
    {
        super.onStop();
        if (this.mDialog != null) {
            this.mDialog.hide();
        }
        return;
    }

    public void setCancelable(boolean p2)
    {
        this.mCancelable = p2;
        if (this.mDialog != null) {
            this.mDialog.setCancelable(p2);
        }
        return;
    }

    public void setShowsDialog(boolean p1)
    {
        this.mShowsDialog = p1;
        return;
    }

    public void setStyle(int p3, int p4)
    {
        this.mStyle = p3;
        if ((this.mStyle == 2) || (this.mStyle == 3)) {
            this.mTheme = 16973913;
        }
        if (p4 != 0) {
            this.mTheme = p4;
        }
        return;
    }

    public int show(android.support.v4.app.FragmentTransaction p2, String p3)
    {
        p2.add(this, p3);
        this.mRemoved = 0;
        this.mBackStackId = p2.commit();
        return this.mBackStackId;
    }

    public void show(android.support.v4.app.FragmentManager p2, String p3)
    {
        android.support.v4.app.FragmentTransaction v0 = p2.beginTransaction();
        v0.add(this, p3);
        v0.commit();
        return;
    }

    public Fragment$InstantiationException(String p1, Exception p2)
    {
        super(p1, p2);
        return;
    }

    Fragment$SavedState$1()
    {
        return;
    }

    public android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel p3)
    {
        return new android.support.v4.app.Fragment$SavedState(p3, 0);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.Fragment$SavedState[] newArray(int p2)
    {
        android.support.v4.app.Fragment$SavedState[] v0 = new android.support.v4.app.Fragment$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static Fragment$SavedState()
    {
        android.support.v4.app.Fragment$SavedState.CREATOR = new android.support.v4.app.Fragment$SavedState$1();
        return;
    }

    Fragment$SavedState(android.os.Bundle p1)
    {
        this.mState = p1;
        return;
    }

    Fragment$SavedState(android.os.Parcel p2, ClassLoader p3)
    {
        this.mState = p2.readBundle();
        if ((p3 != null) && (this.mState != null)) {
            this.mState.setClassLoader(p3);
        }
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeBundle(this.mState);
        return;
    }

    FragmentActivity$1(android.support.v4.app.FragmentActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    public void handleMessage(android.os.Message p3)
    {
        switch (p3.what) {
            case 1:
                if (!this.this$0.mStopped) {
                } else {
                    this.this$0.doReallyStop(0);
                }
                break;
            case 2:
                this.this$0.mFragments.dispatchResume();
                this.this$0.mFragments.execPendingActions();
                break;
            default:
                super.handleMessage(p3);
        }
        return;
    }

    static FragmentActivity$FragmentTag()
    {
        int[] v0_1 = new int[3];
        v0_1 = {16842755, 16842960, 16842961};
        android.support.v4.app.FragmentActivity$FragmentTag.Fragment = v0_1;
        return;
    }

    FragmentActivity$FragmentTag()
    {
        return;
    }

    FragmentActivity$NonConfigurationInstances()
    {
        return;
    }

    public FragmentActivity()
    {
        this.mHandler = new android.support.v4.app.FragmentActivity$1(this);
        this.mFragments = new android.support.v4.app.FragmentManagerImpl();
        return;
    }

    void doReallyStop(boolean p3)
    {
        if (!this.mReallyStopped) {
            this.mReallyStopped = 1;
            this.mRetaining = p3;
            this.mHandler.removeMessages(1);
            this.onReallyStop();
        }
        return;
    }

    public void dump(String p5, java.io.FileDescriptor p6, java.io.PrintWriter p7, String[] p8)
    {
        // Both branches of the condition point to the same code.
        // if (android.os.Build$VERSION.SDK_INT < 11) {
            p7.print(p5);
            p7.print("Local FragmentActivity ");
            p7.print(Integer.toHexString(System.identityHashCode(this)));
            p7.println(" State:");
            String v0 = new StringBuilder().append(p5).append("  ").toString();
            p7.print(v0);
            p7.print("mCreated=");
            p7.print(this.mCreated);
            p7.print("mResumed=");
            p7.print(this.mResumed);
            p7.print(" mStopped=");
            p7.print(this.mStopped);
            p7.print(" mReallyStopped=");
            p7.println(this.mReallyStopped);
            p7.print(v0);
            p7.print("mLoadersStarted=");
            p7.println(this.mLoadersStarted);
            if (this.mLoaderManager != null) {
                p7.print(p5);
                p7.print("Loader Manager ");
                p7.print(Integer.toHexString(System.identityHashCode(this.mLoaderManager)));
                p7.println(":");
                this.mLoaderManager.dump(new StringBuilder().append(p5).append("  ").toString(), p6, p7, p8);
            }
            this.mFragments.dump(p5, p6, p7, p8);
            return;
        // }
    }

    public Object getLastCustomNonConfigurationInstance()
    {
        int v1;
        android.support.v4.app.FragmentActivity$NonConfigurationInstances v0_1 = ((android.support.v4.app.FragmentActivity$NonConfigurationInstances) this.getLastNonConfigurationInstance());
        if (v0_1 == null) {
            v1 = 0;
        } else {
            v1 = v0_1.custom;
        }
        return v1;
    }

    android.support.v4.app.LoaderManagerImpl getLoaderManager(int p3, boolean p4, boolean p5)
    {
        if (this.mAllLoaderManagers == null) {
            this.mAllLoaderManagers = new android.support.v4.app.HCSparseArray();
        }
        android.support.v4.app.LoaderManagerImpl v0_1 = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.get(p3));
        if (v0_1 != null) {
            v0_1.updateActivity(this);
        } else {
            if (p5) {
                v0_1 = new android.support.v4.app.LoaderManagerImpl(this, p4);
                this.mAllLoaderManagers.put(p3, v0_1);
            }
        }
        return v0_1;
    }

    public android.support.v4.app.FragmentManager getSupportFragmentManager()
    {
        return this.mFragments;
    }

    public android.support.v4.app.LoaderManager getSupportLoaderManager()
    {
        android.support.v4.app.LoaderManagerImpl v0_1;
        if (this.mLoaderManager == null) {
            this.mCheckedForLoaderManager = 1;
            this.mLoaderManager = this.getLoaderManager(-1, this.mLoadersStarted, 1);
            v0_1 = this.mLoaderManager;
        } else {
            v0_1 = this.mLoaderManager;
        }
        return v0_1;
    }

    void invalidateSupportFragmentIndex(int p3)
    {
        if (this.mAllLoaderManagers != null) {
            android.support.v4.app.LoaderManagerImpl v0_1 = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.get(p3));
            if ((v0_1 != null) && (!v0_1.mRetaining)) {
                v0_1.doDestroy();
                this.mAllLoaderManagers.remove(p3);
            }
        }
        return;
    }

    protected void onActivityResult(int p6, int p7, android.content.Intent p8)
    {
        int v1_0 = (p6 >> 16);
        if (v1_0 == 0) {
            super.onActivityResult(p6, p7, p8);
        } else {
            int v1_1 = (v1_0 - 1);
            if ((this.mFragments.mActive != null) && ((v1_1 >= 0) && (v1_1 < this.mFragments.mActive.size()))) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mFragments.mActive.get(v1_1));
                if (v0_1 == null) {
                    android.util.Log.w("FragmentActivity", new StringBuilder().append("Activity result no fragment exists for index: 0x").append(Integer.toHexString(p6)).toString());
                }
                v0_1.onActivityResult((65535 & p6), p7, p8);
            } else {
                android.util.Log.w("FragmentActivity", new StringBuilder().append("Activity result fragment index out of range: 0x").append(Integer.toHexString(p6)).toString());
            }
        }
        return;
    }

    public void onAttachFragment(android.support.v4.app.Fragment p1)
    {
        return;
    }

    public void onBackPressed()
    {
        if (!this.mFragments.popBackStackImmediate()) {
            this.finish();
        }
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        super.onConfigurationChanged(p2);
        this.mFragments.dispatchConfigurationChanged(p2);
        return;
    }

    protected void onCreate(android.os.Bundle p5)
    {
        this.mFragments.attachActivity(this);
        if (this.getLayoutInflater().getFactory() == null) {
            this.getLayoutInflater().setFactory(this);
        }
        super.onCreate(p5);
        android.support.v4.app.FragmentActivity$NonConfigurationInstances v0_1 = ((android.support.v4.app.FragmentActivity$NonConfigurationInstances) this.getLastNonConfigurationInstance());
        if (v0_1 != null) {
            this.mAllLoaderManagers = v0_1.loaders;
        }
        if (p5 != null) {
            int v2_3;
            android.os.Parcelable vtmp5 = p5.getParcelable("android:support:fragments");
            if (v0_1 == null) {
                v2_3 = 0;
            } else {
                v2_3 = v0_1.fragments;
            }
            this.mFragments.restoreAllState(vtmp5, v2_3);
        }
        this.mFragments.dispatchCreate();
        return;
    }

    public boolean onCreatePanelMenu(int p4, android.view.Menu p5)
    {
        int v0_0;
        if (p4 != 0) {
            v0_0 = super.onCreatePanelMenu(p4, p5);
        } else {
            v0_0 = (super.onCreatePanelMenu(p4, p5) | this.mFragments.dispatchCreateOptionsMenu(p5, this.getMenuInflater()));
            if (android.os.Build$VERSION.SDK_INT < 11) {
                v0_0 = 1;
            }
        }
        return v0_0;
    }

    public android.view.View onCreateView(String p12, android.content.Context p13, android.util.AttributeSet p14)
    {
        android.view.View v7_11;
        android.support.v4.app.Fragment v3 = 0;
        int v1 = 0;
        if ("fragment".equals(p12)) {
            String v2 = p14.getAttributeValue(0, "class");
            android.content.res.TypedArray v0 = p13.obtainStyledAttributes(p14, android.support.v4.app.FragmentActivity$FragmentTag.Fragment);
            if (v2 == null) {
                v2 = v0.getString(0);
            }
            int v4 = v0.getResourceId(1, -1);
            String v6 = v0.getString(2);
            v0.recycle();
            if (0 != 0) {
                v1 = 0.getId();
            }
            if ((v1 != -1) || ((v4 != -1) || (v6 != null))) {
                if (v4 != -1) {
                    v3 = this.mFragments.findFragmentById(v4);
                }
                if ((v3 == null) && (v6 != null)) {
                    v3 = this.mFragments.findFragmentByTag(v6);
                }
                if ((v3 == null) && (v1 != -1)) {
                    v3 = this.mFragments.findFragmentById(v1);
                }
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentActivity", new StringBuilder().append("onCreateView: id=0x").append(Integer.toHexString(v4)).append(" fname=").append(v2).append(" existing=").append(v3).toString());
                }
                if (v3 != null) {
                    if (!v3.mInLayout) {
                        v3.mInLayout = 1;
                        if (!v3.mRetaining) {
                            v3.onInflate(this, p14, v3.mSavedFragmentState);
                        }
                        this.mFragments.moveToState(v3);
                    } else {
                        throw new IllegalArgumentException(new StringBuilder().append(p14.getPositionDescription()).append(": Duplicate id 0x").append(Integer.toHexString(v4)).append(", tag ").append(v6).append(", or parent id 0x").append(Integer.toHexString(v1)).append(" with another fragment for ").append(v2).toString());
                    }
                } else {
                    android.view.View v7_2;
                    v3 = android.support.v4.app.Fragment.instantiate(this, v2);
                    v3.mFromLayout = 1;
                    if (v4 == 0) {
                        v7_2 = v1;
                    } else {
                        v7_2 = v4;
                    }
                    v3.mFragmentId = v7_2;
                    v3.mContainerId = v1;
                    v3.mTag = v6;
                    v3.mInLayout = 1;
                    v3.mFragmentManager = this.mFragments;
                    v3.onInflate(this, p14, v3.mSavedFragmentState);
                    this.mFragments.addFragment(v3, 1);
                }
                if (v3.mView != null) {
                    if (v4 != 0) {
                        v3.mView.setId(v4);
                    }
                    if (v3.mView.getTag() == null) {
                        v3.mView.setTag(v6);
                    }
                    v7_11 = v3.mView;
                } else {
                    throw new IllegalStateException(new StringBuilder().append("Fragment ").append(v2).append(" did not create a view.").toString());
                }
            } else {
                throw new IllegalArgumentException(new StringBuilder().append(p14.getPositionDescription()).append(": Must specify unique android:id, android:tag, or have a parent with an id for ").append(v2).toString());
            }
        } else {
            v7_11 = super.onCreateView(p12, p13, p14);
        }
        return v7_11;
    }

    protected void onDestroy()
    {
        super.onDestroy();
        this.doReallyStop(0);
        this.mFragments.dispatchDestroy();
        if (this.mLoaderManager != null) {
            this.mLoaderManager.doDestroy();
        }
        return;
    }

    public boolean onKeyDown(int p3, android.view.KeyEvent p4)
    {
        if ((android.os.Build$VERSION.SDK_INT >= 5) || ((p3 != 4) || (p4.getRepeatCount() != 0))) {
            int v0_1 = super.onKeyDown(p3, p4);
        } else {
            this.onBackPressed();
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onLowMemory()
    {
        super.onLowMemory();
        this.mFragments.dispatchLowMemory();
        return;
    }

    public boolean onMenuItemSelected(int p2, android.view.MenuItem p3)
    {
        boolean v0_1;
        if (!super.onMenuItemSelected(p2, p3)) {
            switch (p2) {
                case 0:
                    v0_1 = this.mFragments.dispatchOptionsItemSelected(p3);
                    break;
                case 6:
                    v0_1 = this.mFragments.dispatchContextItemSelected(p3);
                    break;
                default:
                    v0_1 = 0;
            }
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onPanelClosed(int p2, android.view.Menu p3)
    {
        switch (p2) {
            case 0:
                this.mFragments.dispatchOptionsMenuClosed(p3);
                break;
        }
        super.onPanelClosed(p2, p3);
        return;
    }

    protected void onPause()
    {
        super.onPause();
        this.mResumed = 0;
        if (this.mHandler.hasMessages(2)) {
            this.mHandler.removeMessages(2);
            this.mFragments.dispatchResume();
        }
        this.mFragments.dispatchPause();
        return;
    }

    protected void onPostResume()
    {
        super.onPostResume();
        this.mHandler.removeMessages(2);
        this.mFragments.dispatchResume();
        this.mFragments.execPendingActions();
        return;
    }

    public boolean onPreparePanel(int p4, android.view.View p5, android.view.Menu p6)
    {
        int v1 = 0;
        if ((p4 != 0) || (p6 == null)) {
            v1 = super.onPreparePanel(p4, p5, p6);
        } else {
            if (this.mOptionsMenuInvalidated) {
                this.mOptionsMenuInvalidated = 0;
                p6.clear();
                this.onCreatePanelMenu(p4, p6);
            }
            if (((super.onPreparePanel(p4, p5, p6) | this.mFragments.dispatchPrepareOptionsMenu(p6)) != 0) && (p6.hasVisibleItems())) {
                v1 = 1;
            }
        }
        return v1;
    }

    void onReallyStop()
    {
        if (this.mLoadersStarted) {
            this.mLoadersStarted = 0;
            if (this.mLoaderManager != null) {
                if (this.mRetaining) {
                    this.mLoaderManager.doRetain();
                } else {
                    this.mLoaderManager.doStop();
                }
            }
        }
        this.mFragments.dispatchReallyStop();
        return;
    }

    protected void onResume()
    {
        super.onResume();
        this.mHandler.sendEmptyMessage(2);
        this.mResumed = 1;
        this.mFragments.execPendingActions();
        return;
    }

    public Object onRetainCustomNonConfigurationInstance()
    {
        return 0;
    }

    public final Object onRetainNonConfigurationInstance()
    {
        if (this.mStopped) {
            this.doReallyStop(1);
        }
        Object v0 = this.onRetainCustomNonConfigurationInstance();
        java.util.ArrayList v1 = this.mFragments.retainNonConfig();
        int v5 = 0;
        if (this.mAllLoaderManagers != null) {
            int v2 = (this.mAllLoaderManagers.size() - 1);
            while (v2 >= 0) {
                android.support.v4.app.LoaderManagerImpl v3_1 = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.valueAt(v2));
                if (!v3_1.mRetaining) {
                    v3_1.doDestroy();
                    this.mAllLoaderManagers.removeAt(v2);
                } else {
                    v5 = 1;
                }
                v2--;
            }
        }
        if ((v1 != null) || ((v5 != 0) || (v0 != null))) {
            android.support.v4.app.HCSparseArray v4_1 = new android.support.v4.app.FragmentActivity$NonConfigurationInstances();
            v4_1.activity = 0;
            v4_1.custom = v0;
            v4_1.children = 0;
            v4_1.fragments = v1;
            v4_1.loaders = this.mAllLoaderManagers;
        } else {
            v4_1 = 0;
        }
        return v4_1;
    }

    protected void onSaveInstanceState(android.os.Bundle p3)
    {
        super.onSaveInstanceState(p3);
        android.os.Parcelable v0 = this.mFragments.saveAllState();
        if (v0 != null) {
            p3.putParcelable("android:support:fragments", v0);
        }
        return;
    }

    protected void onStart()
    {
        super.onStart();
        this.mStopped = 0;
        this.mReallyStopped = 0;
        this.mHandler.removeMessages(1);
        if (!this.mCreated) {
            this.mCreated = 1;
            this.mFragments.dispatchActivityCreated();
        }
        this.mFragments.noteStateNotSaved();
        this.mFragments.execPendingActions();
        if (!this.mLoadersStarted) {
            this.mLoadersStarted = 1;
            if (this.mLoaderManager == null) {
                if (!this.mCheckedForLoaderManager) {
                    this.mLoaderManager = this.getLoaderManager(-1, this.mLoadersStarted, 0);
                }
            } else {
                this.mLoaderManager.doStart();
            }
            this.mCheckedForLoaderManager = 1;
        }
        this.mFragments.dispatchStart();
        if (this.mAllLoaderManagers != null) {
            int v0 = (this.mAllLoaderManagers.size() - 1);
            while (v0 >= 0) {
                android.support.v4.app.LoaderManagerImpl v1_1 = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.valueAt(v0));
                v1_1.finishRetain();
                v1_1.doReportStart();
                v0--;
            }
        }
        return;
    }

    protected void onStop()
    {
        super.onStop();
        this.mStopped = 1;
        this.mHandler.sendEmptyMessage(1);
        this.mFragments.dispatchStop();
        return;
    }

    public void startActivityForResult(android.content.Intent p3, int p4)
    {
        if ((p4 == -1) || ((-65536 & p4) == 0)) {
            super.startActivityForResult(p3, p4);
            return;
        } else {
            throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");
        }
    }

    public void startActivityFromFragment(android.support.v4.app.Fragment p3, android.content.Intent p4, int p5)
    {
        if (p5 != -1) {
            if ((-65536 & p5) == 0) {
                super.startActivityForResult(p4, (((p3.mIndex + 1) << 16) + (65535 & p5)));
            } else {
                throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");
            }
        } else {
            super.startActivityForResult(p4, -1);
        }
        return;
    }

    public void supportInvalidateOptionsMenu()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            this.mOptionsMenuInvalidated = 1;
        } else {
            android.support.v4.app.ActivityCompatHoneycomb.invalidateOptionsMenu(this);
        }
        return;
    }

    public abstract void onBackStackChanged();

    public FragmentManager()
    {
        return;
    }

    public static void enableDebugLogging(boolean p0)
    {
        android.support.v4.app.FragmentManagerImpl.DEBUG = p0;
        return;
    }

    public abstract void addOnBackStackChangedListener();

    public abstract android.support.v4.app.FragmentTransaction beginTransaction();

    public abstract void dump();

    public abstract boolean executePendingTransactions();

    public abstract android.support.v4.app.Fragment findFragmentById();

    public abstract android.support.v4.app.Fragment findFragmentByTag();

    public abstract android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt();

    public abstract int getBackStackEntryCount();

    public abstract android.support.v4.app.Fragment getFragment();

    public android.support.v4.app.FragmentTransaction openTransaction()
    {
        return this.beginTransaction();
    }

    public abstract void popBackStack();

    public abstract void popBackStack();

    public abstract void popBackStack();

    public abstract boolean popBackStackImmediate();

    public abstract boolean popBackStackImmediate();

    public abstract boolean popBackStackImmediate();

    public abstract void putFragment();

    public abstract void removeOnBackStackChangedListener();

    public abstract android.support.v4.app.Fragment$SavedState saveFragmentInstanceState();

    FragmentManagerImpl$1(android.support.v4.app.FragmentManagerImpl p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.execPendingActions();
        return;
    }

    FragmentManagerImpl$2(android.support.v4.app.FragmentManagerImpl p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.popBackStackState(this.this$0.mActivity.mHandler, 0, -1, 0);
        return;
    }

    FragmentManagerImpl$3(android.support.v4.app.FragmentManagerImpl p1, String p2, int p3)
    {
        this.this$0 = p1;
        this.val$name = p2;
        this.val$flags = p3;
        return;
    }

    public void run()
    {
        this.this$0.popBackStackState(this.this$0.mActivity.mHandler, this.val$name, -1, this.val$flags);
        return;
    }

    FragmentManagerImpl$4(android.support.v4.app.FragmentManagerImpl p1, int p2, int p3)
    {
        this.this$0 = p1;
        this.val$id = p2;
        this.val$flags = p3;
        return;
    }

    public void run()
    {
        this.this$0.popBackStackState(this.this$0.mActivity.mHandler, 0, this.val$id, this.val$flags);
        return;
    }

    FragmentManagerImpl$5(android.support.v4.app.FragmentManagerImpl p1, android.support.v4.app.Fragment p2)
    {
        this.this$0 = p1;
        this.val$fragment = p2;
        return;
    }

    public void onAnimationEnd(android.view.animation.Animation p5)
    {
        if (this.val$fragment.mAnimatingAway != null) {
            this.val$fragment.mAnimatingAway = 0;
            this.this$0.moveToState(this.val$fragment, this.val$fragment.mStateAfterAnimating, 0, 0);
        }
        return;
    }

    public void onAnimationRepeat(android.view.animation.Animation p1)
    {
        return;
    }

    public void onAnimationStart(android.view.animation.Animation p1)
    {
        return;
    }

    static FragmentManagerImpl()
    {
        android.view.animation.AccelerateInterpolator v0_0 = 0;
        android.support.v4.app.FragmentManagerImpl.DEBUG = 0;
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            v0_0 = 1;
        }
        android.support.v4.app.FragmentManagerImpl.HONEYCOMB = v0_0;
        android.support.v4.app.FragmentManagerImpl.DECELERATE_QUINT = new android.view.animation.DecelerateInterpolator(1075838976);
        android.support.v4.app.FragmentManagerImpl.DECELERATE_CUBIC = new android.view.animation.DecelerateInterpolator(1069547520);
        android.support.v4.app.FragmentManagerImpl.ACCELERATE_QUINT = new android.view.animation.AccelerateInterpolator(1075838976);
        android.support.v4.app.FragmentManagerImpl.ACCELERATE_CUBIC = new android.view.animation.AccelerateInterpolator(1069547520);
        return;
    }

    FragmentManagerImpl()
    {
        this.mCurState = 0;
        this.mStateBundle = 0;
        this.mStateArray = 0;
        this.mExecCommit = new android.support.v4.app.FragmentManagerImpl$1(this);
        return;
    }

    private void checkStateLoss()
    {
        if (!this.mStateSaved) {
            if (this.mNoTransactionsBecause == null) {
                return;
            } else {
                throw new IllegalStateException(new StringBuilder().append("Can not perform this action inside of ").append(this.mNoTransactionsBecause).toString());
            }
        } else {
            throw new IllegalStateException("Can not perform this action after onSaveInstanceState");
        }
    }

    static android.view.animation.Animation makeFadeAnimation(android.content.Context p3, float p4, float p5)
    {
        android.view.animation.AlphaAnimation v0_1 = new android.view.animation.AlphaAnimation(p4, p5);
        v0_1.setInterpolator(android.support.v4.app.FragmentManagerImpl.DECELERATE_CUBIC);
        v0_1.setDuration(220);
        return v0_1;
    }

    static android.view.animation.Animation makeOpenCloseAnimation(android.content.Context p11, float p12, float p13, float p14, float p15)
    {
        android.view.animation.AnimationSet v10_1 = new android.view.animation.AnimationSet(0);
        android.view.animation.ScaleAnimation v0_0 = new android.view.animation.ScaleAnimation(p12, p13, p12, p13, 1, 1056964608, 1, 1056964608);
        v0_0.setInterpolator(android.support.v4.app.FragmentManagerImpl.DECELERATE_QUINT);
        v0_0.setDuration(220);
        v10_1.addAnimation(v0_0);
        android.view.animation.AlphaAnimation v9_1 = new android.view.animation.AlphaAnimation(p14, p15);
        v9_1.setInterpolator(android.support.v4.app.FragmentManagerImpl.DECELERATE_CUBIC);
        v9_1.setDuration(220);
        v10_1.addAnimation(v9_1);
        return v10_1;
    }

    public static int reverseTransit(int p1)
    {
        int v0 = 0;
        switch (p1) {
            case 4097:
                v0 = 8194;
                break;
            case 4099:
                v0 = 4099;
                break;
            case 8194:
                v0 = 4097;
                break;
        }
        return v0;
    }

    public static int transitToStyleIndex(int p1, boolean p2)
    {
        int v0 = -1;
        switch (p1) {
            case 4097:
                if (!p2) {
                    v0 = 2;
                } else {
                    v0 = 1;
                }
                break;
            case 4099:
                if (!p2) {
                    v0 = 6;
                } else {
                    v0 = 5;
                }
                break;
            case 8194:
                if (!p2) {
                    v0 = 4;
                } else {
                    v0 = 3;
                }
                break;
        }
        return v0;
    }

    void addBackStackState(android.support.v4.app.BackStackRecord p2)
    {
        if (this.mBackStack == null) {
            this.mBackStack = new java.util.ArrayList();
        }
        this.mBackStack.add(p2);
        this.reportBackStackChanged();
        return;
    }

    public void addFragment(android.support.v4.app.Fragment p5, boolean p6)
    {
        if (this.mAdded == null) {
            this.mAdded = new java.util.ArrayList();
        }
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("add: ").append(p5).toString());
        }
        this.makeActive(p5);
        if (!p5.mDetached) {
            this.mAdded.add(p5);
            p5.mAdded = 1;
            p5.mRemoving = 0;
            if ((p5.mHasMenu) && (p5.mMenuVisible)) {
                this.mNeedMenuInvalidate = 1;
            }
            if (p6) {
                this.moveToState(p5);
            }
        }
        return;
    }

    public void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener p2)
    {
        if (this.mBackStackChangeListeners == null) {
            this.mBackStackChangeListeners = new java.util.ArrayList();
        }
        this.mBackStackChangeListeners.add(p2);
        return;
    }

    public int allocBackStackIndex(android.support.v4.app.BackStackRecord p6)
    {
        try {
            if ((this.mAvailBackStackIndices != null) && (this.mAvailBackStackIndices.size() > 0)) {
                int v0_0 = ((Integer) this.mAvailBackStackIndices.remove((this.mAvailBackStackIndices.size() - 1))).intValue();
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", new StringBuilder().append("Adding back stack index ").append(v0_0).append(" with ").append(p6).toString());
                }
                this.mBackStackIndices.set(v0_0, p6);
                int v1 = v0_0;
            } else {
                if (this.mBackStackIndices == null) {
                    this.mBackStackIndices = new java.util.ArrayList();
                }
                int v0_1 = this.mBackStackIndices.size();
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", new StringBuilder().append("Setting back stack index ").append(v0_1).append(" to ").append(p6).toString());
                }
                this.mBackStackIndices.add(p6);
                v1 = v0_1;
            }
        } catch (java.util.ArrayList v2_16) {
            throw v2_16;
        }
        return v1;
    }

    public void attachActivity(android.support.v4.app.FragmentActivity p2)
    {
        if (this.mActivity == null) {
            this.mActivity = p2;
            return;
        } else {
            throw new IllegalStateException();
        }
    }

    public void attachFragment(android.support.v4.app.Fragment p5, int p6, int p7)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("attach: ").append(p5).toString());
        }
        if (p5.mDetached) {
            p5.mDetached = 0;
            if (!p5.mAdded) {
                this.mAdded.add(p5);
                p5.mAdded = 1;
                if ((p5.mHasMenu) && (p5.mMenuVisible)) {
                    this.mNeedMenuInvalidate = 1;
                }
                this.moveToState(p5, this.mCurState, p6, p7);
            }
        }
        return;
    }

    public android.support.v4.app.FragmentTransaction beginTransaction()
    {
        return new android.support.v4.app.BackStackRecord(this);
    }

    public void detachFragment(android.support.v4.app.Fragment p5, int p6, int p7)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("detach: ").append(p5).toString());
        }
        if (!p5.mDetached) {
            p5.mDetached = 1;
            if (p5.mAdded) {
                this.mAdded.remove(p5);
                if ((p5.mHasMenu) && (p5.mMenuVisible)) {
                    this.mNeedMenuInvalidate = 1;
                }
                p5.mAdded = 0;
                this.moveToState(p5, 1, p6, p7);
            }
        }
        return;
    }

    public void dispatchActivityCreated()
    {
        this.mStateSaved = 0;
        this.moveToState(2, 0);
        return;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration p4)
    {
        if (this.mActive != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if (v0_1 != null) {
                    v0_1.onConfigurationChanged(p4);
                }
                v1++;
            }
        }
        return;
    }

    public boolean dispatchContextItemSelected(android.view.MenuItem p4)
    {
        int v2_3;
        if (this.mActive == null) {
            v2_3 = 0;
        } else {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if ((v0_1 == null) || ((v0_1.mHidden) || (!v0_1.onContextItemSelected(p4)))) {
                    v1++;
                } else {
                    v2_3 = 1;
                }
            }
        }
        return v2_3;
    }

    public void dispatchCreate()
    {
        this.mStateSaved = 0;
        this.moveToState(1, 0);
        return;
    }

    public boolean dispatchCreateOptionsMenu(android.view.Menu p6, android.view.MenuInflater p7)
    {
        int v3 = 0;
        java.util.ArrayList v2_0 = 0;
        if (this.mActive != null) {
            int v1_1 = 0;
            while (v1_1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_3 = ((android.support.v4.app.Fragment) this.mAdded.get(v1_1));
                if ((v0_3 != null) && ((!v0_3.mHidden) && ((v0_3.mHasMenu) && (v0_3.mMenuVisible)))) {
                    v3 = 1;
                    v0_3.onCreateOptionsMenu(p6, p7);
                    if (v2_0 == null) {
                        v2_0 = new java.util.ArrayList();
                    }
                    v2_0.add(v0_3);
                }
                v1_1++;
            }
        }
        if (this.mCreatedMenus != null) {
            int v1_0 = 0;
            while (v1_0 < this.mCreatedMenus.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mCreatedMenus.get(v1_0));
                if ((v2_0 == null) || (!v2_0.contains(v0_1))) {
                    v0_1.onDestroyOptionsMenu();
                }
                v1_0++;
            }
        }
        this.mCreatedMenus = v2_0;
        return v3;
    }

    public void dispatchDestroy()
    {
        this.mDestroyed = 1;
        this.execPendingActions();
        this.moveToState(0, 0);
        this.mActivity = 0;
        return;
    }

    public void dispatchLowMemory()
    {
        if (this.mActive != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if (v0_1 != null) {
                    v0_1.onLowMemory();
                }
                v1++;
            }
        }
        return;
    }

    public boolean dispatchOptionsItemSelected(android.view.MenuItem p4)
    {
        int v2_5;
        if (this.mActive == null) {
            v2_5 = 0;
        } else {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if ((v0_1 == null) || ((v0_1.mHidden) || ((!v0_1.mHasMenu) || ((!v0_1.mMenuVisible) || (!v0_1.onOptionsItemSelected(p4)))))) {
                    v1++;
                } else {
                    v2_5 = 1;
                }
            }
        }
        return v2_5;
    }

    public void dispatchOptionsMenuClosed(android.view.Menu p4)
    {
        if (this.mActive != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if ((v0_1 != null) && ((!v0_1.mHidden) && ((v0_1.mHasMenu) && (v0_1.mMenuVisible)))) {
                    v0_1.onOptionsMenuClosed(p4);
                }
                v1++;
            }
        }
        return;
    }

    public void dispatchPause()
    {
        this.moveToState(4, 0);
        return;
    }

    public boolean dispatchPrepareOptionsMenu(android.view.Menu p5)
    {
        int v2 = 0;
        if (this.mActive != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if ((v0_1 != null) && ((!v0_1.mHidden) && ((v0_1.mHasMenu) && (v0_1.mMenuVisible)))) {
                    v2 = 1;
                    v0_1.onPrepareOptionsMenu(p5);
                }
                v1++;
            }
        }
        return v2;
    }

    public void dispatchReallyStop()
    {
        this.moveToState(2, 0);
        return;
    }

    public void dispatchResume()
    {
        this.mStateSaved = 0;
        this.moveToState(5, 0);
        return;
    }

    public void dispatchStart()
    {
        this.mStateSaved = 0;
        this.moveToState(4, 0);
        return;
    }

    public void dispatchStop()
    {
        this.mStateSaved = 1;
        this.moveToState(3, 0);
        return;
    }

    public void dump(String p9, java.io.FileDescriptor p10, java.io.PrintWriter p11, String[] p12)
    {
        String v4 = new StringBuilder().append(p9).append("    ").toString();
        if (this.mActive != null) {
            int v0_0 = this.mActive.size();
            if (v0_0 > 0) {
                p11.print(p9);
                p11.print("Active Fragments in ");
                p11.print(Integer.toHexString(System.identityHashCode(this)));
                p11.println(":");
                int v3_5 = 0;
                while (v3_5 < v0_0) {
                    android.support.v4.app.Fragment v2_5 = ((android.support.v4.app.Fragment) this.mActive.get(v3_5));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_5);
                    p11.print(": ");
                    p11.println(v2_5);
                    if (v2_5 != null) {
                        v2_5.dump(v4, p10, p11, p12);
                    }
                    v3_5++;
                }
            }
        }
        if (this.mAdded != null) {
            int v0_1 = this.mAdded.size();
            if (v0_1 > 0) {
                p11.print(p9);
                p11.println("Added Fragments:");
                int v3_4 = 0;
                while (v3_4 < v0_1) {
                    android.support.v4.app.Fragment v2_3 = ((android.support.v4.app.Fragment) this.mAdded.get(v3_4));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_4);
                    p11.print(": ");
                    p11.println(v2_3.toString());
                    v3_4++;
                }
            }
        }
        if (this.mCreatedMenus != null) {
            int v0_2 = this.mCreatedMenus.size();
            if (v0_2 > 0) {
                p11.print(p9);
                p11.println("Fragments Created Menus:");
                int v3_3 = 0;
                while (v3_3 < v0_2) {
                    android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) this.mCreatedMenus.get(v3_3));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_3);
                    p11.print(": ");
                    p11.println(v2_1.toString());
                    v3_3++;
                }
            }
        }
        if (this.mBackStack != null) {
            int v0_3 = this.mBackStack.size();
            if (v0_3 > 0) {
                p11.print(p9);
                p11.println("Back Stack:");
                int v3_2 = 0;
                while (v3_2 < v0_3) {
                    android.support.v4.app.BackStackRecord v1_3 = ((android.support.v4.app.BackStackRecord) this.mBackStack.get(v3_2));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_2);
                    p11.print(": ");
                    p11.println(v1_3.toString());
                    v1_3.dump(v4, p10, p11, p12);
                    v3_2++;
                }
            }
        }
        if (this.mBackStackIndices != null) {
            int v0_4 = this.mBackStackIndices.size();
            if (v0_4 > 0) {
                p11.print(p9);
                p11.println("Back Stack Indices:");
                int v3_1 = 0;
                while (v3_1 < v0_4) {
                    android.support.v4.app.BackStackRecord v1_1 = ((android.support.v4.app.BackStackRecord) this.mBackStackIndices.get(v3_1));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_1);
                    p11.print(": ");
                    p11.println(v1_1);
                    v3_1++;
                }
            }
        }
        if ((this.mAvailBackStackIndices != null) && (this.mAvailBackStackIndices.size() > 0)) {
            p11.print(p9);
            p11.print("mAvailBackStackIndices: ");
            p11.println(java.util.Arrays.toString(this.mAvailBackStackIndices.toArray()));
        }
        if (this.mPendingActions != null) {
            int v0_5 = this.mPendingActions.size();
            if (v0_5 > 0) {
                p11.print(p9);
                p11.println("Pending Actions:");
                int v3_0 = 0;
                while (v3_0 < v0_5) {
                    Runnable v5_1 = ((Runnable) this.mPendingActions.get(v3_0));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_0);
                    p11.print(": ");
                    p11.println(v5_1);
                    v3_0++;
                }
            }
        }
        p11.print(p9);
        p11.println("FragmentManager misc state:");
        p11.print(p9);
        p11.print("  mCurState=");
        p11.print(this.mCurState);
        p11.print(" mStateSaved=");
        p11.print(this.mStateSaved);
        p11.print(" mDestroyed=");
        p11.println(this.mDestroyed);
        if (this.mNeedMenuInvalidate) {
            p11.print(p9);
            p11.print("  mNeedMenuInvalidate=");
            p11.println(this.mNeedMenuInvalidate);
        }
        if (this.mNoTransactionsBecause != null) {
            p11.print(p9);
            p11.print("  mNoTransactionsBecause=");
            p11.println(this.mNoTransactionsBecause);
        }
        if ((this.mAvailIndices != null) && (this.mAvailIndices.size() > 0)) {
            p11.print(p9);
            p11.print("  mAvailIndices: ");
            p11.println(java.util.Arrays.toString(this.mAvailIndices.toArray()));
        }
        return;
    }

    public void enqueueAction(Runnable p3, boolean p4)
    {
        if (!p4) {
            this.checkStateLoss();
        }
        try {
            if (this.mActivity != null) {
                if (this.mPendingActions == null) {
                    this.mPendingActions = new java.util.ArrayList();
                }
                this.mPendingActions.add(p3);
                if (this.mPendingActions.size() == 1) {
                    this.mActivity.mHandler.removeCallbacks(this.mExecCommit);
                    this.mActivity.mHandler.post(this.mExecCommit);
                }
                return;
            } else {
                throw new IllegalStateException("Activity has been destroyed");
            }
        } catch (android.os.Handler v0_9) {
            throw v0_9;
        }
    }

    public boolean execPendingActions()
    {
        if (!this.mExecutingActions) {
            if (android.os.Looper.myLooper() == this.mActivity.mHandler.getLooper()) {
                int v0 = 0;
                while ((this.mPendingActions != null) && (this.mPendingActions.size() != 0)) {
                    int v4 = this.mPendingActions.size();
                    if ((this.mTmpActions == null) || (this.mTmpActions.length < v4)) {
                        boolean v5_8 = new Runnable[v4];
                        this.mTmpActions = v5_8;
                    }
                    this.mPendingActions.toArray(this.mTmpActions);
                    this.mPendingActions.clear();
                    this.mActivity.mHandler.removeCallbacks(this.mExecCommit);
                    this.mExecutingActions = 1;
                    int v2_0 = 0;
                    while (v2_0 < v4) {
                        this.mTmpActions[v2_0].run();
                        this.mTmpActions[v2_0] = 0;
                        v2_0++;
                    }
                    this.mExecutingActions = 0;
                    v0 = 1;
                }
                if (this.mHavePendingDeferredStart) {
                    int v3 = 0;
                    int v2_1 = 0;
                    while (v2_1 < this.mActive.size()) {
                        android.support.v4.app.Fragment v1_1 = ((android.support.v4.app.Fragment) this.mActive.get(v2_1));
                        if ((v1_1 != null) && (v1_1.mLoaderManager != null)) {
                            v3 |= v1_1.mLoaderManager.hasRunningLoaders();
                        }
                        v2_1++;
                    }
                    if (v3 == 0) {
                        this.mHavePendingDeferredStart = 0;
                        this.startPendingDeferredFragments();
                    }
                }
                return v0;
            } else {
                throw new IllegalStateException("Must be called from main thread of process");
            }
        } else {
            throw new IllegalStateException("Recursive entry to executePendingTransactions");
        }
    }

    public boolean executePendingTransactions()
    {
        return this.execPendingActions();
    }

    public android.support.v4.app.Fragment findFragmentById(int p4)
    {
        android.support.v4.app.Fragment v0_0;
        if (this.mActive == null) {
            v0_0 = 0;
        } else {
            int v1_1 = (this.mAdded.size() - 1);
            while (v1_1 >= 0) {
                v0_0 = ((android.support.v4.app.Fragment) this.mAdded.get(v1_1));
                if ((v0_0 == null) || (v0_0.mFragmentId != p4)) {
                    v1_1--;
                }
            }
            int v1_0 = (this.mActive.size() - 1);
            while (v1_0 >= 0) {
                v0_0 = ((android.support.v4.app.Fragment) this.mActive.get(v1_0));
                if ((v0_0 == null) || (v0_0.mFragmentId != p4)) {
                    v1_0--;
                }
            }
        }
        return v0_0;
    }

    public android.support.v4.app.Fragment findFragmentByTag(String p4)
    {
        if ((this.mActive == null) || (p4 == null)) {
            android.support.v4.app.Fragment v0_0 = 0;
        } else {
            int v1_1 = (this.mAdded.size() - 1);
            while (v1_1 >= 0) {
                v0_0 = ((android.support.v4.app.Fragment) this.mAdded.get(v1_1));
                if ((v0_0 == null) || (!p4.equals(v0_0.mTag))) {
                    v1_1--;
                }
            }
            int v1_0 = (this.mActive.size() - 1);
            while (v1_0 >= 0) {
                v0_0 = ((android.support.v4.app.Fragment) this.mActive.get(v1_0));
                if ((v0_0 == null) || (!p4.equals(v0_0.mTag))) {
                    v1_0--;
                }
            }
        }
        return v0_0;
    }

    public android.support.v4.app.Fragment findFragmentByWho(String p4)
    {
        if ((this.mActive == null) || (p4 == null)) {
            android.support.v4.app.Fragment v0_1 = 0;
        } else {
            int v1 = (this.mActive.size() - 1);
            while (v1 >= 0) {
                v0_1 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
                if ((v0_1 == null) || (!p4.equals(v0_1.mWho))) {
                    v1--;
                }
            }
        }
        return v0_1;
    }

    public void freeBackStackIndex(int p4)
    {
        try {
            this.mBackStackIndices.set(p4, 0);
        } catch (java.util.ArrayList v0_3) {
            throw v0_3;
        }
        if (this.mAvailBackStackIndices == null) {
            this.mAvailBackStackIndices = new java.util.ArrayList();
        }
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("Freeing back stack index ").append(p4).toString());
        }
        this.mAvailBackStackIndices.add(Integer.valueOf(p4));
        return;
    }

    public android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int p2)
    {
        return ((android.support.v4.app.FragmentManager$BackStackEntry) this.mBackStack.get(p2));
    }

    public int getBackStackEntryCount()
    {
        int v0_1;
        if (this.mBackStack == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mBackStack.size();
        }
        return v0_1;
    }

    public android.support.v4.app.Fragment getFragment(android.os.Bundle p6, String p7)
    {
        android.support.v4.app.Fragment v0_1;
        int v1 = p6.getInt(p7, -1);
        if (v1 != -1) {
            if (v1 < this.mActive.size()) {
                v0_1 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
                if (v0_1 == null) {
                    throw new IllegalStateException(new StringBuilder().append("Fragement no longer exists for key ").append(p7).append(": index ").append(v1).toString());
                }
            } else {
                throw new IllegalStateException(new StringBuilder().append("Fragement no longer exists for key ").append(p7).append(": index ").append(v1).toString());
            }
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public void hideFragment(android.support.v4.app.Fragment p6, int p7, int p8)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("hide: ").append(p6).toString());
        }
        if (!p6.mHidden) {
            p6.mHidden = 1;
            if (p6.mView != null) {
                android.view.animation.Animation v0 = this.loadAnimation(p6, p7, 1, p8);
                if (v0 != null) {
                    p6.mView.startAnimation(v0);
                }
                p6.mView.setVisibility(8);
            }
            if ((p6.mAdded) && ((p6.mHasMenu) && (p6.mMenuVisible))) {
                this.mNeedMenuInvalidate = 1;
            }
            p6.onHiddenChanged(1);
        }
        return;
    }

    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment p10, int p11, boolean p12, int p13)
    {
        android.support.v4.app.FragmentActivity v1 = p10.onCreateAnimation(p11, p12, p10.mNextAnim);
        if (v1 == null) {
            if (p10.mNextAnim != 0) {
                android.view.animation.Animation v0 = android.view.animation.AnimationUtils.loadAnimation(this.mActivity, p10.mNextAnim);
                if (v0 != null) {
                    v1 = v0;
                    return v1;
                }
            }
            if (p11 != 0) {
                int v2 = android.support.v4.app.FragmentManagerImpl.transitToStyleIndex(p11, p12);
                if (v2 >= 0) {
                    switch (v2) {
                        case 1:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mActivity, 1066401792, 1065353216, 0, 1065353216);
                        case 2:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mActivity, 1065353216, 1064933786, 1065353216, 0);
                            break;
                        case 3:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mActivity, 1064933786, 1065353216, 0, 1065353216);
                            break;
                        case 4:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mActivity, 1065353216, 1065982362, 1065353216, 0);
                            break;
                        case 5:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeFadeAnimation(this.mActivity, 0, 1065353216);
                            break;
                        case 6:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeFadeAnimation(this.mActivity, 1065353216, 0);
                            break;
                        default:
                            if (p13 != 0) {
                                if (p13 != 0) {
                                    v1 = 0;
                                } else {
                                    v1 = 0;
                                }
                            } else {
                                if (this.mActivity.getWindow() == null) {
                                } else {
                                    p13 = this.mActivity.getWindow().getAttributes().windowAnimations;
                                }
                            }
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    void makeActive(android.support.v4.app.Fragment p3)
    {
        if (p3.mIndex < 0) {
            if ((this.mAvailIndices != null) && (this.mAvailIndices.size() > 0)) {
                p3.setIndex(((Integer) this.mAvailIndices.remove((this.mAvailIndices.size() - 1))).intValue());
                this.mActive.set(p3.mIndex, p3);
            } else {
                if (this.mActive == null) {
                    this.mActive = new java.util.ArrayList();
                }
                p3.setIndex(this.mActive.size());
                this.mActive.add(p3);
            }
        }
        return;
    }

    void makeInactive(android.support.v4.app.Fragment p4)
    {
        if (p4.mIndex >= 0) {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Freeing fragment index ").append(p4.mIndex).toString());
            }
            this.mActive.set(p4.mIndex, 0);
            if (this.mAvailIndices == null) {
                this.mAvailIndices = new java.util.ArrayList();
            }
            this.mAvailIndices.add(Integer.valueOf(p4.mIndex));
            this.mActivity.invalidateSupportFragmentIndex(p4.mIndex);
            p4.initState();
        }
        return;
    }

    void moveToState(int p6, int p7, int p8, boolean p9)
    {
        if ((this.mActivity != null) || (p6 == 0)) {
            if ((p9) || (this.mCurState != p6)) {
                this.mCurState = p6;
                if (this.mActive != null) {
                    int v2 = 0;
                    int v1 = 0;
                    while (v1 < this.mActive.size()) {
                        android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
                        if (v0_1 != null) {
                            this.moveToState(v0_1, p6, p7, p8);
                            if (v0_1.mLoaderManager != null) {
                                v2 |= v0_1.mLoaderManager.hasRunningLoaders();
                            }
                        }
                        v1++;
                    }
                    if (v2 == 0) {
                        this.startPendingDeferredFragments();
                    }
                    if ((this.mNeedMenuInvalidate) && ((this.mActivity != null) && (this.mCurState == 5))) {
                        this.mActivity.supportInvalidateOptionsMenu();
                        this.mNeedMenuInvalidate = 0;
                    }
                }
            }
            return;
        } else {
            throw new IllegalStateException("No activity");
        }
    }

    void moveToState(int p2, boolean p3)
    {
        this.moveToState(p2, 0, 0, p3);
        return;
    }

    void moveToState(android.support.v4.app.Fragment p3)
    {
        this.moveToState(p3, this.mCurState, 0, 0);
        return;
    }

    void moveToState(android.support.v4.app.Fragment p8, int p9, int p10, int p11)
    {
        if ((!p8.mAdded) && (p9 > 1)) {
            p9 = 1;
        }
        if ((p8.mRemoving) && (p9 > p8.mState)) {
            p9 = p8.mState;
        }
        if ((p8.mDeferStart) && ((p8.mState < 4) && (p9 > 3))) {
            p9 = 3;
        }
        if (p8.mState >= p9) {
            if (p8.mState <= p9) {
                p8.mState = p9;
            } else {
                switch (p8.mState) {
                    case 1:
                        break;
                    case 2:
                        if (p9 >= 2) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom ACTIVITY_CREATED: ").append(p8).toString());
                            }
                            if ((p8.mView != null) && ((!this.mActivity.isFinishing()) && (p8.mSavedViewState == null))) {
                                this.saveFragmentViewState(p8);
                            }
                            p8.mCalled = 0;
                            p8.performDestroyView();
                            if (p8.mCalled) {
                                if ((p8.mView != null) && (p8.mContainer != null)) {
                                    android.view.animation.Animation v0_0 = 0;
                                    if ((this.mCurState > 0) && (!this.mDestroyed)) {
                                        v0_0 = this.loadAnimation(p8, p10, 0, p11);
                                    }
                                    if (v0_0 != null) {
                                        p8.mAnimatingAway = p8.mView;
                                        p8.mStateAfterAnimating = p9;
                                        v0_0.setAnimationListener(new android.support.v4.app.FragmentManagerImpl$5(this, p8));
                                        p8.mView.startAnimation(v0_0);
                                    }
                                    p8.mContainer.removeView(p8.mView);
                                }
                                p8.mContainer = 0;
                                p8.mView = 0;
                                p8.mInnerView = 0;
                            } else {
                                throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onDestroyView()").toString());
                            }
                        }
                        break;
                    case 3:
                        if (p9 >= 3) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom STOPPED: ").append(p8).toString());
                            }
                            p8.performReallyStop();
                        }
                        break;
                    case 4:
                        if (p9 >= 4) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom STARTED: ").append(p8).toString());
                            }
                            p8.mCalled = 0;
                            p8.performStop();
                            if (p8.mCalled) {
                            } else {
                                throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onStop()").toString());
                            }
                        }
                        break;
                    case 5:
                        if (p9 >= 5) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom RESUMED: ").append(p8).toString());
                            }
                            p8.mCalled = 0;
                            p8.onPause();
                            if (p8.mCalled) {
                                p8.mResumed = 0;
                            } else {
                                throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onPause()").toString());
                            }
                        }
                        break;
                    default:
                }
                if (p9 >= 1) {
                } else {
                    if ((this.mDestroyed) && (p8.mAnimatingAway != null)) {
                        android.view.View v3 = p8.mAnimatingAway;
                        p8.mAnimatingAway = 0;
                        v3.clearAnimation();
                    }
                    if (p8.mAnimatingAway == null) {
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom CREATED: ").append(p8).toString());
                        }
                        if (!p8.mRetaining) {
                            p8.mCalled = 0;
                            p8.onDestroy();
                            if (!p8.mCalled) {
                                throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onDestroy()").toString());
                            }
                        }
                        p8.mCalled = 0;
                        p8.onDetach();
                        if (p8.mCalled) {
                            if (p8.mRetaining) {
                                p8.mActivity = 0;
                                p8.mFragmentManager = 0;
                            } else {
                                this.makeInactive(p8);
                            }
                        } else {
                            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onDetach()").toString());
                        }
                    } else {
                        p8.mStateAfterAnimating = p9;
                        p9 = 1;
                    }
                }
            }
        } else {
            if ((!p8.mFromLayout) || (p8.mInLayout)) {
                if (p8.mAnimatingAway != null) {
                    p8.mAnimatingAway = 0;
                    this.moveToState(p8, p8.mStateAfterAnimating, 0, 0);
                }
                switch (p8.mState) {
                    case 0:
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("moveto CREATED: ").append(p8).toString());
                        }
                        if (p8.mSavedFragmentState != null) {
                            p8.mSavedViewState = p8.mSavedFragmentState.getSparseParcelableArray("android:view_state");
                            p8.mTarget = this.getFragment(p8.mSavedFragmentState, "android:target_state");
                            if (p8.mTarget != null) {
                                p8.mTargetRequestCode = p8.mSavedFragmentState.getInt("android:target_req_state", 0);
                            }
                            p8.mUserVisibleHint = p8.mSavedFragmentState.getBoolean("android:user_visible_hint", 1);
                            if (!p8.mUserVisibleHint) {
                                p8.mDeferStart = 1;
                                if (p9 > 3) {
                                    p9 = 3;
                                }
                            }
                        }
                        p8.mActivity = this.mActivity;
                        p8.mFragmentManager = this.mActivity.mFragments;
                        p8.mCalled = 0;
                        p8.onAttach(this.mActivity);
                        if (p8.mCalled) {
                            this.mActivity.onAttachFragment(p8);
                            if (!p8.mRetaining) {
                                p8.mCalled = 0;
                                p8.onCreate(p8.mSavedFragmentState);
                                if (!p8.mCalled) {
                                    throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onCreate()").toString());
                                }
                            }
                            p8.mRetaining = 0;
                            if (p8.mFromLayout) {
                                p8.mView = p8.onCreateView(p8.getLayoutInflater(p8.mSavedFragmentState), 0, p8.mSavedFragmentState);
                                if (p8.mView == null) {
                                    p8.mInnerView = 0;
                                } else {
                                    p8.mInnerView = p8.mView;
                                    p8.mView = android.support.v4.app.NoSaveStateFrameLayout.wrap(p8.mView);
                                    if (p8.mHidden) {
                                        p8.mView.setVisibility(8);
                                    }
                                    p8.onViewCreated(p8.mView, p8.mSavedFragmentState);
                                }
                            } else {
                                if (p9 <= 1) {
                                    if (p9 <= 3) {
                                        if (p9 <= 4) {
                                        } else {
                                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                                android.util.Log.v("FragmentManager", new StringBuilder().append("moveto RESUMED: ").append(p8).toString());
                                            }
                                            p8.mCalled = 0;
                                            p8.mResumed = 1;
                                            p8.onResume();
                                            if (p8.mCalled) {
                                                p8.mSavedFragmentState = 0;
                                                p8.mSavedViewState = 0;
                                            } else {
                                                throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onResume()").toString());
                                            }
                                        }
                                    } else {
                                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                            android.util.Log.v("FragmentManager", new StringBuilder().append("moveto STARTED: ").append(p8).toString());
                                        }
                                        p8.mCalled = 0;
                                        p8.performStart();
                                        if (p8.mCalled) {
                                        } else {
                                            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onStart()").toString());
                                        }
                                    }
                                } else {
                                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                        android.util.Log.v("FragmentManager", new StringBuilder().append("moveto ACTIVITY_CREATED: ").append(p8).toString());
                                    }
                                    if (!p8.mFromLayout) {
                                        android.view.ViewGroup v1_0 = 0;
                                        if (p8.mContainerId != 0) {
                                            v1_0 = ((android.view.ViewGroup) this.mActivity.findViewById(p8.mContainerId));
                                            if ((v1_0 == null) && (!p8.mRestored)) {
                                                throw new IllegalArgumentException(new StringBuilder().append("No view found for id 0x").append(Integer.toHexString(p8.mContainerId)).append(" for fragment ").append(p8).toString());
                                            }
                                        }
                                        p8.mContainer = v1_0;
                                        p8.mView = p8.onCreateView(p8.getLayoutInflater(p8.mSavedFragmentState), v1_0, p8.mSavedFragmentState);
                                        if (p8.mView == null) {
                                            p8.mInnerView = 0;
                                        } else {
                                            p8.mInnerView = p8.mView;
                                            p8.mView = android.support.v4.app.NoSaveStateFrameLayout.wrap(p8.mView);
                                            if (v1_0 != null) {
                                                android.view.animation.Animation v0_1 = this.loadAnimation(p8, p10, 1, p11);
                                                if (v0_1 != null) {
                                                    p8.mView.startAnimation(v0_1);
                                                }
                                                v1_0.addView(p8.mView);
                                            }
                                            if (p8.mHidden) {
                                                p8.mView.setVisibility(8);
                                            }
                                            p8.onViewCreated(p8.mView, p8.mSavedFragmentState);
                                        }
                                    }
                                    p8.mCalled = 0;
                                    p8.onActivityCreated(p8.mSavedFragmentState);
                                    if (p8.mCalled) {
                                        if (p8.mView != null) {
                                            p8.restoreViewState();
                                        }
                                        p8.mSavedFragmentState = 0;
                                    } else {
                                        throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onActivityCreated()").toString());
                                    }
                                }
                            }
                        } else {
                            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p8).append(" did not call through to super.onAttach()").toString());
                        }
                    default:
                }
            }
        }
        return;
    }

    public void noteStateNotSaved()
    {
        this.mStateSaved = 0;
        return;
    }

    public void performPendingDeferredStart(android.support.v4.app.Fragment p3)
    {
        if (p3.mDeferStart) {
            if (!this.mExecutingActions) {
                p3.mDeferStart = 0;
                this.moveToState(p3, this.mCurState, 0, 0);
            } else {
                this.mHavePendingDeferredStart = 1;
            }
        }
        return;
    }

    public void popBackStack()
    {
        this.enqueueAction(new android.support.v4.app.FragmentManagerImpl$2(this), 0);
        return;
    }

    public void popBackStack(int p4, int p5)
    {
        if (p4 >= 0) {
            this.enqueueAction(new android.support.v4.app.FragmentManagerImpl$4(this, p4, p5), 0);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Bad id: ").append(p4).toString());
        }
    }

    public void popBackStack(String p3, int p4)
    {
        this.enqueueAction(new android.support.v4.app.FragmentManagerImpl$3(this, p3, p4), 0);
        return;
    }

    public boolean popBackStackImmediate()
    {
        this.checkStateLoss();
        this.executePendingTransactions();
        return this.popBackStackState(this.mActivity.mHandler, 0, -1, 0);
    }

    public boolean popBackStackImmediate(int p4, int p5)
    {
        this.checkStateLoss();
        this.executePendingTransactions();
        if (p4 >= 0) {
            return this.popBackStackState(this.mActivity.mHandler, 0, p4, p5);
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Bad id: ").append(p4).toString());
        }
    }

    public boolean popBackStackImmediate(String p3, int p4)
    {
        this.checkStateLoss();
        this.executePendingTransactions();
        return this.popBackStackState(this.mActivity.mHandler, p3, -1, p4);
    }

    boolean popBackStackState(android.os.Handler p12, String p13, int p14, int p15)
    {
        int v9 = 0;
        if (this.mBackStack != null) {
            if ((p13 != null) || ((p14 >= 0) || ((p15 & 1) != 0))) {
                int v3 = -1;
                if ((p13 != null) || (p14 >= 0)) {
                    v3 = (this.mBackStack.size() - 1);
                    while (v3 >= 0) {
                        android.support.v4.app.BackStackRecord v1_3 = ((android.support.v4.app.BackStackRecord) this.mBackStack.get(v3));
                        if (((p13 != null) && (p13.equals(v1_3.getName()))) || ((p14 >= 0) && (p14 == v1_3.mIndex))) {
                            break;
                        }
                        v3--;
                    }
                    if (v3 < 0) {
                        return v9;
                    } else {
                        if ((p15 & 1) != 0) {
                            v3--;
                            while (v3 >= 0) {
                                android.support.v4.app.BackStackRecord v1_5 = ((android.support.v4.app.BackStackRecord) this.mBackStack.get(v3));
                                if (((p13 == null) || (!p13.equals(v1_5.getName()))) && ((p14 < 0) || (p14 != v1_5.mIndex))) {
                                    break;
                                }
                                v3--;
                            }
                        }
                    }
                }
                if (v3 == (this.mBackStack.size() - 1)) {
                    return v9;
                } else {
                    java.util.ArrayList v5_1 = new java.util.ArrayList();
                    int v2_0 = (this.mBackStack.size() - 1);
                    while (v2_0 > v3) {
                        v5_1.add(this.mBackStack.remove(v2_0));
                        v2_0--;
                    }
                    int v0 = (v5_1.size() - 1);
                    int v2_1 = 0;
                    while (v2_1 <= v0) {
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("Popping back stack state: ").append(v5_1.get(v2_1)).toString());
                        }
                        int v7_5;
                        int v6_22 = v5_1.get(v2_1);
                        if (v2_1 != v0) {
                            v7_5 = 0;
                        } else {
                            v7_5 = 1;
                        }
                        ((android.support.v4.app.BackStackRecord) v6_22).popFromBackStack(v7_5);
                        v2_1++;
                    }
                    this.reportBackStackChanged();
                }
            } else {
                int v4 = (this.mBackStack.size() - 1);
                if (v4 < 0) {
                    return v9;
                } else {
                    ((android.support.v4.app.BackStackRecord) this.mBackStack.remove(v4)).popFromBackStack(1);
                    this.reportBackStackChanged();
                }
            }
            v9 = 1;
        }
        return v9;
    }

    public void putFragment(android.os.Bundle p4, String p5, android.support.v4.app.Fragment p6)
    {
        if (p6.mIndex >= 0) {
            p4.putInt(p5, p6.mIndex);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(p6).append(" is not currently in the FragmentManager").toString());
        }
    }

    public void removeFragment(android.support.v4.app.Fragment p7, int p8, int p9)
    {
        int v2 = 0;
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("remove: ").append(p7).append(" nesting=").append(p7.mBackStackNesting).toString());
        }
        int v0;
        if (p7.isInBackStack()) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if ((!p7.mDetached) || (v0 != 0)) {
            this.mAdded.remove(p7);
            if ((p7.mHasMenu) && (p7.mMenuVisible)) {
                this.mNeedMenuInvalidate = 1;
            }
            p7.mAdded = 0;
            p7.mRemoving = 1;
            if (v0 == 0) {
                v2 = 1;
            }
            this.moveToState(p7, v2, p8, p9);
        }
        return;
    }

    public void removeOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener p2)
    {
        if (this.mBackStackChangeListeners != null) {
            this.mBackStackChangeListeners.remove(p2);
        }
        return;
    }

    void reportBackStackChanged()
    {
        if (this.mBackStackChangeListeners != null) {
            int v0 = 0;
            while (v0 < this.mBackStackChangeListeners.size()) {
                ((android.support.v4.app.FragmentManager$OnBackStackChangedListener) this.mBackStackChangeListeners.get(v0)).onBackStackChanged();
                v0++;
            }
        }
        return;
    }

    void restoreAllState(android.os.Parcelable p11, java.util.ArrayList p12)
    {
        if ((p11 != null) && (((android.support.v4.app.FragmentManagerState) p11).mActive != null)) {
            if (p12 != null) {
                int v4_3 = 0;
                while (v4_3 < p12.size()) {
                    android.support.v4.app.Fragment v1_4 = ((android.support.v4.app.Fragment) p12.get(v4_3));
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: re-attaching retained ").append(v1_4).toString());
                    }
                    android.support.v4.app.FragmentState v3_1 = ((android.support.v4.app.FragmentManagerState) p11).mActive[v1_4.mIndex];
                    v3_1.mInstance = v1_4;
                    v1_4.mSavedViewState = 0;
                    v1_4.mBackStackNesting = 0;
                    v1_4.mInLayout = 0;
                    v1_4.mAdded = 0;
                    v1_4.mTarget = 0;
                    if (v3_1.mSavedFragmentState != null) {
                        v3_1.mSavedFragmentState.setClassLoader(this.mActivity.getClassLoader());
                        v1_4.mSavedViewState = v3_1.mSavedFragmentState.getSparseParcelableArray("android:view_state");
                    }
                    v4_3++;
                }
            }
            this.mActive = new java.util.ArrayList(((android.support.v4.app.FragmentManagerState) p11).mActive.length);
            if (this.mAvailIndices != null) {
                this.mAvailIndices.clear();
            }
            int v4_2 = 0;
            while (v4_2 < ((android.support.v4.app.FragmentManagerState) p11).mActive.length) {
                android.support.v4.app.FragmentState v3_0 = ((android.support.v4.app.FragmentManagerState) p11).mActive[v4_2];
                if (v3_0 == null) {
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: adding #").append(v4_2).append(": (null)").toString());
                    }
                    this.mActive.add(0);
                    if (this.mAvailIndices == null) {
                        this.mAvailIndices = new java.util.ArrayList();
                    }
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: adding avail #").append(v4_2).toString());
                    }
                    this.mAvailIndices.add(Integer.valueOf(v4_2));
                } else {
                    android.support.v4.app.Fragment v1_2 = v3_0.instantiate(this.mActivity);
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: adding #").append(v4_2).append(": ").append(v1_2).toString());
                    }
                    this.mActive.add(v1_2);
                    v3_0.mInstance = 0;
                }
                v4_2++;
            }
            if (p12 != null) {
                int v4_1 = 0;
                while (v4_1 < p12.size()) {
                    android.support.v4.app.Fragment v1_1 = ((android.support.v4.app.Fragment) p12.get(v4_1));
                    if (v1_1.mTargetIndex >= 0) {
                        if (v1_1.mTargetIndex >= this.mActive.size()) {
                            android.util.Log.w("FragmentManager", new StringBuilder().append("Re-attaching retained fragment ").append(v1_1).append(" target no longer exists: ").append(v1_1.mTargetIndex).toString());
                            v1_1.mTarget = 0;
                        } else {
                            v1_1.mTarget = ((android.support.v4.app.Fragment) this.mActive.get(v1_1.mTargetIndex));
                        }
                    }
                    v4_1++;
                }
            }
            if (((android.support.v4.app.FragmentManagerState) p11).mAdded == null) {
                this.mAdded = 0;
            } else {
                this.mAdded = new java.util.ArrayList(((android.support.v4.app.FragmentManagerState) p11).mAdded.length);
                int v4_0 = 0;
                while (v4_0 < ((android.support.v4.app.FragmentManagerState) p11).mAdded.length) {
                    android.support.v4.app.Fragment v1_6 = ((android.support.v4.app.Fragment) this.mActive.get(((android.support.v4.app.FragmentManagerState) p11).mAdded[v4_0]));
                    if (v1_6 != null) {
                        v1_6.mAdded = 1;
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: making added #").append(v4_0).append(": ").append(v1_6).toString());
                        }
                        this.mAdded.add(v1_6);
                        v4_0++;
                    } else {
                        throw new IllegalStateException(new StringBuilder().append("No instantiated fragment for index #").append(((android.support.v4.app.FragmentManagerState) p11).mAdded[v4_0]).toString());
                    }
                }
            }
            if (((android.support.v4.app.FragmentManagerState) p11).mBackStack == null) {
                this.mBackStack = 0;
            } else {
                this.mBackStack = new java.util.ArrayList(((android.support.v4.app.FragmentManagerState) p11).mBackStack.length);
                int v4_4 = 0;
                while (v4_4 < ((android.support.v4.app.FragmentManagerState) p11).mBackStack.length) {
                    android.support.v4.app.BackStackRecord v0 = ((android.support.v4.app.FragmentManagerState) p11).mBackStack[v4_4].instantiate(this);
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: adding bse #").append(v4_4).append(" (index ").append(v0.mIndex).append("): ").append(v0).toString());
                    }
                    this.mBackStack.add(v0);
                    if (v0.mIndex >= 0) {
                        this.setBackStackIndex(v0.mIndex, v0);
                    }
                    v4_4++;
                }
            }
        }
        return;
    }

    java.util.ArrayList retainNonConfig()
    {
        java.util.ArrayList v1_0 = 0;
        if (this.mActive != null) {
            int v2 = 0;
            while (v2 < this.mActive.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mActive.get(v2));
                if ((v0_1 != null) && (v0_1.mRetainInstance)) {
                    if (v1_0 == null) {
                        v1_0 = new java.util.ArrayList();
                    }
                    int v3_4;
                    v1_0.add(v0_1);
                    v0_1.mRetaining = 1;
                    if (v0_1.mTarget == null) {
                        v3_4 = -1;
                    } else {
                        v3_4 = v0_1.mTarget.mIndex;
                    }
                    v0_1.mTargetIndex = v3_4;
                }
                v2++;
            }
        }
        return v1_0;
    }

    android.os.Parcelable saveAllState()
    {
        android.support.v4.app.FragmentManagerState v5_0 = 0;
        this.execPendingActions();
        if (android.support.v4.app.FragmentManagerImpl.HONEYCOMB) {
            this.mStateSaved = 1;
        }
        if ((this.mActive != null) && (this.mActive.size() > 0)) {
            int v0_0 = this.mActive.size();
            android.support.v4.app.FragmentState[] v1 = new android.support.v4.app.FragmentState[v0_0];
            int v7 = 0;
            int v8_1 = 0;
            while (v8_1 < v0_0) {
                android.support.v4.app.Fragment v4_1 = ((android.support.v4.app.Fragment) this.mActive.get(v8_1));
                if (v4_1 != null) {
                    v7 = 1;
                    android.support.v4.app.FragmentState v6_1 = new android.support.v4.app.FragmentState(v4_1);
                    v1[v8_1] = v6_1;
                    if ((v4_1.mState <= 0) || (v6_1.mSavedFragmentState != null)) {
                        v6_1.mSavedFragmentState = v4_1.mSavedFragmentState;
                    } else {
                        v6_1.mSavedFragmentState = this.saveFragmentBasicState(v4_1);
                        if (v4_1.mTarget != null) {
                            if (v4_1.mTarget.mIndex >= 0) {
                                if (v6_1.mSavedFragmentState == null) {
                                    v6_1.mSavedFragmentState = new android.os.Bundle();
                                }
                                this.putFragment(v6_1.mSavedFragmentState, "android:target_state", v4_1.mTarget);
                                if (v4_1.mTargetRequestCode != 0) {
                                    v6_1.mSavedFragmentState.putInt("android:target_req_state", v4_1.mTargetRequestCode);
                                }
                            } else {
                                String v9 = new StringBuilder().append("Failure saving state: ").append(v4_1).append(" has target not in fragment manager: ").append(v4_1.mTarget).toString();
                                android.util.Log.e("FragmentManager", v9);
                                Object v12_8 = new String[0];
                                this.dump("  ", 0, new java.io.PrintWriter(new android.support.v4.util.LogWriter("FragmentManager")), v12_8);
                                throw new IllegalStateException(v9);
                            }
                        }
                    }
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("Saved state of ").append(v4_1).append(": ").append(v6_1.mSavedFragmentState).toString());
                    }
                }
                v8_1++;
            }
            if (v7 != 0) {
                int[] v2 = 0;
                android.support.v4.app.BackStackState[] v3 = 0;
                if (this.mAdded != null) {
                    int v0_1 = this.mAdded.size();
                    if (v0_1 > 0) {
                        v2 = new int[v0_1];
                        int v8_0 = 0;
                        while (v8_0 < v0_1) {
                            v2[v8_0] = ((android.support.v4.app.Fragment) this.mAdded.get(v8_0)).mIndex;
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("saveAllState: adding fragment #").append(v8_0).append(": ").append(this.mAdded.get(v8_0)).toString());
                            }
                            v8_0++;
                        }
                    }
                }
                if (this.mBackStack != null) {
                    int v0_2 = this.mBackStack.size();
                    if (v0_2 > 0) {
                        v3 = new android.support.v4.app.BackStackState[v0_2];
                        int v8_2 = 0;
                        while (v8_2 < v0_2) {
                            v3[v8_2] = new android.support.v4.app.BackStackState(this, ((android.support.v4.app.BackStackRecord) this.mBackStack.get(v8_2)));
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("saveAllState: adding back stack #").append(v8_2).append(": ").append(this.mBackStack.get(v8_2)).toString());
                            }
                            v8_2++;
                        }
                    }
                }
                v5_0 = new android.support.v4.app.FragmentManagerState();
                v5_0.mActive = v1;
                v5_0.mAdded = v2;
                v5_0.mBackStack = v3;
            } else {
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", "saveAllState: no fragments!");
                }
            }
        }
        return v5_0;
    }

    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment p4)
    {
        android.os.Bundle v0_0 = 0;
        if (this.mStateBundle == null) {
            this.mStateBundle = new android.os.Bundle();
        }
        p4.onSaveInstanceState(this.mStateBundle);
        if (!this.mStateBundle.isEmpty()) {
            v0_0 = this.mStateBundle;
            this.mStateBundle = 0;
        }
        if (p4.mView != null) {
            this.saveFragmentViewState(p4);
        }
        if (p4.mSavedViewState != null) {
            if (v0_0 == null) {
                v0_0 = new android.os.Bundle();
            }
            v0_0.putSparseParcelableArray("android:view_state", p4.mSavedViewState);
        }
        if (!p4.mUserVisibleHint) {
            v0_0.putBoolean("android:user_visible_hint", p4.mUserVisibleHint);
        }
        return v0_0;
    }

    public android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment p5)
    {
        android.support.v4.app.Fragment$SavedState v1_0 = 0;
        if (p5.mIndex >= 0) {
            if (p5.mState > 0) {
                android.os.Bundle v0 = this.saveFragmentBasicState(p5);
                if (v0 != null) {
                    v1_0 = new android.support.v4.app.Fragment$SavedState(v0);
                }
            }
            return v1_0;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(p5).append(" is not currently in the FragmentManager").toString());
        }
    }

    void saveFragmentViewState(android.support.v4.app.Fragment p3)
    {
        if (p3.mInnerView != null) {
            if (this.mStateArray != null) {
                this.mStateArray.clear();
            } else {
                this.mStateArray = new android.util.SparseArray();
            }
            p3.mInnerView.saveHierarchyState(this.mStateArray);
            if (this.mStateArray.size() > 0) {
                p3.mSavedViewState = this.mStateArray;
                this.mStateArray = 0;
            }
        }
        return;
    }

    public void setBackStackIndex(int p5, android.support.v4.app.BackStackRecord p6)
    {
        try {
            if (this.mBackStackIndices == null) {
                this.mBackStackIndices = new java.util.ArrayList();
            }
        } catch (java.util.ArrayList v1_17) {
            throw v1_17;
        }
        int v0 = this.mBackStackIndices.size();
        if (p5 >= v0) {
            while (v0 < p5) {
                this.mBackStackIndices.add(0);
                if (this.mAvailBackStackIndices == null) {
                    this.mAvailBackStackIndices = new java.util.ArrayList();
                }
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", new StringBuilder().append("Adding available back stack index ").append(v0).toString());
                }
                this.mAvailBackStackIndices.add(Integer.valueOf(v0));
                v0++;
            }
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Adding back stack index ").append(p5).append(" with ").append(p6).toString());
            }
            this.mBackStackIndices.add(p6);
        } else {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Setting back stack index ").append(p5).append(" to ").append(p6).toString());
            }
            this.mBackStackIndices.set(p5, p6);
        }
        return;
    }

    public void showFragment(android.support.v4.app.Fragment p7, int p8, int p9)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("show: ").append(p7).toString());
        }
        if (p7.mHidden) {
            p7.mHidden = 0;
            if (p7.mView != null) {
                android.view.animation.Animation v0 = this.loadAnimation(p7, p8, 1, p9);
                if (v0 != null) {
                    p7.mView.startAnimation(v0);
                }
                p7.mView.setVisibility(0);
            }
            if ((p7.mAdded) && ((p7.mHasMenu) && (p7.mMenuVisible))) {
                this.mNeedMenuInvalidate = 1;
            }
            p7.onHiddenChanged(0);
        }
        return;
    }

    void startPendingDeferredFragments()
    {
        if (this.mActive != null) {
            int v1 = 0;
            while (v1 < this.mActive.size()) {
                android.support.v4.app.Fragment v0_0 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
                if (v0_0 != null) {
                    this.performPendingDeferredStart(v0_0);
                }
                v1++;
            }
        }
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        v0_1.append("FragmentManager{");
        v0_1.append(Integer.toHexString(System.identityHashCode(this)));
        v0_1.append(" in ");
        android.support.v4.util.DebugUtils.buildShortClassTag(this.mActivity, v0_1);
        v0_1.append("}}");
        return v0_1.toString();
    }

    FragmentManagerState$1()
    {
        return;
    }

    public android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.app.FragmentManagerState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.FragmentManagerState[] newArray(int p2)
    {
        android.support.v4.app.FragmentManagerState[] v0 = new android.support.v4.app.FragmentManagerState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static FragmentManagerState()
    {
        android.support.v4.app.FragmentManagerState.CREATOR = new android.support.v4.app.FragmentManagerState$1();
        return;
    }

    public FragmentManagerState()
    {
        return;
    }

    public FragmentManagerState(android.os.Parcel p2)
    {
        this.mActive = ((android.support.v4.app.FragmentState[]) p2.createTypedArray(android.support.v4.app.FragmentState.CREATOR));
        this.mAdded = p2.createIntArray();
        this.mBackStack = ((android.support.v4.app.BackStackState[]) p2.createTypedArray(android.support.v4.app.BackStackState.CREATOR));
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeTypedArray(this.mActive, p3);
        p2.writeIntArray(this.mAdded);
        p2.writeTypedArray(this.mBackStack, p3);
        return;
    }

    public PagerAdapter()
    {
        this.mObservable = new android.database.DataSetObservable();
        return;
    }

    public void destroyItem(android.view.View p3, int p4, Object p5)
    {
        throw new UnsupportedOperationException("Required method destroyItem was not overridden");
    }

    public void destroyItem(android.view.ViewGroup p1, int p2, Object p3)
    {
        this.destroyItem(p1, p2, p3);
        return;
    }

    public void finishUpdate(android.view.View p1)
    {
        return;
    }

    public void finishUpdate(android.view.ViewGroup p1)
    {
        this.finishUpdate(p1);
        return;
    }

    public abstract int getCount();

    public int getItemPosition(Object p2)
    {
        return -1;
    }

    public CharSequence getPageTitle(int p2)
    {
        return 0;
    }

    public Object instantiateItem(android.view.View p3, int p4)
    {
        throw new UnsupportedOperationException("Required method instantiateItem was not overridden");
    }

    public Object instantiateItem(android.view.ViewGroup p2, int p3)
    {
        return this.instantiateItem(p2, p3);
    }

    public abstract boolean isViewFromObject();

    public void notifyDataSetChanged()
    {
        this.mObservable.notifyChanged();
        return;
    }

    void registerDataSetObserver(android.database.DataSetObserver p2)
    {
        this.mObservable.registerObserver(p2);
        return;
    }

    public void restoreState(android.os.Parcelable p1, ClassLoader p2)
    {
        return;
    }

    public android.os.Parcelable saveState()
    {
        return 0;
    }

    public void setPrimaryItem(android.view.View p1, int p2, Object p3)
    {
        return;
    }

    public void setPrimaryItem(android.view.ViewGroup p1, int p2, Object p3)
    {
        this.setPrimaryItem(p1, p2, p3);
        return;
    }

    public void startUpdate(android.view.View p1)
    {
        return;
    }

    public void startUpdate(android.view.ViewGroup p1)
    {
        this.startUpdate(p1);
        return;
    }

    void unregisterDataSetObserver(android.database.DataSetObserver p2)
    {
        this.mObservable.unregisterObserver(p2);
        return;
    }

    public FragmentPagerAdapter(android.support.v4.app.FragmentManager p2)
    {
        this.mCurTransaction = 0;
        this.mCurrentPrimaryItem = 0;
        this.mFragmentManager = p2;
        return;
    }

    private static String makeFragmentName(int p2, int p3)
    {
        return new StringBuilder().append("android:switcher:").append(p2).append(":").append(p3).toString();
    }

    public void destroyItem(android.view.ViewGroup p2, int p3, Object p4)
    {
        if (this.mCurTransaction == null) {
            this.mCurTransaction = this.mFragmentManager.beginTransaction();
        }
        this.mCurTransaction.detach(((android.support.v4.app.Fragment) p4));
        return;
    }

    public void finishUpdate(android.view.ViewGroup p2)
    {
        if (this.mCurTransaction != null) {
            this.mCurTransaction.commitAllowingStateLoss();
            this.mCurTransaction = 0;
            this.mFragmentManager.executePendingTransactions();
        }
        return;
    }

    public abstract android.support.v4.app.Fragment getItem();

    public Object instantiateItem(android.view.ViewGroup p7, int p8)
    {
        if (this.mCurTransaction == null) {
            this.mCurTransaction = this.mFragmentManager.beginTransaction();
        }
        android.support.v4.app.Fragment v0 = this.mFragmentManager.findFragmentByTag(android.support.v4.app.FragmentPagerAdapter.makeFragmentName(p7.getId(), p8));
        if (v0 == null) {
            v0 = this.getItem(p8);
            this.mCurTransaction.add(p7.getId(), v0, android.support.v4.app.FragmentPagerAdapter.makeFragmentName(p7.getId(), p8));
        } else {
            this.mCurTransaction.attach(v0);
        }
        if (v0 != this.mCurrentPrimaryItem) {
            v0.setMenuVisibility(0);
            v0.setUserVisibleHint(0);
        }
        return v0;
    }

    public boolean isViewFromObject(android.view.View p2, Object p3)
    {
        int v0_1;
        if (((android.support.v4.app.Fragment) p3).getView() != p2) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void restoreState(android.os.Parcelable p1, ClassLoader p2)
    {
        return;
    }

    public android.os.Parcelable saveState()
    {
        return 0;
    }

    public void setPrimaryItem(android.view.ViewGroup p5, int p6, Object p7)
    {
        if (((android.support.v4.app.Fragment) p7) != this.mCurrentPrimaryItem) {
            if (this.mCurrentPrimaryItem != null) {
                this.mCurrentPrimaryItem.setMenuVisibility(0);
                this.mCurrentPrimaryItem.setUserVisibleHint(0);
            }
            if (((android.support.v4.app.Fragment) p7) != null) {
                ((android.support.v4.app.Fragment) p7).setMenuVisibility(1);
                ((android.support.v4.app.Fragment) p7).setUserVisibleHint(1);
            }
            this.mCurrentPrimaryItem = ((android.support.v4.app.Fragment) p7);
        }
        return;
    }

    public void startUpdate(android.view.ViewGroup p1)
    {
        return;
    }

    FragmentState$1()
    {
        return;
    }

    public android.support.v4.app.FragmentState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.app.FragmentState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.FragmentState[] newArray(int p2)
    {
        android.support.v4.app.FragmentState[] v0 = new android.support.v4.app.FragmentState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static FragmentState()
    {
        android.support.v4.app.FragmentState.CREATOR = new android.support.v4.app.FragmentState$1();
        return;
    }

    public FragmentState(android.os.Parcel p4)
    {
        android.os.Bundle v0_1;
        int v1 = 1;
        this.mClassName = p4.readString();
        this.mIndex = p4.readInt();
        if (p4.readInt() == 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        android.os.Bundle v0_6;
        this.mFromLayout = v0_1;
        this.mFragmentId = p4.readInt();
        this.mContainerId = p4.readInt();
        this.mTag = p4.readString();
        if (p4.readInt() == 0) {
            v0_6 = 0;
        } else {
            v0_6 = 1;
        }
        this.mRetainInstance = v0_6;
        if (p4.readInt() == 0) {
            v1 = 0;
        }
        this.mDetached = v1;
        this.mArguments = p4.readBundle();
        this.mSavedFragmentState = p4.readBundle();
        return;
    }

    public FragmentState(android.support.v4.app.Fragment p2)
    {
        this.mClassName = p2.getClass().getName();
        this.mIndex = p2.mIndex;
        this.mFromLayout = p2.mFromLayout;
        this.mFragmentId = p2.mFragmentId;
        this.mContainerId = p2.mContainerId;
        this.mTag = p2.mTag;
        this.mRetainInstance = p2.mRetainInstance;
        this.mDetached = p2.mDetached;
        this.mArguments = p2.mArguments;
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity p3)
    {
        android.support.v4.app.Fragment v0_16;
        if (this.mInstance == null) {
            if (this.mArguments != null) {
                this.mArguments.setClassLoader(p3.getClassLoader());
            }
            this.mInstance = android.support.v4.app.Fragment.instantiate(p3, this.mClassName, this.mArguments);
            if (this.mSavedFragmentState != null) {
                this.mSavedFragmentState.setClassLoader(p3.getClassLoader());
                this.mInstance.mSavedFragmentState = this.mSavedFragmentState;
            }
            this.mInstance.setIndex(this.mIndex);
            this.mInstance.mFromLayout = this.mFromLayout;
            this.mInstance.mRestored = 1;
            this.mInstance.mFragmentId = this.mFragmentId;
            this.mInstance.mContainerId = this.mContainerId;
            this.mInstance.mTag = this.mTag;
            this.mInstance.mRetainInstance = this.mRetainInstance;
            this.mInstance.mDetached = this.mDetached;
            this.mInstance.mFragmentManager = p3.mFragments;
            v0_16 = this.mInstance;
        } else {
            v0_16 = this.mInstance;
        }
        return v0_16;
    }

    public void writeToParcel(android.os.Parcel p4, int p5)
    {
        android.os.Bundle v0_11;
        int v1 = 1;
        p4.writeString(this.mClassName);
        p4.writeInt(this.mIndex);
        if (!this.mFromLayout) {
            v0_11 = 0;
        } else {
            v0_11 = 1;
        }
        android.os.Bundle v0_4;
        p4.writeInt(v0_11);
        p4.writeInt(this.mFragmentId);
        p4.writeInt(this.mContainerId);
        p4.writeString(this.mTag);
        if (!this.mRetainInstance) {
            v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        p4.writeInt(v0_4);
        if (!this.mDetached) {
            v1 = 0;
        }
        p4.writeInt(v1);
        p4.writeBundle(this.mArguments);
        p4.writeBundle(this.mSavedFragmentState);
        return;
    }

    public FragmentStatePagerAdapter(android.support.v4.app.FragmentManager p3)
    {
        this.mCurTransaction = 0;
        this.mSavedState = new java.util.ArrayList();
        this.mFragments = new java.util.ArrayList();
        this.mCurrentPrimaryItem = 0;
        this.mFragmentManager = p3;
        return;
    }

    public void destroyItem(android.view.ViewGroup p5, int p6, Object p7)
    {
        if (this.mCurTransaction == null) {
            this.mCurTransaction = this.mFragmentManager.beginTransaction();
        }
        while (this.mSavedState.size() <= p6) {
            this.mSavedState.add(0);
        }
        this.mSavedState.set(p6, this.mFragmentManager.saveFragmentInstanceState(((android.support.v4.app.Fragment) p7)));
        this.mFragments.set(p6, 0);
        this.mCurTransaction.remove(((android.support.v4.app.Fragment) p7));
        return;
    }

    public void finishUpdate(android.view.ViewGroup p2)
    {
        if (this.mCurTransaction != null) {
            this.mCurTransaction.commitAllowingStateLoss();
            this.mCurTransaction = 0;
            this.mFragmentManager.executePendingTransactions();
        }
        return;
    }

    public abstract android.support.v4.app.Fragment getItem();

    public Object instantiateItem(android.view.ViewGroup p6, int p7)
    {
        android.support.v4.app.Fragment v0_0;
        if (this.mFragments.size() <= p7) {
            if (this.mCurTransaction == null) {
                this.mCurTransaction = this.mFragmentManager.beginTransaction();
            }
            android.support.v4.app.Fragment v1 = this.getItem(p7);
            if (this.mSavedState.size() > p7) {
                android.support.v4.app.Fragment$SavedState v2_1 = ((android.support.v4.app.Fragment$SavedState) this.mSavedState.get(p7));
                if (v2_1 != null) {
                    v1.setInitialSavedState(v2_1);
                }
            }
            while (this.mFragments.size() <= p7) {
                this.mFragments.add(0);
            }
            v1.setMenuVisibility(0);
            this.mFragments.set(p7, v1);
            this.mCurTransaction.add(p6.getId(), v1);
            v0_0 = v1;
        } else {
            v0_0 = ((android.support.v4.app.Fragment) this.mFragments.get(p7));
            if (v0_0 == null) {
            }
        }
        return v0_0;
    }

    public boolean isViewFromObject(android.view.View p2, Object p3)
    {
        int v0_1;
        if (((android.support.v4.app.Fragment) p3).getView() != p2) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void restoreState(android.os.Parcelable p12, ClassLoader p13)
    {
        if (p12 != null) {
            ((android.os.Bundle) p12).setClassLoader(p13);
            android.os.Parcelable[] v2 = ((android.os.Bundle) p12).getParcelableArray("states");
            this.mSavedState.clear();
            this.mFragments.clear();
            if (v2 != null) {
                int v3 = 0;
                while (v3 < v2.length) {
                    this.mSavedState.add(((android.support.v4.app.Fragment$SavedState) v2[v3]));
                    v3++;
                }
            }
            java.util.Iterator v4 = ((android.os.Bundle) p12).keySet().iterator();
            while (v4.hasNext()) {
                String v6_1 = ((String) v4.next());
                if (v6_1.startsWith("f")) {
                    int v5 = Integer.parseInt(v6_1.substring(1));
                    android.support.v4.app.Fragment v1 = this.mFragmentManager.getFragment(((android.os.Bundle) p12), v6_1);
                    if (v1 == null) {
                        android.util.Log.w("FragmentStatePagerAdapter", new StringBuilder().append("Bad fragment at key ").append(v6_1).toString());
                    }
                    while (this.mFragments.size() <= v5) {
                        this.mFragments.add(0);
                    }
                    v1.setMenuVisibility(0);
                    this.mFragments.set(v5, v1);
                }
            }
        }
        return;
    }

    public android.os.Parcelable saveState()
    {
        android.os.Bundle v4_0 = 0;
        if (this.mSavedState.size() > 0) {
            v4_0 = new android.os.Bundle();
            android.support.v4.app.Fragment$SavedState[] v1 = new android.support.v4.app.Fragment$SavedState[this.mSavedState.size()];
            this.mSavedState.toArray(v1);
            v4_0.putParcelableArray("states", v1);
        }
        int v2 = 0;
        while (v2 < this.mFragments.size()) {
            android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mFragments.get(v2));
            if (v0_1 != null) {
                if (v4_0 == null) {
                    v4_0 = new android.os.Bundle();
                }
                this.mFragmentManager.putFragment(v4_0, new StringBuilder().append("f").append(v2).toString(), v0_1);
            }
            v2++;
        }
        return v4_0;
    }

    public void setPrimaryItem(android.view.ViewGroup p4, int p5, Object p6)
    {
        if (((android.support.v4.app.Fragment) p6) != this.mCurrentPrimaryItem) {
            if (this.mCurrentPrimaryItem != null) {
                this.mCurrentPrimaryItem.setMenuVisibility(0);
            }
            if (((android.support.v4.app.Fragment) p6) != null) {
                ((android.support.v4.app.Fragment) p6).setMenuVisibility(1);
            }
            this.mCurrentPrimaryItem = ((android.support.v4.app.Fragment) p6);
        }
        return;
    }

    public void startUpdate(android.view.ViewGroup p1)
    {
        return;
    }

    static HCSparseArray()
    {
        android.support.v4.app.HCSparseArray.DELETED = new Object();
        return;
    }

    public HCSparseArray()
    {
        this(10);
        return;
    }

    public HCSparseArray(int p3)
    {
        this.mGarbage = 0;
        int v3_1 = android.support.v4.app.HCSparseArray.idealIntArraySize(p3);
        Object[] v0_0 = new int[v3_1];
        this.mKeys = v0_0;
        Object[] v0_1 = new Object[v3_1];
        this.mValues = v0_1;
        this.mSize = 0;
        return;
    }

    private static int binarySearch(int[] p5, int p6, int p7, int p8)
    {
        int v1 = (p6 + p7);
        int v2 = (p6 - 1);
        while ((v1 - v2) > 1) {
            int v0 = ((v1 + v2) / 2);
            if (p5[v0] >= p8) {
                v1 = v0;
            } else {
                v2 = v0;
            }
        }
        if (v1 != (p6 + p7)) {
            if (p5[v1] != p8) {
                v1 ^= -1;
            }
        } else {
            v1 = ((p6 + p7) ^ -1);
        }
        return v1;
    }

    private void gc()
    {
        int v2 = this.mSize;
        int v3 = 0;
        int[] v1 = this.mKeys;
        Object[] v5 = this.mValues;
        int v0 = 0;
        while (v0 < v2) {
            Object v4 = v5[v0];
            if (v4 != android.support.v4.app.HCSparseArray.DELETED) {
                if (v0 != v3) {
                    v1[v3] = v1[v0];
                    v5[v3] = v4;
                }
                v3++;
            }
            v0++;
        }
        this.mGarbage = 0;
        this.mSize = v3;
        return;
    }

    static int idealByteArraySize(int p3)
    {
        int v0 = 4;
        while (v0 < 32) {
            if (p3 > ((1 << v0) - 12)) {
                v0++;
            } else {
                p3 = ((1 << v0) - 12);
                break;
            }
        }
        return p3;
    }

    static int idealIntArraySize(int p1)
    {
        return (android.support.v4.app.HCSparseArray.idealByteArraySize((p1 * 4)) / 4);
    }

    public void append(int p8, Object p9)
    {
        if ((this.mSize == 0) || (p8 > this.mKeys[(this.mSize - 1)])) {
            if ((this.mGarbage) && (this.mSize >= this.mKeys.length)) {
                this.gc();
            }
            int v3 = this.mSize;
            if (v3 >= this.mKeys.length) {
                int v0 = android.support.v4.app.HCSparseArray.idealIntArraySize((v3 + 1));
                int[] v1 = new int[v0];
                Object[] v2 = new Object[v0];
                System.arraycopy(this.mKeys, 0, v1, 0, this.mKeys.length);
                System.arraycopy(this.mValues, 0, v2, 0, this.mValues.length);
                this.mKeys = v1;
                this.mValues = v2;
            }
            this.mKeys[v3] = p8;
            this.mValues[v3] = p9;
            this.mSize = (v3 + 1);
        } else {
            this.put(p8, p9);
        }
        return;
    }

    public void clear()
    {
        int v1 = this.mSize;
        int v0 = 0;
        while (v0 < v1) {
            this.mValues[v0] = 0;
            v0++;
        }
        this.mSize = 0;
        this.mGarbage = 0;
        return;
    }

    public void delete(int p5)
    {
        int v0 = android.support.v4.app.HCSparseArray.binarySearch(this.mKeys, 0, this.mSize, p5);
        if ((v0 >= 0) && (this.mValues[v0] != android.support.v4.app.HCSparseArray.DELETED)) {
            this.mValues[v0] = android.support.v4.app.HCSparseArray.DELETED;
            this.mGarbage = 1;
        }
        return;
    }

    public Object get(int p2)
    {
        return this.get(p2, 0);
    }

    public Object get(int p5, Object p6)
    {
        int v0 = android.support.v4.app.HCSparseArray.binarySearch(this.mKeys, 0, this.mSize, p5);
        if ((v0 >= 0) && (this.mValues[v0] != android.support.v4.app.HCSparseArray.DELETED)) {
            p6 = this.mValues[v0];
        }
        return p6;
    }

    public int indexOfKey(int p4)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return android.support.v4.app.HCSparseArray.binarySearch(this.mKeys, 0, this.mSize, p4);
    }

    public int indexOfValue(Object p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        int v0 = 0;
        while (v0 < this.mSize) {
            if (this.mValues[v0] != p3) {
                v0++;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    public int keyAt(int p2)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mKeys[p2];
    }

    public void put(int p9, Object p10)
    {
        int v0_1 = android.support.v4.app.HCSparseArray.binarySearch(this.mKeys, 0, this.mSize, p9);
        if (v0_1 < 0) {
            int v0_0 = (v0_1 ^ -1);
            if ((v0_0 >= this.mSize) || (this.mValues[v0_0] != android.support.v4.app.HCSparseArray.DELETED)) {
                if ((this.mGarbage) && (this.mSize >= this.mKeys.length)) {
                    this.gc();
                    v0_0 = (android.support.v4.app.HCSparseArray.binarySearch(this.mKeys, 0, this.mSize, p9) ^ -1);
                }
                if (this.mSize >= this.mKeys.length) {
                    int v1 = android.support.v4.app.HCSparseArray.idealIntArraySize((this.mSize + 1));
                    int[] v2 = new int[v1];
                    Object[] v3 = new Object[v1];
                    System.arraycopy(this.mKeys, 0, v2, 0, this.mKeys.length);
                    System.arraycopy(this.mValues, 0, v3, 0, this.mValues.length);
                    this.mKeys = v2;
                    this.mValues = v3;
                }
                if ((this.mSize - v0_0) != 0) {
                    System.arraycopy(this.mKeys, v0_0, this.mKeys, (v0_0 + 1), (this.mSize - v0_0));
                    System.arraycopy(this.mValues, v0_0, this.mValues, (v0_0 + 1), (this.mSize - v0_0));
                }
                this.mKeys[v0_0] = p9;
                this.mValues[v0_0] = p10;
                this.mSize = (this.mSize + 1);
            } else {
                this.mKeys[v0_0] = p9;
                this.mValues[v0_0] = p10;
            }
        } else {
            this.mValues[v0_1] = p10;
        }
        return;
    }

    public void remove(int p1)
    {
        this.delete(p1);
        return;
    }

    public void removeAt(int p3)
    {
        if (this.mValues[p3] != android.support.v4.app.HCSparseArray.DELETED) {
            this.mValues[p3] = android.support.v4.app.HCSparseArray.DELETED;
            this.mGarbage = 1;
        }
        return;
    }

    public void setValueAt(int p2, Object p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        this.mValues[p2] = p3;
        return;
    }

    public int size()
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mSize;
    }

    public Object valueAt(int p2)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mValues[p2];
    }

    ListFragment$1(android.support.v4.app.ListFragment p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.mList.focusableViewAvailable(this.this$0.mList);
        return;
    }

    ListFragment$2(android.support.v4.app.ListFragment p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p7, android.view.View p8, int p9, long p10)
    {
        this.this$0.onListItemClick(((android.widget.ListView) p7), p8, p9, p10);
        return;
    }

    public ListFragment()
    {
        this.mHandler = new android.os.Handler();
        this.mRequestFocus = new android.support.v4.app.ListFragment$1(this);
        this.mOnClickListener = new android.support.v4.app.ListFragment$2(this);
        return;
    }

    private void ensureList()
    {
        if (this.mList == null) {
            android.widget.ListView v2_0 = this.getView();
            if (v2_0 != null) {
                if (!(v2_0 instanceof android.widget.ListView)) {
                    this.mStandardEmptyView = ((android.widget.TextView) v2_0.findViewById(16711681));
                    if (this.mStandardEmptyView != null) {
                        this.mStandardEmptyView.setVisibility(8);
                    } else {
                        this.mEmptyView = v2_0.findViewById(16908292);
                    }
                    this.mProgressContainer = v2_0.findViewById(16711682);
                    this.mListContainer = v2_0.findViewById(16711683);
                    android.widget.ListView v1_0 = v2_0.findViewById(16908298);
                    if ((v1_0 instanceof android.widget.ListView)) {
                        this.mList = ((android.widget.ListView) v1_0);
                        if (this.mEmptyView == null) {
                            if (this.mEmptyText != null) {
                                this.mStandardEmptyView.setText(this.mEmptyText);
                                this.mList.setEmptyView(this.mStandardEmptyView);
                            }
                        } else {
                            this.mList.setEmptyView(this.mEmptyView);
                        }
                    } else {
                        if (v1_0 != null) {
                            throw new RuntimeException("Content has view with id attribute \'android.R.id.list\' that is not a ListView class");
                        } else {
                            throw new RuntimeException("Your content must have a ListView whose id attribute is \'android.R.id.list\'");
                        }
                    }
                } else {
                    this.mList = ((android.widget.ListView) v2_0);
                }
                this.mListShown = 1;
                this.mList.setOnItemClickListener(this.mOnClickListener);
                if (this.mAdapter == null) {
                    if (this.mProgressContainer != null) {
                        this.setListShown(0, 0);
                    }
                } else {
                    android.widget.ListAdapter v0 = this.mAdapter;
                    this.mAdapter = 0;
                    this.setListAdapter(v0);
                }
                this.mHandler.post(this.mRequestFocus);
            } else {
                throw new IllegalStateException("Content view not yet created");
            }
        }
        return;
    }

    private void setListShown(boolean p7, boolean p8)
    {
        this.ensureList();
        if (this.mProgressContainer != null) {
            if (this.mListShown != p7) {
                this.mListShown = p7;
                if (!p7) {
                    if (!p8) {
                        this.mProgressContainer.clearAnimation();
                        this.mListContainer.clearAnimation();
                    } else {
                        this.mProgressContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getActivity(), 17432576));
                        this.mListContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getActivity(), 17432577));
                    }
                    this.mProgressContainer.setVisibility(0);
                    this.mListContainer.setVisibility(8);
                } else {
                    if (!p8) {
                        this.mProgressContainer.clearAnimation();
                        this.mListContainer.clearAnimation();
                    } else {
                        this.mProgressContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getActivity(), 17432577));
                        this.mListContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getActivity(), 17432576));
                    }
                    this.mProgressContainer.setVisibility(8);
                    this.mListContainer.setVisibility(0);
                }
            }
            return;
        } else {
            throw new IllegalStateException("Can\'t be used with a custom content view");
        }
    }

    public android.widget.ListAdapter getListAdapter()
    {
        return this.mAdapter;
    }

    public android.widget.ListView getListView()
    {
        this.ensureList();
        return this.mList;
    }

    public long getSelectedItemId()
    {
        this.ensureList();
        return this.mList.getSelectedItemId();
    }

    public int getSelectedItemPosition()
    {
        this.ensureList();
        return this.mList.getSelectedItemPosition();
    }

    public android.view.View onCreateView(android.view.LayoutInflater p13, android.view.ViewGroup p14, android.os.Bundle p15)
    {
        android.support.v4.app.FragmentActivity v0 = this.getActivity();
        android.widget.FrameLayout v5_1 = new android.widget.FrameLayout(v0);
        android.widget.LinearLayout v3_1 = new android.widget.LinearLayout(v0);
        v3_1.setId(16711682);
        v3_1.setOrientation(1);
        v3_1.setVisibility(8);
        v3_1.setGravity(17);
        v3_1.addView(new android.widget.ProgressBar(v0, 0, 16842874), new android.widget.FrameLayout$LayoutParams(-2, -2));
        v5_1.addView(v3_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        android.widget.FrameLayout v1_1 = new android.widget.FrameLayout(v0);
        v1_1.setId(16711683);
        android.widget.TextView v6_1 = new android.widget.TextView(this.getActivity());
        v6_1.setId(16711681);
        v6_1.setGravity(17);
        v1_1.addView(v6_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        android.widget.ListView v2_1 = new android.widget.ListView(this.getActivity());
        v2_1.setId(16908298);
        v2_1.setDrawSelectorOnTop(0);
        v1_1.addView(v2_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        v5_1.addView(v1_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        v5_1.setLayoutParams(new android.widget.FrameLayout$LayoutParams(-1, -1));
        return v5_1;
    }

    public void onDestroyView()
    {
        this.mHandler.removeCallbacks(this.mRequestFocus);
        this.mList = 0;
        this.mListShown = 0;
        this.mListContainer = 0;
        this.mProgressContainer = 0;
        this.mEmptyView = 0;
        this.mStandardEmptyView = 0;
        super.onDestroyView();
        return;
    }

    public void onListItemClick(android.widget.ListView p1, android.view.View p2, int p3, long p4)
    {
        return;
    }

    public void onViewCreated(android.view.View p1, android.os.Bundle p2)
    {
        super.onViewCreated(p1, p2);
        this.ensureList();
        return;
    }

    public void setEmptyText(CharSequence p3)
    {
        this.ensureList();
        if (this.mStandardEmptyView != null) {
            this.mStandardEmptyView.setText(p3);
            if (this.mEmptyText == null) {
                this.mList.setEmptyView(this.mStandardEmptyView);
            }
            this.mEmptyText = p3;
            return;
        } else {
            throw new IllegalStateException("Can\'t be used with a custom content view");
        }
    }

    public void setListAdapter(android.widget.ListAdapter p5)
    {
        int v0;
        int v2 = 0;
        if (this.mAdapter == null) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        this.mAdapter = p5;
        if (this.mList != null) {
            this.mList.setAdapter(p5);
            if ((!this.mListShown) && (v0 == 0)) {
                if (this.getView().getWindowToken() != null) {
                    v2 = 1;
                }
                this.setListShown(1, v2);
            }
        }
        return;
    }

    public void setListShown(boolean p2)
    {
        this.setListShown(p2, 1);
        return;
    }

    public void setListShownNoAnimation(boolean p2)
    {
        this.setListShown(p2, 0);
        return;
    }

    public void setSelection(int p2)
    {
        this.ensureList();
        this.mList.setSelection(p2);
        return;
    }

    public abstract android.support.v4.content.Loader onCreateLoader();

    public abstract void onLoadFinished();

    public abstract void onLoaderReset();

    public LoaderManager()
    {
        return;
    }

    public static void enableDebugLogging(boolean p0)
    {
        android.support.v4.app.LoaderManagerImpl.DEBUG = p0;
        return;
    }

    public abstract void destroyLoader();

    public abstract void dump();

    public abstract android.support.v4.content.Loader getLoader();

    public boolean hasRunningLoaders()
    {
        return 0;
    }

    public abstract android.support.v4.content.Loader initLoader();

    public abstract android.support.v4.content.Loader restartLoader();

    public abstract void onLoadComplete();

    public LoaderManagerImpl$LoaderInfo(android.support.v4.app.LoaderManagerImpl p1, int p2, android.os.Bundle p3, android.support.v4.app.LoaderManager$LoaderCallbacks p4)
    {
        this.this$0 = p1;
        this.mId = p2;
        this.mArgs = p3;
        this.mCallbacks = p4;
        return;
    }

    void callOnLoadFinished(android.support.v4.content.Loader p5, Object p6)
    {
        if (this.mCallbacks != null) {
            String v0 = 0;
            if (this.this$0.mActivity != null) {
                v0 = this.this$0.mActivity.mFragments.mNoTransactionsBecause;
                this.this$0.mActivity.mFragments.mNoTransactionsBecause = "onLoadFinished";
            }
            try {
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  onLoadFinished in ").append(p5).append(": ").append(p5.dataToString(p6)).toString());
                }
            } catch (int v1_7) {
                if (this.this$0.mActivity != null) {
                    this.this$0.mActivity.mFragments.mNoTransactionsBecause = v0;
                }
                throw v1_7;
            }
            this.mCallbacks.onLoadFinished(p5, p6);
            if (this.this$0.mActivity != null) {
                this.this$0.mActivity.mFragments.mNoTransactionsBecause = v0;
            }
            this.mDeliveredData = 1;
        }
        return;
    }

    void destroy()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("  Destroying: ").append(this).toString());
        }
        this.mDestroyed = 1;
        boolean v1 = this.mDeliveredData;
        this.mDeliveredData = 0;
        if ((this.mCallbacks != null) && ((this.mLoader != null) && ((this.mHaveData) && (v1)))) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("  Reseting: ").append(this).toString());
            }
            String v0 = 0;
            if (this.this$0.mActivity != null) {
                v0 = this.this$0.mActivity.mFragments.mNoTransactionsBecause;
                this.this$0.mActivity.mFragments.mNoTransactionsBecause = "onLoaderReset";
            }
            try {
                this.mCallbacks.onLoaderReset(this.mLoader);
            } catch (android.support.v4.app.FragmentManagerImpl v2_19) {
                if (this.this$0.mActivity != null) {
                    this.this$0.mActivity.mFragments.mNoTransactionsBecause = v0;
                }
                throw v2_19;
            }
            if (this.this$0.mActivity != null) {
                this.this$0.mActivity.mFragments.mNoTransactionsBecause = v0;
            }
        }
        this.mCallbacks = 0;
        this.mData = 0;
        this.mHaveData = 0;
        if (this.mLoader != null) {
            if (this.mListenerRegistered) {
                this.mListenerRegistered = 0;
                this.mLoader.unregisterListener(this);
            }
            this.mLoader.reset();
        }
        if (this.mPendingLoader != null) {
            this.mPendingLoader.destroy();
        }
        return;
    }

    public void dump(String p4, java.io.FileDescriptor p5, java.io.PrintWriter p6, String[] p7)
    {
        p6.print(p4);
        p6.print("mId=");
        p6.print(this.mId);
        p6.print(" mArgs=");
        p6.println(this.mArgs);
        p6.print(p4);
        p6.print("mCallbacks=");
        p6.println(this.mCallbacks);
        p6.print(p4);
        p6.print("mLoader=");
        p6.println(this.mLoader);
        if (this.mLoader != null) {
            this.mLoader.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        if ((this.mHaveData) || (this.mDeliveredData)) {
            p6.print(p4);
            p6.print("mHaveData=");
            p6.print(this.mHaveData);
            p6.print("  mDeliveredData=");
            p6.println(this.mDeliveredData);
            p6.print(p4);
            p6.print("mData=");
            p6.println(this.mData);
        }
        p6.print(p4);
        p6.print("mStarted=");
        p6.print(this.mStarted);
        p6.print(" mReportNextStart=");
        p6.print(this.mReportNextStart);
        p6.print(" mDestroyed=");
        p6.println(this.mDestroyed);
        p6.print(p4);
        p6.print("mRetaining=");
        p6.print(this.mRetaining);
        p6.print(" mRetainingStarted=");
        p6.print(this.mRetainingStarted);
        p6.print(" mListenerRegistered=");
        p6.println(this.mListenerRegistered);
        if (this.mPendingLoader != null) {
            p6.print(p4);
            p6.println("Pending Loader ");
            p6.print(this.mPendingLoader);
            p6.println(":");
            this.mPendingLoader.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        return;
    }

    void finishRetain()
    {
        if (this.mRetaining) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("  Finished Retaining: ").append(this).toString());
            }
            this.mRetaining = 0;
            if ((this.mStarted != this.mRetainingStarted) && (!this.mStarted)) {
                this.stop();
            }
        }
        if ((this.mStarted) && ((this.mHaveData) && (!this.mReportNextStart))) {
            this.callOnLoadFinished(this.mLoader, this.mData);
        }
        return;
    }

    public void onLoadComplete(android.support.v4.content.Loader p7, Object p8)
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("onLoadComplete: ").append(this).toString());
        }
        if (!this.mDestroyed) {
            if (this.this$0.mLoaders.get(this.mId) == this) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v1 = this.mPendingLoader;
                if (v1 == null) {
                    if ((this.mData != p8) || (!this.mHaveData)) {
                        this.mData = p8;
                        this.mHaveData = 1;
                        if (this.mStarted) {
                            this.callOnLoadFinished(p7, p8);
                        }
                    }
                    android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.this$0.mInactiveLoaders.get(this.mId));
                    if ((v0_1 != null) && (v0_1 != this)) {
                        v0_1.mDeliveredData = 0;
                        v0_1.destroy();
                        this.this$0.mInactiveLoaders.remove(this.mId);
                    }
                    if ((this.this$0.mActivity != null) && (!this.this$0.hasRunningLoaders())) {
                        this.this$0.mActivity.mFragments.startPendingDeferredFragments();
                    }
                } else {
                    if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                        android.util.Log.v("LoaderManager", new StringBuilder().append("  Switching to pending loader: ").append(v1).toString());
                    }
                    this.mPendingLoader = 0;
                    this.this$0.mLoaders.put(this.mId, 0);
                    this.destroy();
                    this.this$0.installLoader(v1);
                }
            } else {
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", "  Ignoring load complete -- not active");
                }
            }
        } else {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", "  Ignoring load complete -- destroyed");
            }
        }
        return;
    }

    void reportStart()
    {
        if ((this.mStarted) && (this.mReportNextStart)) {
            this.mReportNextStart = 0;
            if (this.mHaveData) {
                this.callOnLoadFinished(this.mLoader, this.mData);
            }
        }
        return;
    }

    void retain()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("  Retaining: ").append(this).toString());
        }
        this.mRetaining = 1;
        this.mRetainingStarted = this.mStarted;
        this.mStarted = 0;
        this.mCallbacks = 0;
        return;
    }

    void start()
    {
        if ((!this.mRetaining) || (!this.mRetainingStarted)) {
            if (!this.mStarted) {
                this.mStarted = 1;
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Starting: ").append(this).toString());
                }
                if ((this.mLoader == null) && (this.mCallbacks != null)) {
                    this.mLoader = this.mCallbacks.onCreateLoader(this.mId, this.mArgs);
                }
                if (this.mLoader != null) {
                    if ((!this.mLoader.getClass().isMemberClass()) || (reflect.Modifier.isStatic(this.mLoader.getClass().getModifiers()))) {
                        if (!this.mListenerRegistered) {
                            this.mLoader.registerListener(this.mId, this);
                            this.mListenerRegistered = 1;
                        }
                        this.mLoader.startLoading();
                    } else {
                        throw new IllegalArgumentException(new StringBuilder().append("Object returned from onCreateLoader must not be a non-static inner member class: ").append(this.mLoader).toString());
                    }
                }
            }
        } else {
            this.mStarted = 1;
        }
        return;
    }

    void stop()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("  Stopping: ").append(this).toString());
        }
        this.mStarted = 0;
        if ((!this.mRetaining) && ((this.mLoader != null) && (this.mListenerRegistered))) {
            this.mListenerRegistered = 0;
            this.mLoader.unregisterListener(this);
            this.mLoader.stopLoading();
        }
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(64);
        v0_1.append("LoaderInfo{");
        v0_1.append(Integer.toHexString(System.identityHashCode(this)));
        v0_1.append(" #");
        v0_1.append(this.mId);
        v0_1.append(" : ");
        android.support.v4.util.DebugUtils.buildShortClassTag(this.mLoader, v0_1);
        v0_1.append("}}");
        return v0_1.toString();
    }

    static LoaderManagerImpl()
    {
        android.support.v4.app.LoaderManagerImpl.DEBUG = 0;
        return;
    }

    LoaderManagerImpl(android.support.v4.app.FragmentActivity p2, boolean p3)
    {
        this.mLoaders = new android.support.v4.app.HCSparseArray();
        this.mInactiveLoaders = new android.support.v4.app.HCSparseArray();
        this.mActivity = p2;
        this.mStarted = p3;
        return;
    }

    private android.support.v4.app.LoaderManagerImpl$LoaderInfo createAndInstallLoader(int p4, android.os.Bundle p5, android.support.v4.app.LoaderManager$LoaderCallbacks p6)
    {
        try {
            this.mCreatingLoader = 1;
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v0 = this.createLoader(p4, p5, p6);
            this.installLoader(v0);
            this.mCreatingLoader = 0;
            return v0;
        } catch (Throwable v1_1) {
            this.mCreatingLoader = 0;
            throw v1_1;
        }
    }

    private android.support.v4.app.LoaderManagerImpl$LoaderInfo createLoader(int p3, android.os.Bundle p4, android.support.v4.app.LoaderManager$LoaderCallbacks p5)
    {
        android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = new android.support.v4.app.LoaderManagerImpl$LoaderInfo(this, p3, p4, p5);
        v0_1.mLoader = p5.onCreateLoader(p3, p4);
        return v0_1;
    }

    public void destroyLoader(int p6)
    {
        if (!this.mCreatingLoader) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("destroyLoader in ").append(this).append(" of ").append(p6).toString());
            }
            int v0_0 = this.mLoaders.indexOfKey(p6);
            if (v0_0 >= 0) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v1_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0_0));
                this.mLoaders.removeAt(v0_0);
                v1_1.destroy();
            }
            int v0_1 = this.mInactiveLoaders.indexOfKey(p6);
            if (v0_1 >= 0) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v1_3 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.valueAt(v0_1));
                this.mInactiveLoaders.removeAt(v0_1);
                v1_3.destroy();
            }
            if ((this.mActivity != null) && (!this.hasRunningLoaders())) {
                this.mActivity.mFragments.startPendingDeferredFragments();
            }
            return;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    void doDestroy()
    {
        if (!this.mRetaining) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("Destroying Active in ").append(this).toString());
            }
            int v0_0 = (this.mLoaders.size() - 1);
            while (v0_0 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0_0)).destroy();
                v0_0--;
            }
        }
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Destroying Inactive in ").append(this).toString());
        }
        int v0_1 = (this.mInactiveLoaders.size() - 1);
        while (v0_1 >= 0) {
            ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.valueAt(v0_1)).destroy();
            v0_1--;
        }
        this.mInactiveLoaders.clear();
        return;
    }

    void doReportNextStart()
    {
        int v0 = (this.mLoaders.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0)).mReportNextStart = 1;
            v0--;
        }
        return;
    }

    void doReportStart()
    {
        int v0 = (this.mLoaders.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0)).reportStart();
            v0--;
        }
        return;
    }

    void doRetain()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Retaining in ").append(this).toString());
        }
        if (this.mStarted) {
            this.mRetaining = 1;
            this.mStarted = 0;
            int v1 = (this.mLoaders.size() - 1);
            while (v1 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1)).retain();
                v1--;
            }
        } else {
            RuntimeException v0_1 = new RuntimeException("here");
            v0_1.fillInStackTrace();
            android.util.Log.w("LoaderManager", new StringBuilder().append("Called doRetain when not started: ").append(this).toString(), v0_1);
        }
        return;
    }

    void doStart()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Starting in ").append(this).toString());
        }
        if (!this.mStarted) {
            this.mStarted = 1;
            int v1 = (this.mLoaders.size() - 1);
            while (v1 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1)).start();
                v1--;
            }
        } else {
            RuntimeException v0_1 = new RuntimeException("here");
            v0_1.fillInStackTrace();
            android.util.Log.w("LoaderManager", new StringBuilder().append("Called doStart when already started: ").append(this).toString(), v0_1);
        }
        return;
    }

    void doStop()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Stopping in ").append(this).toString());
        }
        if (this.mStarted) {
            int v1 = (this.mLoaders.size() - 1);
            while (v1 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1)).stop();
                v1--;
            }
            this.mStarted = 0;
        } else {
            RuntimeException v0_1 = new RuntimeException("here");
            v0_1.fillInStackTrace();
            android.util.Log.w("LoaderManager", new StringBuilder().append("Called doStop when not started: ").append(this).toString(), v0_1);
        }
        return;
    }

    public void dump(String p6, java.io.FileDescriptor p7, java.io.PrintWriter p8, String[] p9)
    {
        if (this.mLoaders.size() > 0) {
            p8.print(p6);
            p8.println("Active Loaders:");
            String v1_0 = new StringBuilder().append(p6).append("    ").toString();
            int v0_0 = 0;
            while (v0_0 < this.mLoaders.size()) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v2_3 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0_0));
                p8.print(p6);
                p8.print("  #");
                p8.print(this.mLoaders.keyAt(v0_0));
                p8.print(": ");
                p8.println(v2_3.toString());
                v2_3.dump(v1_0, p7, p8, p9);
                v0_0++;
            }
        }
        if (this.mInactiveLoaders.size() > 0) {
            p8.print(p6);
            p8.println("Inactive Loaders:");
            String v1_1 = new StringBuilder().append(p6).append("    ").toString();
            int v0_1 = 0;
            while (v0_1 < this.mInactiveLoaders.size()) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v2_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.valueAt(v0_1));
                p8.print(p6);
                p8.print("  #");
                p8.print(this.mInactiveLoaders.keyAt(v0_1));
                p8.print(": ");
                p8.println(v2_1.toString());
                v2_1.dump(v1_1, p7, p8, p9);
                v0_1++;
            }
        }
        return;
    }

    void finishRetain()
    {
        if (this.mRetaining) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("Finished Retaining in ").append(this).toString());
            }
            this.mRetaining = 0;
            int v0 = (this.mLoaders.size() - 1);
            while (v0 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0)).finishRetain();
                v0--;
            }
        }
        return;
    }

    public android.support.v4.content.Loader getLoader(int p4)
    {
        if (!this.mCreatingLoader) {
            android.support.v4.content.Loader v1_1;
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.get(p4));
            if (v0_1 == null) {
                v1_1 = 0;
            } else {
                if (v0_1.mPendingLoader == null) {
                    v1_1 = v0_1.mLoader;
                } else {
                    v1_1 = v0_1.mPendingLoader.mLoader;
                }
            }
            return v1_1;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    public boolean hasRunningLoaders()
    {
        int v3 = 0;
        int v0 = this.mLoaders.size();
        int v1 = 0;
        while (v1 < v0) {
            int v4_3;
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v2_0 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1));
            if ((!v2_0.mStarted) || (v2_0.mDeliveredData)) {
                v4_3 = 0;
            } else {
                v4_3 = 1;
            }
            v3 |= v4_3;
            v1++;
        }
        return v3;
    }

    public android.support.v4.content.Loader initLoader(int p5, android.os.Bundle p6, android.support.v4.app.LoaderManager$LoaderCallbacks p7)
    {
        if (!this.mCreatingLoader) {
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.get(p5));
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("initLoader in ").append(this).append(": args=").append(p6).toString());
            }
            if (v0_1 != null) {
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Re-using existing loader ").append(v0_1).toString());
                }
                v0_1.mCallbacks = p7;
            } else {
                v0_1 = this.createAndInstallLoader(p5, p6, p7);
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Created new loader ").append(v0_1).toString());
                }
            }
            if ((v0_1.mHaveData) && (this.mStarted)) {
                v0_1.callOnLoadFinished(v0_1.mLoader, v0_1.mData);
            }
            return v0_1.mLoader;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo p3)
    {
        this.mLoaders.put(p3.mId, p3);
        if (this.mStarted) {
            p3.start();
        }
        return;
    }

    public android.support.v4.content.Loader restartLoader(int p7, android.os.Bundle p8, android.support.v4.app.LoaderManager$LoaderCallbacks p9)
    {
        if (!this.mCreatingLoader) {
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v1_2 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.get(p7));
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("restartLoader in ").append(this).append(": args=").append(p8).toString());
            }
            android.support.v4.content.Loader v2_4;
            if (v1_2 == null) {
                v2_4 = this.createAndInstallLoader(p7, p8, p9).mLoader;
            } else {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.get(p7));
                if (v0_1 == null) {
                    if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                        android.util.Log.v("LoaderManager", new StringBuilder().append("  Making last loader inactive: ").append(v1_2).toString());
                    }
                    v1_2.mLoader.abandon();
                    this.mInactiveLoaders.put(p7, v1_2);
                } else {
                    if (!v1_2.mHaveData) {
                        if (v1_2.mStarted) {
                            if (v1_2.mPendingLoader != null) {
                                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Removing pending loader: ").append(v1_2.mPendingLoader).toString());
                                }
                                v1_2.mPendingLoader.destroy();
                                v1_2.mPendingLoader = 0;
                            }
                            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                                android.util.Log.v("LoaderManager", "  Enqueuing as new pending loader");
                            }
                            v1_2.mPendingLoader = this.createLoader(p7, p8, p9);
                            v2_4 = v1_2.mPendingLoader.mLoader;
                        } else {
                            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                                android.util.Log.v("LoaderManager", "  Current loader is stopped; replacing");
                            }
                            this.mLoaders.put(p7, 0);
                            v1_2.destroy();
                        }
                    } else {
                        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                            android.util.Log.v("LoaderManager", new StringBuilder().append("  Removing last inactive loader: ").append(v1_2).toString());
                        }
                        v0_1.mDeliveredData = 0;
                        v0_1.destroy();
                        v1_2.mLoader.abandon();
                        this.mInactiveLoaders.put(p7, v1_2);
                    }
                }
            }
            return v2_4;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        v0_1.append("LoaderManager{");
        v0_1.append(Integer.toHexString(System.identityHashCode(this)));
        v0_1.append(" in ");
        android.support.v4.util.DebugUtils.buildShortClassTag(this.mActivity, v0_1);
        v0_1.append("}}");
        return v0_1.toString();
    }

    void updateActivity(android.support.v4.app.FragmentActivity p1)
    {
        this.mActivity = p1;
        return;
    }

    private NavUtils()
    {
        return;
    }

    public static android.content.Intent getParentActivityIntent(android.app.Activity p3)
    {
        android.content.Intent v1_2;
        String v0 = android.support.v4.app.NavUtils.getParentActivityName(p3);
        if (v0 != null) {
            v1_2 = new android.content.Intent("android.intent.action.MAIN").setClassName(p3, v0);
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public static android.content.Intent getParentActivityIntent(android.content.Context p3, android.content.ComponentName p4)
    {
        android.content.Intent v1_4;
        String v0 = android.support.v4.app.NavUtils.getParentActivityName(p3, p4);
        if (v0 != null) {
            if (v0.charAt(0) == 46) {
                v0 = new StringBuilder().append(p3.getPackageName()).append(v0).toString();
            }
            v1_4 = new android.content.Intent("android.intent.action.MAIN").setClassName(p3, v0);
        } else {
            v1_4 = 0;
        }
        return v1_4;
    }

    public static android.content.Intent getParentActivityIntent(android.content.Context p3, Class p4)
    {
        android.content.Intent v1_2;
        String v0 = android.support.v4.app.NavUtils.getParentActivityName(p3, new android.content.ComponentName(p3, p4));
        if (v0 != null) {
            v1_2 = new android.content.Intent("android.intent.action.MAIN").setClassName(p3, v0);
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public static String getParentActivityName(android.app.Activity p2)
    {
        try {
            return android.support.v4.app.NavUtils.getParentActivityName(p2, p2.getComponentName());
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            throw new IllegalArgumentException(v0);
        }
    }

    public static String getParentActivityName(android.content.Context p6, android.content.ComponentName p7)
    {
        String v1;
        android.content.pm.ActivityInfo v0 = p6.getPackageManager().getActivityInfo(p7, 128);
        if (v0.metaData != null) {
            v1 = v0.metaData.getString("android.support.PARENT_ACTIVITY");
            if (v1 != null) {
                if (v1.charAt(0) == 46) {
                    v1 = new StringBuilder().append(p6.getPackageName()).append(v1).toString();
                }
            } else {
                v1 = 0;
            }
        } else {
            v1 = 0;
        }
        return v1;
    }

    public static void navigateUpFromSameTask(android.app.Activity p4)
    {
        android.content.Intent v0 = android.support.v4.app.NavUtils.getParentActivityIntent(p4);
        if (v0 != null) {
            android.support.v4.app.NavUtils.navigateUpTo(p4, v0);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Activity ").append(p4.getClass().getSimpleName()).append(" does not have a parent activity name specified.").append(" (Did you forget to add the android.support.PARENT_ACTIVITY <meta-data> ").append(" element in your manifest?)").toString());
        }
    }

    public static void navigateUpTo(android.app.Activity p1, android.content.Intent p2)
    {
        p2.addFlags(67108864);
        p1.startActivity(p2);
        p1.finish();
        return;
    }

    public static boolean shouldUpRecreateTask(android.app.Activity p2, android.content.Intent p3)
    {
        int v1_1;
        String v0 = p2.getIntent().getAction();
        if ((v0 == null) || (v0.equals("android.intent.action.MAIN"))) {
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        return v1_1;
    }

    public NoSaveStateFrameLayout(android.content.Context p1)
    {
        super(p1);
        return;
    }

    static android.view.ViewGroup wrap(android.view.View p5)
    {
        android.support.v4.app.NoSaveStateFrameLayout v2_1 = new android.support.v4.app.NoSaveStateFrameLayout(p5.getContext());
        android.view.ViewGroup$LayoutParams v0 = p5.getLayoutParams();
        if (v0 != null) {
            v2_1.setLayoutParams(v0);
        }
        p5.setLayoutParams(new android.widget.FrameLayout$LayoutParams(-1, -1));
        v2_1.addView(p5);
        return v2_1;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray p1)
    {
        this.dispatchThawSelfOnly(p1);
        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray p1)
    {
        this.dispatchFreezeSelfOnly(p1);
        return;
    }

    public NotificationCompat$Builder(android.content.Context p4)
    {
        this.mNotification = new android.app.Notification();
        this.mContext = p4;
        this.mNotification.when = System.currentTimeMillis();
        this.mNotification.audioStreamType = -1;
        return;
    }

    private void setFlag(int p4, boolean p5)
    {
        if (!p5) {
            android.app.Notification v0_0 = this.mNotification;
            v0_0.flags = (v0_0.flags & (p4 ^ -1));
        } else {
            android.app.Notification v0_1 = this.mNotification;
            v0_1.flags = (v0_1.flags | p4);
        }
        return;
    }

    public android.app.Notification getNotification()
    {
        return android.support.v4.app.NotificationCompat.access$000().getNotification(this);
    }

    public android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean p2)
    {
        this.setFlag(16, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContent(android.widget.RemoteViews p2)
    {
        this.mNotification.contentView = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentInfo(CharSequence p1)
    {
        this.mContentInfo = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent p1)
    {
        this.mContentIntent = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentText(CharSequence p1)
    {
        this.mContentText = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentTitle(CharSequence p1)
    {
        this.mContentTitle = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setDefaults(int p3)
    {
        this.mNotification.defaults = p3;
        if ((p3 & 4) != 0) {
            android.app.Notification v0_2 = this.mNotification;
            v0_2.flags = (v0_2.flags | 1);
        }
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent p2)
    {
        this.mNotification.deleteIntent = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setFullScreenIntent(android.app.PendingIntent p2, boolean p3)
    {
        this.mFullScreenIntent = p2;
        this.setFlag(128, p3);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap p1)
    {
        this.mLargeIcon = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setLights(int p6, int p7, int p8)
    {
        int v0;
        int v1_0 = 1;
        this.mNotification.ledARGB = p6;
        this.mNotification.ledOnMS = p7;
        this.mNotification.ledOffMS = p8;
        if ((this.mNotification.ledOnMS == 0) || (this.mNotification.ledOffMS == 0)) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if (v0 == 0) {
            v1_0 = 0;
        }
        this.mNotification.flags = (v1_0 | (this.mNotification.flags & -2));
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setNumber(int p1)
    {
        this.mNumber = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setOngoing(boolean p2)
    {
        this.setFlag(2, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setOnlyAlertOnce(boolean p2)
    {
        this.setFlag(8, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSmallIcon(int p2)
    {
        this.mNotification.icon = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSmallIcon(int p2, int p3)
    {
        this.mNotification.icon = p2;
        this.mNotification.iconLevel = p3;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri p3)
    {
        this.mNotification.sound = p3;
        this.mNotification.audioStreamType = -1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri p2, int p3)
    {
        this.mNotification.sound = p2;
        this.mNotification.audioStreamType = p3;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setTicker(CharSequence p2)
    {
        this.mNotification.tickerText = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setTicker(CharSequence p2, android.widget.RemoteViews p3)
    {
        this.mNotification.tickerText = p2;
        this.mTickerView = p3;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setVibrate(long[] p2)
    {
        this.mNotification.vibrate = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setWhen(long p2)
    {
        this.mNotification.when = p2;
        return this;
    }

    public abstract android.app.Notification getNotification();

    NotificationCompat$NotificationCompatImplBase()
    {
        return;
    }

    public android.app.Notification getNotification(android.support.v4.app.NotificationCompat$Builder p6)
    {
        android.app.Notification v0 = p6.mNotification;
        v0.setLatestEventInfo(p6.mContext, p6.mContentTitle, p6.mContentText, p6.mContentIntent);
        return v0;
    }

    NotificationCompat$NotificationCompatImplHoneycomb()
    {
        return;
    }

    public android.app.Notification getNotification(android.support.v4.app.NotificationCompat$Builder p11)
    {
        return android.support.v4.app.NotificationCompatHoneycomb.add(p11.mContext, p11.mNotification, p11.mContentTitle, p11.mContentText, p11.mContentInfo, p11.mTickerView, p11.mNumber, p11.mContentIntent, p11.mFullScreenIntent, p11.mLargeIcon);
    }

    static NotificationCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplBase();
        } else {
            android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb();
        }
        return;
    }

    public NotificationCompat()
    {
        return;
    }

    static synthetic android.support.v4.app.NotificationCompat$NotificationCompatImpl access$000()
    {
        return android.support.v4.app.NotificationCompat.IMPL;
    }

    NotificationCompatHoneycomb()
    {
        return;
    }

    static android.app.Notification add(android.content.Context p5, android.app.Notification p6, CharSequence p7, CharSequence p8, CharSequence p9, android.widget.RemoteViews p10, int p11, android.app.PendingIntent p12, android.app.PendingIntent p13, android.graphics.Bitmap p14)
    {
        android.app.Notification v1_8;
        android.app.Notification$Builder vtmp7 = new android.app.Notification$Builder(p5).setWhen(p6.when).setSmallIcon(p6.icon, p6.iconLevel).setContent(p6.contentView).setTicker(p6.tickerText, p10).setSound(p6.sound, p6.audioStreamType).setVibrate(p6.vibrate).setLights(p6.ledARGB, p6.ledOnMS, p6.ledOffMS);
        if ((p6.flags & 2) == 0) {
            v1_8 = 0;
        } else {
            v1_8 = 1;
        }
        android.app.Notification v1_11;
        android.app.Notification$Builder v2_6 = vtmp7.setOngoing(v1_8);
        if ((p6.flags & 8) == 0) {
            v1_11 = 0;
        } else {
            v1_11 = 1;
        }
        android.app.Notification v1_15;
        android.app.Notification$Builder v2_7 = v2_6.setOnlyAlertOnce(v1_11);
        if ((p6.flags & 16) == 0) {
            v1_15 = 0;
        } else {
            v1_15 = 1;
        }
        android.app.Notification v1_24;
        android.app.Notification$Builder vtmp16 = v2_7.setAutoCancel(v1_15).setDefaults(p6.defaults).setContentTitle(p7).setContentText(p8).setContentInfo(p9).setContentIntent(p12).setDeleteIntent(p6.deleteIntent);
        if ((p6.flags & 128) == 0) {
            v1_24 = 0;
        } else {
            v1_24 = 1;
        }
        return vtmp16.setFullScreenIntent(p13, v1_24).setLargeIcon(p14).getNotification();
    }

    private ServiceCompat()
    {
        return;
    }

    private ShareCompat$IntentBuilder(android.app.Activity p4)
    {
        this.mActivity = p4;
        this.mIntent = new android.content.Intent().setAction("android.intent.action.SEND");
        this.mIntent.putExtra("android.support.v4.app.EXTRA_CALLING_PACKAGE", p4.getPackageName());
        this.mIntent.putExtra("android.support.v4.app.EXTRA_CALLING_ACTIVITY", p4.getComponentName());
        this.mIntent.addFlags(524288);
        return;
    }

    private void combineArrayExtra(String p6, java.util.ArrayList p7)
    {
        int v1;
        String[] v0 = this.mIntent.getStringArrayExtra(p6);
        if (v0 == null) {
            v1 = 0;
        } else {
            v1 = v0.length;
        }
        String[] v2 = new String[(p7.size() + v1)];
        p7.toArray(v2);
        if (v0 != null) {
            System.arraycopy(v0, 0, v2, p7.size(), v1);
        }
        this.mIntent.putExtra(p6, v2);
        return;
    }

    private void combineArrayExtra(String p7, String[] p8)
    {
        int v2;
        android.content.Intent v0 = this.getIntent();
        String[] v1 = v0.getStringArrayExtra(p7);
        if (v1 == null) {
            v2 = 0;
        } else {
            v2 = v1.length;
        }
        String[] v3 = new String[(p8.length + v2)];
        if (v1 != null) {
            System.arraycopy(v1, 0, v3, 0, v2);
        }
        System.arraycopy(p8, 0, v3, v2, p8.length);
        v0.putExtra(p7, v3);
        return;
    }

    public static android.support.v4.app.ShareCompat$IntentBuilder from(android.app.Activity p1)
    {
        return new android.support.v4.app.ShareCompat$IntentBuilder(p1);
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(String p2)
    {
        if (this.mBccAddresses == null) {
            this.mBccAddresses = new java.util.ArrayList();
        }
        this.mBccAddresses.add(p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(String[] p2)
    {
        this.combineArrayExtra("android.intent.extra.BCC", p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(String p2)
    {
        if (this.mCcAddresses == null) {
            this.mCcAddresses = new java.util.ArrayList();
        }
        this.mCcAddresses.add(p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(String[] p2)
    {
        this.combineArrayExtra("android.intent.extra.CC", p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(String p2)
    {
        if (this.mToAddresses == null) {
            this.mToAddresses = new java.util.ArrayList();
        }
        this.mToAddresses.add(p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(String[] p2)
    {
        this.combineArrayExtra("android.intent.extra.EMAIL", p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addStream(android.net.Uri p4)
    {
        android.net.Uri v0_1 = ((android.net.Uri) this.mIntent.getParcelableExtra("android.intent.extra.STREAM"));
        if (v0_1 != null) {
            if (this.mStreams == null) {
                this.mStreams = new java.util.ArrayList();
            }
            if (v0_1 != null) {
                this.mIntent.removeExtra("android.intent.extra.STREAM");
                this.mStreams.add(v0_1);
            }
            this.mStreams.add(p4);
        } else {
            this = this.setStream(p4);
        }
        return this;
    }

    public android.content.Intent createChooserIntent()
    {
        return android.content.Intent.createChooser(this.getIntent(), this.mChooserTitle);
    }

    android.app.Activity getActivity()
    {
        return this.mActivity;
    }

    public android.content.Intent getIntent()
    {
        int v1 = 1;
        if (this.mToAddresses != null) {
            this.combineArrayExtra("android.intent.extra.EMAIL", this.mToAddresses);
            this.mToAddresses = 0;
        }
        if (this.mCcAddresses != null) {
            this.combineArrayExtra("android.intent.extra.CC", this.mCcAddresses);
            this.mCcAddresses = 0;
        }
        if (this.mBccAddresses != null) {
            this.combineArrayExtra("android.intent.extra.BCC", this.mBccAddresses);
            this.mBccAddresses = 0;
        }
        if ((this.mStreams == null) || (this.mStreams.size() <= 1)) {
            v1 = 0;
        }
        boolean v0 = this.mIntent.getAction().equals("android.intent.action.SEND_MULTIPLE");
        if ((v1 == 0) && (v0)) {
            this.mIntent.setAction("android.intent.action.SEND");
            if ((this.mStreams == null) || (this.mStreams.isEmpty())) {
                this.mIntent.removeExtra("android.intent.extra.STREAM");
            } else {
                this.mIntent.putExtra("android.intent.extra.STREAM", ((android.os.Parcelable) this.mStreams.get(0)));
            }
            this.mStreams = 0;
        }
        if ((v1 != 0) && (!v0)) {
            this.mIntent.setAction("android.intent.action.SEND_MULTIPLE");
            if ((this.mStreams == null) || (this.mStreams.isEmpty())) {
                this.mIntent.removeExtra("android.intent.extra.STREAM");
            } else {
                this.mIntent.putParcelableArrayListExtra("android.intent.extra.STREAM", this.mStreams);
            }
        }
        return this.mIntent;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(int p2)
    {
        return this.setChooserTitle(this.mActivity.getText(p2));
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(CharSequence p1)
    {
        this.mChooserTitle = p1;
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setEmailBcc(String[] p3)
    {
        this.mIntent.putExtra("android.intent.extra.BCC", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setEmailCc(String[] p3)
    {
        this.mIntent.putExtra("android.intent.extra.CC", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setEmailTo(String[] p3)
    {
        if (this.mToAddresses != null) {
            this.mToAddresses = 0;
        }
        this.mIntent.putExtra("android.intent.extra.EMAIL", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setStream(android.net.Uri p3)
    {
        if (!this.mIntent.getAction().equals("android.intent.action.SEND")) {
            this.mIntent.setAction("android.intent.action.SEND");
        }
        this.mStreams = 0;
        this.mIntent.putExtra("android.intent.extra.STREAM", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setSubject(String p3)
    {
        this.mIntent.putExtra("android.intent.extra.SUBJECT", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setText(CharSequence p3)
    {
        this.mIntent.putExtra("android.intent.extra.TEXT", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setType(String p2)
    {
        this.mIntent.setType(p2);
        return this;
    }

    public void startChooser()
    {
        this.mActivity.startActivity(this.createChooserIntent());
        return;
    }

    private ShareCompat$IntentReader(android.app.Activity p2)
    {
        this.mActivity = p2;
        this.mIntent = p2.getIntent();
        this.mCallingPackage = android.support.v4.app.ShareCompat.getCallingPackage(p2);
        this.mCallingActivity = android.support.v4.app.ShareCompat.getCallingActivity(p2);
        return;
    }

    public static android.support.v4.app.ShareCompat$IntentReader from(android.app.Activity p1)
    {
        return new android.support.v4.app.ShareCompat$IntentReader(p1);
    }

    public android.content.ComponentName getCallingActivity()
    {
        return this.mCallingActivity;
    }

    public android.graphics.drawable.Drawable getCallingActivityIcon()
    {
        android.graphics.drawable.Drawable v2 = 0;
        if (this.mCallingActivity != null) {
            try {
                v2 = this.mActivity.getPackageManager().getActivityIcon(this.mCallingActivity);
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("IntentReader", "Could not retrieve icon for calling activity", v0);
            }
        }
        return v2;
    }

    public android.graphics.drawable.Drawable getCallingApplicationIcon()
    {
        android.graphics.drawable.Drawable v2 = 0;
        if (this.mCallingPackage != null) {
            try {
                v2 = this.mActivity.getPackageManager().getApplicationIcon(this.mCallingPackage);
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("IntentReader", "Could not retrieve icon for calling application", v0);
            }
        }
        return v2;
    }

    public CharSequence getCallingApplicationLabel()
    {
        CharSequence v2 = 0;
        if (this.mCallingPackage != null) {
            android.content.pm.PackageManager v1 = this.mActivity.getPackageManager();
            try {
                v2 = v1.getApplicationLabel(v1.getApplicationInfo(this.mCallingPackage, 0));
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("IntentReader", "Could not retrieve label for calling application", v0);
            }
        }
        return v2;
    }

    public String getCallingPackage()
    {
        return this.mCallingPackage;
    }

    public String[] getEmailBcc()
    {
        return this.mIntent.getStringArrayExtra("android.intent.extra.BCC");
    }

    public String[] getEmailCc()
    {
        return this.mIntent.getStringArrayExtra("android.intent.extra.CC");
    }

    public String[] getEmailTo()
    {
        return this.mIntent.getStringArrayExtra("android.intent.extra.EMAIL");
    }

    public android.net.Uri getStream()
    {
        return ((android.net.Uri) this.mIntent.getParcelableExtra("android.intent.extra.STREAM"));
    }

    public android.net.Uri getStream(int p4)
    {
        if ((this.mStreams == null) && (this.isMultipleShare())) {
            this.mStreams = this.mIntent.getParcelableArrayListExtra("android.intent.extra.STREAM");
        }
        IndexOutOfBoundsException v0_7;
        if (this.mStreams == null) {
            if (p4 != 0) {
                throw new IndexOutOfBoundsException(new StringBuilder().append("Stream items available: ").append(this.getStreamCount()).append(" index requested: ").append(p4).toString());
            } else {
                v0_7 = ((android.net.Uri) this.mIntent.getParcelableExtra("android.intent.extra.STREAM"));
            }
        } else {
            v0_7 = ((android.net.Uri) this.mStreams.get(p4));
        }
        return v0_7;
    }

    public int getStreamCount()
    {
        if ((this.mStreams == null) && (this.isMultipleShare())) {
            this.mStreams = this.mIntent.getParcelableArrayListExtra("android.intent.extra.STREAM");
        }
        int v0_4;
        if (this.mStreams == null) {
            if (!this.mIntent.hasExtra("android.intent.extra.STREAM")) {
                v0_4 = 0;
            } else {
                v0_4 = 1;
            }
        } else {
            v0_4 = this.mStreams.size();
        }
        return v0_4;
    }

    public String getSubject()
    {
        return this.mIntent.getStringExtra("android.intent.extra.SUBJECT");
    }

    public CharSequence getText()
    {
        return this.mIntent.getCharSequenceExtra("android.intent.extra.TEXT");
    }

    public String getType()
    {
        return this.mIntent.getType();
    }

    public boolean isMultipleShare()
    {
        return this.mIntent.getAction().equals("android.intent.action.SEND_MULTIPLE");
    }

    public boolean isShareIntent()
    {
        int v1_1;
        String v0 = this.mIntent.getAction();
        if ((!v0.equals("android.intent.action.SEND")) && (!v0.equals("android.intent.action.SEND_MULTIPLE"))) {
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        return v1_1;
    }

    public boolean isSingleShare()
    {
        return this.mIntent.getAction().equals("android.intent.action.SEND");
    }

    public abstract void configureMenuItem();

    ShareCompat$ShareCompatImplBase()
    {
        return;
    }

    public void configureMenuItem(android.view.MenuItem p2, android.support.v4.app.ShareCompat$IntentBuilder p3)
    {
        p2.setIntent(p3.createChooserIntent());
        return;
    }

    ShareCompat$ShareCompatImplICS()
    {
        return;
    }

    public void configureMenuItem(android.view.MenuItem p3, android.support.v4.app.ShareCompat$IntentBuilder p4)
    {
        android.support.v4.app.ShareCompatICS.configureMenuItem(p3, p4.getActivity(), p4.getIntent());
        return;
    }

    static ShareCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.app.ShareCompat.IMPL = new android.support.v4.app.ShareCompat$ShareCompatImplBase();
        } else {
            android.support.v4.app.ShareCompat.IMPL = new android.support.v4.app.ShareCompat$ShareCompatImplICS();
        }
        return;
    }

    public ShareCompat()
    {
        return;
    }

    public static void configureMenuItem(android.view.Menu p4, int p5, android.support.v4.app.ShareCompat$IntentBuilder p6)
    {
        android.view.MenuItem v0 = p4.findItem(p5);
        if (v0 != null) {
            android.support.v4.app.ShareCompat.configureMenuItem(v0, p6);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Could not find menu item with id ").append(p5).append(" in the supplied menu").toString());
        }
    }

    public static void configureMenuItem(android.view.MenuItem p1, android.support.v4.app.ShareCompat$IntentBuilder p2)
    {
        android.support.v4.app.ShareCompat.IMPL.configureMenuItem(p1, p2);
        return;
    }

    public static android.content.ComponentName getCallingActivity(android.app.Activity p3)
    {
        android.content.ComponentName v0_0 = p3.getCallingActivity();
        if (v0_0 == null) {
            v0_0 = ((android.content.ComponentName) p3.getIntent().getParcelableExtra("android.support.v4.app.EXTRA_CALLING_ACTIVITY"));
        }
        return v0_0;
    }

    public static String getCallingPackage(android.app.Activity p3)
    {
        String v0 = p3.getCallingPackage();
        if (v0 == null) {
            v0 = p3.getIntent().getStringExtra("android.support.v4.app.EXTRA_CALLING_PACKAGE");
        }
        return v0;
    }

    ShareCompatICS()
    {
        return;
    }

    public static void configureMenuItem(android.view.MenuItem p4, android.app.Activity p5, android.content.Intent p6)
    {
        android.widget.ShareActionProvider v1_1;
        android.view.ActionProvider v0 = p4.getActionProvider();
        if ((v0 instanceof android.widget.ShareActionProvider)) {
            v1_1 = ((android.widget.ShareActionProvider) v0);
        } else {
            v1_1 = new android.widget.ShareActionProvider(p5);
        }
        v1_1.setShareHistoryFileName(new StringBuilder().append(".sharecompat_").append(p5.getClass().getName()).toString());
        v1_1.setShareIntent(p6);
        p4.setActionProvider(v1_1);
        return;
    }

    public SuperNotCalledException(String p1)
    {
        super(p1);
        return;
    }

    public abstract android.app.PendingIntent getPendingIntent();

    TaskStackBuilder$TaskStackBuilderImplBase()
    {
        return;
    }

    public android.app.PendingIntent getPendingIntent(android.content.Context p3, android.content.Intent[] p4, int p5, int p6)
    {
        android.content.Intent v0 = p4[(p4.length - 1)];
        v0.addFlags(268435456);
        return android.app.PendingIntent.getActivity(p3, p5, v0, p6);
    }

    TaskStackBuilder$TaskStackBuilderImplHoneycomb()
    {
        return;
    }

    public android.app.PendingIntent getPendingIntent(android.content.Context p3, android.content.Intent[] p4, int p5, int p6)
    {
        p4[0].addFlags(268468224);
        return android.support.v4.app.TaskStackBuilderHoneycomb.getActivitiesPendingIntent(p3, p5, p4, p6);
    }

    static TaskStackBuilder()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.app.TaskStackBuilder.IMPL = new android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase();
        } else {
            android.support.v4.app.TaskStackBuilder.IMPL = new android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb();
        }
        return;
    }

    private TaskStackBuilder(android.content.Context p2)
    {
        this.mIntents = new java.util.ArrayList();
        this.mSourceContext = p2;
        return;
    }

    public static android.support.v4.app.TaskStackBuilder from(android.content.Context p1)
    {
        return new android.support.v4.app.TaskStackBuilder(p1);
    }

    public android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent p2)
    {
        this.mIntents.add(p2);
        return this;
    }

    public android.support.v4.app.TaskStackBuilder addParentStack(android.app.Activity p6)
    {
        int v1 = this.mIntents.size();
        android.content.Intent v2 = android.support.v4.app.NavUtils.getParentActivityIntent(p6);
        while (v2 != null) {
            this.mIntents.add(v1, v2);
            try {
                v2 = android.support.v4.app.NavUtils.getParentActivityIntent(p6, v2.getComponent());
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("TaskStackBuilder", "Bad ComponentName while traversing activity parent metadata");
                throw new IllegalArgumentException(v0);
            }
        }
        return this;
    }

    public android.support.v4.app.TaskStackBuilder addParentStack(Class p6)
    {
        int v1 = this.mIntents.size();
        try {
            android.content.Intent v2 = android.support.v4.app.NavUtils.getParentActivityIntent(this.mSourceContext, p6);
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            android.util.Log.e("TaskStackBuilder", "Bad ComponentName while traversing activity parent metadata");
            throw new IllegalArgumentException(v0);
        }
        while (v2 != null) {
            this.mIntents.add(v1, v2);
            v2 = android.support.v4.app.NavUtils.getParentActivityIntent(this.mSourceContext, v2.getComponent());
        }
        return this;
    }

    public android.content.Intent getIntent(int p2)
    {
        return ((android.content.Intent) this.mIntents.get(p2));
    }

    public int getIntentCount()
    {
        return this.mIntents.size();
    }

    public android.app.PendingIntent getPendingIntent(int p4, int p5)
    {
        android.content.Context v2_2 = new android.content.Intent[this.mIntents.size()];
        return android.support.v4.app.TaskStackBuilder.IMPL.getPendingIntent(this.mSourceContext, ((android.content.Intent[]) this.mIntents.toArray(v2_2)), p4, p5);
    }

    public java.util.Iterator iterator()
    {
        return this.mIntents.iterator();
    }

    public void startActivities()
    {
        if (!this.mIntents.isEmpty()) {
            int v3_4 = new android.content.Intent[this.mIntents.size()];
            android.content.Intent[] v0_1 = ((android.content.Intent[]) this.mIntents.toArray(v3_4));
            v0_1[0].addFlags(268484608);
            if (!android.support.v4.app.ActivityCompat.startActivities(((android.app.Activity) this.mSourceContext), v0_1)) {
                android.content.Intent v1 = v0_1[(v0_1.length - 1)];
                v1.addFlags(268435456);
                this.mSourceContext.startActivity(v1);
            }
            return;
        } else {
            throw new IllegalStateException("No intents added to TaskStackBuilder; cannot startActivities");
        }
    }

    public TaskStackBuilderHoneycomb()
    {
        return;
    }

    public static android.app.PendingIntent getActivitiesPendingIntent(android.content.Context p1, int p2, android.content.Intent[] p3, int p4)
    {
        return android.app.PendingIntent.getActivities(p1, p2, p3, p4);
    }

    public abstract void onCreateOptionsMenu();

    public abstract boolean onOptionsItemSelected();

    public abstract void onPrepareOptionsMenu();

    public abstract boolean onCreatePanelMenu();

    public abstract boolean onPreparePanel();

    public abstract boolean onMenuItemSelected();

    public _ActionBarSherlockTrojanHorse()
    {
        return;
    }

    public abstract com.actionbarsherlock.view.MenuInflater getSupportMenuInflater();

    public abstract boolean onCreateOptionsMenu();

    public boolean onCreatePanelMenu(int p8, com.actionbarsherlock.view.Menu p9)
    {
        int v4_0;
        if (p8 != 0) {
            v4_0 = 0;
        } else {
            int v4_1 = this.onCreateOptionsMenu(p9);
            com.actionbarsherlock.view.MenuInflater v2 = this.getSupportMenuInflater();
            int v5 = 0;
            java.util.ArrayList v3_1 = 0;
            if (this.mFragments.mActive != null) {
                int v1_0 = 0;
                while (v1_0 < this.mFragments.mAdded.size()) {
                    android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mFragments.mAdded.get(v1_0));
                    if ((v0_1 != null) && ((!v0_1.mHidden) && ((v0_1.mHasMenu) && ((v0_1.mMenuVisible) && ((v0_1 instanceof android.support.v4.app._ActionBarSherlockTrojanHorse$OnCreateOptionsMenuListener)))))) {
                        v5 = 1;
                        ((android.support.v4.app._ActionBarSherlockTrojanHorse$OnCreateOptionsMenuListener) v0_1).onCreateOptionsMenu(p9, v2);
                        if (v3_1 == null) {
                            v3_1 = new java.util.ArrayList();
                        }
                        v3_1.add(v0_1);
                    }
                    v1_0++;
                }
            }
            if (this.mCreatedMenus != null) {
                int v1_1 = 0;
                while (v1_1 < this.mCreatedMenus.size()) {
                    android.support.v4.app.Fragment v0_3 = ((android.support.v4.app.Fragment) this.mCreatedMenus.get(v1_1));
                    if ((v3_1 == null) || (!v3_1.contains(v0_3))) {
                        v0_3.onDestroyOptionsMenu();
                    }
                    v1_1++;
                }
            }
            this.mCreatedMenus = v3_1;
            v4_0 = (v4_1 | v5);
        }
        return v4_0;
    }

    public boolean onMenuItemSelected(int p5, com.actionbarsherlock.view.MenuItem p6)
    {
        int v2 = 1;
        if (p5 != 0) {
            v2 = 0;
        } else {
            if (!this.onOptionsItemSelected(p6)) {
                if (this.mFragments.mActive == null) {
                } else {
                    int v1 = 0;
                    while (v1 < this.mFragments.mAdded.size()) {
                        android.support.v4.app._ActionBarSherlockTrojanHorse$OnOptionsItemSelectedListener v0_1 = ((android.support.v4.app.Fragment) this.mFragments.mAdded.get(v1));
                        if ((v0_1 == null) || ((v0_1.mHidden) || ((!v0_1.mHasMenu) || ((!v0_1.mMenuVisible) || ((!(v0_1 instanceof android.support.v4.app._ActionBarSherlockTrojanHorse$OnOptionsItemSelectedListener)) || (!((android.support.v4.app._ActionBarSherlockTrojanHorse$OnOptionsItemSelectedListener) v0_1).onOptionsItemSelected(p6))))))) {
                            v1++;
                        }
                    }
                }
            }
        }
        return v2;
    }

    public abstract boolean onOptionsItemSelected();

    public abstract boolean onPrepareOptionsMenu();

    public boolean onPreparePanel(int p6, android.view.View p7, com.actionbarsherlock.view.Menu p8)
    {
        int v2_0;
        if (p6 != 0) {
            v2_0 = 0;
        } else {
            int v2_1 = this.onPrepareOptionsMenu(p8);
            int v3 = 0;
            if (this.mFragments.mActive != null) {
                int v1 = 0;
                while (v1 < this.mFragments.mAdded.size()) {
                    android.support.v4.app._ActionBarSherlockTrojanHorse$OnPrepareOptionsMenuListener v0_1 = ((android.support.v4.app.Fragment) this.mFragments.mAdded.get(v1));
                    if ((v0_1 != null) && ((!v0_1.mHidden) && ((v0_1.mHasMenu) && ((v0_1.mMenuVisible) && ((v0_1 instanceof android.support.v4.app._ActionBarSherlockTrojanHorse$OnPrepareOptionsMenuListener)))))) {
                        v3 = 1;
                        ((android.support.v4.app._ActionBarSherlockTrojanHorse$OnPrepareOptionsMenuListener) v0_1).onPrepareOptionsMenu(p8);
                    }
                    v1++;
                }
            }
            v2_0 = ((v2_1 | v3) & p8.hasVisibleItems());
        }
        return v2_0;
    }

    static ModernAsyncTask()
    {
        android.support.v4.content.ModernAsyncTask.sThreadFactory = new android.support.v4.content.ModernAsyncTask$1();
        android.support.v4.content.ModernAsyncTask.sPoolWorkQueue = new java.util.concurrent.LinkedBlockingQueue(10);
        android.support.v4.content.ModernAsyncTask.THREAD_POOL_EXECUTOR = new java.util.concurrent.ThreadPoolExecutor(5, 128, 1, java.util.concurrent.TimeUnit.SECONDS, android.support.v4.content.ModernAsyncTask.sPoolWorkQueue, android.support.v4.content.ModernAsyncTask.sThreadFactory);
        android.support.v4.content.ModernAsyncTask.sHandler = new android.support.v4.content.ModernAsyncTask$InternalHandler(0);
        android.support.v4.content.ModernAsyncTask.sDefaultExecutor = android.support.v4.content.ModernAsyncTask.THREAD_POOL_EXECUTOR;
        return;
    }

    public ModernAsyncTask()
    {
        this.mStatus = android.support.v4.content.ModernAsyncTask$Status.PENDING;
        this.mTaskInvoked = new java.util.concurrent.atomic.AtomicBoolean();
        this.mWorker = new android.support.v4.content.ModernAsyncTask$2(this);
        this.mFuture = new android.support.v4.content.ModernAsyncTask$3(this, this.mWorker);
        return;
    }

    static synthetic java.util.concurrent.atomic.AtomicBoolean access$200(android.support.v4.content.ModernAsyncTask p1)
    {
        return p1.mTaskInvoked;
    }

    static synthetic Object access$300(android.support.v4.content.ModernAsyncTask p1, Object p2)
    {
        return p1.postResult(p2);
    }

    static synthetic void access$400(android.support.v4.content.ModernAsyncTask p0, Object p1)
    {
        p0.postResultIfNotInvoked(p1);
        return;
    }

    static synthetic void access$500(android.support.v4.content.ModernAsyncTask p0, Object p1)
    {
        p0.finish(p1);
        return;
    }

    public static void execute(Runnable p1)
    {
        android.support.v4.content.ModernAsyncTask.sDefaultExecutor.execute(p1);
        return;
    }

    private void finish(Object p2)
    {
        if (!this.isCancelled()) {
            this.onPostExecute(p2);
        } else {
            this.onCancelled(p2);
        }
        this.mStatus = android.support.v4.content.ModernAsyncTask$Status.FINISHED;
        return;
    }

    public static void init()
    {
        android.support.v4.content.ModernAsyncTask.sHandler.getLooper();
        return;
    }

    private Object postResult(Object p7)
    {
        Object[] v3 = new Object[1];
        v3[0] = p7;
        android.support.v4.content.ModernAsyncTask.sHandler.obtainMessage(1, new android.support.v4.content.ModernAsyncTask$AsyncTaskResult(this, v3)).sendToTarget();
        return p7;
    }

    private void postResultIfNotInvoked(Object p3)
    {
        if (!this.mTaskInvoked.get()) {
            this.postResult(p3);
        }
        return;
    }

    public static void setDefaultExecutor(java.util.concurrent.Executor p0)
    {
        android.support.v4.content.ModernAsyncTask.sDefaultExecutor = p0;
        return;
    }

    public final boolean cancel(boolean p2)
    {
        return this.mFuture.cancel(p2);
    }

    protected abstract varargs Object doInBackground();

    public final varargs android.support.v4.content.ModernAsyncTask execute(Object[] p2)
    {
        return this.executeOnExecutor(android.support.v4.content.ModernAsyncTask.sDefaultExecutor, p2);
    }

    public final varargs android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor p3, Object[] p4)
    {
        if (this.mStatus != android.support.v4.content.ModernAsyncTask$Status.PENDING) {
            switch (android.support.v4.content.ModernAsyncTask$4.$SwitchMap$android$support$v4$content$ModernAsyncTask$Status[this.mStatus.ordinal()]) {
                case 1:
                    throw new IllegalStateException("Cannot execute task: the task is already running.");
                    break;
                case 2:
                    throw new IllegalStateException("Cannot execute task: the task has already been executed (a task can be executed only once)");
                    break;
            }
        }
        this.mStatus = android.support.v4.content.ModernAsyncTask$Status.RUNNING;
        this.onPreExecute();
        this.mWorker.mParams = p4;
        p3.execute(this.mFuture);
        return this;
    }

    public final Object get()
    {
        return this.mFuture.get();
    }

    public final Object get(long p2, java.util.concurrent.TimeUnit p4)
    {
        return this.mFuture.get(p2, p4);
    }

    public final android.support.v4.content.ModernAsyncTask$Status getStatus()
    {
        return this.mStatus;
    }

    public final boolean isCancelled()
    {
        return this.mFuture.isCancelled();
    }

    protected void onCancelled()
    {
        return;
    }

    protected void onCancelled(Object p1)
    {
        this.onCancelled();
        return;
    }

    protected void onPostExecute(Object p1)
    {
        return;
    }

    protected void onPreExecute()
    {
        return;
    }

    protected varargs void onProgressUpdate(Object[] p1)
    {
        return;
    }

    protected final varargs void publishProgress(Object[] p4)
    {
        if (!this.isCancelled()) {
            android.support.v4.content.ModernAsyncTask.sHandler.obtainMessage(2, new android.support.v4.content.ModernAsyncTask$AsyncTaskResult(this, p4)).sendToTarget();
        }
        return;
    }

    AsyncTaskLoader$LoadTask(android.support.v4.content.AsyncTaskLoader p3)
    {
        this.this$0 = p3;
        this.done = new java.util.concurrent.CountDownLatch(1);
        return;
    }

    static synthetic java.util.concurrent.CountDownLatch access$000(android.support.v4.content.AsyncTaskLoader$LoadTask p1)
    {
        return p1.done;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs Object doInBackground(Void[] p2)
    {
        this.result = this.this$0.onLoadInBackground();
        return this.result;
    }

    protected void onCancelled()
    {
        try {
            this.this$0.dispatchOnCancelled(this, this.result);
            this.done.countDown();
            return;
        } catch (Throwable v0_2) {
            this.done.countDown();
            throw v0_2;
        }
    }

    protected void onPostExecute(Object p3)
    {
        try {
            this.this$0.dispatchOnLoadComplete(this, p3);
            this.done.countDown();
            return;
        } catch (Throwable v0_2) {
            this.done.countDown();
            throw v0_2;
        }
    }

    public void run()
    {
        this.waiting = 0;
        this.this$0.executePendingTask();
        return;
    }

    public Loader(android.content.Context p3)
    {
        this.mStarted = 0;
        this.mAbandoned = 0;
        this.mReset = 1;
        this.mContentChanged = 0;
        this.mContext = p3.getApplicationContext();
        return;
    }

    public void abandon()
    {
        this.mAbandoned = 1;
        this.onAbandon();
        return;
    }

    public String dataToString(Object p3)
    {
        StringBuilder v0_1 = new StringBuilder(64);
        android.support.v4.util.DebugUtils.buildShortClassTag(p3, v0_1);
        v0_1.append("}");
        return v0_1.toString();
    }

    public void deliverResult(Object p2)
    {
        if (this.mListener != null) {
            this.mListener.onLoadComplete(this, p2);
        }
        return;
    }

    public void dump(String p2, java.io.FileDescriptor p3, java.io.PrintWriter p4, String[] p5)
    {
        p4.print(p2);
        p4.print("mId=");
        p4.print(this.mId);
        p4.print(" mListener=");
        p4.println(this.mListener);
        p4.print(p2);
        p4.print("mStarted=");
        p4.print(this.mStarted);
        p4.print(" mContentChanged=");
        p4.print(this.mContentChanged);
        p4.print(" mAbandoned=");
        p4.print(this.mAbandoned);
        p4.print(" mReset=");
        p4.println(this.mReset);
        return;
    }

    public void forceLoad()
    {
        this.onForceLoad();
        return;
    }

    public android.content.Context getContext()
    {
        return this.mContext;
    }

    public int getId()
    {
        return this.mId;
    }

    public boolean isAbandoned()
    {
        return this.mAbandoned;
    }

    public boolean isReset()
    {
        return this.mReset;
    }

    public boolean isStarted()
    {
        return this.mStarted;
    }

    protected void onAbandon()
    {
        return;
    }

    public void onContentChanged()
    {
        if (!this.mStarted) {
            this.mContentChanged = 1;
        } else {
            this.forceLoad();
        }
        return;
    }

    protected void onForceLoad()
    {
        return;
    }

    protected void onReset()
    {
        return;
    }

    protected void onStartLoading()
    {
        return;
    }

    protected void onStopLoading()
    {
        return;
    }

    public void registerListener(int p3, android.support.v4.content.Loader$OnLoadCompleteListener p4)
    {
        if (this.mListener == null) {
            this.mListener = p4;
            this.mId = p3;
            return;
        } else {
            throw new IllegalStateException("There is already a listener registered");
        }
    }

    public void reset()
    {
        this.onReset();
        this.mReset = 1;
        this.mStarted = 0;
        this.mAbandoned = 0;
        this.mContentChanged = 0;
        return;
    }

    public final void startLoading()
    {
        this.mStarted = 1;
        this.mReset = 0;
        this.mAbandoned = 0;
        this.onStartLoading();
        return;
    }

    public void stopLoading()
    {
        this.mStarted = 0;
        this.onStopLoading();
        return;
    }

    public boolean takeContentChanged()
    {
        boolean v0 = this.mContentChanged;
        this.mContentChanged = 0;
        return v0;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(64);
        android.support.v4.util.DebugUtils.buildShortClassTag(this, v0_1);
        v0_1.append(" id=");
        v0_1.append(this.mId);
        v0_1.append("}");
        return v0_1.toString();
    }

    public void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener p3)
    {
        if (this.mListener != null) {
            if (this.mListener == p3) {
                this.mListener = 0;
                return;
            } else {
                throw new IllegalArgumentException("Attempting to unregister the wrong listener");
            }
        } else {
            throw new IllegalStateException("No listener register");
        }
    }

    public AsyncTaskLoader(android.content.Context p3)
    {
        super(p3);
        super.mLastLoadCompleteTime = -10000;
        return;
    }

    public boolean cancelLoad()
    {
        boolean v0 = 0;
        if (this.mTask != null) {
            if (this.mCancellingTask == null) {
                if (!this.mTask.waiting) {
                    v0 = this.mTask.cancel(0);
                    if (v0) {
                        this.mCancellingTask = this.mTask;
                    }
                    this.mTask = 0;
                } else {
                    this.mTask.waiting = 0;
                    this.mHandler.removeCallbacks(this.mTask);
                    this.mTask = 0;
                }
            } else {
                if (this.mTask.waiting) {
                    this.mTask.waiting = 0;
                    this.mHandler.removeCallbacks(this.mTask);
                }
                this.mTask = 0;
            }
        }
        return v0;
    }

    void dispatchOnCancelled(android.support.v4.content.AsyncTaskLoader$LoadTask p3, Object p4)
    {
        this.onCanceled(p4);
        if (this.mCancellingTask == p3) {
            this.mLastLoadCompleteTime = android.os.SystemClock.uptimeMillis();
            this.mCancellingTask = 0;
            this.executePendingTask();
        }
        return;
    }

    void dispatchOnLoadComplete(android.support.v4.content.AsyncTaskLoader$LoadTask p3, Object p4)
    {
        if (this.mTask == p3) {
            if (!this.isAbandoned()) {
                this.mLastLoadCompleteTime = android.os.SystemClock.uptimeMillis();
                this.mTask = 0;
                this.deliverResult(p4);
            } else {
                this.onCanceled(p4);
            }
        } else {
            this.dispatchOnCancelled(p3, p4);
        }
        return;
    }

    public void dump(String p5, java.io.FileDescriptor p6, java.io.PrintWriter p7, String[] p8)
    {
        super.dump(p5, p6, p7, p8);
        if (this.mTask != null) {
            p7.print(p5);
            p7.print("mTask=");
            p7.print(this.mTask);
            p7.print(" waiting=");
            p7.println(this.mTask.waiting);
        }
        if (this.mCancellingTask != null) {
            p7.print(p5);
            p7.print("mCancellingTask=");
            p7.print(this.mCancellingTask);
            p7.print(" waiting=");
            p7.println(this.mCancellingTask.waiting);
        }
        if (this.mUpdateThrottle != 0) {
            p7.print(p5);
            p7.print("mUpdateThrottle=");
            android.support.v4.util.TimeUtils.formatDuration(this.mUpdateThrottle, p7);
            p7.print(" mLastLoadCompleteTime=");
            android.support.v4.util.TimeUtils.formatDuration(this.mLastLoadCompleteTime, android.os.SystemClock.uptimeMillis(), p7);
            p7.println();
        }
        return;
    }

    void executePendingTask()
    {
        if ((this.mCancellingTask == null) && (this.mTask != null)) {
            if (this.mTask.waiting) {
                this.mTask.waiting = 0;
                this.mHandler.removeCallbacks(this.mTask);
            }
            if ((this.mUpdateThrottle <= 0) || (android.os.SystemClock.uptimeMillis() >= (this.mLastLoadCompleteTime + this.mUpdateThrottle))) {
                this.mTask.executeOnExecutor(android.support.v4.content.ModernAsyncTask.THREAD_POOL_EXECUTOR, ((Void[]) 0));
            } else {
                this.mTask.waiting = 1;
                this.mHandler.postAtTime(this.mTask, (this.mLastLoadCompleteTime + this.mUpdateThrottle));
            }
        }
        return;
    }

    public abstract Object loadInBackground();

    public void onCanceled(Object p1)
    {
        return;
    }

    protected void onForceLoad()
    {
        super.onForceLoad();
        this.cancelLoad();
        this.mTask = new android.support.v4.content.AsyncTaskLoader$LoadTask(this);
        this.executePendingTask();
        return;
    }

    protected Object onLoadInBackground()
    {
        return this.loadInBackground();
    }

    public void setUpdateThrottle(long p3)
    {
        this.mUpdateThrottle = p3;
        if (p3 != 0) {
            this.mHandler = new android.os.Handler();
        }
        return;
    }

    public void waitForLoader()
    {
        android.support.v4.content.AsyncTaskLoader$LoadTask v0 = this.mTask;
        if (v0 != null) {
            try {
                android.support.v4.content.AsyncTaskLoader$LoadTask.access$000(v0).await();
            } catch (InterruptedException v1) {
            }
        }
        return;
    }

    public CursorLoader(android.content.Context p2)
    {
        super(p2);
        super.mObserver = new android.support.v4.content.Loader$ForceLoadContentObserver(super);
        return;
    }

    public CursorLoader(android.content.Context p2, android.net.Uri p3, String[] p4, String p5, String[] p6, String p7)
    {
        super(p2);
        super.mObserver = new android.support.v4.content.Loader$ForceLoadContentObserver(super);
        super.mUri = p3;
        super.mProjection = p4;
        super.mSelection = p5;
        super.mSelectionArgs = p6;
        super.mSortOrder = p7;
        return;
    }

    public void deliverResult(android.database.Cursor p3)
    {
        if (!this.isReset()) {
            android.database.Cursor v0 = this.mCursor;
            this.mCursor = p3;
            if (this.isStarted()) {
                super.deliverResult(p3);
            }
            if ((v0 != null) && ((v0 != p3) && (!v0.isClosed()))) {
                v0.close();
            }
        } else {
            if (p3 != null) {
                p3.close();
            }
        }
        return;
    }

    public bridge synthetic void deliverResult(Object p1)
    {
        this.deliverResult(((android.database.Cursor) p1));
        return;
    }

    public void dump(String p2, java.io.FileDescriptor p3, java.io.PrintWriter p4, String[] p5)
    {
        super.dump(p2, p3, p4, p5);
        p4.print(p2);
        p4.print("mUri=");
        p4.println(this.mUri);
        p4.print(p2);
        p4.print("mProjection=");
        p4.println(java.util.Arrays.toString(this.mProjection));
        p4.print(p2);
        p4.print("mSelection=");
        p4.println(this.mSelection);
        p4.print(p2);
        p4.print("mSelectionArgs=");
        p4.println(java.util.Arrays.toString(this.mSelectionArgs));
        p4.print(p2);
        p4.print("mSortOrder=");
        p4.println(this.mSortOrder);
        p4.print(p2);
        p4.print("mCursor=");
        p4.println(this.mCursor);
        p4.print(p2);
        p4.print("mContentChanged=");
        p4.println(this.mContentChanged);
        return;
    }

    public String[] getProjection()
    {
        return this.mProjection;
    }

    public String getSelection()
    {
        return this.mSelection;
    }

    public String[] getSelectionArgs()
    {
        return this.mSelectionArgs;
    }

    public String getSortOrder()
    {
        return this.mSortOrder;
    }

    public android.net.Uri getUri()
    {
        return this.mUri;
    }

    public android.database.Cursor loadInBackground()
    {
        android.database.Cursor v6 = this.getContext().getContentResolver().query(this.mUri, this.mProjection, this.mSelection, this.mSelectionArgs, this.mSortOrder);
        if (v6 != null) {
            v6.getCount();
            this.registerContentObserver(v6, this.mObserver);
        }
        return v6;
    }

    public bridge synthetic Object loadInBackground()
    {
        return this.loadInBackground();
    }

    public void onCanceled(android.database.Cursor p2)
    {
        if ((p2 != null) && (!p2.isClosed())) {
            p2.close();
        }
        return;
    }

    public bridge synthetic void onCanceled(Object p1)
    {
        this.onCanceled(((android.database.Cursor) p1));
        return;
    }

    protected void onReset()
    {
        super.onReset();
        this.onStopLoading();
        if ((this.mCursor != null) && (!this.mCursor.isClosed())) {
            this.mCursor.close();
        }
        this.mCursor = 0;
        return;
    }

    protected void onStartLoading()
    {
        if (this.mCursor != null) {
            this.deliverResult(this.mCursor);
        }
        if ((this.takeContentChanged()) || (this.mCursor == null)) {
            this.forceLoad();
        }
        return;
    }

    protected void onStopLoading()
    {
        this.cancelLoad();
        return;
    }

    void registerContentObserver(android.database.Cursor p2, android.database.ContentObserver p3)
    {
        p2.registerContentObserver(this.mObserver);
        return;
    }

    public void setProjection(String[] p1)
    {
        this.mProjection = p1;
        return;
    }

    public void setSelection(String p1)
    {
        this.mSelection = p1;
        return;
    }

    public void setSelectionArgs(String[] p1)
    {
        this.mSelectionArgs = p1;
        return;
    }

    public void setSortOrder(String p1)
    {
        this.mSortOrder = p1;
        return;
    }

    public void setUri(android.net.Uri p1)
    {
        this.mUri = p1;
        return;
    }

    private IntentCompat()
    {
        return;
    }

    public Loader$ForceLoadContentObserver(android.support.v4.content.Loader p2)
    {
        this.this$0 = p2;
        super(new android.os.Handler());
        return;
    }

    public boolean deliverSelfNotifications()
    {
        return 1;
    }

    public void onChange(boolean p2)
    {
        this.this$0.onContentChanged();
        return;
    }

    LocalBroadcastManager$1(android.support.v4.content.LocalBroadcastManager p1, android.os.Looper p2)
    {
        this.this$0 = p1;
        super(p2);
        return;
    }

    public void handleMessage(android.os.Message p2)
    {
        switch (p2.what) {
            case 1:
                android.support.v4.content.LocalBroadcastManager.access$000(this.this$0);
                break;
            default:
                super.handleMessage(p2);
        }
        return;
    }

    LocalBroadcastManager$BroadcastRecord(android.content.Intent p1, java.util.ArrayList p2)
    {
        this.intent = p1;
        this.receivers = p2;
        return;
    }

    LocalBroadcastManager$ReceiverRecord(android.content.IntentFilter p1, android.content.BroadcastReceiver p2)
    {
        this.filter = p1;
        this.receiver = p2;
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        v0_1.append("Receiver{");
        v0_1.append(this.receiver);
        v0_1.append(" filter=");
        v0_1.append(this.filter);
        v0_1.append("}");
        return v0_1.toString();
    }

    static LocalBroadcastManager()
    {
        android.support.v4.content.LocalBroadcastManager.mLock = new Object();
        return;
    }

    private LocalBroadcastManager(android.content.Context p3)
    {
        this.mReceivers = new java.util.HashMap();
        this.mActions = new java.util.HashMap();
        this.mPendingBroadcasts = new java.util.ArrayList();
        this.mAppContext = p3;
        this.mHandler = new android.support.v4.content.LocalBroadcastManager$1(this, p3.getMainLooper());
        return;
    }

    static synthetic void access$000(android.support.v4.content.LocalBroadcastManager p0)
    {
        p0.executePendingBroadcasts();
        return;
    }

    private void executePendingBroadcasts()
    {
        while(true) {
            android.content.Context v6 = this.mReceivers;
            int v0 = this.mPendingBroadcasts.size();
            if (v0 <= 0) {
                break;
            }
            android.support.v4.content.LocalBroadcastManager$BroadcastRecord[] v2 = new android.support.v4.content.LocalBroadcastManager$BroadcastRecord[v0];
            this.mPendingBroadcasts.toArray(v2);
            this.mPendingBroadcasts.clear();
            int v3 = 0;
            while (v3 < v2.length) {
                android.support.v4.content.LocalBroadcastManager$BroadcastRecord v1 = v2[v3];
                int v4 = 0;
                while (v4 < v1.receivers.size()) {
                    ((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v1.receivers.get(v4)).receiver.onReceive(this.mAppContext, v1.intent);
                    v4++;
                }
                v3++;
            }
        }
        return;
    }

    public static android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context p3)
    {
        try {
            if (android.support.v4.content.LocalBroadcastManager.mInstance == null) {
                android.support.v4.content.LocalBroadcastManager.mInstance = new android.support.v4.content.LocalBroadcastManager(p3.getApplicationContext());
            }
        } catch (android.support.v4.content.LocalBroadcastManager v0_1) {
            throw v0_1;
        }
        return android.support.v4.content.LocalBroadcastManager.mInstance;
    }

    public void registerReceiver(android.content.BroadcastReceiver p8, android.content.IntentFilter p9)
    {
        try {
            android.support.v4.content.LocalBroadcastManager$ReceiverRecord v2_1 = new android.support.v4.content.LocalBroadcastManager$ReceiverRecord(p9, p8);
            java.util.ArrayList v3_0 = ((java.util.ArrayList) this.mReceivers.get(p8));
        } catch (java.util.HashMap v5_6) {
            throw v5_6;
        }
        if (v3_0 == null) {
            v3_0 = new java.util.ArrayList(1);
            this.mReceivers.put(p8, v3_0);
        }
        v3_0.add(p9);
        int v4 = 0;
        while (v4 < p9.countActions()) {
            String v0 = p9.getAction(v4);
            java.util.ArrayList v1_1 = ((java.util.ArrayList) this.mActions.get(v0));
            if (v1_1 == null) {
                v1_1 = new java.util.ArrayList(1);
                this.mActions.put(v0, v1_1);
            }
            v1_1.add(v2_1);
            v4++;
        }
        return;
    }

    public boolean sendBroadcast(android.content.Intent p18)
    {
        try {
            int v8;
            String v2 = p18.getAction();
            String v3 = p18.resolveTypeIfNeeded(this.mAppContext.getContentResolver());
            android.net.Uri v5 = p18.getData();
            String v4 = p18.getScheme();
            java.util.Set v6 = p18.getCategories();
        } catch (String v1_9) {
            throw v1_9;
        }
        if ((p18.getFlags() & 8) == 0) {
            v8 = 0;
        } else {
            v8 = 1;
        }
        if (v8 != 0) {
            android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("Resolving type ").append(v3).append(" scheme ").append(v4).append(" of intent ").append(p18).toString());
        }
        String v1_18;
        java.util.ArrayList v9_1 = ((java.util.ArrayList) this.mActions.get(p18.getAction()));
        if (v9_1 == null) {
            v1_18 = 0;
        } else {
            if (v8 != 0) {
                android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("Action list: ").append(v9_1).toString());
            }
            java.util.ArrayList v14_1 = 0;
            int v10_1 = 0;
            while (v10_1 < v9_1.size()) {
                android.support.v4.content.LocalBroadcastManager$ReceiverRecord v13_1 = ((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v9_1.get(v10_1));
                if (v8 != 0) {
                    android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("Matching against filter ").append(v13_1.filter).toString());
                }
                if (!v13_1.broadcasting) {
                    int v11 = v13_1.filter.match(v2, v3, v4, v5, v6, "LocalBroadcastManager");
                    if (v11 < 0) {
                        if (v8 != 0) {
                            String v12;
                            switch (v11) {
                                case -4:
                                    v12 = "category";
                                    break;
                                case -3:
                                    v12 = "action";
                                    break;
                                case -2:
                                    v12 = "data";
                                    break;
                                case -1:
                                    v12 = "type";
                                    break;
                                default:
                                    v12 = "unknown reason";
                            }
                            android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("  Filter did not match: ").append(v12).toString());
                        }
                    } else {
                        if (v8 != 0) {
                            android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("  Filter matched!  match=0x").append(Integer.toHexString(v11)).toString());
                        }
                        if (v14_1 == null) {
                            v14_1 = new java.util.ArrayList();
                        }
                        v14_1.add(v13_1);
                        v13_1.broadcasting = 1;
                    }
                } else {
                    if (v8 != 0) {
                        android.util.Log.v("LocalBroadcastManager", "  Filter\'s target already added");
                    }
                }
                v10_1++;
            }
            if (v14_1 == null) {
            } else {
                int v10_0 = 0;
                while (v10_0 < v14_1.size()) {
                    ((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v14_1.get(v10_0)).broadcasting = 0;
                    v10_0++;
                }
                this.mPendingBroadcasts.add(new android.support.v4.content.LocalBroadcastManager$BroadcastRecord(p18, v14_1));
                if (!this.mHandler.hasMessages(1)) {
                    this.mHandler.sendEmptyMessage(1);
                }
                v1_18 = 1;
            }
        }
        return v1_18;
    }

    public void sendBroadcastSync(android.content.Intent p2)
    {
        if (this.sendBroadcast(p2)) {
            this.executePendingBroadcasts();
        }
        return;
    }

    public void unregisterReceiver(android.content.BroadcastReceiver p10)
    {
        try {
            java.util.ArrayList v2_1 = ((java.util.ArrayList) this.mReceivers.remove(p10));
        } catch (java.util.HashMap v7_9) {
            throw v7_9;
        }
        if (v2_1 != null) {
            int v3 = 0;
            while (v3 < v2_1.size()) {
                android.content.IntentFilter v1_1 = ((android.content.IntentFilter) v2_1.get(v3));
                int v4 = 0;
                while (v4 < v1_1.countActions()) {
                    String v0 = v1_1.getAction(v4);
                    java.util.ArrayList v6_1 = ((java.util.ArrayList) this.mActions.get(v0));
                    if (v6_1 != null) {
                        int v5 = 0;
                        while (v5 < v6_1.size()) {
                            if (((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v6_1.get(v5)).receiver == p10) {
                                v6_1.remove(v5);
                                v5--;
                            }
                            v5++;
                        }
                        if (v6_1.size() <= 0) {
                            this.mActions.remove(v0);
                        }
                    }
                    v4++;
                }
                v3++;
            }
        } else {
        }
        return;
    }

    ModernAsyncTask$1()
    {
        this.mCount = new java.util.concurrent.atomic.AtomicInteger(1);
        return;
    }

    public Thread newThread(Runnable p4)
    {
        return new Thread(p4, new StringBuilder().append("ModernAsyncTask #").append(this.mCount.getAndIncrement()).toString());
    }

    private ModernAsyncTask$WorkerRunnable()
    {
        return;
    }

    synthetic ModernAsyncTask$WorkerRunnable(android.support.v4.content.ModernAsyncTask$1 p1)
    {
        return;
    }

    ModernAsyncTask$2(android.support.v4.content.ModernAsyncTask p2)
    {
        this.this$0 = p2;
        super(0);
        return;
    }

    public Object call()
    {
        android.support.v4.content.ModernAsyncTask.access$200(this.this$0).set(1);
        android.os.Process.setThreadPriority(10);
        return android.support.v4.content.ModernAsyncTask.access$300(this.this$0, this.this$0.doInBackground(this.mParams));
    }

    ModernAsyncTask$3(android.support.v4.content.ModernAsyncTask p1, java.util.concurrent.Callable p2)
    {
        this.this$0 = p1;
        super(p2);
        return;
    }

    protected void done()
    {
        try {
            android.support.v4.content.ModernAsyncTask.access$400(this.this$0, this.get());
        } catch (java.util.concurrent.CancellationException v0_1) {
            android.util.Log.w("AsyncTask", v0_1);
        } catch (java.util.concurrent.CancellationException v0_0) {
            throw new RuntimeException("An error occured while executing doInBackground()", v0_0.getCause());
        } catch (java.util.concurrent.CancellationException v0) {
            android.support.v4.content.ModernAsyncTask.access$400(this.this$0, 0);
        } catch (Throwable v2) {
            throw new RuntimeException("An error occured while executing doInBackground()", v2);
        }
        return;
    }

    static ModernAsyncTask$4()
    {
        NoSuchFieldError v0_3 = new int[android.support.v4.content.ModernAsyncTask$Status.values().length];
        android.support.v4.content.ModernAsyncTask$4.$SwitchMap$android$support$v4$content$ModernAsyncTask$Status = v0_3;
        try {
            android.support.v4.content.ModernAsyncTask$Status.RUNNING.ordinal()[int v1_3] = 1;
            try {
                android.support.v4.content.ModernAsyncTask$Status.FINISHED.ordinal()[int v1_1] = 2;
            } catch (NoSuchFieldError v0) {
            }
            return;
        } catch (NoSuchFieldError v0) {
        }
    }

    varargs ModernAsyncTask$AsyncTaskResult(android.support.v4.content.ModernAsyncTask p1, Object[] p2)
    {
        this.mTask = p1;
        this.mData = p2;
        return;
    }

    private ModernAsyncTask$InternalHandler()
    {
        return;
    }

    synthetic ModernAsyncTask$InternalHandler(android.support.v4.content.ModernAsyncTask$1 p1)
    {
        return;
    }

    public void handleMessage(android.os.Message p5)
    {
        android.support.v4.content.ModernAsyncTask$AsyncTaskResult v0_1 = ((android.support.v4.content.ModernAsyncTask$AsyncTaskResult) p5.obj);
        switch (p5.what) {
            case 1:
                android.support.v4.content.ModernAsyncTask.access$500(v0_1.mTask, v0_1.mData[0]);
                break;
            case 2:
                v0_1.mTask.onProgressUpdate(v0_1.mData);
                break;
        }
        return;
    }

    static ModernAsyncTask$Status()
    {
        android.support.v4.content.ModernAsyncTask$Status.PENDING = new android.support.v4.content.ModernAsyncTask$Status("PENDING", 0);
        android.support.v4.content.ModernAsyncTask$Status.RUNNING = new android.support.v4.content.ModernAsyncTask$Status("RUNNING", 1);
        android.support.v4.content.ModernAsyncTask$Status.FINISHED = new android.support.v4.content.ModernAsyncTask$Status("FINISHED", 2);
        android.support.v4.content.ModernAsyncTask$Status[] v0_3 = new android.support.v4.content.ModernAsyncTask$Status[3];
        v0_3[0] = android.support.v4.content.ModernAsyncTask$Status.PENDING;
        v0_3[1] = android.support.v4.content.ModernAsyncTask$Status.RUNNING;
        v0_3[2] = android.support.v4.content.ModernAsyncTask$Status.FINISHED;
        android.support.v4.content.ModernAsyncTask$Status.$VALUES = v0_3;
        return;
    }

    private ModernAsyncTask$Status(String p1, int p2)
    {
        super(p1, p2);
        return;
    }

    public static android.support.v4.content.ModernAsyncTask$Status valueOf(String p1)
    {
        return ((android.support.v4.content.ModernAsyncTask$Status) Enum.valueOf(android.support.v4.content.ModernAsyncTask$Status, p1));
    }

    public static android.support.v4.content.ModernAsyncTask$Status[] values()
    {
        return ((android.support.v4.content.ModernAsyncTask$Status[]) android.support.v4.content.ModernAsyncTask$Status.$VALUES.clone());
    }

    private ActivityInfoCompat()
    {
        return;
    }

    private DatabaseUtilsCompat()
    {
        return;
    }

    public static String[] appendSelectionArgs(String[] p4, String[] p5)
    {
        if ((p4 != null) && (p4.length != 0)) {
            String[] v0 = new String[(p4.length + p5.length)];
            System.arraycopy(p4, 0, v0, 0, p4.length);
            System.arraycopy(p5, 0, v0, p4.length, p5.length);
        } else {
            v0 = p5;
        }
        return v0;
    }

    public static String concatenateWhere(String p2, String p3)
    {
        if (!android.text.TextUtils.isEmpty(p2)) {
            if (!android.text.TextUtils.isEmpty(p3)) {
                p3 = new StringBuilder().append("(").append(p2).append(") AND (").append(p3).append(")").toString();
            } else {
                p3 = p2;
            }
        }
        return p3;
    }

    public ParcelableCompat$CompatCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks p1)
    {
        this.mCallbacks = p1;
        return;
    }

    public Object createFromParcel(android.os.Parcel p3)
    {
        return this.mCallbacks.createFromParcel(p3, 0);
    }

    public Object[] newArray(int p2)
    {
        return this.mCallbacks.newArray(p2);
    }

    public ParcelableCompat()
    {
        return;
    }

    public static android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks p2)
    {
        if (android.os.Build$VERSION.SDK_INT >= 13) {
            android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub.instantiate(p2);
        }
        return new android.support.v4.os.ParcelableCompat$CompatCreator(p2);
    }

    public abstract Object createFromParcel();

    public abstract Object[] newArray();

    public ParcelableCompatCreatorHoneycombMR2(android.support.v4.os.ParcelableCompatCreatorCallbacks p1)
    {
        this.mCallbacks = p1;
        return;
    }

    public Object createFromParcel(android.os.Parcel p3)
    {
        return this.mCallbacks.createFromParcel(p3, 0);
    }

    public Object createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return this.mCallbacks.createFromParcel(p2, p3);
    }

    public Object[] newArray(int p2)
    {
        return this.mCallbacks.newArray(p2);
    }

    ParcelableCompatCreatorHoneycombMR2Stub()
    {
        return;
    }

    static android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks p1)
    {
        return new android.support.v4.os.ParcelableCompatCreatorHoneycombMR2(p1);
    }

    public DebugUtils()
    {
        return;
    }

    public static void buildShortClassTag(Object p3, StringBuilder p4)
    {
        if (p3 != null) {
            String v1 = p3.getClass().getSimpleName();
            if ((v1 == null) || (v1.length() <= 0)) {
                v1 = p3.getClass().getName();
                int v0 = v1.lastIndexOf(46);
                if (v0 > 0) {
                    v1 = v1.substring((v0 + 1));
                }
            }
            p4.append(v1);
            p4.append(123);
            p4.append(Integer.toHexString(System.identityHashCode(p3)));
        } else {
            p4.append("null");
        }
        return;
    }

    public LogWriter(String p3)
    {
        this.mBuilder = new StringBuilder(128);
        this.mTag = p3;
        return;
    }

    private void flushBuilder()
    {
        if (this.mBuilder.length() > 0) {
            android.util.Log.d(this.mTag, this.mBuilder.toString());
            this.mBuilder.delete(0, this.mBuilder.length());
        }
        return;
    }

    public void close()
    {
        this.flushBuilder();
        return;
    }

    public void flush()
    {
        this.flushBuilder();
        return;
    }

    public void write(char[] p4, int p5, int p6)
    {
        int v1 = 0;
        while (v1 < p6) {
            char v0 = p4[(p5 + v1)];
            if (v0 != 10) {
                this.mBuilder.append(v0);
            } else {
                this.flushBuilder();
            }
            v1++;
        }
        return;
    }

    public LruCache(int p5)
    {
        if (p5 > 0) {
            this.maxSize = p5;
            this.map = new java.util.LinkedHashMap(0, 1061158912, 1);
            return;
        } else {
            throw new IllegalArgumentException("maxSize <= 0");
        }
    }

    private int safeSizeOf(Object p5, Object p6)
    {
        int v0 = this.sizeOf(p5, p6);
        if (v0 >= 0) {
            return v0;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Negative size: ").append(p5).append("=").append(p6).toString());
        }
    }

    private void trimToSize(int p7)
    {
        try {
            while ((this.size >= 0) && ((!this.map.isEmpty()) || (this.size == 0))) {
                if ((this.size > p7) && (!this.map.isEmpty())) {
                    java.util.Map$Entry v1_1 = ((java.util.Map$Entry) this.map.entrySet().iterator().next());
                    Object v0 = v1_1.getKey();
                    Object v2 = v1_1.getValue();
                    this.map.remove(v0);
                    this.size = (this.size - this.safeSizeOf(v0, v2));
                    this.evictionCount = (this.evictionCount + 1);
                    this.entryRemoved(1, v0, v2, 0);
                } else {
                    return;
                }
            }
        } catch (int v3_16) {
            throw v3_16;
        }
        throw new IllegalStateException(new StringBuilder().append(this.getClass().getName()).append(".sizeOf() is reporting inconsistent results!").toString());
    }

    protected Object create(Object p2)
    {
        return 0;
    }

    public final declared_synchronized int createCount()
    {
        try {
            return this.createCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    protected void entryRemoved(boolean p1, Object p2, Object p3, Object p4)
    {
        return;
    }

    public final void evictAll()
    {
        this.trimToSize(-1);
        return;
    }

    public final declared_synchronized int evictionCount()
    {
        try {
            return this.evictionCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final Object get(Object p5)
    {
        if (p5 != null) {
            Object v0;
            Object v1_1 = this.map.get(p5);
            if (v1_1 == null) {
                this.missCount = (this.missCount + 1);
                v0 = this.create(p5);
                if (v0 != null) {
                    try {
                        this.createCount = (this.createCount + 1);
                        Object v1_0 = this.map.put(p5, v0);
                    } catch (int v2_7) {
                        throw v2_7;
                    }
                    if (v1_0 == null) {
                        this.size = (this.size + this.safeSizeOf(p5, v0));
                    } else {
                        this.map.put(p5, v1_0);
                    }
                    if (v1_0 == null) {
                        this.trimToSize(this.maxSize);
                    } else {
                        this.entryRemoved(0, p5, v0, v1_0);
                        v0 = v1_0;
                    }
                } else {
                    v0 = 0;
                }
            } else {
                this.hitCount = (this.hitCount + 1);
                v0 = v1_1;
            }
            return v0;
        } else {
            throw new NullPointerException("key == null");
        }
    }

    public final declared_synchronized int hitCount()
    {
        try {
            return this.hitCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final declared_synchronized int maxSize()
    {
        try {
            return this.maxSize;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final declared_synchronized int missCount()
    {
        try {
            return this.missCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final Object put(Object p4, Object p5)
    {
        if ((p4 != null) && (p5 != null)) {
            this.putCount = (this.putCount + 1);
            this.size = (this.size + this.safeSizeOf(p4, p5));
            Object v0 = this.map.put(p4, p5);
            if (v0 != null) {
                this.size = (this.size - this.safeSizeOf(p4, v0));
            }
            if (v0 != null) {
                this.entryRemoved(0, p4, v0, p5);
            }
            this.trimToSize(this.maxSize);
            return v0;
        } else {
            throw new NullPointerException("key == null || value == null");
        }
    }

    public final declared_synchronized int putCount()
    {
        try {
            return this.putCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final Object remove(Object p4)
    {
        if (p4 != null) {
            Object v0 = this.map.remove(p4);
            if (v0 != null) {
                this.size = (this.size - this.safeSizeOf(p4, v0));
            }
            if (v0 != null) {
                this.entryRemoved(0, p4, v0, 0);
            }
            return v0;
        } else {
            throw new NullPointerException("key == null");
        }
    }

    public final declared_synchronized int size()
    {
        try {
            return this.size;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    protected int sizeOf(Object p2, Object p3)
    {
        return 1;
    }

    public final declared_synchronized java.util.Map snapshot()
    {
        try {
            return new java.util.LinkedHashMap(this.map);
        } catch (Throwable v0_2) {
            throw v0_2;
        }
    }

    public final declared_synchronized String toString()
    {
        int v1 = 0;
        try {
            int v0 = (this.hitCount + this.missCount);
        } catch (String v2_5) {
            throw v2_5;
        }
        if (v0 != 0) {
            v1 = ((this.hitCount * 100) / v0);
        }
        Object[] v3_1 = new Object[4];
        v3_1[0] = Integer.valueOf(this.maxSize);
        v3_1[1] = Integer.valueOf(this.hitCount);
        v3_1[2] = Integer.valueOf(this.missCount);
        v3_1[3] = Integer.valueOf(v1);
        return String.format("LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]", v3_1);
    }

    static TimeUtils()
    {
        android.support.v4.util.TimeUtils.sFormatSync = new Object();
        char[] v0_3 = new char[24];
        android.support.v4.util.TimeUtils.sFormatStr = v0_3;
        return;
    }

    public TimeUtils()
    {
        return;
    }

    private static int accumField(int p1, int p2, boolean p3, int p4)
    {
        if ((p1 <= 99) && ((!p3) || (p4 < 3))) {
            if ((p1 <= 9) && ((!p3) || (p4 < 2))) {
                if ((!p3) && (p1 <= 0)) {
                    int v0_1 = 0;
                } else {
                    v0_1 = (p2 + 1);
                }
            } else {
                v0_1 = (p2 + 2);
            }
        } else {
            v0_1 = (p2 + 3);
        }
        return v0_1;
    }

    public static void formatDuration(long p3, long p5, java.io.PrintWriter p7)
    {
        if (p3 != 0) {
            android.support.v4.util.TimeUtils.formatDuration((p3 - p5), p7, 0);
        } else {
            p7.print("--");
        }
        return;
    }

    public static void formatDuration(long p1, java.io.PrintWriter p3)
    {
        android.support.v4.util.TimeUtils.formatDuration(p1, p3, 0);
        return;
    }

    public static void formatDuration(long p5, java.io.PrintWriter p7, int p8)
    {
        try {
            p7.print(new String(android.support.v4.util.TimeUtils.sFormatStr, 0, android.support.v4.util.TimeUtils.formatDurationLocked(p5, p8)));
            return;
        } catch (Throwable v1_2) {
            throw v1_2;
        }
    }

    public static void formatDuration(long p4, StringBuilder p6)
    {
        try {
            p6.append(android.support.v4.util.TimeUtils.sFormatStr, 0, android.support.v4.util.TimeUtils.formatDurationLocked(p4, 0));
            return;
        } catch (Throwable v1_2) {
            throw v1_2;
        }
    }

    private static int formatDurationLocked(long p20, int p22)
    {
        if (android.support.v4.util.TimeUtils.sFormatStr.length < p22) {
            int v4_16 = new char[p22];
            android.support.v4.util.TimeUtils.sFormatStr = v4_16;
        }
        int v4_5;
        char[] v2 = android.support.v4.util.TimeUtils.sFormatStr;
        if (p20 != 0) {
            int v16;
            if (p20 <= 0) {
                v16 = 45;
                p20 = (- p20);
            } else {
                v16 = 43;
            }
            int v13 = ((int) (p20 % 1000));
            int v17 = ((int) Math.floor(((double) (p20 / 1000))));
            int v3 = 0;
            int v12 = 0;
            int v14 = 0;
            if (v17 > 86400) {
                v3 = (v17 / 86400);
                v17 -= (86400 * v3);
            }
            if (v17 > 3600) {
                v12 = (v17 / 3600);
                v17 -= (v12 * 3600);
            }
            if (v17 > 60) {
                v14 = (v17 / 60);
                v17 -= (v14 * 60);
            }
            int v5_5 = 0;
            if (p22 != 0) {
                int v4_19;
                int v15_1 = android.support.v4.util.TimeUtils.accumField(v3, 1, 0, 0);
                if (v15_1 <= 0) {
                    v4_19 = 0;
                } else {
                    v4_19 = 1;
                }
                int v4_21;
                int v15_2 = (v15_1 + android.support.v4.util.TimeUtils.accumField(v12, 1, v4_19, 2));
                if (v15_2 <= 0) {
                    v4_21 = 0;
                } else {
                    v4_21 = 1;
                }
                int v4_23;
                int v15_3 = (v15_2 + android.support.v4.util.TimeUtils.accumField(v14, 1, v4_21, 2));
                if (v15_3 <= 0) {
                    v4_23 = 0;
                } else {
                    v4_23 = 1;
                }
                int v4_25;
                int v15_4 = (v15_3 + android.support.v4.util.TimeUtils.accumField(v17, 1, v4_23, 2));
                if (v15_4 <= 0) {
                    v4_25 = 0;
                } else {
                    v4_25 = 3;
                }
                int v15_0 = (v15_4 + (android.support.v4.util.TimeUtils.accumField(v13, 2, 1, v4_25) + 1));
                while (v15_0 < p22) {
                    v2[v5_5] = 32;
                    v5_5++;
                    v15_0++;
                }
            }
            int v19;
            v2[v5_5] = v16;
            int v5_7 = (v5_5 + 1);
            int v18 = v5_7;
            if (p22 == 0) {
                v19 = 0;
            } else {
                v19 = 1;
            }
            int v10_0;
            int v5_0 = android.support.v4.util.TimeUtils.printField(v2, v3, 100, v5_7, 0, 0);
            if (v5_0 == v18) {
                v10_0 = 0;
            } else {
                v10_0 = 1;
            }
            int v11_0;
            if (v19 == 0) {
                v11_0 = 0;
            } else {
                v11_0 = 2;
            }
            int v10_1;
            int v5_1 = android.support.v4.util.TimeUtils.printField(v2, v12, 104, v5_0, v10_0, v11_0);
            if (v5_1 == v18) {
                v10_1 = 0;
            } else {
                v10_1 = 1;
            }
            int v11_1;
            if (v19 == 0) {
                v11_1 = 0;
            } else {
                v11_1 = 2;
            }
            int v10_2;
            int v5_2 = android.support.v4.util.TimeUtils.printField(v2, v14, 109, v5_1, v10_1, v11_1);
            if (v5_2 == v18) {
                v10_2 = 0;
            } else {
                v10_2 = 1;
            }
            int v11_2;
            if (v19 == 0) {
                v11_2 = 0;
            } else {
                v11_2 = 2;
            }
            int v11_3;
            int v5_3 = android.support.v4.util.TimeUtils.printField(v2, v17, 115, v5_2, v10_2, v11_2);
            if ((v19 == 0) || (v5_3 == v18)) {
                v11_3 = 0;
            } else {
                v11_3 = 3;
            }
            int v5_4 = android.support.v4.util.TimeUtils.printField(v2, v13, 109, v5_3, 1, v11_3);
            v2[v5_4] = 115;
            v4_5 = (v5_4 + 1);
        } else {
            int v22_1 = (p22 - 1);
            while (0 < v22_1) {
                v2[0] = 32;
            }
            v2[0] = 48;
            v4_5 = 1;
        }
        return v4_5;
    }

    private static int printField(char[] p3, int p4, char p5, int p6, boolean p7, int p8)
    {
        if ((p7) || (p4 > 0)) {
            if (((p7) && (p8 >= 3)) || (p4 > 99)) {
                int v0_1 = (p4 / 100);
                p3[p6] = ((char) (v0_1 + 48));
                p6++;
                p4 -= (v0_1 * 100);
            }
            if (((p7) && (p8 >= 2)) || ((p4 > 9) || (p6 != p6))) {
                int v0_0 = (p4 / 10);
                p3[p6] = ((char) (v0_0 + 48));
                p6++;
                p4 -= (v0_0 * 10);
            }
            p3[p6] = ((char) (p4 + 48));
            int v6_1 = (p6 + 1);
            p3[v6_1] = p5;
            p6 = (v6_1 + 1);
        }
        return p6;
    }

    public abstract boolean dispatchPopulateAccessibilityEvent();

    public abstract void onInitializeAccessibilityEvent();

    public abstract void onInitializeAccessibilityNodeInfo();

    public abstract void onPopulateAccessibilityEvent();

    public abstract boolean onRequestSendAccessibilityEvent();

    public abstract void sendAccessibilityEvent();

    public abstract void sendAccessibilityEventUnchecked();

    AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1(android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl p1, android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        this.this$0 = p1;
        this.val$compat = p2;
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return this.val$compat.dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.onInitializeAccessibilityEvent(p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p3, Object p4)
    {
        this.val$compat.onInitializeAccessibilityNodeInfo(p3, new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(p4));
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.onPopulateAccessibilityEvent(p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return this.val$compat.onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public void sendAccessibilityEvent(android.view.View p2, int p3)
    {
        this.val$compat.sendAccessibilityEvent(p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.sendAccessibilityEventUnchecked(p2, p3);
        return;
    }

    public abstract boolean dispatchPopulateAccessibilityEvent();

    public abstract Object newAccessiblityDelegateBridge();

    public abstract Object newAccessiblityDelegateDefaultImpl();

    public abstract void onInitializeAccessibilityEvent();

    public abstract void onInitializeAccessibilityNodeInfo();

    public abstract void onPopulateAccessibilityEvent();

    public abstract boolean onRequestSendAccessibilityEvent();

    public abstract void sendAccessibilityEvent();

    public abstract void sendAccessibilityEventUnchecked();

    AccessibilityDelegateCompat$AccessibilityDelegateStubImpl()
    {
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(Object p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return 0;
    }

    public Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        return 0;
    }

    public Object newAccessiblityDelegateDefaultImpl()
    {
        return 0;
    }

    public void onInitializeAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return;
    }

    public void onInitializeAccessibilityNodeInfo(Object p1, android.view.View p2, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3)
    {
        return;
    }

    public void onPopulateAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return;
    }

    public boolean onRequestSendAccessibilityEvent(Object p2, android.view.ViewGroup p3, android.view.View p4, android.view.accessibility.AccessibilityEvent p5)
    {
        return 1;
    }

    public void sendAccessibilityEvent(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void sendAccessibilityEventUnchecked(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return;
    }

    AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl()
    {
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(Object p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(p2, p3, p4);
    }

    public Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1(this, p2));
    }

    public Object newAccessiblityDelegateDefaultImpl()
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();
    }

    public void onInitializeAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(p1, p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(Object p2, android.view.View p3, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p4)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(p2, p3, p4.getImpl());
        return;
    }

    public void onPopulateAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(p1, p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(Object p2, android.view.ViewGroup p3, android.view.View p4, android.view.accessibility.AccessibilityEvent p5)
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(p2, p3, p4, p5);
    }

    public void sendAccessibilityEvent(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.sendAccessibilityEvent(p1, p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(p1, p2, p3);
        return;
    }

    static AccessibilityDelegateCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.view.AccessibilityDelegateCompat.IMPL = new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl();
        } else {
            android.support.v4.view.AccessibilityDelegateCompat.IMPL = new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl();
        }
        android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE = android.support.v4.view.AccessibilityDelegateCompat.IMPL.newAccessiblityDelegateDefaultImpl();
        return;
    }

    public AccessibilityDelegateCompat()
    {
        this.mBridge = android.support.v4.view.AccessibilityDelegateCompat.IMPL.newAccessiblityDelegateBridge(this);
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return android.support.v4.view.AccessibilityDelegateCompat.IMPL.dispatchPopulateAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
    }

    Object getBridge()
    {
        return this.mBridge;
    }

    public void onInitializeAccessibilityEvent(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.onInitializeAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p3, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.onInitializeAccessibilityNodeInfo(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.onPopulateAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p3, android.view.View p4, android.view.accessibility.AccessibilityEvent p5)
    {
        return android.support.v4.view.AccessibilityDelegateCompat.IMPL.onRequestSendAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4, p5);
    }

    public void sendAccessibilityEvent(android.view.View p3, int p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.sendAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.sendAccessibilityEventUnchecked(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    AccessibilityDelegateCompatIcs$1(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge p1)
    {
        this.val$bridge = p1;
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return this.val$bridge.dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.onInitializeAccessibilityEvent(p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p2, android.view.accessibility.AccessibilityNodeInfo p3)
    {
        this.val$bridge.onInitializeAccessibilityNodeInfo(p2, p3);
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.onPopulateAccessibilityEvent(p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return this.val$bridge.onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public void sendAccessibilityEvent(android.view.View p2, int p3)
    {
        this.val$bridge.sendAccessibilityEvent(p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.sendAccessibilityEventUnchecked(p2, p3);
        return;
    }

    AccessibilityDelegateCompatIcs()
    {
        return;
    }

    public static boolean dispatchPopulateAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return ((android.view.View$AccessibilityDelegate) p1).dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public static Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge p1)
    {
        return new android.support.v4.view.AccessibilityDelegateCompatIcs$1(p1);
    }

    public static Object newAccessibilityDelegateDefaultImpl()
    {
        return new android.view.View$AccessibilityDelegate();
    }

    public static void onInitializeAccessibilityEvent(Object p0, android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).onInitializeAccessibilityEvent(p1, p2);
        return;
    }

    public static void onInitializeAccessibilityNodeInfo(Object p0, android.view.View p1, Object p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).onInitializeAccessibilityNodeInfo(p1, ((android.view.accessibility.AccessibilityNodeInfo) p2));
        return;
    }

    public static void onPopulateAccessibilityEvent(Object p0, android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).onPopulateAccessibilityEvent(p1, p2);
        return;
    }

    public static boolean onRequestSendAccessibilityEvent(Object p1, android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return ((android.view.View$AccessibilityDelegate) p1).onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public static void sendAccessibilityEvent(Object p0, android.view.View p1, int p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).sendAccessibilityEvent(p1, p2);
        return;
    }

    public static void sendAccessibilityEventUnchecked(Object p0, android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).sendAccessibilityEventUnchecked(p1, p2);
        return;
    }

    public abstract boolean metaStateHasModifiers();

    public abstract boolean metaStateHasNoModifiers();

    public abstract int normalizeMetaState();

    KeyEventCompat$BaseKeyEventVersionImpl()
    {
        return;
    }

    private static int metaStateFilterDirectionalModifiers(int p5, int p6, int p7, int p8, int p9)
    {
        int v1;
        int v2 = 1;
        if ((p6 & p7) == 0) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        int v0 = (p8 | p9);
        if ((p6 & v0) == 0) {
            v2 = 0;
        }
        if (v1 == 0) {
            if (v2 != 0) {
                p5 &= (p7 ^ -1);
            }
        } else {
            if (v2 == 0) {
                p5 &= (v0 ^ -1);
            } else {
                throw new IllegalArgumentException("bad arguments");
            }
        }
        return p5;
    }

    public boolean metaStateHasModifiers(int p5, int p6)
    {
        int v0 = 1;
        if (android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl.metaStateFilterDirectionalModifiers(android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl.metaStateFilterDirectionalModifiers((this.normalizeMetaState(p5) & 247), p6, 1, 64, 128), p6, 2, 16, 32) != p6) {
            v0 = 0;
        }
        return v0;
    }

    public boolean metaStateHasNoModifiers(int p2)
    {
        int v0_2;
        if ((this.normalizeMetaState(p2) & 247) != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public int normalizeMetaState(int p2)
    {
        if ((p2 & 192) != 0) {
            p2 |= 1;
        }
        if ((p2 & 48) != 0) {
            p2 |= 2;
        }
        return (p2 & 247);
    }

    KeyEventCompat$HoneycombKeyEventVersionImpl()
    {
        return;
    }

    public boolean metaStateHasModifiers(int p2, int p3)
    {
        return android.support.v4.view.KeyEventCompatHoneycomb.metaStateHasModifiers(p2, p3);
    }

    public boolean metaStateHasNoModifiers(int p2)
    {
        return android.support.v4.view.KeyEventCompatHoneycomb.metaStateHasNoModifiers(p2);
    }

    public int normalizeMetaState(int p2)
    {
        return android.support.v4.view.KeyEventCompatHoneycomb.normalizeMetaState(p2);
    }

    static KeyEventCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.view.KeyEventCompat.IMPL = new android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl();
        } else {
            android.support.v4.view.KeyEventCompat.IMPL = new android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl();
        }
        return;
    }

    public KeyEventCompat()
    {
        return;
    }

    public static boolean hasModifiers(android.view.KeyEvent p2, int p3)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasModifiers(p2.getMetaState(), p3);
    }

    public static boolean hasNoModifiers(android.view.KeyEvent p2)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasNoModifiers(p2.getMetaState());
    }

    public static boolean metaStateHasModifiers(int p1, int p2)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasModifiers(p1, p2);
    }

    public static boolean metaStateHasNoModifiers(int p1)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasNoModifiers(p1);
    }

    public static int normalizeMetaState(int p1)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.normalizeMetaState(p1);
    }

    KeyEventCompatHoneycomb()
    {
        return;
    }

    public static boolean metaStateHasModifiers(int p1, int p2)
    {
        return android.view.KeyEvent.metaStateHasModifiers(p1, p2);
    }

    public static boolean metaStateHasNoModifiers(int p1)
    {
        return android.view.KeyEvent.metaStateHasNoModifiers(p1);
    }

    public static int normalizeMetaState(int p1)
    {
        return android.view.KeyEvent.normalizeMetaState(p1);
    }

    public abstract boolean setShowAsAction();

    MenuCompat$BaseMenuVersionImpl()
    {
        return;
    }

    public boolean setShowAsAction(android.view.MenuItem p2, int p3)
    {
        return 0;
    }

    MenuCompat$HoneycombMenuVersionImpl()
    {
        return;
    }

    public boolean setShowAsAction(android.view.MenuItem p2, int p3)
    {
        android.support.v4.view.MenuItemCompatHoneycomb.setShowAsAction(p2, p3);
        return 1;
    }

    static MenuCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.view.MenuCompat.IMPL = new android.support.v4.view.MenuCompat$BaseMenuVersionImpl();
        } else {
            android.support.v4.view.MenuCompat.IMPL = new android.support.v4.view.MenuCompat$HoneycombMenuVersionImpl();
        }
        return;
    }

    public MenuCompat()
    {
        return;
    }

    public static boolean setShowAsAction(android.view.MenuItem p1, int p2)
    {
        return android.support.v4.view.MenuCompat.IMPL.setShowAsAction(p1, p2);
    }

    public abstract android.view.MenuItem setActionView();

    public abstract boolean setShowAsAction();

    MenuItemCompat$BaseMenuVersionImpl()
    {
        return;
    }

    public android.view.MenuItem setActionView(android.view.MenuItem p1, android.view.View p2)
    {
        return p1;
    }

    public boolean setShowAsAction(android.view.MenuItem p2, int p3)
    {
        return 0;
    }

    MenuItemCompat$HoneycombMenuVersionImpl()
    {
        return;
    }

    public android.view.MenuItem setActionView(android.view.MenuItem p2, android.view.View p3)
    {
        return android.support.v4.view.MenuItemCompatHoneycomb.setActionView(p2, p3);
    }

    public boolean setShowAsAction(android.view.MenuItem p2, int p3)
    {
        android.support.v4.view.MenuItemCompatHoneycomb.setShowAsAction(p2, p3);
        return 1;
    }

    static MenuItemCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.view.MenuItemCompat.IMPL = new android.support.v4.view.MenuItemCompat$BaseMenuVersionImpl();
        } else {
            android.support.v4.view.MenuItemCompat.IMPL = new android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl();
        }
        return;
    }

    public MenuItemCompat()
    {
        return;
    }

    public static android.view.MenuItem setActionView(android.view.MenuItem p1, android.view.View p2)
    {
        return android.support.v4.view.MenuItemCompat.IMPL.setActionView(p1, p2);
    }

    public static boolean setShowAsAction(android.view.MenuItem p1, int p2)
    {
        return android.support.v4.view.MenuItemCompat.IMPL.setShowAsAction(p1, p2);
    }

    MenuItemCompatHoneycomb()
    {
        return;
    }

    public static android.view.MenuItem setActionView(android.view.MenuItem p1, android.view.View p2)
    {
        return p1.setActionView(p2);
    }

    public static void setShowAsAction(android.view.MenuItem p0, int p1)
    {
        p0.setShowAsAction(p1);
        return;
    }

    public abstract int findPointerIndex();

    public abstract int getPointerId();

    public abstract float getX();

    public abstract float getY();

    MotionEventCompat$BaseMotionEventVersionImpl()
    {
        return;
    }

    public int findPointerIndex(android.view.MotionEvent p2, int p3)
    {
        int v0;
        if (p3 != 0) {
            v0 = -1;
        } else {
            v0 = 0;
        }
        return v0;
    }

    public int getPointerId(android.view.MotionEvent p3, int p4)
    {
        if (p4 != 0) {
            throw new IndexOutOfBoundsException("Pre-Eclair does not support multiple pointers");
        } else {
            return 0;
        }
    }

    public float getX(android.view.MotionEvent p3, int p4)
    {
        if (p4 != 0) {
            throw new IndexOutOfBoundsException("Pre-Eclair does not support multiple pointers");
        } else {
            return p3.getX();
        }
    }

    public float getY(android.view.MotionEvent p3, int p4)
    {
        if (p4 != 0) {
            throw new IndexOutOfBoundsException("Pre-Eclair does not support multiple pointers");
        } else {
            return p3.getY();
        }
    }

    MotionEventCompat$EclairMotionEventVersionImpl()
    {
        return;
    }

    public int findPointerIndex(android.view.MotionEvent p2, int p3)
    {
        return android.support.v4.view.MotionEventCompatEclair.findPointerIndex(p2, p3);
    }

    public int getPointerId(android.view.MotionEvent p2, int p3)
    {
        return android.support.v4.view.MotionEventCompatEclair.getPointerId(p2, p3);
    }

    public float getX(android.view.MotionEvent p2, int p3)
    {
        return android.support.v4.view.MotionEventCompatEclair.getX(p2, p3);
    }

    public float getY(android.view.MotionEvent p2, int p3)
    {
        return android.support.v4.view.MotionEventCompatEclair.getY(p2, p3);
    }

    static MotionEventCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 5) {
            android.support.v4.view.MotionEventCompat.IMPL = new android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl();
        } else {
            android.support.v4.view.MotionEventCompat.IMPL = new android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl();
        }
        return;
    }

    public MotionEventCompat()
    {
        return;
    }

    public static int findPointerIndex(android.view.MotionEvent p1, int p2)
    {
        return android.support.v4.view.MotionEventCompat.IMPL.findPointerIndex(p1, p2);
    }

    public static int getActionIndex(android.view.MotionEvent p2)
    {
        return ((p2.getAction() & 65280) >> 8);
    }

    public static int getActionMasked(android.view.MotionEvent p1)
    {
        return (p1.getAction() & 255);
    }

    public static int getPointerId(android.view.MotionEvent p1, int p2)
    {
        return android.support.v4.view.MotionEventCompat.IMPL.getPointerId(p1, p2);
    }

    public static float getX(android.view.MotionEvent p1, int p2)
    {
        return android.support.v4.view.MotionEventCompat.IMPL.getX(p1, p2);
    }

    public static float getY(android.view.MotionEvent p1, int p2)
    {
        return android.support.v4.view.MotionEventCompat.IMPL.getY(p1, p2);
    }

    MotionEventCompatEclair()
    {
        return;
    }

    public static int findPointerIndex(android.view.MotionEvent p1, int p2)
    {
        return p1.findPointerIndex(p2);
    }

    public static int getPointerId(android.view.MotionEvent p1, int p2)
    {
        return p1.getPointerId(p2);
    }

    public static float getX(android.view.MotionEvent p1, int p2)
    {
        return p1.getX(p2);
    }

    public static float getY(android.view.MotionEvent p1, int p2)
    {
        return p1.getY(p2);
    }

    public abstract void onPageScrollStateChanged();

    public abstract void onPageScrolled();

    public abstract void onPageSelected();

    public abstract void onAdapterChanged();

    private PagerTitleStrip$PageListener(android.support.v4.view.PagerTitleStrip p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic PagerTitleStrip$PageListener(android.support.v4.view.PagerTitleStrip p1, android.support.v4.view.PagerTitleStrip$1 p2)
    {
        this(p1);
        return;
    }

    public void onAdapterChanged(android.support.v4.view.PagerAdapter p2, android.support.v4.view.PagerAdapter p3)
    {
        this.this$0.updateAdapter(p2, p3);
        return;
    }

    public void onChanged()
    {
        this.this$0.updateText(this.this$0.mPager.getCurrentItem(), this.this$0.mPager.getAdapter());
        return;
    }

    public void onPageScrollStateChanged(int p1)
    {
        this.mScrollState = p1;
        return;
    }

    public void onPageScrolled(int p2, float p3, int p4)
    {
        if (p3 > 1056964608) {
            p2++;
        }
        this.this$0.updateTextPositions(p2, p3);
        return;
    }

    public void onPageSelected(int p4)
    {
        if (this.mScrollState == 0) {
            this.this$0.updateText(this.this$0.mPager.getCurrentItem(), this.this$0.mPager.getAdapter());
        }
        return;
    }

    static PagerTitleStrip()
    {
        int[] v0_1 = new int[3];
        v0_1 = {16842804, 16842904, 16842901};
        android.support.v4.view.PagerTitleStrip.ATTRS = v0_1;
        return;
    }

    public PagerTitleStrip(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public PagerTitleStrip(android.content.Context p12, android.util.AttributeSet p13)
    {
        super(p12, p13);
        super.mLastKnownCurrentPage = -1;
        super.mLastKnownPositionOffset = -1082130432;
        super.mPageListener = new android.support.v4.view.PagerTitleStrip$PageListener(super, 0);
        int v7_1 = new android.widget.TextView(p12);
        super.mPrevText = v7_1;
        super.addView(v7_1);
        int v7_3 = new android.widget.TextView(p12);
        super.mCurrText = v7_3;
        super.addView(v7_3);
        int v7_5 = new android.widget.TextView(p12);
        super.mNextText = v7_5;
        super.addView(v7_5);
        android.content.res.TypedArray v0 = p12.obtainStyledAttributes(p13, android.support.v4.view.PagerTitleStrip.ATTRS);
        int v3 = v0.getResourceId(0, 0);
        if (v3 != 0) {
            super.mPrevText.setTextAppearance(p12, v3);
            super.mCurrText.setTextAppearance(p12, v3);
            super.mNextText.setTextAppearance(p12, v3);
        }
        if (v0.hasValue(1)) {
            int v4 = v0.getColor(1, 0);
            super.mPrevText.setTextColor(v4);
            super.mCurrText.setTextColor(v4);
            super.mNextText.setTextColor(v4);
        }
        int v5 = v0.getDimensionPixelSize(2, 0);
        if (v5 != 0) {
            super.mPrevText.setTextSize(0, ((float) v5));
            super.mCurrText.setTextSize(0, ((float) v5));
            super.mNextText.setTextSize(0, ((float) v5));
        }
        v0.recycle();
        int v6 = (-1728053248 | (16777215 & super.mPrevText.getTextColors().getDefaultColor()));
        super.mPrevText.setTextColor(v6);
        super.mNextText.setTextColor(v6);
        super.mPrevText.setEllipsize(android.text.TextUtils$TruncateAt.END);
        super.mCurrText.setEllipsize(android.text.TextUtils$TruncateAt.END);
        super.mNextText.setEllipsize(android.text.TextUtils$TruncateAt.END);
        super.mPrevText.setSingleLine();
        super.mCurrText.setSingleLine();
        super.mNextText.setSingleLine();
        super.mScaledTextSpacing = ((int) (1098907648 * p12.getResources().getDisplayMetrics().density));
        return;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        android.view.ViewParent v2 = this.getParent();
        if ((v2 instanceof android.support.v4.view.ViewPager)) {
            android.support.v4.view.ViewPager v1_1 = ((android.support.v4.view.ViewPager) v2);
            android.support.v4.view.PagerAdapter v0 = v1_1.getAdapter();
            v1_1.setInternalPageChangeListener(this.mPageListener);
            v1_1.setOnAdapterChangeListener(this.mPageListener);
            this.mPager = v1_1;
            this.updateAdapter(0, v0);
            return;
        } else {
            throw new IllegalStateException("PagerTitleStrip must be a direct child of a ViewPager.");
        }
    }

    protected void onDetachedFromWindow()
    {
        this.updateAdapter(this.mPager.getAdapter(), 0);
        this.mPager.setInternalPageChangeListener(0);
        this.mPager.setOnAdapterChangeListener(0);
        this.mPager = 0;
        return;
    }

    protected void onLayout(boolean p3, int p4, int p5, int p6, int p7)
    {
        if (this.mPager != null) {
            this.updateTextPositions(this.mPager.getCurrentItem(), 0);
        }
        return;
    }

    protected void onMeasure(int p14, int p15)
    {
        int v9 = android.view.View$MeasureSpec.getMode(p14);
        int v4 = android.view.View$MeasureSpec.getMode(p15);
        int v10 = android.view.View$MeasureSpec.getSize(p14);
        int v5 = android.view.View$MeasureSpec.getSize(p15);
        if (v9 == 1073741824) {
            int v1_0 = v5;
            int v6 = 0;
            android.graphics.drawable.Drawable v0 = this.getBackground();
            if (v0 != null) {
                v6 = v0.getIntrinsicHeight();
            }
            int v7 = (this.getPaddingTop() + this.getPaddingBottom());
            int v1_1 = (v1_0 - v7);
            int v3 = android.view.View$MeasureSpec.makeMeasureSpec(((int) (((float) v10) * 1061997773)), -2147483648);
            int v2 = android.view.View$MeasureSpec.makeMeasureSpec(v1_1, v4);
            this.mPrevText.measure(v3, v2);
            this.mCurrText.measure(v3, v2);
            this.mNextText.measure(v3, v2);
            if (v4 != 1073741824) {
                this.setMeasuredDimension(v10, Math.max(v6, (this.mCurrText.getMeasuredHeight() + v7)));
            } else {
                this.setMeasuredDimension(v10, v5);
            }
            return;
        } else {
            throw new IllegalStateException("Must measure with an exact width");
        }
    }

    public void requestLayout()
    {
        if (!this.mUpdatingText) {
            super.requestLayout();
        }
        return;
    }

    void updateAdapter(android.support.v4.view.PagerAdapter p2, android.support.v4.view.PagerAdapter p3)
    {
        if (p2 != null) {
            p2.unregisterDataSetObserver(this.mPageListener);
        }
        if (p3 != null) {
            p3.registerDataSetObserver(this.mPageListener);
        }
        if (this.mPager != null) {
            this.mLastKnownCurrentPage = -1;
            this.mLastKnownPositionOffset = -1082130432;
            this.updateText(this.mPager.getCurrentItem(), p3);
            this.requestLayout();
        }
        return;
    }

    void updateText(int p10, android.support.v4.view.PagerAdapter p11)
    {
        int v3;
        if (p11 == null) {
            v3 = 0;
        } else {
            v3 = p11.getCount();
        }
        this.mUpdatingText = 1;
        CharSequence v4_0 = 0;
        if ((p10 >= 1) && (p11 != null)) {
            v4_0 = p11.getPageTitle((p10 - 1));
        }
        float v7_3;
        this.mPrevText.setText(v4_0);
        int v8_0 = this.mCurrText;
        if (p11 == null) {
            v7_3 = 0;
        } else {
            v7_3 = p11.getPageTitle(p10);
        }
        v8_0.setText(v7_3);
        CharSequence v4_1 = 0;
        if (((p10 + 1) < v3) && (p11 != null)) {
            v4_1 = p11.getPageTitle((p10 + 1));
        }
        this.mNextText.setText(v4_1);
        int v5 = ((this.getWidth() - this.getPaddingLeft()) - this.getPaddingRight());
        int v0 = ((this.getHeight() - this.getPaddingTop()) - this.getPaddingBottom());
        int v2 = android.view.View$MeasureSpec.makeMeasureSpec(((int) (((float) v5) * 1061997773)), -2147483648);
        int v1 = android.view.View$MeasureSpec.makeMeasureSpec(v0, 1073741824);
        this.mPrevText.measure(v2, v1);
        this.mCurrText.measure(v2, v1);
        this.mNextText.measure(v2, v1);
        this.mLastKnownCurrentPage = p10;
        if (!this.mUpdatingPositions) {
            this.updateTextPositions(p10, this.mLastKnownPositionOffset);
        }
        this.mUpdatingText = 0;
        return;
    }

    void updateTextPositions(int p24, float p25)
    {
        if (p24 == this.mLastKnownCurrentPage) {
            if (p25 != this.mLastKnownPositionOffset) {
                this.mUpdatingPositions = 1;
                int v16 = this.mPrevText.getMeasuredWidth();
                int v8 = this.mCurrText.getMeasuredWidth();
                int v11 = this.mNextText.getMeasuredWidth();
                int v9 = (v8 / 2);
                int v17 = this.getWidth();
                int v12 = this.getPaddingLeft();
                int v13 = this.getPaddingRight();
                int v14 = this.getPaddingTop();
                int v19 = (v13 + v9);
                float v6 = (p25 + 1056964608);
                if (v6 > 1065353216) {
                    v6 -= 1065353216;
                }
                int v5 = (((v17 - v19) - ((int) (((float) ((v17 - (v12 + v9)) - v19)) * v6))) - (v8 / 2));
                int v7 = (v5 + v8);
                this.mCurrText.layout(v5, v14, v7, (this.mCurrText.getMeasuredHeight() + v14));
                int v15 = Math.min(v12, ((v5 - this.mScaledTextSpacing) - v16));
                this.mPrevText.layout(v15, v14, (v15 + v16), (this.mPrevText.getMeasuredHeight() + v14));
                int v10 = Math.max(((v17 - v13) - v11), (this.mScaledTextSpacing + v7));
                this.mNextText.layout(v10, v14, (v10 + v11), (this.mNextText.getMeasuredHeight() + v14));
                this.mLastKnownPositionOffset = p25;
                this.mUpdatingPositions = 0;
            }
        } else {
            this.updateText(p24, this.mPager.getAdapter());
        }
        return;
    }

    public abstract float getXVelocity();

    public abstract float getYVelocity();

    VelocityTrackerCompat$BaseVelocityTrackerVersionImpl()
    {
        return;
    }

    public float getXVelocity(android.view.VelocityTracker p2, int p3)
    {
        return p2.getXVelocity();
    }

    public float getYVelocity(android.view.VelocityTracker p2, int p3)
    {
        return p2.getYVelocity();
    }

    VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl()
    {
        return;
    }

    public float getXVelocity(android.view.VelocityTracker p2, int p3)
    {
        return android.support.v4.view.VelocityTrackerCompatHoneycomb.getXVelocity(p2, p3);
    }

    public float getYVelocity(android.view.VelocityTracker p2, int p3)
    {
        return android.support.v4.view.VelocityTrackerCompatHoneycomb.getYVelocity(p2, p3);
    }

    static VelocityTrackerCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.view.VelocityTrackerCompat.IMPL = new android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl();
        } else {
            android.support.v4.view.VelocityTrackerCompat.IMPL = new android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl();
        }
        return;
    }

    public VelocityTrackerCompat()
    {
        return;
    }

    public static float getXVelocity(android.view.VelocityTracker p1, int p2)
    {
        return android.support.v4.view.VelocityTrackerCompat.IMPL.getXVelocity(p1, p2);
    }

    public static float getYVelocity(android.view.VelocityTracker p1, int p2)
    {
        return android.support.v4.view.VelocityTrackerCompat.IMPL.getYVelocity(p1, p2);
    }

    VelocityTrackerCompatHoneycomb()
    {
        return;
    }

    public static float getXVelocity(android.view.VelocityTracker p1, int p2)
    {
        return p1.getXVelocity(p2);
    }

    public static float getYVelocity(android.view.VelocityTracker p1, int p2)
    {
        return p1.getYVelocity(p2);
    }

    public abstract boolean canScrollHorizontally();

    public abstract boolean canScrollVertically();

    public abstract int getOverScrollMode();

    public abstract void onInitializeAccessibilityEvent();

    public abstract void onInitializeAccessibilityNodeInfo();

    public abstract void onPopulateAccessibilityEvent();

    public abstract void setAccessibilityDelegate();

    public abstract void setOverScrollMode();

    ViewCompat$BaseViewCompatImpl()
    {
        return;
    }

    public boolean canScrollHorizontally(android.view.View p2, int p3)
    {
        return 0;
    }

    public boolean canScrollVertically(android.view.View p2, int p3)
    {
        return 0;
    }

    public int getOverScrollMode(android.view.View p2)
    {
        return 2;
    }

    public void onInitializeAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p1, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p2)
    {
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        return;
    }

    public void setAccessibilityDelegate(android.view.View p1, android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        return;
    }

    public void setOverScrollMode(android.view.View p1, int p2)
    {
        return;
    }

    ViewCompat$GBViewCompatImpl()
    {
        return;
    }

    public int getOverScrollMode(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatGingerbread.getOverScrollMode(p2);
    }

    public void setOverScrollMode(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatGingerbread.setOverScrollMode(p1, p2);
        return;
    }

    ViewCompat$ICSViewCompatImpl()
    {
        return;
    }

    public boolean canScrollHorizontally(android.view.View p2, int p3)
    {
        return android.support.v4.view.ViewCompatICS.canScrollHorizontally(p2, p3);
    }

    public boolean canScrollVertically(android.view.View p2, int p3)
    {
        return android.support.v4.view.ViewCompatICS.canScrollVertically(p2, p3);
    }

    public void onInitializeAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompatICS.onInitializeAccessibilityEvent(p1, p2);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p2, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3)
    {
        android.support.v4.view.ViewCompatICS.onInitializeAccessibilityNodeInfo(p2, p3.getImpl());
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompatICS.onPopulateAccessibilityEvent(p1, p2);
        return;
    }

    public void setAccessibilityDelegate(android.view.View p2, android.support.v4.view.AccessibilityDelegateCompat p3)
    {
        android.support.v4.view.ViewCompatICS.setAccessibilityDelegate(p2, p3.getBridge());
        return;
    }

    static ViewCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 14) {
            if (v0 < 9) {
                android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$BaseViewCompatImpl();
            } else {
                android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$GBViewCompatImpl();
            }
        } else {
            android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$ICSViewCompatImpl();
        }
        return;
    }

    public ViewCompat()
    {
        return;
    }

    public static boolean canScrollHorizontally(android.view.View p1, int p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.canScrollHorizontally(p1, p2);
    }

    public static boolean canScrollVertically(android.view.View p1, int p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.canScrollVertically(p1, p2);
    }

    public static int getOverScrollMode(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getOverScrollMode(p1);
    }

    public static void onInitializeAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompat.IMPL.onInitializeAccessibilityEvent(p1, p2);
        return;
    }

    public static void onInitializeAccessibilityNodeInfo(android.view.View p1, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p2)
    {
        android.support.v4.view.ViewCompat.IMPL.onInitializeAccessibilityNodeInfo(p1, p2);
        return;
    }

    public static void onPopulateAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompat.IMPL.onPopulateAccessibilityEvent(p1, p2);
        return;
    }

    public static void setAccessibilityDelegate(android.view.View p1, android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setAccessibilityDelegate(p1, p2);
        return;
    }

    public static void setOverScrollMode(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setOverScrollMode(p1, p2);
        return;
    }

    ViewCompatGingerbread()
    {
        return;
    }

    public static int getOverScrollMode(android.view.View p1)
    {
        return p1.getOverScrollMode();
    }

    public static void setOverScrollMode(android.view.View p0, int p1)
    {
        p0.setOverScrollMode(p1);
        return;
    }

    ViewCompatICS()
    {
        return;
    }

    public static boolean canScrollHorizontally(android.view.View p1, int p2)
    {
        return p1.canScrollHorizontally(p2);
    }

    public static boolean canScrollVertically(android.view.View p1, int p2)
    {
        return p1.canScrollVertically(p2);
    }

    public static void onInitializeAccessibilityEvent(android.view.View p0, android.view.accessibility.AccessibilityEvent p1)
    {
        p0.onInitializeAccessibilityEvent(p1);
        return;
    }

    public static void onInitializeAccessibilityNodeInfo(android.view.View p0, Object p1)
    {
        p0.onInitializeAccessibilityNodeInfo(((android.view.accessibility.AccessibilityNodeInfo) p1));
        return;
    }

    public static void onPopulateAccessibilityEvent(android.view.View p0, android.view.accessibility.AccessibilityEvent p1)
    {
        p0.onPopulateAccessibilityEvent(p1);
        return;
    }

    public static void setAccessibilityDelegate(android.view.View p0, Object p1)
    {
        p0.setAccessibilityDelegate(((android.view.View$AccessibilityDelegate) p1));
        return;
    }

    public abstract int getScaledPagingTouchSlop();

    ViewConfigurationCompat$BaseViewConfigurationVersionImpl()
    {
        return;
    }

    public int getScaledPagingTouchSlop(android.view.ViewConfiguration p2)
    {
        return p2.getScaledTouchSlop();
    }

    ViewConfigurationCompat$FroyoViewConfigurationVersionImpl()
    {
        return;
    }

    public int getScaledPagingTouchSlop(android.view.ViewConfiguration p2)
    {
        return android.support.v4.view.ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(p2);
    }

    static ViewConfigurationCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.view.ViewConfigurationCompat.IMPL = new android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl();
        } else {
            android.support.v4.view.ViewConfigurationCompat.IMPL = new android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl();
        }
        return;
    }

    public ViewConfigurationCompat()
    {
        return;
    }

    public static int getScaledPagingTouchSlop(android.view.ViewConfiguration p1)
    {
        return android.support.v4.view.ViewConfigurationCompat.IMPL.getScaledPagingTouchSlop(p1);
    }

    ViewConfigurationCompatFroyo()
    {
        return;
    }

    public static int getScaledPagingTouchSlop(android.view.ViewConfiguration p1)
    {
        return p1.getScaledPagingTouchSlop();
    }

    public abstract boolean onRequestSendAccessibilityEvent();

    ViewGroupCompat$ViewGroupCompatStubImpl()
    {
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return 1;
    }

    ViewGroupCompat$ViewGroupCompatIcsImpl()
    {
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return android.support.v4.view.ViewGroupCompatIcs.onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    static ViewGroupCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.view.ViewGroupCompat.IMPL = new android.support.v4.view.ViewGroupCompat$ViewGroupCompatStubImpl();
        } else {
            android.support.v4.view.ViewGroupCompat.IMPL = new android.support.v4.view.ViewGroupCompat$ViewGroupCompatIcsImpl();
        }
        return;
    }

    private ViewGroupCompat()
    {
        return;
    }

    public static boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return android.support.v4.view.ViewGroupCompat.IMPL.onRequestSendAccessibilityEvent(p1, p2, p3);
    }

    ViewGroupCompatIcs()
    {
        return;
    }

    public static boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return p1.onRequestSendAccessibilityEvent(p2, p3);
    }

    ViewPager$1()
    {
        return;
    }

    public int compare(android.support.v4.view.ViewPager$ItemInfo p3, android.support.v4.view.ViewPager$ItemInfo p4)
    {
        return (p3.position - p4.position);
    }

    public bridge synthetic int compare(Object p2, Object p3)
    {
        return this.compare(((android.support.v4.view.ViewPager$ItemInfo) p2), ((android.support.v4.view.ViewPager$ItemInfo) p3));
    }

    ViewPager$2()
    {
        return;
    }

    public float getInterpolation(float p3)
    {
        float v3_1 = (p3 - 1065353216);
        return (((((v3_1 * v3_1) * v3_1) * v3_1) * v3_1) + 1065353216);
    }

    ViewPager$ItemInfo()
    {
        return;
    }

    public ViewPager$LayoutParams()
    {
        super(-1, -1);
        return;
    }

    public ViewPager$LayoutParams(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, android.support.v4.view.ViewPager.access$100());
        super.gravity = v0.getInteger(0, 0);
        v0.recycle();
        return;
    }

    private ViewPager$PagerObserver(android.support.v4.view.ViewPager p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ViewPager$PagerObserver(android.support.v4.view.ViewPager p1, android.support.v4.view.ViewPager$1 p2)
    {
        this(p1);
        return;
    }

    public void onChanged()
    {
        this.this$0.dataSetChanged();
        return;
    }

    public void onInvalidated()
    {
        this.this$0.dataSetChanged();
        return;
    }

    ViewPager$SavedState$1()
    {
        return;
    }

    public android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return new android.support.v4.view.ViewPager$SavedState(p2, p3);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return this.createFromParcel(p2, p3);
    }

    public android.support.v4.view.ViewPager$SavedState[] newArray(int p2)
    {
        android.support.v4.view.ViewPager$SavedState[] v0 = new android.support.v4.view.ViewPager$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static ViewPager$SavedState()
    {
        android.support.v4.view.ViewPager$SavedState.CREATOR = android.support.v4.os.ParcelableCompat.newCreator(new android.support.v4.view.ViewPager$SavedState$1());
        return;
    }

    ViewPager$SavedState(android.os.Parcel p2, ClassLoader p3)
    {
        super(p2);
        if (p3 == null) {
            p3 = super.getClass().getClassLoader();
        }
        super.position = p2.readInt();
        super.adapterState = p2.readParcelable(p3);
        super.loader = p3;
        return;
    }

    public ViewPager$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public String toString()
    {
        return new StringBuilder().append("FragmentPager.SavedState{").append(Integer.toHexString(System.identityHashCode(this))).append(" position=").append(this.position).append("}").toString();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        super.writeToParcel(p2, p3);
        p2.writeInt(this.position);
        p2.writeParcelable(this.adapterState, p3);
        return;
    }

    public ViewPager$SimpleOnPageChangeListener()
    {
        return;
    }

    public void onPageScrollStateChanged(int p1)
    {
        return;
    }

    public void onPageScrolled(int p1, float p2, int p3)
    {
        return;
    }

    public void onPageSelected(int p1)
    {
        return;
    }

    static ViewPager()
    {
        android.support.v4.view.ViewPager$2 v0_1 = new int[1];
        v0_1[0] = 16842931;
        android.support.v4.view.ViewPager.LAYOUT_ATTRS = v0_1;
        android.support.v4.view.ViewPager.COMPARATOR = new android.support.v4.view.ViewPager$1();
        android.support.v4.view.ViewPager.sInterpolator = new android.support.v4.view.ViewPager$2();
        return;
    }

    public ViewPager(android.content.Context p5)
    {
        super(p5);
        super.mItems = new java.util.ArrayList();
        super.mRestoredCurItem = -1;
        super.mRestoredAdapterState = 0;
        super.mRestoredClassLoader = 0;
        super.mOffscreenPageLimit = 1;
        super.mActivePointerId = -1;
        super.mFirstLayout = 1;
        super.mScrollState = 0;
        super.initViewPager();
        return;
    }

    public ViewPager(android.content.Context p5, android.util.AttributeSet p6)
    {
        super(p5, p6);
        super.mItems = new java.util.ArrayList();
        super.mRestoredCurItem = -1;
        super.mRestoredAdapterState = 0;
        super.mRestoredClassLoader = 0;
        super.mOffscreenPageLimit = 1;
        super.mActivePointerId = -1;
        super.mFirstLayout = 1;
        super.mScrollState = 0;
        super.initViewPager();
        return;
    }

    static synthetic int[] access$100()
    {
        return android.support.v4.view.ViewPager.LAYOUT_ATTRS;
    }

    private void completeScroll()
    {
        int v2 = this.mScrolling;
        if (v2 != 0) {
            this.setScrollingCacheEnabled(0);
            this.mScroller.abortAnimation();
            int v3 = this.getScrollX();
            int v4 = this.getScrollY();
            int v5 = this.mScroller.getCurrX();
            int v6 = this.mScroller.getCurrY();
            if ((v3 != v5) || (v4 != v6)) {
                this.scrollTo(v5, v6);
            }
            this.setScrollState(0);
        }
        this.mPopulatePending = 0;
        this.mScrolling = 0;
        int v0 = 0;
        while (v0 < this.mItems.size()) {
            android.support.v4.view.ViewPager$ItemInfo v1_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v0));
            if (v1_1.scrolling) {
                v2 = 1;
                v1_1.scrolling = 0;
            }
            v0++;
        }
        if (v2 != 0) {
            this.populate();
        }
        return;
    }

    private int determineTargetPage(int p4, float p5, int p6, int p7)
    {
        if ((Math.abs(p7) <= this.mFlingDistance) || (Math.abs(p6) <= this.mMinimumVelocity)) {
            int v0 = ((int) ((((float) p4) + p5) + 1056964608));
        } else {
            if (p6 <= 0) {
                v0 = (p4 + 1);
            } else {
                v0 = p4;
            }
        }
        return v0;
    }

    private void endDrag()
    {
        this.mIsBeingDragged = 0;
        this.mIsUnableToDrag = 0;
        if (this.mVelocityTracker != null) {
            this.mVelocityTracker.recycle();
            this.mVelocityTracker = 0;
        }
        return;
    }

    private void onSecondaryPointerUp(android.view.MotionEvent p5)
    {
        int v2 = android.support.v4.view.MotionEventCompat.getActionIndex(p5);
        if (android.support.v4.view.MotionEventCompat.getPointerId(p5, v2) == this.mActivePointerId) {
            int v0;
            if (v2 != 0) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            this.mLastMotionX = android.support.v4.view.MotionEventCompat.getX(p5, v0);
            this.mActivePointerId = android.support.v4.view.MotionEventCompat.getPointerId(p5, v0);
            if (this.mVelocityTracker != null) {
                this.mVelocityTracker.clear();
            }
        }
        return;
    }

    private void pageScrolled(int p7)
    {
        int v3 = (this.getWidth() + this.mPageMargin);
        int v2 = (p7 / v3);
        int v1 = (p7 % v3);
        float v0 = (((float) v1) / ((float) v3));
        this.mCalledSuper = 0;
        this.onPageScrolled(v2, v0, v1);
        if (this.mCalledSuper) {
            return;
        } else {
            throw new IllegalStateException("onPageScrolled did not call superclass implementation");
        }
    }

    private void recomputeScrollPosition(int p12, int p13, int p14, int p15)
    {
        int v10 = (p12 + p14);
        if (p13 <= 0) {
            int v1_1 = (this.mCurItem * v10);
            if (v1_1 != this.getScrollX()) {
                this.completeScroll();
                this.scrollTo(v1_1, this.getScrollY());
            }
        } else {
            int v7 = this.getScrollX();
            int v8 = (p13 + p15);
            int v1_0 = ((int) ((((float) (v7 / v8)) + (((float) (v7 % v8)) / ((float) v8))) * ((float) v10)));
            this.scrollTo(v1_0, this.getScrollY());
            if (!this.mScroller.isFinished()) {
                this.mScroller.startScroll(v1_0, 0, (this.mCurItem * v10), 0, (this.mScroller.getDuration() - this.mScroller.timePassed()));
            }
        }
        return;
    }

    private void removeNonDecorViews()
    {
        int v1 = 0;
        while (v1 < this.getChildCount()) {
            if (!((android.support.v4.view.ViewPager$LayoutParams) this.getChildAt(v1).getLayoutParams()).isDecor) {
                this.removeViewAt(v1);
                v1--;
            }
            v1++;
        }
        return;
    }

    private void setScrollState(int p2)
    {
        if (this.mScrollState != p2) {
            this.mScrollState = p2;
            if (this.mOnPageChangeListener != null) {
                this.mOnPageChangeListener.onPageScrollStateChanged(p2);
            }
        }
        return;
    }

    private void setScrollingCacheEnabled(boolean p2)
    {
        if (this.mScrollingCacheEnabled != p2) {
            this.mScrollingCacheEnabled = p2;
        }
        return;
    }

    public void addFocusables(java.util.ArrayList p8, int p9, int p10)
    {
        int v2 = p8.size();
        int v1 = this.getDescendantFocusability();
        if (v1 != 393216) {
            int v3 = 0;
            while (v3 < this.getChildCount()) {
                android.view.View v0 = this.getChildAt(v3);
                if (v0.getVisibility() == 0) {
                    android.support.v4.view.ViewPager$ItemInfo v4 = this.infoForChild(v0);
                    if ((v4 != null) && (v4.position == this.mCurItem)) {
                        v0.addFocusables(p8, p9, p10);
                    }
                }
                v3++;
            }
        }
        if (((v1 != 262144) || (v2 == p8.size())) && (((this.isFocusable()) && (((p10 & 1) != 1) || ((!this.isInTouchMode()) || (this.isFocusableInTouchMode())))) && (p8 != null))) {
            p8.add(this);
        }
        return;
    }

    void addNewItem(int p3, int p4)
    {
        android.support.v4.view.ViewPager$ItemInfo v0_1 = new android.support.v4.view.ViewPager$ItemInfo();
        v0_1.position = p3;
        v0_1.object = this.mAdapter.instantiateItem(this, p3);
        if (p4 >= 0) {
            this.mItems.add(p4, v0_1);
        } else {
            this.mItems.add(v0_1);
        }
        return;
    }

    public void addTouchables(java.util.ArrayList p6)
    {
        int v1 = 0;
        while (v1 < this.getChildCount()) {
            android.view.View v0 = this.getChildAt(v1);
            if (v0.getVisibility() == 0) {
                android.support.v4.view.ViewPager$ItemInfo v2 = this.infoForChild(v0);
                if ((v2 != null) && (v2.position == this.mCurItem)) {
                    v0.addTouchables(p6);
                }
            }
            v1++;
        }
        return;
    }

    public void addView(android.view.View p4, int p5, android.view.ViewGroup$LayoutParams p6)
    {
        if (!this.checkLayoutParams(p6)) {
            p6 = this.generateLayoutParams(p6);
        }
        ((android.support.v4.view.ViewPager$LayoutParams) p6).isDecor = (((android.support.v4.view.ViewPager$LayoutParams) p6).isDecor | (p4 instanceof android.support.v4.view.ViewPager$Decor));
        if (!this.mInLayout) {
            super.addView(p4, p5, p6);
        } else {
            if ((((android.support.v4.view.ViewPager$LayoutParams) p6) == null) || (!((android.support.v4.view.ViewPager$LayoutParams) p6).isDecor)) {
                this.addViewInLayout(p4, p5, p6);
                p4.measure(this.mChildWidthMeasureSpec, this.mChildHeightMeasureSpec);
            } else {
                throw new IllegalStateException("Cannot add pager decor view during layout");
            }
        }
        return;
    }

    public boolean arrowScroll(int p7)
    {
        int v0 = this.findFocus();
        if (v0 == this) {
            v0 = 0;
        }
        boolean v1 = 0;
        android.view.View v2 = android.view.FocusFinder.getInstance().findNextFocus(this, v0, p7);
        if ((v2 == null) || (v2 == v0)) {
            if ((p7 != 17) && (p7 != 1)) {
                if ((p7 == 66) || (p7 == 2)) {
                    v1 = this.pageRight();
                }
            } else {
                v1 = this.pageLeft();
            }
        } else {
            if (p7 != 17) {
                if (p7 == 66) {
                    if ((v0 == 0) || (v2.getLeft() > v0.getLeft())) {
                        v1 = v2.requestFocus();
                    } else {
                        v1 = this.pageRight();
                    }
                }
            } else {
                if ((v0 == 0) || (v2.getLeft() < v0.getLeft())) {
                    v1 = v2.requestFocus();
                } else {
                    v1 = this.pageLeft();
                }
            }
        }
        if (v1) {
            this.playSoundEffect(android.view.SoundEffectConstants.getContantForFocusDirection(p7));
        }
        return v1;
    }

    public boolean beginFakeDrag()
    {
        int v4 = 0;
        if (!this.mIsBeingDragged) {
            this.mFakeDragging = 1;
            this.setScrollState(1);
            this.mLastMotionX = 0;
            this.mInitialMotionX = 0;
            if (this.mVelocityTracker != null) {
                this.mVelocityTracker.clear();
            } else {
                this.mVelocityTracker = android.view.VelocityTracker.obtain();
            }
            long v0 = android.os.SystemClock.uptimeMillis();
            android.view.MotionEvent v8 = android.view.MotionEvent.obtain(v0, v0, 0, 0, 0, 0);
            this.mVelocityTracker.addMovement(v8);
            v8.recycle();
            this.mFakeDragBeginTime = v0;
            v4 = 1;
        }
        return v4;
    }

    protected boolean canScroll(android.view.View p12, boolean p13, int p14, int p15, int p16)
    {
        int v0_3;
        if (!(p12 instanceof android.view.ViewGroup)) {
            if ((!p13) || (!android.support.v4.view.ViewCompat.canScrollHorizontally(p12, (- p14)))) {
                v0_3 = 0;
            } else {
                v0_3 = 1;
            }
        } else {
            int v9 = p12.getScrollX();
            int v10 = p12.getScrollY();
            int v8 = (((android.view.ViewGroup) p12).getChildCount() - 1);
            while (v8 >= 0) {
                android.view.View v1 = ((android.view.ViewGroup) p12).getChildAt(v8);
                if (((p15 + v9) < v1.getLeft()) || (((p15 + v9) >= v1.getRight()) || (((p16 + v10) < v1.getTop()) || (((p16 + v10) >= v1.getBottom()) || (!this.canScroll(v1, 1, p14, ((p15 + v9) - v1.getLeft()), ((p16 + v10) - v1.getTop()))))))) {
                    v8--;
                } else {
                    v0_3 = 1;
                }
            }
        }
        return v0_3;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        if ((!(p2 instanceof android.support.v4.view.ViewPager$LayoutParams)) || (!super.checkLayoutParams(p2))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public void computeScroll()
    {
        if ((this.mScroller.isFinished()) || (!this.mScroller.computeScrollOffset())) {
            this.completeScroll();
        } else {
            int v0 = this.getScrollX();
            int v1 = this.getScrollY();
            int v2 = this.mScroller.getCurrX();
            int v3 = this.mScroller.getCurrY();
            if ((v0 != v2) || (v1 != v3)) {
                this.scrollTo(v2, v3);
                this.pageScrolled(v2);
            }
            this.invalidate();
        }
        return;
    }

    void dataSetChanged()
    {
        if ((this.mItems.size() >= 3) || (this.mItems.size() >= this.mAdapter.getCount())) {
            int v3 = 0;
        } else {
            v3 = 1;
        }
        int v4 = -1;
        int v2 = 0;
        int v0 = 0;
        while (v0 < this.mItems.size()) {
            android.support.v4.view.ViewPager$ItemInfo v1_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v0));
            int v5 = this.mAdapter.getItemPosition(v1_1.object);
            if (v5 != -1) {
                if (v5 != -2) {
                    if (v1_1.position != v5) {
                        if (v1_1.position == this.mCurItem) {
                            v4 = v5;
                        }
                        v1_1.position = v5;
                        v3 = 1;
                    }
                } else {
                    this.mItems.remove(v0);
                    v0--;
                    if (v2 == 0) {
                        this.mAdapter.startUpdate(this);
                        v2 = 1;
                    }
                    this.mAdapter.destroyItem(this, v1_1.position, v1_1.object);
                    v3 = 1;
                    if (this.mCurItem == v1_1.position) {
                        v4 = Math.max(0, Math.min(this.mCurItem, (this.mAdapter.getCount() - 1)));
                    }
                }
            }
            v0++;
        }
        if (v2 != 0) {
            this.mAdapter.finishUpdate(this);
        }
        java.util.Collections.sort(this.mItems, android.support.v4.view.ViewPager.COMPARATOR);
        if (v4 >= 0) {
            this.setCurrentItemInternal(v4, 0, 1);
            v3 = 1;
        }
        if (v3 != 0) {
            this.populate();
            this.requestLayout();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        if ((!super.dispatchKeyEvent(p2)) && (!this.executeKeyEvent(p2))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p7)
    {
        int v1 = this.getChildCount();
        int v2 = 0;
        while (v2 < v1) {
            android.view.View v0 = this.getChildAt(v2);
            if (v0.getVisibility() == 0) {
                android.support.v4.view.ViewPager$ItemInfo v3 = this.infoForChild(v0);
                if ((v3 != null) && ((v3.position == this.mCurItem) && (v0.dispatchPopulateAccessibilityEvent(p7)))) {
                    int v4_2 = 1;
                    return v4_2;
                }
            }
            v2++;
        }
        v4_2 = 0;
        return v4_2;
    }

    float distanceInfluenceForSnapDuration(float p5)
    {
        return ((float) Math.sin(((double) ((float) (((double) (p5 - 1056964608)) * 0.4712389167638204)))));
    }

    public void draw(android.graphics.Canvas p10)
    {
        int v1 = 1;
        super.draw(p10);
        int v2 = 0;
        int v3 = android.support.v4.view.ViewCompat.getOverScrollMode(this);
        if ((v3 != 0) && ((v3 != 1) || ((this.mAdapter == null) || (this.mAdapter.getCount() <= 1)))) {
            this.mLeftEdge.finish();
            this.mRightEdge.finish();
        } else {
            if (!this.mLeftEdge.isFinished()) {
                int v4_0 = p10.save();
                int v0_0 = ((this.getHeight() - this.getPaddingTop()) - this.getPaddingBottom());
                p10.rotate(1132920832);
                p10.translate(((float) ((- v0_0) + this.getPaddingTop())), 0);
                this.mLeftEdge.setSize(v0_0, this.getWidth());
                v2 = (0 | this.mLeftEdge.draw(p10));
                p10.restoreToCount(v4_0);
            }
            if (!this.mRightEdge.isFinished()) {
                int v4_1 = p10.save();
                int v5 = this.getWidth();
                int v0_1 = ((this.getHeight() - this.getPaddingTop()) - this.getPaddingBottom());
                if (this.mAdapter != null) {
                    v1 = this.mAdapter.getCount();
                }
                p10.rotate(1119092736);
                p10.translate(((float) (- this.getPaddingTop())), ((float) (((- v1) * (this.mPageMargin + v5)) + this.mPageMargin)));
                this.mRightEdge.setSize(v0_1, v5);
                v2 |= this.mRightEdge.draw(p10);
                p10.restoreToCount(v4_1);
            }
        }
        if (v2 != 0) {
            this.invalidate();
        }
        return;
    }

    protected void drawableStateChanged()
    {
        super.drawableStateChanged();
        android.graphics.drawable.Drawable v0 = this.mMarginDrawable;
        if ((v0 != null) && (v0.isStateful())) {
            v0.setState(this.getDrawableState());
        }
        return;
    }

    public void endFakeDrag()
    {
        if (this.mFakeDragging) {
            android.view.VelocityTracker v6 = this.mVelocityTracker;
            v6.computeCurrentVelocity(1000, ((float) this.mMaximumVelocity));
            int v1 = ((int) android.support.v4.view.VelocityTrackerCompat.getYVelocity(v6, this.mActivePointerId));
            this.mPopulatePending = 1;
            int v5 = ((int) (this.mLastMotionX - this.mInitialMotionX));
            int v4 = this.getScrollX();
            int v7 = (this.getWidth() + this.mPageMargin);
            this.setCurrentItemInternal(this.determineTargetPage((v4 / v7), (((float) (v4 % v7)) / ((float) v7)), v1, v5), 1, 1, v1);
            this.endDrag();
            this.mFakeDragging = 0;
            return;
        } else {
            throw new IllegalStateException("No fake drag in progress. Call beginFakeDrag first.");
        }
    }

    public boolean executeKeyEvent(android.view.KeyEvent p5)
    {
        boolean v0 = 0;
        if (p5.getAction() == 0) {
            switch (p5.getKeyCode()) {
                case 21:
                    v0 = this.arrowScroll(17);
                    break;
                case 22:
                    v0 = this.arrowScroll(66);
                    break;
                case 61:
                    if (android.os.Build$VERSION.SDK_INT >= 11) {
                        if (!android.support.v4.view.KeyEventCompat.hasNoModifiers(p5)) {
                            if (android.support.v4.view.KeyEventCompat.hasModifiers(p5, 1)) {
                                v0 = this.arrowScroll(1);
                            }
                        } else {
                            v0 = this.arrowScroll(2);
                        }
                    }
                    break;
            }
        }
        return v0;
    }

    public void fakeDragBy(float p15)
    {
        if (this.mFakeDragging) {
            this.mLastMotionX = (this.mLastMotionX + p15);
            float v11 = (((float) this.getScrollX()) - p15);
            int v13 = (this.getWidth() + this.mPageMargin);
            float v9 = ((float) Math.max(0, ((this.mCurItem - 1) * v13)));
            float v10 = ((float) (Math.min((this.mCurItem + 1), (this.mAdapter.getCount() - 1)) * v13));
            if (v11 >= v9) {
                if (v11 > v10) {
                    v11 = v10;
                }
            } else {
                v11 = v9;
            }
            this.mLastMotionX = (this.mLastMotionX + (v11 - ((float) ((int) v11))));
            this.scrollTo(((int) v11), this.getScrollY());
            this.pageScrolled(((int) v11));
            android.view.MotionEvent v8 = android.view.MotionEvent.obtain(this.mFakeDragBeginTime, android.os.SystemClock.uptimeMillis(), 2, this.mLastMotionX, 0, 0);
            this.mVelocityTracker.addMovement(v8);
            v8.recycle();
            return;
        } else {
            throw new IllegalStateException("No fake drag in progress. Call beginFakeDrag first.");
        }
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        return new android.support.v4.view.ViewPager$LayoutParams();
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet p3)
    {
        return new android.support.v4.view.ViewPager$LayoutParams(this.getContext(), p3);
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        return this.generateDefaultLayoutParams();
    }

    public android.support.v4.view.PagerAdapter getAdapter()
    {
        return this.mAdapter;
    }

    public int getCurrentItem()
    {
        return this.mCurItem;
    }

    public int getOffscreenPageLimit()
    {
        return this.mOffscreenPageLimit;
    }

    public int getPageMargin()
    {
        return this.mPageMargin;
    }

    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View p3)
    {
        while(true) {
            int v1_0;
            android.view.ViewParent v0 = p3.getParent();
            if (v0 == this) {
                v1_0 = this.infoForChild(p3);
            } else {
                if ((v0 == null) || (!(v0 instanceof android.view.View))) {
                    break;
                }
                p3 = ((android.view.View) v0);
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View p5)
    {
        int v0 = 0;
        while (v0 < this.mItems.size()) {
            int v1_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v0));
            if (!this.mAdapter.isViewFromObject(p5, v1_0.object)) {
                v0++;
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    void initViewPager()
    {
        this.setWillNotDraw(0);
        this.setDescendantFocusability(262144);
        this.setFocusable(1);
        android.content.Context v1 = this.getContext();
        this.mScroller = new android.widget.Scroller(v1, android.support.v4.view.ViewPager.sInterpolator);
        android.view.ViewConfiguration v0 = android.view.ViewConfiguration.get(v1);
        this.mTouchSlop = android.support.v4.view.ViewConfigurationCompat.getScaledPagingTouchSlop(v0);
        this.mMinimumVelocity = v0.getScaledMinimumFlingVelocity();
        this.mMaximumVelocity = v0.getScaledMaximumFlingVelocity();
        this.mLeftEdge = new android.support.v4.widget.EdgeEffectCompat(v1);
        this.mRightEdge = new android.support.v4.widget.EdgeEffectCompat(v1);
        this.mFlingDistance = ((int) (1103626240 * v1.getResources().getDisplayMetrics().density));
        return;
    }

    public boolean isFakeDragging()
    {
        return this.mFakeDragging;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        this.mFirstLayout = 1;
        return;
    }

    protected void onDraw(android.graphics.Canvas p9)
    {
        super.onDraw(p9);
        if ((this.mPageMargin > 0) && (this.mMarginDrawable != null)) {
            int v2 = this.getScrollX();
            int v3 = this.getWidth();
            int v1 = (v2 % (this.mPageMargin + v3));
            if (v1 != 0) {
                int v0 = ((v2 - v1) + v3);
                this.mMarginDrawable.setBounds(v0, this.mTopPageBounds, (this.mPageMargin + v0), this.mBottomPageBounds);
                this.mMarginDrawable.draw(p9);
            }
        }
        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent p15)
    {
        int v0_8;
        int v6 = (p15.getAction() & 255);
        if ((v6 != 3) && (v6 != 1)) {
            if (v6 != 0) {
                if (!this.mIsBeingDragged) {
                    if (this.mIsUnableToDrag) {
                        v0_8 = 0;
                        return v0_8;
                    }
                } else {
                    v0_8 = 1;
                    return v0_8;
                }
            }
            switch (v6) {
                case 0:
                    int v0_28 = p15.getX();
                    this.mInitialMotionX = v0_28;
                    this.mLastMotionX = v0_28;
                    this.mLastMotionY = p15.getY();
                    this.mActivePointerId = android.support.v4.view.MotionEventCompat.getPointerId(p15, 0);
                    if (this.mScrollState != 2) {
                        this.completeScroll();
                        this.mIsBeingDragged = 0;
                        this.mIsUnableToDrag = 0;
                    } else {
                        this.mIsBeingDragged = 1;
                        this.mIsUnableToDrag = 0;
                        this.setScrollState(1);
                    }
                case 2:
                    int v7 = this.mActivePointerId;
                    if (v7 == -1) {
                    } else {
                        int v9 = android.support.v4.view.MotionEventCompat.findPointerIndex(p15, v7);
                        float v10 = android.support.v4.view.MotionEventCompat.getX(p15, v9);
                        float v8 = (v10 - this.mLastMotionX);
                        float v11 = Math.abs(v8);
                        float v12 = android.support.v4.view.MotionEventCompat.getY(p15, v9);
                        float v13 = Math.abs((v12 - this.mLastMotionY));
                        if (!this.canScroll(this, 0, ((int) v8), ((int) v10), ((int) v12))) {
                            if ((v11 <= ((float) this.mTouchSlop)) || (v11 <= v13)) {
                                if (v13 <= ((float) this.mTouchSlop)) {
                                } else {
                                    this.mIsUnableToDrag = 1;
                                }
                            } else {
                                this.mIsBeingDragged = 1;
                                this.setScrollState(1);
                                this.mLastMotionX = v10;
                                this.setScrollingCacheEnabled(1);
                            }
                        } else {
                            this.mLastMotionX = v10;
                            this.mInitialMotionX = v10;
                            this.mLastMotionY = v12;
                            v0_8 = 0;
                        }
                    }
                    break;
                case 6:
                    this.onSecondaryPointerUp(p15);
                    break;
            }
            if (!this.mIsBeingDragged) {
                if (this.mVelocityTracker == null) {
                    this.mVelocityTracker = android.view.VelocityTracker.obtain();
                }
                this.mVelocityTracker.addMovement(p15);
            }
            v0_8 = this.mIsBeingDragged;
        } else {
            this.mIsBeingDragged = 0;
            this.mIsUnableToDrag = 0;
            this.mActivePointerId = -1;
            if (this.mVelocityTracker != null) {
                this.mVelocityTracker.recycle();
                this.mVelocityTracker = 0;
            }
            v0_8 = 0;
        }
        return v0_8;
    }

    protected void onLayout(boolean p23, int p24, int p25, int p26, int p27)
    {
        this.mInLayout = 1;
        this.populate();
        this.mInLayout = 0;
        int v5 = this.getChildCount();
        int v19 = (p26 - p24);
        int v7 = (p27 - p25);
        int v14 = this.getPaddingLeft();
        int v16 = this.getPaddingTop();
        int v15 = this.getPaddingRight();
        int v13 = this.getPaddingBottom();
        int v17 = this.getScrollX();
        int v6 = 0;
        int v9 = 0;
        while (v9 < v5) {
            android.view.View v2 = this.getChildAt(v9);
            if (v2.getVisibility() != 8) {
                android.support.v4.view.ViewPager$LayoutParams v12_1 = ((android.support.v4.view.ViewPager$LayoutParams) v2.getLayoutParams());
                int v4 = 0;
                if (!v12_1.isDecor) {
                    android.support.v4.view.ViewPager$ItemInfo v10 = this.infoForChild(v2);
                    if (v10 != null) {
                        int v3_2 = (v14 + ((this.mPageMargin + v19) * v10.position));
                        int v4_1 = v16;
                        v2.layout(v3_2, v4_1, (v2.getMeasuredWidth() + v3_2), (v2.getMeasuredHeight() + v4_1));
                    }
                } else {
                    int v3_0;
                    int v18 = (v12_1.gravity & 112);
                    switch ((v12_1.gravity & 7)) {
                        case 1:
                            v3_0 = Math.max(((v19 - v2.getMeasuredWidth()) / 2), v14);
                            break;
                        case 2:
                        case 4:
                        default:
                            v3_0 = v14;
                            break;
                        case 3:
                            v3_0 = v14;
                            v14 += v2.getMeasuredWidth();
                            break;
                        case 5:
                            v3_0 = ((v19 - v15) - v2.getMeasuredWidth());
                            v15 += v2.getMeasuredWidth();
                            break;
                    }
                    int v4_0;
                    switch (v18) {
                        case 16:
                            v4_0 = Math.max(((v7 - v2.getMeasuredHeight()) / 2), v16);
                            break;
                        case 48:
                            v4_0 = v16;
                            v16 += v2.getMeasuredHeight();
                            break;
                        case 80:
                            v4_0 = ((v7 - v13) - v2.getMeasuredHeight());
                            v13 += v2.getMeasuredHeight();
                            break;
                        default:
                            v4_0 = v16;
                    }
                    int v3_1 = (v3_0 + v17);
                    v6++;
                    v2.layout(v3_1, v4_0, (v2.getMeasuredWidth() + v3_1), (v2.getMeasuredHeight() + v4_0));
                }
            }
            v9++;
        }
        this.mTopPageBounds = v16;
        this.mBottomPageBounds = (v7 - v13);
        this.mDecorChildCount = v6;
        this.mFirstLayout = 0;
        return;
    }

    protected void onMeasure(int p21, int p22)
    {
        this.setMeasuredDimension(android.support.v4.view.ViewPager.getDefaultSize(0, p21), android.support.v4.view.ViewPager.getDefaultSize(0, p22));
        int v5 = ((this.getMeasuredWidth() - this.getPaddingLeft()) - this.getPaddingRight());
        int v4 = ((this.getMeasuredHeight() - this.getPaddingTop()) - this.getPaddingBottom());
        int v13_0 = this.getChildCount();
        int v11_0 = 0;
        while (v11_0 < v13_0) {
            android.view.View v3_1 = this.getChildAt(v11_0);
            if (v3_1.getVisibility() != 8) {
                android.support.v4.view.ViewPager$LayoutParams v12_3 = ((android.support.v4.view.ViewPager$LayoutParams) v3_1.getLayoutParams());
                if ((v12_3 != null) && (v12_3.isDecor)) {
                    int v7;
                    int v10 = (v12_3.gravity & 7);
                    int v14 = (v12_3.gravity & 112);
                    android.util.Log.d("ViewPager", new StringBuilder().append("gravity: ").append(v12_3.gravity).append(" hgrav: ").append(v10).append(" vgrav: ").append(v14).toString());
                    int v15 = -2147483648;
                    int v8 = -2147483648;
                    if ((v14 != 48) && (v14 != 80)) {
                        v7 = 0;
                    } else {
                        v7 = 1;
                    }
                    if ((v10 != 3) && (v10 != 5)) {
                        int v6 = 0;
                    } else {
                        v6 = 1;
                    }
                    if (v7 == 0) {
                        if (v6 != 0) {
                            v8 = 1073741824;
                        }
                    } else {
                        v15 = 1073741824;
                    }
                    v3_1.measure(android.view.View$MeasureSpec.makeMeasureSpec(v5, v15), android.view.View$MeasureSpec.makeMeasureSpec(v4, v8));
                    if (v7 == 0) {
                        if (v6 != 0) {
                            v5 -= v3_1.getMeasuredWidth();
                        }
                    } else {
                        v4 -= v3_1.getMeasuredHeight();
                    }
                }
            }
            v11_0++;
        }
        this.mChildWidthMeasureSpec = android.view.View$MeasureSpec.makeMeasureSpec(v5, 1073741824);
        this.mChildHeightMeasureSpec = android.view.View$MeasureSpec.makeMeasureSpec(v4, 1073741824);
        this.mInLayout = 1;
        this.populate();
        this.mInLayout = 0;
        int v13_1 = this.getChildCount();
        int v11_1 = 0;
        while (v11_1 < v13_1) {
            android.view.View v3_0 = this.getChildAt(v11_1);
            if (v3_0.getVisibility() != 8) {
                android.support.v4.view.ViewPager$LayoutParams v12_1 = ((android.support.v4.view.ViewPager$LayoutParams) v3_0.getLayoutParams());
                if ((v12_1 == null) || (!v12_1.isDecor)) {
                    v3_0.measure(this.mChildWidthMeasureSpec, this.mChildHeightMeasureSpec);
                }
            }
            v11_1++;
        }
        return;
    }

    protected void onPageScrolled(int p17, float p18, int p19)
    {
        if (this.mDecorChildCount > 0) {
            int v12 = this.getScrollX();
            int v10 = this.getPaddingLeft();
            int v11 = this.getPaddingRight();
            int v13 = this.getWidth();
            int v4 = this.getChildCount();
            int v8 = 0;
            while (v8 < v4) {
                android.view.View v3 = this.getChildAt(v8);
                android.support.v4.view.ViewPager$LayoutParams v9_1 = ((android.support.v4.view.ViewPager$LayoutParams) v3.getLayoutParams());
                if (v9_1.isDecor) {
                    int v5_0;
                    switch ((v9_1.gravity & 7)) {
                        case 1:
                            v5_0 = Math.max(((v13 - v3.getMeasuredWidth()) / 2), v10);
                            break;
                        case 2:
                        case 4:
                        default:
                            v5_0 = v10;
                            break;
                        case 3:
                            v5_0 = v10;
                            v10 += v3.getWidth();
                            break;
                        case 5:
                            v5_0 = ((v13 - v11) - v3.getMeasuredWidth());
                            v11 += v3.getMeasuredWidth();
                            break;
                    }
                    int v6 = ((v5_0 + v12) - v3.getLeft());
                    if (v6 != 0) {
                        v3.offsetLeftAndRight(v6);
                    }
                }
                v8++;
            }
        }
        if (this.mOnPageChangeListener != null) {
            this.mOnPageChangeListener.onPageScrolled(p17, p18, p19);
        }
        if (this.mInternalPageChangeListener != null) {
            this.mInternalPageChangeListener.onPageScrolled(p17, p18, p19);
        }
        this.mCalledSuper = 1;
        return;
    }

    protected boolean onRequestFocusInDescendants(int p10, android.graphics.Rect p11)
    {
        int v6;
        int v5;
        int v2;
        int v1 = this.getChildCount();
        if ((p10 & 2) == 0) {
            v6 = (v1 - 1);
            v5 = -1;
            v2 = -1;
        } else {
            v6 = 0;
            v5 = 1;
            v2 = v1;
        }
        int v3 = v6;
        while (v3 != v2) {
            android.view.View v0 = this.getChildAt(v3);
            if (v0.getVisibility() == 0) {
                android.support.v4.view.ViewPager$ItemInfo v4 = this.infoForChild(v0);
                if ((v4 != null) && ((v4.position == this.mCurItem) && (v0.requestFocus(p10, p11)))) {
                    int v7_0 = 1;
                    return v7_0;
                }
            }
            v3 += v5;
        }
        v7_0 = 0;
        return v7_0;
    }

    public void onRestoreInstanceState(android.os.Parcelable p5)
    {
        if ((p5 instanceof android.support.v4.view.ViewPager$SavedState)) {
            super.onRestoreInstanceState(((android.support.v4.view.ViewPager$SavedState) p5).getSuperState());
            if (this.mAdapter == null) {
                this.mRestoredCurItem = ((android.support.v4.view.ViewPager$SavedState) p5).position;
                this.mRestoredAdapterState = ((android.support.v4.view.ViewPager$SavedState) p5).adapterState;
                this.mRestoredClassLoader = ((android.support.v4.view.ViewPager$SavedState) p5).loader;
            } else {
                this.mAdapter.restoreState(((android.support.v4.view.ViewPager$SavedState) p5).adapterState, ((android.support.v4.view.ViewPager$SavedState) p5).loader);
                this.setCurrentItemInternal(((android.support.v4.view.ViewPager$SavedState) p5).position, 0, 1);
            }
        } else {
            super.onRestoreInstanceState(p5);
        }
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        android.support.v4.view.ViewPager$SavedState v0_1 = new android.support.v4.view.ViewPager$SavedState(super.onSaveInstanceState());
        v0_1.position = this.mCurItem;
        if (this.mAdapter != null) {
            v0_1.adapterState = this.mAdapter.saveState();
        }
        return v0_1;
    }

    protected void onSizeChanged(int p3, int p4, int p5, int p6)
    {
        super.onSizeChanged(p3, p4, p5, p6);
        if (p3 != p5) {
            this.recomputeScrollPosition(p3, p5, this.mPageMargin, this.mPageMargin);
        }
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p32)
    {
        android.support.v4.widget.EdgeEffectCompat v28_65;
        if (!this.mFakeDragging) {
            if ((p32.getAction() != 0) || (p32.getEdgeFlags() == 0)) {
                if ((this.mAdapter != null) && (this.mAdapter.getCount() != 0)) {
                    if (this.mVelocityTracker == null) {
                        this.mVelocityTracker = android.view.VelocityTracker.obtain();
                    }
                    this.mVelocityTracker.addMovement(p32);
                    boolean v12 = 0;
                    switch ((p32.getAction() & 255)) {
                        case 0:
                            this = this.completeScroll();
                            android.support.v4.widget.EdgeEffectCompat v28_61 = p32.getX();
                            this.mInitialMotionX = v28_61;
                            this.mLastMotionX = v28_61;
                            this.mActivePointerId = android.support.v4.view.MotionEventCompat.getPointerId(p32, 0);
                            break;
                        case 1:
                            if (!this.mIsBeingDragged) {
                            } else {
                                android.view.VelocityTracker v21 = this.mVelocityTracker;
                                v21.computeCurrentVelocity(1000, ((float) this.mMaximumVelocity));
                                int v9 = ((int) android.support.v4.view.VelocityTrackerCompat.getXVelocity(v21, this.mActivePointerId));
                                this.mPopulatePending = 1;
                                int v23_1 = (this.getWidth() + this.mPageMargin);
                                float v19_1 = this.getScrollX();
                                this.setCurrentItemInternal(this.determineTargetPage((v19_1 / v23_1), (((float) (v19_1 % v23_1)) / ((float) v23_1)), v9, ((int) (android.support.v4.view.MotionEventCompat.getX(p32, android.support.v4.view.MotionEventCompat.findPointerIndex(p32, this.mActivePointerId)) - this.mInitialMotionX))), 1, 1, v9);
                                this.mActivePointerId = -1;
                                this = this.endDrag();
                                v12 = (this.mLeftEdge.onRelease() | this.mRightEdge.onRelease());
                            }
                            break;
                        case 2:
                            if (!this.mIsBeingDragged) {
                                int v17 = android.support.v4.view.MotionEventCompat.findPointerIndex(p32, this.mActivePointerId);
                                float v24_0 = android.support.v4.view.MotionEventCompat.getX(p32, v17);
                                float v25 = Math.abs((v24_0 - this.mLastMotionX));
                                float vtmp25 = Math.abs((android.support.v4.view.MotionEventCompat.getY(p32, v17) - this.mLastMotionY));
                                if ((v25 > ((float) this.mTouchSlop)) && (v25 > vtmp25)) {
                                    this.mIsBeingDragged = 1;
                                    this.mLastMotionX = v24_0;
                                    this.setScrollState(1);
                                    this.setScrollingCacheEnabled(1);
                                }
                            }
                            if (!this.mIsBeingDragged) {
                            } else {
                                float v24_1 = android.support.v4.view.MotionEventCompat.getX(p32, android.support.v4.view.MotionEventCompat.findPointerIndex(p32, this.mActivePointerId));
                                float v7 = (this.mLastMotionX - v24_1);
                                this.mLastMotionX = v24_1;
                                float v19_0 = (((float) this.getScrollX()) + v7);
                                int v22 = this.getWidth();
                                int v23_0 = (v22 + this.mPageMargin);
                                int v10 = (this.mAdapter.getCount() - 1);
                                float v11 = ((float) Math.max(0, ((this.mCurItem - 1) * v23_0)));
                                float v18 = ((float) (Math.min((this.mCurItem + 1), v10) * v23_0));
                                if (v19_0 >= v11) {
                                    if (v19_0 > v18) {
                                        if (v18 == ((float) (v10 * v23_0))) {
                                            v12 = this.mRightEdge.onPull(((v19_0 - v18) / ((float) v22)));
                                        }
                                        v19_0 = v18;
                                    }
                                } else {
                                    if (v11 == 0) {
                                        v12 = this.mLeftEdge.onPull(((- v19_0) / ((float) v22)));
                                    }
                                    v19_0 = v11;
                                }
                                this.mLastMotionX = (this.mLastMotionX + (v19_0 - ((float) ((int) v19_0))));
                                this.scrollTo(((int) v19_0), this.getScrollY());
                                this.pageScrolled(((int) v19_0));
                            }
                            break;
                        case 3:
                            if (this.mIsBeingDragged) {
                                this.setCurrentItemInternal(this.mCurItem, 1, 1);
                                this.mActivePointerId = -1;
                                this = this.endDrag();
                                v12 = (this.mLeftEdge.onRelease() | this.mRightEdge.onRelease());
                            } else {
                            }
                        case 4:
                        default:
                            break;
                        case 5:
                            int v8 = android.support.v4.view.MotionEventCompat.getActionIndex(p32);
                            this.mLastMotionX = android.support.v4.view.MotionEventCompat.getX(p32, v8);
                            this.mActivePointerId = android.support.v4.view.MotionEventCompat.getPointerId(p32, v8);
                            break;
                        case 6:
                            this = this.onSecondaryPointerUp(p32);
                            this.mLastMotionX = android.support.v4.view.MotionEventCompat.getX(p32, android.support.v4.view.MotionEventCompat.findPointerIndex(p32, this.mActivePointerId));
                            break;
                    }
                    if (v12) {
                        this.invalidate();
                    }
                    v28_65 = 1;
                } else {
                    v28_65 = 0;
                }
            } else {
                v28_65 = 0;
            }
        } else {
            v28_65 = 1;
        }
        return v28_65;
    }

    boolean pageLeft()
    {
        int v0 = 1;
        if (this.mCurItem <= 0) {
            v0 = 0;
        } else {
            this.setCurrentItem((this.mCurItem - 1), 1);
        }
        return v0;
    }

    boolean pageRight()
    {
        int v0 = 1;
        if ((this.mAdapter == null) || (this.mCurItem >= (this.mAdapter.getCount() - 1))) {
            v0 = 0;
        } else {
            this.setCurrentItem((this.mCurItem + 1), 1);
        }
        return v0;
    }

    void populate()
    {
        if ((this.mAdapter != null) && ((!this.mPopulatePending) && (this.getWindowToken() != null))) {
            this.mAdapter.startUpdate(this);
            int v8 = this.mOffscreenPageLimit;
            int v9 = Math.max(0, (this.mCurItem - v8));
            int v4 = Math.min((this.mAdapter.getCount() - 1), (this.mCurItem + v8));
            int v7_2 = -1;
            int v5_1 = 0;
            while (v5_1 < this.mItems.size()) {
                android.support.v4.view.ViewPager$ItemInfo v6_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5_1));
                if (((v6_1.position >= v9) && (v6_1.position <= v4)) || (v6_1.scrolling)) {
                    if ((v7_2 < v4) && (v6_1.position > v9)) {
                        int v7_1 = (v7_2 + 1);
                        if (v7_1 < v9) {
                            v7_1 = v9;
                        }
                        while ((v7_1 <= v4) && (v7_1 < v6_1.position)) {
                            this.addNewItem(v7_1, v5_1);
                            v7_1++;
                            v5_1++;
                        }
                    }
                } else {
                    this.mItems.remove(v5_1);
                    v5_1--;
                    this.mAdapter.destroyItem(this, v6_1.position, v6_1.object);
                }
                v7_2 = v6_1.position;
                v5_1++;
            }
            int v7_3;
            if (this.mItems.size() <= 0) {
                v7_3 = -1;
            } else {
                v7_3 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get((this.mItems.size() - 1))).position;
            }
            if (v7_3 < v4) {
                int v7_0 = (v7_3 + 1);
                if (v7_0 <= v9) {
                    v7_0 = v9;
                }
                while (v7_0 <= v4) {
                    this.addNewItem(v7_0, -1);
                    v7_0++;
                }
            }
            android.support.v4.view.ViewPager$ItemInfo v2_0 = 0;
            int v5_2 = 0;
            while (v5_2 < this.mItems.size()) {
                if (((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5_2)).position != this.mCurItem) {
                    v5_2++;
                } else {
                    v2_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5_2));
                    break;
                }
            }
            boolean v10_30;
            if (v2_0 == null) {
                v10_30 = 0;
            } else {
                v10_30 = v2_0.object;
            }
            this.mAdapter.setPrimaryItem(this, this.mCurItem, v10_30);
            this.mAdapter.finishUpdate(this);
            if (this.hasFocus()) {
                android.support.v4.view.ViewPager$ItemInfo v6_2;
                android.view.View v3 = this.findFocus();
                if (v3 == null) {
                    v6_2 = 0;
                } else {
                    v6_2 = this.infoForAnyChild(v3);
                }
                if ((v6_2 == null) || (v6_2.position != this.mCurItem)) {
                    int v5_0 = 0;
                    while (v5_0 < this.getChildCount()) {
                        android.view.View v1 = this.getChildAt(v5_0);
                        android.support.v4.view.ViewPager$ItemInfo v6_3 = this.infoForChild(v1);
                        if ((v6_3 != null) && ((v6_3.position == this.mCurItem) && (v1.requestFocus(2)))) {
                            break;
                        }
                        v5_0++;
                    }
                }
            }
        }
        return;
    }

    public void setAdapter(android.support.v4.view.PagerAdapter p9)
    {
        if (this.mAdapter != null) {
            this.mAdapter.unregisterDataSetObserver(this.mObserver);
            this.mAdapter.startUpdate(this);
            int v0 = 0;
            while (v0 < this.mItems.size()) {
                android.support.v4.view.ViewPager$ItemInfo v1_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v0));
                this.mAdapter.destroyItem(this, v1_1.position, v1_1.object);
                v0++;
            }
            this.mAdapter.finishUpdate(this);
            this.mItems.clear();
            this.removeNonDecorViews();
            this.mCurItem = 0;
            this.scrollTo(0, 0);
        }
        android.support.v4.view.PagerAdapter v2 = this.mAdapter;
        this.mAdapter = p9;
        if (this.mAdapter != null) {
            if (this.mObserver == null) {
                this.mObserver = new android.support.v4.view.ViewPager$PagerObserver(this, 0);
            }
            this.mAdapter.registerDataSetObserver(this.mObserver);
            this.mPopulatePending = 0;
            if (this.mRestoredCurItem < 0) {
                this.populate();
            } else {
                this.mAdapter.restoreState(this.mRestoredAdapterState, this.mRestoredClassLoader);
                this.setCurrentItemInternal(this.mRestoredCurItem, 0, 1);
                this.mRestoredCurItem = -1;
                this.mRestoredAdapterState = 0;
                this.mRestoredClassLoader = 0;
            }
        }
        if ((this.mAdapterChangeListener != null) && (v2 != p9)) {
            this.mAdapterChangeListener.onAdapterChanged(v2, p9);
        }
        return;
    }

    public void setCurrentItem(int p3)
    {
        int v0_1;
        this.mPopulatePending = 0;
        if (this.mFirstLayout) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.setCurrentItemInternal(p3, v0_1, 0);
        return;
    }

    public void setCurrentItem(int p2, boolean p3)
    {
        this.mPopulatePending = 0;
        this.setCurrentItemInternal(p2, p3, 0);
        return;
    }

    void setCurrentItemInternal(int p2, boolean p3, boolean p4)
    {
        this.setCurrentItemInternal(p2, p3, p4, 0);
        return;
    }

    void setCurrentItemInternal(int p8, boolean p9, boolean p10, int p11)
    {
        int v1 = 1;
        if ((this.mAdapter != null) && (this.mAdapter.getCount() > 0)) {
            if ((p10) || ((this.mCurItem != p8) || (this.mItems.size() == 0))) {
                if (p8 >= 0) {
                    if (p8 >= this.mAdapter.getCount()) {
                        p8 = (this.mAdapter.getCount() - 1);
                    }
                } else {
                    p8 = 0;
                }
                int v3 = this.mOffscreenPageLimit;
                if ((p8 > (this.mCurItem + v3)) || (p8 < (this.mCurItem - v3))) {
                    int v2 = 0;
                    while (v2 < this.mItems.size()) {
                        ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v2)).scrolling = 1;
                        v2++;
                    }
                }
                if (this.mCurItem == p8) {
                    v1 = 0;
                }
                this.mCurItem = p8;
                this.populate();
                int v0 = ((this.getWidth() + this.mPageMargin) * p8);
                if (!p9) {
                    if ((v1 != 0) && (this.mOnPageChangeListener != null)) {
                        this.mOnPageChangeListener.onPageSelected(p8);
                    }
                    if ((v1 != 0) && (this.mInternalPageChangeListener != null)) {
                        this.mInternalPageChangeListener.onPageSelected(p8);
                    }
                    this.completeScroll();
                    this.scrollTo(v0, 0);
                } else {
                    this.smoothScrollTo(v0, 0, p11);
                    if ((v1 != 0) && (this.mOnPageChangeListener != null)) {
                        this.mOnPageChangeListener.onPageSelected(p8);
                    }
                    if ((v1 != 0) && (this.mInternalPageChangeListener != null)) {
                        this.mInternalPageChangeListener.onPageSelected(p8);
                    }
                }
            } else {
                this.setScrollingCacheEnabled(0);
            }
        } else {
            this.setScrollingCacheEnabled(0);
        }
        return;
    }

    android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener p2)
    {
        android.support.v4.view.ViewPager$OnPageChangeListener v0 = this.mInternalPageChangeListener;
        this.mInternalPageChangeListener = p2;
        return v0;
    }

    public void setOffscreenPageLimit(int p5)
    {
        if (p5 < 1) {
            android.util.Log.w("ViewPager", new StringBuilder().append("Requested offscreen page limit ").append(p5).append(" too small; defaulting to ").append(1).toString());
            p5 = 1;
        }
        if (p5 != this.mOffscreenPageLimit) {
            this.mOffscreenPageLimit = p5;
            this.populate();
        }
        return;
    }

    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener p1)
    {
        this.mAdapterChangeListener = p1;
        return;
    }

    public void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener p1)
    {
        this.mOnPageChangeListener = p1;
        return;
    }

    public void setPageMargin(int p3)
    {
        int v0 = this.mPageMargin;
        this.mPageMargin = p3;
        this.recomputeScrollPosition(this.getWidth(), this.getWidth(), p3, v0);
        this.requestLayout();
        return;
    }

    public void setPageMarginDrawable(int p2)
    {
        this.setPageMarginDrawable(this.getContext().getResources().getDrawable(p2));
        return;
    }

    public void setPageMarginDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mMarginDrawable = p2;
        if (p2 != null) {
            this.refreshDrawableState();
        }
        int v0;
        if (p2 != null) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        this.setWillNotDraw(v0);
        this.invalidate();
        return;
    }

    void smoothScrollTo(int p2, int p3)
    {
        this.smoothScrollTo(p2, p3, 0);
        return;
    }

    void smoothScrollTo(int p15, int p16, int p17)
    {
        if (this.getChildCount() != 0) {
            int v2 = this.getScrollX();
            int v3 = this.getScrollY();
            int v4 = (p15 - v2);
            int v5 = (p16 - v3);
            if ((v4 != 0) || (v5 != 0)) {
                int v6_0;
                this.setScrollingCacheEnabled(1);
                this.mScrolling = 1;
                this.setScrollState(2);
                int v11 = this.getWidth();
                int v9 = (v11 / 2);
                float v7 = (((float) v9) + (((float) v9) * this.distanceInfluenceForSnapDuration(Math.min(1065353216, ((1065353216 * ((float) Math.abs(v4))) / ((float) v11))))));
                int v17_1 = Math.abs(p17);
                if (v17_1 <= 0) {
                    v6_0 = ((int) ((1065353216 + (((float) Math.abs(v4)) / ((float) (this.mPageMargin + v11)))) * 1120403456));
                } else {
                    v6_0 = (Math.round((1148846080 * Math.abs((v7 / ((float) v17_1))))) * 4);
                }
                this.mScroller.startScroll(v2, v3, v4, v5, Math.min(v6_0, 600));
                this.invalidate();
            } else {
                this.completeScroll();
                this.setScrollState(0);
            }
        } else {
            this.setScrollingCacheEnabled(0);
        }
        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable p2)
    {
        if ((!super.verifyDrawable(p2)) && (p2 != this.mMarginDrawable)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public abstract void appendRecord();

    public abstract Object getRecord();

    public abstract int getRecordCount();

    AccessibilityEventCompat$AccessibilityEventStubImpl()
    {
        return;
    }

    public void appendRecord(android.view.accessibility.AccessibilityEvent p1, Object p2)
    {
        return;
    }

    public Object getRecord(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        return 0;
    }

    public int getRecordCount(android.view.accessibility.AccessibilityEvent p2)
    {
        return 0;
    }

    AccessibilityEventCompat$AccessibilityEventIcsImpl()
    {
        return;
    }

    public void appendRecord(android.view.accessibility.AccessibilityEvent p1, Object p2)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompatIcs.appendRecord(p1, p2);
        return;
    }

    public Object getRecord(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompatIcs.getRecord(p2, p3);
    }

    public int getRecordCount(android.view.accessibility.AccessibilityEvent p2)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompatIcs.getRecordCount(p2);
    }

    static AccessibilityEventCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventStubImpl();
        } else {
            android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventIcsImpl();
        }
        return;
    }

    private AccessibilityEventCompat()
    {
        return;
    }

    public static void appendRecord(android.view.accessibility.AccessibilityEvent p2, android.support.v4.view.accessibility.AccessibilityRecordCompat p3)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.appendRecord(p2, p3.getImpl());
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityRecordCompat getRecord(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityRecordCompat(android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.getRecord(p2, p3));
    }

    public static int getRecordCount(android.view.accessibility.AccessibilityEvent p1)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.getRecordCount(p1);
    }

    AccessibilityEventCompatIcs()
    {
        return;
    }

    public static void appendRecord(android.view.accessibility.AccessibilityEvent p0, Object p1)
    {
        p0.appendRecord(((android.view.accessibility.AccessibilityRecord) p1));
        return;
    }

    public static Object getRecord(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        return p1.getRecord(p2);
    }

    public static int getRecordCount(android.view.accessibility.AccessibilityEvent p1)
    {
        return p1.getRecordCount();
    }

    public abstract void onAccessibilityStateChanged();

    AccessibilityManagerCompat$AccessibilityManagerIcsImpl$1(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public void onAccessibilityStateChanged(boolean p2)
    {
        this.val$listener.onAccessibilityStateChanged(p2);
        return;
    }

    public abstract boolean addAccessibilityStateChangeListener();

    public abstract java.util.List getEnabledAccessibilityServiceList();

    public abstract java.util.List getInstalledAccessibilityServiceList();

    public abstract boolean isTouchExplorationEnabled();

    public abstract Object newAccessiblityStateChangeListener();

    public abstract boolean removeAccessibilityStateChangeListener();

    AccessibilityManagerCompat$AccessibilityManagerStubImpl()
    {
        return;
    }

    public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p3)
    {
        return 0;
    }

    public java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2, int p3)
    {
        return java.util.Collections.emptyList();
    }

    public java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2)
    {
        return java.util.Collections.emptyList();
    }

    public boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager p2)
    {
        return 0;
    }

    public Object newAccessiblityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p2)
    {
        return 0;
    }

    public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p3)
    {
        return 0;
    }

    AccessibilityManagerCompat$AccessibilityManagerIcsImpl()
    {
        return;
    }

    public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(p2, p3.mListener);
    }

    public java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(p2, p3);
    }

    public java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(p2);
    }

    public boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.isTouchExplorationEnabled(p2);
    }

    public Object newAccessiblityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.newAccessibilityStateChangeListener(new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl$1(this, p2));
    }

    public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(p2, p3.mListener);
    }

    public AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat()
    {
        this.mListener = android.support.v4.view.accessibility.AccessibilityManagerCompat.access$000().newAccessiblityStateChangeListener(this);
        return;
    }

    public abstract void onAccessibilityStateChanged();

    static AccessibilityManagerCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerStubImpl();
        } else {
            android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl();
        }
        return;
    }

    public AccessibilityManagerCompat()
    {
        return;
    }

    static synthetic android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerVersionImpl access$000()
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL;
    }

    public static boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.addAccessibilityStateChangeListener(p1, p2);
    }

    public static java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1, int p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.getEnabledAccessibilityServiceList(p1, p2);
    }

    public static java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.getInstalledAccessibilityServiceList(p1);
    }

    public static boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.removeAccessibilityStateChangeListener(p1, p2);
    }

    AccessibilityManagerCompatIcs$1(android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge p1)
    {
        this.val$bridge = p1;
        return;
    }

    public void onAccessibilityStateChanged(boolean p2)
    {
        this.val$bridge.onAccessibilityStateChanged(p2);
        return;
    }

    AccessibilityManagerCompatIcs()
    {
        return;
    }

    public static boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, Object p2)
    {
        return p1.addAccessibilityStateChangeListener(((android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener) p2));
    }

    public static java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1, int p2)
    {
        return p1.getEnabledAccessibilityServiceList(p2);
    }

    public static java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1)
    {
        return p1.getInstalledAccessibilityServiceList();
    }

    public static boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager p1)
    {
        return p1.isTouchExplorationEnabled();
    }

    public static Object newAccessibilityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge p1)
    {
        return new android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$1(p1);
    }

    public static boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, Object p2)
    {
        return p1.removeAccessibilityStateChangeListener(((android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener) p2));
    }

    public abstract void addAction();

    public abstract void addChild();

    public abstract java.util.List findAccessibilityNodeInfosByText();

    public abstract int getActions();

    public abstract void getBoundsInParent();

    public abstract void getBoundsInScreen();

    public abstract Object getChild();

    public abstract int getChildCount();

    public abstract CharSequence getClassName();

    public abstract CharSequence getContentDescription();

    public abstract CharSequence getPackageName();

    public abstract Object getParent();

    public abstract CharSequence getText();

    public abstract int getWindowId();

    public abstract boolean isCheckable();

    public abstract boolean isChecked();

    public abstract boolean isClickable();

    public abstract boolean isEnabled();

    public abstract boolean isFocusable();

    public abstract boolean isFocused();

    public abstract boolean isLongClickable();

    public abstract boolean isPassword();

    public abstract boolean isScrollable();

    public abstract boolean isSelected();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract boolean performAction();

    public abstract void recycle();

    public abstract void setBoundsInParent();

    public abstract void setBoundsInScreen();

    public abstract void setCheckable();

    public abstract void setChecked();

    public abstract void setClassName();

    public abstract void setClickable();

    public abstract void setContentDescription();

    public abstract void setEnabled();

    public abstract void setFocusable();

    public abstract void setFocused();

    public abstract void setLongClickable();

    public abstract void setPackageName();

    public abstract void setParent();

    public abstract void setPassword();

    public abstract void setScrollable();

    public abstract void setSelected();

    public abstract void setSource();

    public abstract void setText();

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl()
    {
        return;
    }

    public void addAction(Object p1, int p2)
    {
        return;
    }

    public void addChild(Object p1, android.view.View p2)
    {
        return;
    }

    public java.util.List findAccessibilityNodeInfosByText(Object p2, String p3)
    {
        return java.util.Collections.emptyList();
    }

    public int getActions(Object p2)
    {
        return 0;
    }

    public void getBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public void getBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public Object getChild(Object p2, int p3)
    {
        return 0;
    }

    public int getChildCount(Object p2)
    {
        return 0;
    }

    public CharSequence getClassName(Object p2)
    {
        return 0;
    }

    public CharSequence getContentDescription(Object p2)
    {
        return 0;
    }

    public CharSequence getPackageName(Object p2)
    {
        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getParent(Object p2)
    {
        return 0;
    }

    public bridge synthetic Object getParent(Object p2)
    {
        return this.getParent(p2);
    }

    public CharSequence getText(Object p2)
    {
        return 0;
    }

    public int getWindowId(Object p2)
    {
        return 0;
    }

    public boolean isCheckable(Object p2)
    {
        return 0;
    }

    public boolean isChecked(Object p2)
    {
        return 0;
    }

    public boolean isClickable(Object p2)
    {
        return 0;
    }

    public boolean isEnabled(Object p2)
    {
        return 0;
    }

    public boolean isFocusable(Object p2)
    {
        return 0;
    }

    public boolean isFocused(Object p2)
    {
        return 0;
    }

    public boolean isLongClickable(Object p2)
    {
        return 0;
    }

    public boolean isPassword(Object p2)
    {
        return 0;
    }

    public boolean isScrollable(Object p2)
    {
        return 0;
    }

    public boolean isSelected(Object p2)
    {
        return 0;
    }

    public Object obtain()
    {
        return 0;
    }

    public Object obtain(android.view.View p2)
    {
        return 0;
    }

    public Object obtain(Object p2)
    {
        return 0;
    }

    public boolean performAction(Object p2, int p3)
    {
        return 0;
    }

    public void recycle(Object p1)
    {
        return;
    }

    public void setBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public void setBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public void setCheckable(Object p1, boolean p2)
    {
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        return;
    }

    public void setClickable(Object p1, boolean p2)
    {
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        return;
    }

    public void setFocusable(Object p1, boolean p2)
    {
        return;
    }

    public void setFocused(Object p1, boolean p2)
    {
        return;
    }

    public void setLongClickable(Object p1, boolean p2)
    {
        return;
    }

    public void setPackageName(Object p1, CharSequence p2)
    {
        return;
    }

    public void setParent(Object p1, android.view.View p2)
    {
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        return;
    }

    public void setSelected(Object p1, boolean p2)
    {
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        return;
    }

    public void setText(Object p1, CharSequence p2)
    {
        return;
    }

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl()
    {
        return;
    }

    public void addAction(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.addAction(p1, p2);
        return;
    }

    public void addChild(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.addChild(p1, p2);
        return;
    }

    public java.util.List findAccessibilityNodeInfosByText(Object p2, String p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(p2, p3);
    }

    public int getActions(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getActions(p2);
    }

    public void getBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getBoundsInParent(p1, p2);
        return;
    }

    public void getBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getBoundsInScreen(p1, p2);
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getChild(Object p3, int p4)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.access$000().getChild(p3, p4));
    }

    public bridge synthetic Object getChild(Object p2, int p3)
    {
        return this.getChild(p2, p3);
    }

    public int getChildCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getChildCount(p2);
    }

    public CharSequence getClassName(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getClassName(p2);
    }

    public CharSequence getContentDescription(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getContentDescription(p2);
    }

    public CharSequence getPackageName(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getPackageName(p2);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getParent(Object p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.access$000().getParent(p3));
    }

    public bridge synthetic Object getParent(Object p2)
    {
        return this.getParent(p2);
    }

    public CharSequence getText(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getText(p2);
    }

    public int getWindowId(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getWindowId(p2);
    }

    public boolean isCheckable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isCheckable(p2);
    }

    public boolean isChecked(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isChecked(p2);
    }

    public boolean isClickable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isClickable(p2);
    }

    public boolean isEnabled(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isEnabled(p2);
    }

    public boolean isFocusable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isFocusable(p2);
    }

    public boolean isFocused(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isFocused(p2);
    }

    public boolean isLongClickable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isLongClickable(p2);
    }

    public boolean isPassword(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isPassword(p2);
    }

    public boolean isScrollable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isScrollable(p2);
    }

    public boolean isSelected(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isSelected(p2);
    }

    public Object obtain()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.obtain();
    }

    public Object obtain(android.view.View p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.obtain(p2);
    }

    public Object obtain(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.obtain(p2);
    }

    public boolean performAction(Object p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.performAction(p2, p3);
    }

    public void recycle(Object p1)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.recycle(p1);
        return;
    }

    public void setBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setBoundsInParent(p1, p2);
        return;
    }

    public void setBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setBoundsInScreen(p1, p2);
        return;
    }

    public void setCheckable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setCheckable(p1, p2);
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setChecked(p1, p2);
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setClassName(p1, p2);
        return;
    }

    public void setClickable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setClickable(p1, p2);
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setContentDescription(p1, p2);
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setEnabled(p1, p2);
        return;
    }

    public void setFocusable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setFocusable(p1, p2);
        return;
    }

    public void setFocused(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setFocused(p1, p2);
        return;
    }

    public void setLongClickable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setLongClickable(p1, p2);
        return;
    }

    public void setPackageName(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setPackageName(p1, p2);
        return;
    }

    public void setParent(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setParent(p1, p2);
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setPassword(p1, p2);
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setScrollable(p1, p2);
        return;
    }

    public void setSelected(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setSelected(p1, p2);
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setSource(p1, p2);
        return;
    }

    public void setText(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setText(p1, p2);
        return;
    }

    static AccessibilityNodeInfoCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl();
        } else {
            android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl();
        }
        return;
    }

    public AccessibilityNodeInfoCompat(Object p1)
    {
        this.mInfo = p1;
        return;
    }

    static synthetic android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl access$000()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL;
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain()
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtain());
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtain(p3.mInfo));
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View p2)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtain(p2));
    }

    public void addAction(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.addAction(this.mInfo, p3);
        return;
    }

    public void addChild(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.addChild(this.mInfo, p3);
        return;
    }

    public boolean equals(Object p6)
    {
        int v1 = 1;
        if (this != p6) {
            if (p6 != null) {
                if (this.getClass() == p6.getClass()) {
                    if (this.mInfo != null) {
                        if (!this.mInfo.equals(((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) p6).mInfo)) {
                            v1 = 0;
                        }
                    } else {
                        if (((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) p6).mInfo != null) {
                            v1 = 0;
                        }
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    public java.util.List findAccessibilityNodeInfosByText(String p8)
    {
        java.util.ArrayList v4_1 = new java.util.ArrayList();
        java.util.List v3 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.findAccessibilityNodeInfosByText(this.mInfo, p8);
        int v2 = v3.size();
        int v0 = 0;
        while (v0 < v2) {
            v4_1.add(new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(v3.get(v0)));
            v0++;
        }
        return v4_1;
    }

    public int getActions()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActions(this.mInfo);
    }

    public void getBoundsInParent(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getBoundsInParent(this.mInfo, p3);
        return;
    }

    public void getBoundsInScreen(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getBoundsInScreen(this.mInfo, p3);
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getChild(int p4)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getChild(this.mInfo, p4));
    }

    public int getChildCount()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getChildCount(this.mInfo);
    }

    public CharSequence getClassName()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getClassName(this.mInfo);
    }

    public CharSequence getContentDescription()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getContentDescription(this.mInfo);
    }

    public Object getImpl()
    {
        return this.mInfo;
    }

    public CharSequence getPackageName()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getPackageName(this.mInfo);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getParent()
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getParent(this.mInfo));
    }

    public CharSequence getText()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getText(this.mInfo);
    }

    public int getWindowId()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getWindowId(this.mInfo);
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mInfo != null) {
            v0_2 = this.mInfo.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isCheckable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isCheckable(this.mInfo);
    }

    public boolean isChecked()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isChecked(this.mInfo);
    }

    public boolean isClickable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isClickable(this.mInfo);
    }

    public boolean isEnabled()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isEnabled(this.mInfo);
    }

    public boolean isFocusable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isFocusable(this.mInfo);
    }

    public boolean isFocused()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isFocused(this.mInfo);
    }

    public boolean isLongClickable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isLongClickable(this.mInfo);
    }

    public boolean isPassword()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isPassword(this.mInfo);
    }

    public boolean isScrollable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isScrollable(this.mInfo);
    }

    public boolean isSelected()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isSelected(this.mInfo);
    }

    public boolean performAction(int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.performAction(this.mInfo, p3);
    }

    public void recycle()
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.recycle(this.mInfo);
        return;
    }

    public void setBoundsInParent(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setBoundsInParent(this.mInfo, p3);
        return;
    }

    public void setBoundsInScreen(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setBoundsInParent(this.mInfo, p3);
        return;
    }

    public void setCheckable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setCheckable(this.mInfo, p3);
        return;
    }

    public void setChecked(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setChecked(this.mInfo, p3);
        return;
    }

    public void setClassName(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setClassName(this.mInfo, p3);
        return;
    }

    public void setClickable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setClickable(this.mInfo, p3);
        return;
    }

    public void setContentDescription(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setContentDescription(this.mInfo, p3);
        return;
    }

    public void setEnabled(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setEnabled(this.mInfo, p3);
        return;
    }

    public void setFocusable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setFocusable(this.mInfo, p3);
        return;
    }

    public void setFocused(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setFocused(this.mInfo, p3);
        return;
    }

    public void setLongClickable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setLongClickable(this.mInfo, p3);
        return;
    }

    public void setPackageName(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setPackageName(this.mInfo, p3);
        return;
    }

    public void setParent(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setParent(this.mInfo, p3);
        return;
    }

    public void setPassword(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setPassword(this.mInfo, p3);
        return;
    }

    public void setScrollable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setScrollable(this.mInfo, p3);
        return;
    }

    public void setSelected(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setSelected(this.mInfo, p3);
        return;
    }

    public void setSource(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setSource(this.mInfo, p3);
        return;
    }

    public void setText(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setText(this.mInfo, p3);
        return;
    }

    AccessibilityNodeInfoCompatIcs()
    {
        return;
    }

    public static void addAction(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).addAction(p1);
        return;
    }

    public static void addChild(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).addChild(p1);
        return;
    }

    public static java.util.List findAccessibilityNodeInfosByText(Object p1, String p2)
    {
        return ((java.util.List) ((android.view.accessibility.AccessibilityNodeInfo) p1).findAccessibilityNodeInfosByText(p2));
    }

    public static int getActions(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getActions();
    }

    public static void getBoundsInParent(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).getBoundsInParent(p1);
        return;
    }

    public static void getBoundsInScreen(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).getBoundsInScreen(p1);
        return;
    }

    public static Object getChild(Object p1, int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getChild(p2);
    }

    public static int getChildCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getChildCount();
    }

    public static CharSequence getClassName(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getClassName();
    }

    public static CharSequence getContentDescription(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getContentDescription();
    }

    public static CharSequence getPackageName(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getPackageName();
    }

    public static Object getParent(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getParent();
    }

    public static CharSequence getText(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getText();
    }

    public static int getWindowId(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getWindowId();
    }

    public static boolean isCheckable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isCheckable();
    }

    public static boolean isChecked(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isChecked();
    }

    public static boolean isClickable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isClickable();
    }

    public static boolean isEnabled(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isEnabled();
    }

    public static boolean isFocusable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isFocusable();
    }

    public static boolean isFocused(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isFocused();
    }

    public static boolean isLongClickable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isLongClickable();
    }

    public static boolean isPassword(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isPassword();
    }

    public static boolean isScrollable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isScrollable();
    }

    public static boolean isSelected(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isSelected();
    }

    public static Object obtain()
    {
        return android.view.accessibility.AccessibilityNodeInfo.obtain();
    }

    public static Object obtain(android.view.View p1)
    {
        return android.view.accessibility.AccessibilityNodeInfo.obtain(p1);
    }

    public static Object obtain(Object p1)
    {
        return android.view.accessibility.AccessibilityNodeInfo.obtain(((android.view.accessibility.AccessibilityNodeInfo) p1));
    }

    public static boolean performAction(Object p1, int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).performAction(p2);
    }

    public static void recycle(Object p0)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).recycle();
        return;
    }

    public static void setBoundsInParent(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setBoundsInParent(p1);
        return;
    }

    public static void setBoundsInScreen(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setBoundsInScreen(p1);
        return;
    }

    public static void setCheckable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setCheckable(p1);
        return;
    }

    public static void setChecked(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setChecked(p1);
        return;
    }

    public static void setClassName(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setClassName(p1);
        return;
    }

    public static void setClickable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setClickable(p1);
        return;
    }

    public static void setContentDescription(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setContentDescription(p1);
        return;
    }

    public static void setEnabled(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setEnabled(p1);
        return;
    }

    public static void setFocusable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setFocusable(p1);
        return;
    }

    public static void setFocused(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setFocused(p1);
        return;
    }

    public static void setLongClickable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setLongClickable(p1);
        return;
    }

    public static void setPackageName(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setPackageName(p1);
        return;
    }

    public static void setParent(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setParent(p1);
        return;
    }

    public static void setPassword(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setPassword(p1);
        return;
    }

    public static void setScrollable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setScrollable(p1);
        return;
    }

    public static void setSelected(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setSelected(p1);
        return;
    }

    public static void setSource(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setSource(p1);
        return;
    }

    public static void setText(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setText(p1);
        return;
    }

    public abstract int getAddedCount();

    public abstract CharSequence getBeforeText();

    public abstract CharSequence getClassName();

    public abstract CharSequence getContentDescription();

    public abstract int getCurrentItemIndex();

    public abstract int getFromIndex();

    public abstract int getItemCount();

    public abstract int getMaxScrollX();

    public abstract int getMaxScrollY();

    public abstract android.os.Parcelable getParcelableData();

    public abstract int getRemovedCount();

    public abstract int getScrollX();

    public abstract int getScrollY();

    public abstract Object getSource();

    public abstract java.util.List getText();

    public abstract int getToIndex();

    public abstract int getWindowId();

    public abstract boolean isChecked();

    public abstract boolean isEnabled();

    public abstract boolean isFullScreen();

    public abstract boolean isPassword();

    public abstract boolean isScrollable();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract void recycle();

    public abstract void setAddedCount();

    public abstract void setBeforeText();

    public abstract void setChecked();

    public abstract void setClassName();

    public abstract void setContentDescription();

    public abstract void setCurrentItemIndex();

    public abstract void setEnabled();

    public abstract void setFromIndex();

    public abstract void setFullScreen();

    public abstract void setItemCount();

    public abstract void setMaxScrollX();

    public abstract void setMaxScrollY();

    public abstract void setParcelableData();

    public abstract void setPassword();

    public abstract void setRemovedCount();

    public abstract void setScrollX();

    public abstract void setScrollY();

    public abstract void setScrollable();

    public abstract void setSource();

    public abstract void setToIndex();

    AccessibilityRecordCompat$AccessibilityRecordIcsImpl()
    {
        return;
    }

    public int getAddedCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getAddedCount(p2);
    }

    public CharSequence getBeforeText(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getBeforeText(p2);
    }

    public CharSequence getClassName(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getClassName(p2);
    }

    public CharSequence getContentDescription(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getContentDescription(p2);
    }

    public int getCurrentItemIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getCurrentItemIndex(p2);
    }

    public int getFromIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getFromIndex(p2);
    }

    public int getItemCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getItemCount(p2);
    }

    public int getMaxScrollX(Object p2)
    {
        return 0;
    }

    public int getMaxScrollY(Object p2)
    {
        return 0;
    }

    public android.os.Parcelable getParcelableData(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getParcelableData(p2);
    }

    public int getRemovedCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getRemovedCount(p2);
    }

    public int getScrollX(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getScrollX(p2);
    }

    public int getScrollY(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getScrollY(p2);
    }

    public Object getSource(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getSource(p2);
    }

    public java.util.List getText(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getText(p2);
    }

    public int getToIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getToIndex(p2);
    }

    public int getWindowId(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getWindowId(p2);
    }

    public boolean isChecked(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isChecked(p2);
    }

    public boolean isEnabled(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isEnabled(p2);
    }

    public boolean isFullScreen(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isFullScreen(p2);
    }

    public boolean isPassword(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isPassword(p2);
    }

    public boolean isScrollable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isScrollable(p2);
    }

    public Object obtain()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.obtain();
    }

    public Object obtain(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.obtain(p2);
    }

    public void recycle(Object p1)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.recycle(p1);
        return;
    }

    public void setAddedCount(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setAddedCount(p1, p2);
        return;
    }

    public void setBeforeText(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setBeforeText(p1, p2);
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setChecked(p1, p2);
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setClassName(p1, p2);
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setContentDescription(p1, p2);
        return;
    }

    public void setCurrentItemIndex(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setCurrentItemIndex(p1, p2);
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setEnabled(p1, p2);
        return;
    }

    public void setFromIndex(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setFromIndex(p1, p2);
        return;
    }

    public void setFullScreen(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setFullScreen(p1, p2);
        return;
    }

    public void setItemCount(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setItemCount(p1, p2);
        return;
    }

    public void setMaxScrollX(Object p1, int p2)
    {
        return;
    }

    public void setMaxScrollY(Object p1, int p2)
    {
        return;
    }

    public void setParcelableData(Object p1, android.os.Parcelable p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setParcelableData(p1, p2);
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setPassword(p1, p2);
        return;
    }

    public void setRemovedCount(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setRemovedCount(p1, p2);
        return;
    }

    public void setScrollX(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setScrollX(p1, p2);
        return;
    }

    public void setScrollY(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setScrollY(p1, p2);
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setScrollable(p1, p2);
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setSource(p1, p2);
        return;
    }

    public void setToIndex(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setToIndex(p1, p2);
        return;
    }

    AccessibilityRecordCompat$AccessibilityRecordStubImpl()
    {
        return;
    }

    public int getAddedCount(Object p2)
    {
        return 0;
    }

    public CharSequence getBeforeText(Object p2)
    {
        return 0;
    }

    public CharSequence getClassName(Object p2)
    {
        return 0;
    }

    public CharSequence getContentDescription(Object p2)
    {
        return 0;
    }

    public int getCurrentItemIndex(Object p2)
    {
        return 0;
    }

    public int getFromIndex(Object p2)
    {
        return 0;
    }

    public int getItemCount(Object p2)
    {
        return 0;
    }

    public int getMaxScrollX(Object p2)
    {
        return 0;
    }

    public int getMaxScrollY(Object p2)
    {
        return 0;
    }

    public android.os.Parcelable getParcelableData(Object p2)
    {
        return 0;
    }

    public int getRemovedCount(Object p2)
    {
        return 0;
    }

    public int getScrollX(Object p2)
    {
        return 0;
    }

    public int getScrollY(Object p2)
    {
        return 0;
    }

    public Object getSource(Object p2)
    {
        return 0;
    }

    public java.util.List getText(Object p2)
    {
        return java.util.Collections.emptyList();
    }

    public int getToIndex(Object p2)
    {
        return 0;
    }

    public int getWindowId(Object p2)
    {
        return 0;
    }

    public boolean isChecked(Object p2)
    {
        return 0;
    }

    public boolean isEnabled(Object p2)
    {
        return 0;
    }

    public boolean isFullScreen(Object p2)
    {
        return 0;
    }

    public boolean isPassword(Object p2)
    {
        return 0;
    }

    public boolean isScrollable(Object p2)
    {
        return 0;
    }

    public Object obtain()
    {
        return 0;
    }

    public Object obtain(Object p2)
    {
        return 0;
    }

    public void recycle(Object p1)
    {
        return;
    }

    public void setAddedCount(Object p1, int p2)
    {
        return;
    }

    public void setBeforeText(Object p1, CharSequence p2)
    {
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        return;
    }

    public void setCurrentItemIndex(Object p1, int p2)
    {
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        return;
    }

    public void setFromIndex(Object p1, int p2)
    {
        return;
    }

    public void setFullScreen(Object p1, boolean p2)
    {
        return;
    }

    public void setItemCount(Object p1, int p2)
    {
        return;
    }

    public void setMaxScrollX(Object p1, int p2)
    {
        return;
    }

    public void setMaxScrollY(Object p1, int p2)
    {
        return;
    }

    public void setParcelableData(Object p1, android.os.Parcelable p2)
    {
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        return;
    }

    public void setRemovedCount(Object p1, int p2)
    {
        return;
    }

    public void setScrollX(Object p1, int p2)
    {
        return;
    }

    public void setScrollY(Object p1, int p2)
    {
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        return;
    }

    public void setToIndex(Object p1, int p2)
    {
        return;
    }

    static AccessibilityRecordCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl();
        } else {
            android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl();
        }
        return;
    }

    public AccessibilityRecordCompat(Object p1)
    {
        this.mRecord = p1;
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityRecordCompat obtain()
    {
        return new android.support.v4.view.accessibility.AccessibilityRecordCompat(android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.obtain());
    }

    public static android.support.v4.view.accessibility.AccessibilityRecordCompat obtain(android.support.v4.view.accessibility.AccessibilityRecordCompat p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityRecordCompat(android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.obtain(p3.mRecord));
    }

    public boolean equals(Object p6)
    {
        int v1 = 1;
        if (this != p6) {
            if (p6 != null) {
                if (this.getClass() == p6.getClass()) {
                    if (this.mRecord != null) {
                        if (!this.mRecord.equals(((android.support.v4.view.accessibility.AccessibilityRecordCompat) p6).mRecord)) {
                            v1 = 0;
                        }
                    } else {
                        if (((android.support.v4.view.accessibility.AccessibilityRecordCompat) p6).mRecord != null) {
                            v1 = 0;
                        }
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    public int getAddedCount()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getAddedCount(this.mRecord);
    }

    public CharSequence getBeforeText()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getBeforeText(this.mRecord);
    }

    public CharSequence getClassName()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getClassName(this.mRecord);
    }

    public CharSequence getContentDescription()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getContentDescription(this.mRecord);
    }

    public int getCurrentItemIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getCurrentItemIndex(this.mRecord);
    }

    public int getFromIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getFromIndex(this.mRecord);
    }

    public Object getImpl()
    {
        return this.mRecord;
    }

    public int getItemCount()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getItemCount(this.mRecord);
    }

    public android.os.Parcelable getParcelableData()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getParcelableData(this.mRecord);
    }

    public int getRemovedCount()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getRemovedCount(this.mRecord);
    }

    public int getScrollX()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getScrollX(this.mRecord);
    }

    public int getScrollY()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getScrollY(this.mRecord);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource()
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getSource(this.mRecord));
    }

    public java.util.List getText()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getText(this.mRecord);
    }

    public int getToIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getToIndex(this.mRecord);
    }

    public int getWindowId()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getWindowId(this.mRecord);
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mRecord != null) {
            v0_2 = this.mRecord.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isChecked()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isChecked(this.mRecord);
    }

    public boolean isEnabled()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isEnabled(this.mRecord);
    }

    public boolean isFullScreen()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isFullScreen(this.mRecord);
    }

    public boolean isPassword()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isPassword(this.mRecord);
    }

    public boolean isScrollable()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isScrollable(this.mRecord);
    }

    public void recycle()
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.recycle(this.mRecord);
        return;
    }

    public void setAddedCount(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setAddedCount(this.mRecord, p3);
        return;
    }

    public void setBeforeText(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setBeforeText(this.mRecord, p3);
        return;
    }

    public void setChecked(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setChecked(this.mRecord, p3);
        return;
    }

    public void setClassName(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setClassName(this.mRecord, p3);
        return;
    }

    public void setContentDescription(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setContentDescription(this.mRecord, p3);
        return;
    }

    public void setCurrentItemIndex(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setCurrentItemIndex(this.mRecord, p3);
        return;
    }

    public void setEnabled(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setEnabled(this.mRecord, p3);
        return;
    }

    public void setFromIndex(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setFromIndex(this.mRecord, p3);
        return;
    }

    public void setFullScreen(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setFullScreen(this.mRecord, p3);
        return;
    }

    public void setItemCount(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setItemCount(this.mRecord, p3);
        return;
    }

    public void setParcelableData(android.os.Parcelable p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setParcelableData(this.mRecord, p3);
        return;
    }

    public void setPassword(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setPassword(this.mRecord, p3);
        return;
    }

    public void setRemovedCount(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setRemovedCount(this.mRecord, p3);
        return;
    }

    public void setScrollX(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setScrollX(this.mRecord, p3);
        return;
    }

    public void setScrollY(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setScrollY(this.mRecord, p3);
        return;
    }

    public void setScrollable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setScrollable(this.mRecord, p3);
        return;
    }

    public void setSource(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setSource(this.mRecord, p3);
        return;
    }

    public void setToIndex(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setToIndex(this.mRecord, p3);
        return;
    }

    AccessibilityRecordCompatIcs()
    {
        return;
    }

    public static int getAddedCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getAddedCount();
    }

    public static CharSequence getBeforeText(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getBeforeText();
    }

    public static CharSequence getClassName(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getClassName();
    }

    public static CharSequence getContentDescription(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getContentDescription();
    }

    public static int getCurrentItemIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getCurrentItemIndex();
    }

    public static int getFromIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getFromIndex();
    }

    public static int getItemCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getItemCount();
    }

    public static android.os.Parcelable getParcelableData(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getParcelableData();
    }

    public static int getRemovedCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getRemovedCount();
    }

    public static int getScrollX(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getScrollX();
    }

    public static int getScrollY(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getScrollY();
    }

    public static Object getSource(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getSource();
    }

    public static java.util.List getText(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getText();
    }

    public static int getToIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getToIndex();
    }

    public static int getWindowId(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getWindowId();
    }

    public static boolean isChecked(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isChecked();
    }

    public static boolean isEnabled(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isEnabled();
    }

    public static boolean isFullScreen(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isFullScreen();
    }

    public static boolean isPassword(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isPassword();
    }

    public static boolean isScrollable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isScrollable();
    }

    public static Object obtain()
    {
        return android.view.accessibility.AccessibilityRecord.obtain();
    }

    public static Object obtain(Object p1)
    {
        return android.view.accessibility.AccessibilityRecord.obtain(((android.view.accessibility.AccessibilityRecord) p1));
    }

    public static void recycle(Object p0)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).recycle();
        return;
    }

    public static void setAddedCount(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setAddedCount(p1);
        return;
    }

    public static void setBeforeText(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setBeforeText(p1);
        return;
    }

    public static void setChecked(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setChecked(p1);
        return;
    }

    public static void setClassName(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setClassName(p1);
        return;
    }

    public static void setContentDescription(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setContentDescription(p1);
        return;
    }

    public static void setCurrentItemIndex(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setCurrentItemIndex(p1);
        return;
    }

    public static void setEnabled(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setEnabled(p1);
        return;
    }

    public static void setFromIndex(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setFromIndex(p1);
        return;
    }

    public static void setFullScreen(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setFullScreen(p1);
        return;
    }

    public static void setItemCount(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setItemCount(p1);
        return;
    }

    public static void setParcelableData(Object p0, android.os.Parcelable p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setParcelableData(p1);
        return;
    }

    public static void setPassword(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setPassword(p1);
        return;
    }

    public static void setRemovedCount(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setRemovedCount(p1);
        return;
    }

    public static void setScrollX(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setScrollX(p1);
        return;
    }

    public static void setScrollY(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setScrollY(p1);
        return;
    }

    public static void setScrollable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setScrollable(p1);
        return;
    }

    public static void setSource(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setSource(p1);
        return;
    }

    public static void setToIndex(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setToIndex(p1);
        return;
    }

    public CursorAdapter$ChangeObserver(android.support.v4.widget.CursorAdapter p2)
    {
        this.this$0 = p2;
        super(new android.os.Handler());
        return;
    }

    public boolean deliverSelfNotifications()
    {
        return 1;
    }

    public void onChange(boolean p2)
    {
        this.this$0.onContentChanged();
        return;
    }

    private CursorAdapter$MyDataSetObserver(android.support.v4.widget.CursorAdapter p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic CursorAdapter$MyDataSetObserver(android.support.v4.widget.CursorAdapter p1, android.support.v4.widget.CursorAdapter$1 p2)
    {
        this(p1);
        return;
    }

    public void onChanged()
    {
        this.this$0.mDataValid = 1;
        this.this$0.notifyDataSetChanged();
        return;
    }

    public void onInvalidated()
    {
        this.this$0.mDataValid = 0;
        this.this$0.notifyDataSetInvalidated();
        return;
    }

    public abstract void changeCursor();

    public abstract CharSequence convertToString();

    public abstract android.database.Cursor getCursor();

    public abstract android.database.Cursor runQueryOnBackgroundThread();

    public CursorAdapter(android.content.Context p2, android.database.Cursor p3)
    {
        this.init(p2, p3, 1);
        return;
    }

    public CursorAdapter(android.content.Context p1, android.database.Cursor p2, int p3)
    {
        this.init(p1, p2, p3);
        return;
    }

    public CursorAdapter(android.content.Context p2, android.database.Cursor p3, boolean p4)
    {
        int v0;
        if (!p4) {
            v0 = 2;
        } else {
            v0 = 1;
        }
        this.init(p2, p3, v0);
        return;
    }

    public abstract void bindView();

    public void changeCursor(android.database.Cursor p2)
    {
        android.database.Cursor v0 = this.swapCursor(p2);
        if (v0 != null) {
            v0.close();
        }
        return;
    }

    public CharSequence convertToString(android.database.Cursor p2)
    {
        String v0;
        if (p2 != null) {
            v0 = p2.toString();
        } else {
            v0 = "";
        }
        return v0;
    }

    public int getCount()
    {
        if ((!this.mDataValid) || (this.mCursor == null)) {
            int v0_2 = 0;
        } else {
            v0_2 = this.mCursor.getCount();
        }
        return v0_2;
    }

    public android.database.Cursor getCursor()
    {
        return this.mCursor;
    }

    public android.view.View getDropDownView(int p4, android.view.View p5, android.view.ViewGroup p6)
    {
        android.view.View v0;
        if (!this.mDataValid) {
            v0 = 0;
        } else {
            this.mCursor.moveToPosition(p4);
            if (p5 != null) {
                v0 = p5;
            } else {
                v0 = this.newDropDownView(this.mContext, this.mCursor, p6);
            }
            this.bindView(v0, this.mContext, this.mCursor);
        }
        return v0;
    }

    public android.widget.Filter getFilter()
    {
        if (this.mCursorFilter == null) {
            this.mCursorFilter = new android.support.v4.widget.CursorFilter(this);
        }
        return this.mCursorFilter;
    }

    public android.widget.FilterQueryProvider getFilterQueryProvider()
    {
        return this.mFilterQueryProvider;
    }

    public Object getItem(int p2)
    {
        if ((!this.mDataValid) || (this.mCursor == null)) {
            android.database.Cursor v0_2 = 0;
        } else {
            this.mCursor.moveToPosition(p2);
            v0_2 = this.mCursor;
        }
        return v0_2;
    }

    public long getItemId(int p4)
    {
        long v0_0 = 0;
        if ((this.mDataValid) && ((this.mCursor != null) && (this.mCursor.moveToPosition(p4)))) {
            v0_0 = this.mCursor.getLong(this.mRowIDColumn);
        }
        return v0_0;
    }

    public android.view.View getView(int p5, android.view.View p6, android.view.ViewGroup p7)
    {
        if (this.mDataValid) {
            if (this.mCursor.moveToPosition(p5)) {
                android.view.View v0;
                if (p6 != null) {
                    v0 = p6;
                } else {
                    v0 = this.newView(this.mContext, this.mCursor, p7);
                }
                this.bindView(v0, this.mContext, this.mCursor);
                return v0;
            } else {
                throw new IllegalStateException(new StringBuilder().append("couldn\'t move cursor to position ").append(p5).toString());
            }
        } else {
            throw new IllegalStateException("this should only be called when the cursor is valid");
        }
    }

    public boolean hasStableIds()
    {
        return 1;
    }

    void init(android.content.Context p5, android.database.Cursor p6, int p7)
    {
        int v0 = 1;
        if ((p7 & 1) != 1) {
            this.mAutoRequery = 0;
        } else {
            p7 |= 2;
            this.mAutoRequery = 1;
        }
        if (p6 == null) {
            v0 = 0;
        }
        android.database.DataSetObserver v1_1;
        this.mCursor = p6;
        this.mDataValid = v0;
        this.mContext = p5;
        if (v0 == 0) {
            v1_1 = -1;
        } else {
            v1_1 = p6.getColumnIndexOrThrow("_id");
        }
        this.mRowIDColumn = v1_1;
        if ((p7 & 2) != 2) {
            this.mChangeObserver = 0;
            this.mDataSetObserver = 0;
        } else {
            this.mChangeObserver = new android.support.v4.widget.CursorAdapter$ChangeObserver(this);
            this.mDataSetObserver = new android.support.v4.widget.CursorAdapter$MyDataSetObserver(this, 0);
        }
        if (v0 != 0) {
            if (this.mChangeObserver != null) {
                p6.registerContentObserver(this.mChangeObserver);
            }
            if (this.mDataSetObserver != null) {
                p6.registerDataSetObserver(this.mDataSetObserver);
            }
        }
        return;
    }

    protected void init(android.content.Context p2, android.database.Cursor p3, boolean p4)
    {
        int v0;
        if (!p4) {
            v0 = 2;
        } else {
            v0 = 1;
        }
        this.init(p2, p3, v0);
        return;
    }

    public android.view.View newDropDownView(android.content.Context p2, android.database.Cursor p3, android.view.ViewGroup p4)
    {
        return this.newView(p2, p3, p4);
    }

    public abstract android.view.View newView();

    protected void onContentChanged()
    {
        if ((this.mAutoRequery) && ((this.mCursor != null) && (!this.mCursor.isClosed()))) {
            this.mDataValid = this.mCursor.requery();
        }
        return;
    }

    public android.database.Cursor runQueryOnBackgroundThread(CharSequence p2)
    {
        android.database.Cursor v0_1;
        if (this.mFilterQueryProvider == null) {
            v0_1 = this.mCursor;
        } else {
            v0_1 = this.mFilterQueryProvider.runQuery(p2);
        }
        return v0_1;
    }

    public void setFilterQueryProvider(android.widget.FilterQueryProvider p1)
    {
        this.mFilterQueryProvider = p1;
        return;
    }

    public android.database.Cursor swapCursor(android.database.Cursor p3)
    {
        android.database.Cursor v0;
        if (p3 != this.mCursor) {
            v0 = this.mCursor;
            if (v0 != null) {
                if (this.mChangeObserver != null) {
                    v0.unregisterContentObserver(this.mChangeObserver);
                }
                if (this.mDataSetObserver != null) {
                    v0.unregisterDataSetObserver(this.mDataSetObserver);
                }
            }
            this.mCursor = p3;
            if (p3 == null) {
                this.mRowIDColumn = -1;
                this.mDataValid = 0;
                this.notifyDataSetInvalidated();
            } else {
                if (this.mChangeObserver != null) {
                    p3.registerContentObserver(this.mChangeObserver);
                }
                if (this.mDataSetObserver != null) {
                    p3.registerDataSetObserver(this.mDataSetObserver);
                }
                this.mRowIDColumn = p3.getColumnIndexOrThrow("_id");
                this.mDataValid = 1;
                this.notifyDataSetChanged();
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    CursorFilter(android.support.v4.widget.CursorFilter$CursorFilterClient p1)
    {
        this.mClient = p1;
        return;
    }

    public CharSequence convertResultToString(Object p2)
    {
        return this.mClient.convertToString(((android.database.Cursor) p2));
    }

    protected android.widget.Filter$FilterResults performFiltering(CharSequence p4)
    {
        android.database.Cursor v0 = this.mClient.runQueryOnBackgroundThread(p4);
        android.widget.Filter$FilterResults v1_1 = new android.widget.Filter$FilterResults();
        if (v0 == null) {
            v1_1.count = 0;
            v1_1.values = 0;
        } else {
            v1_1.count = v0.getCount();
            v1_1.values = v0;
        }
        return v1_1;
    }

    protected void publishResults(CharSequence p4, android.widget.Filter$FilterResults p5)
    {
        android.database.Cursor vtmp1 = this.mClient.getCursor();
        if ((p5.values != null) && (p5.values != vtmp1)) {
            this.mClient.changeCursor(((android.database.Cursor) p5.values));
        }
        return;
    }

    public abstract boolean draw();

    public abstract void finish();

    public abstract boolean isFinished();

    public abstract Object newEdgeEffect();

    public abstract boolean onAbsorb();

    public abstract boolean onPull();

    public abstract boolean onRelease();

    public abstract void setSize();

    EdgeEffectCompat$BaseEdgeEffectImpl()
    {
        return;
    }

    public boolean draw(Object p2, android.graphics.Canvas p3)
    {
        return 0;
    }

    public void finish(Object p1)
    {
        return;
    }

    public boolean isFinished(Object p2)
    {
        return 1;
    }

    public Object newEdgeEffect(android.content.Context p2)
    {
        return 0;
    }

    public boolean onAbsorb(Object p2, int p3)
    {
        return 0;
    }

    public boolean onPull(Object p2, float p3)
    {
        return 0;
    }

    public boolean onRelease(Object p2)
    {
        return 0;
    }

    public void setSize(Object p1, int p2, int p3)
    {
        return;
    }

    EdgeEffectCompat$EdgeEffectIcsImpl()
    {
        return;
    }

    public boolean draw(Object p2, android.graphics.Canvas p3)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.draw(p2, p3);
    }

    public void finish(Object p1)
    {
        android.support.v4.widget.EdgeEffectCompatIcs.finish(p1);
        return;
    }

    public boolean isFinished(Object p2)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.isFinished(p2);
    }

    public Object newEdgeEffect(android.content.Context p2)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.newEdgeEffect(p2);
    }

    public boolean onAbsorb(Object p2, int p3)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.onAbsorb(p2, p3);
    }

    public boolean onPull(Object p2, float p3)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.onPull(p2, p3);
    }

    public boolean onRelease(Object p2)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.onRelease(p2);
    }

    public void setSize(Object p1, int p2, int p3)
    {
        android.support.v4.widget.EdgeEffectCompatIcs.setSize(p1, p2, p3);
        return;
    }

    static EdgeEffectCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.widget.EdgeEffectCompat.IMPL = new android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl();
        } else {
            android.support.v4.widget.EdgeEffectCompat.IMPL = new android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl();
        }
        return;
    }

    public EdgeEffectCompat(android.content.Context p2)
    {
        this.mEdgeEffect = android.support.v4.widget.EdgeEffectCompat.IMPL.newEdgeEffect(p2);
        return;
    }

    public boolean draw(android.graphics.Canvas p3)
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.draw(this.mEdgeEffect, p3);
    }

    public void finish()
    {
        android.support.v4.widget.EdgeEffectCompat.IMPL.finish(this.mEdgeEffect);
        return;
    }

    public boolean isFinished()
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.isFinished(this.mEdgeEffect);
    }

    public boolean onAbsorb(int p3)
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.onAbsorb(this.mEdgeEffect, p3);
    }

    public boolean onPull(float p3)
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.onPull(this.mEdgeEffect, p3);
    }

    public boolean onRelease()
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.onRelease(this.mEdgeEffect);
    }

    public void setSize(int p3, int p4)
    {
        android.support.v4.widget.EdgeEffectCompat.IMPL.setSize(this.mEdgeEffect, p3, p4);
        return;
    }

    EdgeEffectCompatIcs()
    {
        return;
    }

    public static boolean draw(Object p1, android.graphics.Canvas p2)
    {
        return ((android.widget.EdgeEffect) p1).draw(p2);
    }

    public static void finish(Object p0)
    {
        ((android.widget.EdgeEffect) p0).finish();
        return;
    }

    public static boolean isFinished(Object p1)
    {
        return ((android.widget.EdgeEffect) p1).isFinished();
    }

    public static Object newEdgeEffect(android.content.Context p1)
    {
        return new android.widget.EdgeEffect(p1);
    }

    public static boolean onAbsorb(Object p1, int p2)
    {
        ((android.widget.EdgeEffect) p1).onAbsorb(p2);
        return 1;
    }

    public static boolean onPull(Object p1, float p2)
    {
        ((android.widget.EdgeEffect) p1).onPull(p2);
        return 1;
    }

    public static boolean onRelease(Object p2)
    {
        ((android.widget.EdgeEffect) p2).onRelease();
        return ((android.widget.EdgeEffect) p2).isFinished();
    }

    public static void setSize(Object p0, int p1, int p2)
    {
        ((android.widget.EdgeEffect) p0).setSize(p1, p2);
        return;
    }

    public ResourceCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4)
    {
        super(p2, p4);
        super.mDropDownLayout = p3;
        super.mLayout = p3;
        super.mInflater = ((android.view.LayoutInflater) p2.getSystemService("layout_inflater"));
        return;
    }

    public ResourceCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, int p5)
    {
        super(p2, p4, p5);
        super.mDropDownLayout = p3;
        super.mLayout = p3;
        super.mInflater = ((android.view.LayoutInflater) p2.getSystemService("layout_inflater"));
        return;
    }

    public ResourceCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, boolean p5)
    {
        super(p2, p4, p5);
        super.mDropDownLayout = p3;
        super.mLayout = p3;
        super.mInflater = ((android.view.LayoutInflater) p2.getSystemService("layout_inflater"));
        return;
    }

    public android.view.View newDropDownView(android.content.Context p4, android.database.Cursor p5, android.view.ViewGroup p6)
    {
        return this.mInflater.inflate(this.mDropDownLayout, p6, 0);
    }

    public android.view.View newView(android.content.Context p4, android.database.Cursor p5, android.view.ViewGroup p6)
    {
        return this.mInflater.inflate(this.mLayout, p6, 0);
    }

    public void setDropDownViewResource(int p1)
    {
        this.mDropDownLayout = p1;
        return;
    }

    public void setViewResource(int p1)
    {
        this.mLayout = p1;
        return;
    }

    public SearchViewCompat$OnQueryTextListenerCompat()
    {
        this.mListener = android.support.v4.widget.SearchViewCompat.access$000().newOnQueryTextListener(this);
        return;
    }

    public boolean onQueryTextChange(String p2)
    {
        return 0;
    }

    public boolean onQueryTextSubmit(String p2)
    {
        return 0;
    }

    public abstract boolean onQueryTextChange();

    public abstract boolean onQueryTextSubmit();

    SearchViewCompat$SearchViewCompatHoneycombImpl$1(android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl p1, android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public boolean onQueryTextChange(String p2)
    {
        return this.val$listener.onQueryTextChange(p2);
    }

    public boolean onQueryTextSubmit(String p2)
    {
        return this.val$listener.onQueryTextSubmit(p2);
    }

    public abstract Object newOnQueryTextListener();

    public abstract android.view.View newSearchView();

    public abstract void setOnQueryTextListener();

    SearchViewCompat$SearchViewCompatStubImpl()
    {
        return;
    }

    public Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat p2)
    {
        return 0;
    }

    public android.view.View newSearchView(android.content.Context p2)
    {
        return 0;
    }

    public void setOnQueryTextListener(Object p1, Object p2)
    {
        return;
    }

    SearchViewCompat$SearchViewCompatHoneycombImpl()
    {
        return;
    }

    public Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat p2)
    {
        return android.support.v4.widget.SearchViewCompatHoneycomb.newOnQueryTextListener(new android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl$1(this, p2));
    }

    public android.view.View newSearchView(android.content.Context p2)
    {
        return android.support.v4.widget.SearchViewCompatHoneycomb.newSearchView(p2);
    }

    public void setOnQueryTextListener(Object p1, Object p2)
    {
        android.support.v4.widget.SearchViewCompatHoneycomb.setOnQueryTextListener(p1, p2);
        return;
    }

    static SearchViewCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.widget.SearchViewCompat.IMPL = new android.support.v4.widget.SearchViewCompat$SearchViewCompatStubImpl();
        } else {
            android.support.v4.widget.SearchViewCompat.IMPL = new android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl();
        }
        return;
    }

    private SearchViewCompat(android.content.Context p1)
    {
        return;
    }

    static synthetic android.support.v4.widget.SearchViewCompat$SearchViewCompatImpl access$000()
    {
        return android.support.v4.widget.SearchViewCompat.IMPL;
    }

    public static android.view.View newSearchView(android.content.Context p1)
    {
        return android.support.v4.widget.SearchViewCompat.IMPL.newSearchView(p1);
    }

    public static void setOnQueryTextListener(android.view.View p2, android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat p3)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setOnQueryTextListener(p2, p3.mListener);
        return;
    }

    SearchViewCompatHoneycomb$1(android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge p1)
    {
        this.val$listener = p1;
        return;
    }

    public boolean onQueryTextChange(String p2)
    {
        return this.val$listener.onQueryTextChange(p2);
    }

    public boolean onQueryTextSubmit(String p2)
    {
        return this.val$listener.onQueryTextSubmit(p2);
    }

    SearchViewCompatHoneycomb()
    {
        return;
    }

    public static Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge p1)
    {
        return new android.support.v4.widget.SearchViewCompatHoneycomb$1(p1);
    }

    public static android.view.View newSearchView(android.content.Context p1)
    {
        return new android.widget.SearchView(p1);
    }

    public static void setOnQueryTextListener(Object p0, Object p1)
    {
        ((android.widget.SearchView) p0).setOnQueryTextListener(((android.widget.SearchView$OnQueryTextListener) p1));
        return;
    }

    public abstract CharSequence convertToString();

    public abstract boolean setViewValue();

    public SimpleCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, String[] p5, int[] p6)
    {
        super(p2, p3, p4);
        super.mStringConversionColumn = -1;
        super.mTo = p6;
        super.mOriginalFrom = p5;
        super.findColumns(p5);
        return;
    }

    public SimpleCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, String[] p5, int[] p6, int p7)
    {
        super(p2, p3, p4, p7);
        super.mStringConversionColumn = -1;
        super.mTo = p6;
        super.mOriginalFrom = p5;
        super.findColumns(p5);
        return;
    }

    private void findColumns(String[] p6)
    {
        if (this.mCursor == null) {
            this.mFrom = 0;
        } else {
            int v0 = p6.length;
            if ((this.mFrom == null) || (this.mFrom.length != v0)) {
                int[] v2_1 = new int[v0];
                this.mFrom = v2_1;
            }
            int v1 = 0;
            while (v1 < v0) {
                this.mFrom[v1] = this.mCursor.getColumnIndexOrThrow(p6[v1]);
                v1++;
            }
        }
        return;
    }

    public void bindView(android.view.View p12, android.content.Context p13, android.database.Cursor p14)
    {
        android.support.v4.widget.SimpleCursorAdapter$ViewBinder v0 = this.mViewBinder;
        int v2 = this.mTo.length;
        int[] v3 = this.mFrom;
        int[] v6 = this.mTo;
        int v4 = 0;
        while (v4 < v2) {
            android.widget.ImageView v7_0 = p12.findViewById(v6[v4]);
            if (v7_0 != null) {
                boolean v1 = 0;
                if (v0 != null) {
                    v1 = v0.setViewValue(v7_0, p14, v3[v4]);
                }
                if (!v1) {
                    String v5 = p14.getString(v3[v4]);
                    if (v5 == null) {
                        v5 = "";
                    }
                    if (!(v7_0 instanceof android.widget.TextView)) {
                        if (!(v7_0 instanceof android.widget.ImageView)) {
                            throw new IllegalStateException(new StringBuilder().append(v7_0.getClass().getName()).append(" is not a ").append(" view that can be bounds by this SimpleCursorAdapter").toString());
                        } else {
                            this.setViewImage(((android.widget.ImageView) v7_0), v5);
                        }
                    } else {
                        this.setViewText(((android.widget.TextView) v7_0), v5);
                    }
                }
            }
            v4++;
        }
        return;
    }

    public void changeCursorAndColumns(android.database.Cursor p2, String[] p3, int[] p4)
    {
        this.mOriginalFrom = p3;
        this.mTo = p4;
        super.changeCursor(p2);
        this.findColumns(this.mOriginalFrom);
        return;
    }

    public CharSequence convertToString(android.database.Cursor p3)
    {
        CharSequence v0_2;
        if (this.mCursorToStringConverter == null) {
            if (this.mStringConversionColumn <= -1) {
                v0_2 = super.convertToString(p3);
            } else {
                v0_2 = p3.getString(this.mStringConversionColumn);
            }
        } else {
            v0_2 = this.mCursorToStringConverter.convertToString(p3);
        }
        return v0_2;
    }

    public android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()
    {
        return this.mCursorToStringConverter;
    }

    public int getStringConversionColumn()
    {
        return this.mStringConversionColumn;
    }

    public android.support.v4.widget.SimpleCursorAdapter$ViewBinder getViewBinder()
    {
        return this.mViewBinder;
    }

    public void setCursorToStringConverter(android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter p1)
    {
        this.mCursorToStringConverter = p1;
        return;
    }

    public void setStringConversionColumn(int p1)
    {
        this.mStringConversionColumn = p1;
        return;
    }

    public void setViewBinder(android.support.v4.widget.SimpleCursorAdapter$ViewBinder p1)
    {
        this.mViewBinder = p1;
        return;
    }

    public void setViewImage(android.widget.ImageView p3, String p4)
    {
        try {
            p3.setImageResource(Integer.parseInt(p4));
        } catch (NumberFormatException v0) {
            p3.setImageURI(android.net.Uri.parse(p4));
        }
        return;
    }

    public void setViewText(android.widget.TextView p1, String p2)
    {
        p1.setText(p2);
        return;
    }

    public android.database.Cursor swapCursor(android.database.Cursor p3)
    {
        android.database.Cursor v0 = super.swapCursor(p3);
        this.findColumns(this.mOriginalFrom);
        return v0;
    }

    public abstract int api();

    public abstract int dpi();

    public abstract void onActionModeFinished();

    public abstract void onActionModeStarted();

    public abstract boolean onCreateOptionsMenu();

    public abstract boolean onOptionsItemSelected();

    public abstract boolean onPrepareOptionsMenu();

    static ActionBarSherlock()
    {
        Class v0_1 = new Class[2];
        v0_1[0] = android.app.Activity;
        v0_1[1] = Integer.TYPE;
        com.actionbarsherlock.ActionBarSherlock.CONSTRUCTOR_ARGS = v0_1;
        com.actionbarsherlock.ActionBarSherlock.IMPLEMENTATIONS = new java.util.HashMap();
        com.actionbarsherlock.ActionBarSherlock.registerImplementation(com.actionbarsherlock.internal.ActionBarSherlockCompat);
        com.actionbarsherlock.ActionBarSherlock.registerImplementation(com.actionbarsherlock.internal.ActionBarSherlockNative);
        return;
    }

    protected ActionBarSherlock(android.app.Activity p2, int p3)
    {
        int v0_1;
        this.mActivity = p2;
        if ((p3 & 1) == 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.mIsDelegate = v0_1;
        return;
    }

    public static void registerImplementation(Class p4)
    {
        if (p4.isAnnotationPresent(com.actionbarsherlock.ActionBarSherlock$Implementation)) {
            if (!com.actionbarsherlock.ActionBarSherlock.IMPLEMENTATIONS.containsValue(p4)) {
                com.actionbarsherlock.ActionBarSherlock.IMPLEMENTATIONS.put(((com.actionbarsherlock.ActionBarSherlock$Implementation) p4.getAnnotation(com.actionbarsherlock.ActionBarSherlock$Implementation)), p4);
            }
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder("Class ").append(p4.getSimpleName()).append(" is not annotated with @Implementation").toString());
        }
    }

    public static boolean unregisterImplementation(Class p1)
    {
        return com.actionbarsherlock.ActionBarSherlock.IMPLEMENTATIONS.values().remove(p1);
    }

    public static com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity p1)
    {
        return com.actionbarsherlock.ActionBarSherlock.wrap(p1, 0);
    }

    public static com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity p15, int p16)
    {
        java.util.HashMap v5_1 = new java.util.HashMap(com.actionbarsherlock.ActionBarSherlock.IMPLEMENTATIONS);
        int v3_0 = 0;
        RuntimeException v12_36 = v5_1.keySet().iterator();
        while (v12_36.hasNext()) {
            if (((com.actionbarsherlock.ActionBarSherlock$Implementation) v12_36.next()).dpi() == 213) {
                v3_0 = 1;
                break;
            }
        }
        if (v3_0 != 0) {
            int v6;
            if (p15.getResources().getDisplayMetrics().densityDpi != 213) {
                v6 = 0;
            } else {
                v6 = 1;
            }
            java.util.Iterator v10_0 = v5_1.keySet().iterator();
            while (v10_0.hasNext()) {
                int v9 = ((com.actionbarsherlock.ActionBarSherlock$Implementation) v10_0.next()).dpi();
                if (((v6 != 0) && (v9 != 213)) || ((v6 == 0) && (v9 == 213))) {
                    v10_0.remove();
                }
            }
        }
        int v3_1 = 0;
        RuntimeException v12_34 = v5_1.keySet().iterator();
        while (v12_34.hasNext()) {
            if (((com.actionbarsherlock.ActionBarSherlock$Implementation) v12_34.next()).api() != -1) {
                v3_1 = 1;
                break;
            }
        }
        if (v3_1 != 0) {
            int v0 = 0;
            java.util.Iterator v10_1 = v5_1.keySet().iterator();
            while (v10_1.hasNext()) {
                int v8 = ((com.actionbarsherlock.ActionBarSherlock$Implementation) v10_1.next()).api();
                if (v8 <= android.os.Build$VERSION.SDK_INT) {
                    if (v8 > v0) {
                        v0 = v8;
                    }
                } else {
                    v10_1.remove();
                }
            }
            java.util.Iterator v10_2 = v5_1.keySet().iterator();
            while (v10_2.hasNext()) {
                if (((com.actionbarsherlock.ActionBarSherlock$Implementation) v10_2.next()).api() != v0) {
                    v10_2.remove();
                }
            }
        }
        if (v5_1.size() <= 1) {
            if (!v5_1.isEmpty()) {
                try {
                    reflect.Constructor v1 = ((Class) v5_1.values().iterator().next()).getConstructor(com.actionbarsherlock.ActionBarSherlock.CONSTRUCTOR_ARGS);
                    RuntimeException v12_6 = new Object[2];
                    v12_6[0] = p15;
                    v12_6[1] = Integer.valueOf(p16);
                    return ((com.actionbarsherlock.ActionBarSherlock) v1.newInstance(v12_6));
                } catch (reflect.InvocationTargetException v2_4) {
                    throw new RuntimeException(v2_4);
                } catch (reflect.InvocationTargetException v2_3) {
                    throw new RuntimeException(v2_3);
                } catch (reflect.InvocationTargetException v2_2) {
                    throw new RuntimeException(v2_2);
                } catch (reflect.InvocationTargetException v2_1) {
                    throw new RuntimeException(v2_1);
                } catch (reflect.InvocationTargetException v2_0) {
                    throw new RuntimeException(v2_0);
                }
            } else {
                throw new IllegalStateException("No implementations match configuration.");
            }
        } else {
            throw new IllegalStateException("More than one implementation matches configuration.");
        }
    }

    public abstract void addContentView();

    protected final boolean callbackCreateOptionsMenu(com.actionbarsherlock.view.Menu p4)
    {
        boolean v1 = 1;
        if (!(this.mActivity instanceof com.actionbarsherlock.ActionBarSherlock$OnCreatePanelMenuListener)) {
            if ((this.mActivity instanceof com.actionbarsherlock.ActionBarSherlock$OnCreateOptionsMenuListener)) {
                v1 = ((com.actionbarsherlock.ActionBarSherlock$OnCreateOptionsMenuListener) this.mActivity).onCreateOptionsMenu(p4);
            }
        } else {
            v1 = ((com.actionbarsherlock.ActionBarSherlock$OnCreatePanelMenuListener) this.mActivity).onCreatePanelMenu(0, p4);
        }
        return v1;
    }

    protected final boolean callbackOptionsItemSelected(com.actionbarsherlock.view.MenuItem p4)
    {
        boolean v1 = 0;
        if (!(this.mActivity instanceof com.actionbarsherlock.ActionBarSherlock$OnMenuItemSelectedListener)) {
            if ((this.mActivity instanceof com.actionbarsherlock.ActionBarSherlock$OnOptionsItemSelectedListener)) {
                v1 = ((com.actionbarsherlock.ActionBarSherlock$OnOptionsItemSelectedListener) this.mActivity).onOptionsItemSelected(p4);
            }
        } else {
            v1 = ((com.actionbarsherlock.ActionBarSherlock$OnMenuItemSelectedListener) this.mActivity).onMenuItemSelected(0, p4);
        }
        return v1;
    }

    protected final boolean callbackPrepareOptionsMenu(com.actionbarsherlock.view.Menu p5)
    {
        boolean v1 = 1;
        if (!(this.mActivity instanceof com.actionbarsherlock.ActionBarSherlock$OnPreparePanelListener)) {
            if ((this.mActivity instanceof com.actionbarsherlock.ActionBarSherlock$OnPrepareOptionsMenuListener)) {
                v1 = ((com.actionbarsherlock.ActionBarSherlock$OnPrepareOptionsMenuListener) this.mActivity).onPrepareOptionsMenu(p5);
            }
        } else {
            v1 = ((com.actionbarsherlock.ActionBarSherlock$OnPreparePanelListener) this.mActivity).onPreparePanel(0, 0, p5);
        }
        return v1;
    }

    public boolean dispatchCloseOptionsMenu()
    {
        return 0;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration p1)
    {
        return;
    }

    public abstract boolean dispatchCreateOptionsMenu();

    public void dispatchDestroy()
    {
        return;
    }

    public abstract void dispatchInvalidateOptionsMenu();

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        return 0;
    }

    public boolean dispatchMenuOpened(int p2, android.view.Menu p3)
    {
        return 0;
    }

    public boolean dispatchOpenOptionsMenu()
    {
        return 0;
    }

    public abstract boolean dispatchOptionsItemSelected();

    public void dispatchPanelClosed(int p1, android.view.Menu p2)
    {
        return;
    }

    public void dispatchPause()
    {
        return;
    }

    public void dispatchPostCreate(android.os.Bundle p1)
    {
        return;
    }

    public void dispatchPostResume()
    {
        return;
    }

    public abstract boolean dispatchPrepareOptionsMenu();

    public void dispatchStop()
    {
        return;
    }

    public void dispatchTitleChanged(CharSequence p1, int p2)
    {
        return;
    }

    public abstract com.actionbarsherlock.app.ActionBar getActionBar();

    public com.actionbarsherlock.view.MenuInflater getMenuInflater()
    {
        if (this.mMenuInflater == null) {
            if (this.getActionBar() == null) {
                this.mMenuInflater = new com.actionbarsherlock.view.MenuInflater(this.mActivity);
            } else {
                this.mMenuInflater = new com.actionbarsherlock.view.MenuInflater(this.getThemedContext());
            }
        }
        return this.mMenuInflater;
    }

    protected abstract android.content.Context getThemedContext();

    public abstract boolean hasFeature();

    public abstract boolean requestFeature();

    public abstract void setContentView();

    public void setContentView(android.view.View p3)
    {
        this.setContentView(p3, new android.view.ViewGroup$LayoutParams(-1, -1));
        return;
    }

    public abstract void setContentView();

    public abstract void setProgress();

    public abstract void setProgressBarIndeterminate();

    public abstract void setProgressBarIndeterminateVisibility();

    public abstract void setProgressBarVisibility();

    public abstract void setSecondaryProgress();

    public void setTitle(int p2)
    {
        this.setTitle(this.mActivity.getString(p2));
        return;
    }

    public abstract void setTitle();

    public abstract void setUiOptions();

    public abstract void setUiOptions();

    public abstract com.actionbarsherlock.view.ActionMode startActionMode();

    public R$array()
    {
        return;
    }

    public R$attr()
    {
        return;
    }

    public R$bool()
    {
        return;
    }

    public R$color()
    {
        return;
    }

    public R$dimen()
    {
        return;
    }

    public R$drawable()
    {
        return;
    }

    public R$id()
    {
        return;
    }

    public R$integer()
    {
        return;
    }

    public R$layout()
    {
        return;
    }

    public R$menu()
    {
        return;
    }

    public R$string()
    {
        return;
    }

    public R$style()
    {
        return;
    }

    static R$styleable()
    {
        int[] v0_6 = new int[19];
        v0_6 = {2130771968, 2130771969, 2130771970, 2130771971, 2130771972, 2130771973, 2130772026, 2130772027, 2130772028, 2130772029, 2130772030, 2130772031, 2130772032, 2130772033, 2130772034, 2130772035, 2130772036, 2130772037, 2130772038};
        com.actionbarsherlock.R$styleable.SherlockActionBar = v0_6;
        int[] v0_15 = new int[1];
        v0_15[0] = 16843071;
        com.actionbarsherlock.R$styleable.SherlockActionMenuItemView = v0_15;
        int[] v0_2 = new int[5];
        v0_2 = {2130771968, 2130771969, 2130771970, 2130771971, 2130771972};
        com.actionbarsherlock.R$styleable.SherlockActionMode = v0_2;
        int[] v0_4 = new int[3];
        v0_4 = {16842964, 2130772047, 2130772048};
        com.actionbarsherlock.R$styleable.SherlockActivityChooserView = v0_4;
        int[] v0_7 = new int[6];
        v0_7 = {16842766, 16842960, 16843156, 16843230, 16843231, 16843232};
        com.actionbarsherlock.R$styleable.SherlockMenuGroup = v0_7;
        int[] v0_9 = new int[17];
        v0_9 = {16842754, 16842766, 16842960, 16843014, 16843156, 16843230, 16843231, 16843233, 16843234, 16843235, 16843236, 16843237, 16843375, 16843481, 16843515, 16843516, 16843657};
        com.actionbarsherlock.R$styleable.SherlockMenuItem = v0_9;
        int[] v0_10 = new int[8];
        v0_10 = {2130772039, 2130772040, 2130772041, 2130772042, 2130772043, 2130772044, 2130772045, 2130772046};
        com.actionbarsherlock.R$styleable.SherlockMenuView = v0_10;
        int[] v0_11 = new int[8];
        v0_11 = {16842927, 16843125, 16843126, 16843131, 16843362, 16843436, 16843437, 16843773};
        com.actionbarsherlock.R$styleable.SherlockSpinner = v0_11;
        int[] v0_13 = new int[53];
        v0_13 = {16842839, 2130771974, 2130771975, 2130771976, 2130771977, 2130771978, 2130771979, 2130771980, 2130771981, 2130771982, 2130771983, 2130771984, 2130771985, 2130771986, 2130771987, 2130771988, 2130771989, 2130771990, 2130771991, 2130771992, 2130771993, 2130771994, 2130771995, 2130771996, 2130771997, 2130771998, 2130771999, 2130772000, 2130772001, 2130772002, 2130772003, 2130772004, 2130772005, 2130772006, 2130772007, 2130772008, 2130772009, 2130772010, 2130772011, 2130772012, 2130772013, 2130772014, 2130772015, 2130772016, 2130772017, 2130772018, 2130772019, 2130772020, 2130772021, 2130772022, 2130772023, 2130772024, 2130772025};
        com.actionbarsherlock.R$styleable.SherlockTheme = v0_13;
        return;
    }

    public R$styleable()
    {
        return;
    }

    public R()
    {
        return;
    }

    public ActionBar$LayoutParams(int p3)
    {
        this(-2, -1, p3);
        return;
    }

    public ActionBar$LayoutParams(int p2, int p3)
    {
        super(p2, p3);
        super.gravity = -1;
        super.gravity = 19;
        return;
    }

    public ActionBar$LayoutParams(int p2, int p3, int p4)
    {
        super(p2, p3);
        super.gravity = -1;
        super.gravity = p4;
        return;
    }

    public ActionBar$LayoutParams(android.content.Context p2, android.util.AttributeSet p3)
    {
        super(p2, p3);
        super.gravity = -1;
        return;
    }

    public ActionBar$LayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        super(p2);
        super.gravity = -1;
        return;
    }

    public ActionBar$LayoutParams(com.actionbarsherlock.app.ActionBar$LayoutParams p2)
    {
        super(p2);
        super.gravity = -1;
        super.gravity = p2.gravity;
        return;
    }

    public abstract void onMenuVisibilityChanged();

    public abstract boolean onNavigationItemSelected();

    public ActionBar$Tab()
    {
        return;
    }

    public abstract CharSequence getContentDescription();

    public abstract android.view.View getCustomView();

    public abstract android.graphics.drawable.Drawable getIcon();

    public abstract int getPosition();

    public abstract Object getTag();

    public abstract CharSequence getText();

    public abstract void select();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setContentDescription();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setContentDescription();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setCustomView();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setCustomView();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setIcon();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setIcon();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setTabListener();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setTag();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setText();

    public abstract com.actionbarsherlock.app.ActionBar$Tab setText();

    public abstract void onTabReselected();

    public abstract void onTabSelected();

    public abstract void onTabUnselected();

    public ActionBar()
    {
        return;
    }

    public abstract void addOnMenuVisibilityListener();

    public abstract void addTab();

    public abstract void addTab();

    public abstract void addTab();

    public abstract void addTab();

    public abstract android.view.View getCustomView();

    public abstract int getDisplayOptions();

    public abstract int getHeight();

    public abstract int getNavigationItemCount();

    public abstract int getNavigationMode();

    public abstract int getSelectedNavigationIndex();

    public abstract com.actionbarsherlock.app.ActionBar$Tab getSelectedTab();

    public abstract CharSequence getSubtitle();

    public abstract com.actionbarsherlock.app.ActionBar$Tab getTabAt();

    public abstract int getTabCount();

    public android.content.Context getThemedContext()
    {
        return 0;
    }

    public abstract CharSequence getTitle();

    public abstract void hide();

    public abstract boolean isShowing();

    public abstract com.actionbarsherlock.app.ActionBar$Tab newTab();

    public abstract void removeAllTabs();

    public abstract void removeOnMenuVisibilityListener();

    public abstract void removeTab();

    public abstract void removeTabAt();

    public abstract void selectTab();

    public abstract void setBackgroundDrawable();

    public abstract void setCustomView();

    public abstract void setCustomView();

    public abstract void setCustomView();

    public abstract void setDisplayHomeAsUpEnabled();

    public abstract void setDisplayOptions();

    public abstract void setDisplayOptions();

    public abstract void setDisplayShowCustomEnabled();

    public abstract void setDisplayShowHomeEnabled();

    public abstract void setDisplayShowTitleEnabled();

    public abstract void setDisplayUseLogoEnabled();

    public void setHomeButtonEnabled(boolean p1)
    {
        return;
    }

    public abstract void setIcon();

    public abstract void setIcon();

    public abstract void setListNavigationCallbacks();

    public abstract void setLogo();

    public abstract void setLogo();

    public abstract void setNavigationMode();

    public abstract void setSelectedNavigationItem();

    public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable p1)
    {
        return;
    }

    public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable p1)
    {
        return;
    }

    public abstract void setSubtitle();

    public abstract void setSubtitle();

    public abstract void setTitle();

    public abstract void setTitle();

    public abstract void show();

    public SherlockActivity()
    {
        return;
    }

    public void addContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().addContentView(p2, p3);
        return;
    }

    public void closeOptionsMenu()
    {
        if (!this.getSherlock().dispatchCloseOptionsMenu()) {
            super.closeOptionsMenu();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchKeyEvent(p2)) {
            v0_2 = super.dispatchKeyEvent(p2);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    protected final com.actionbarsherlock.ActionBarSherlock getSherlock()
    {
        if (this.mSherlock == null) {
            this.mSherlock = com.actionbarsherlock.ActionBarSherlock.wrap(this, 1);
        }
        return this.mSherlock;
    }

    public com.actionbarsherlock.app.ActionBar getSupportActionBar()
    {
        return this.getSherlock().getActionBar();
    }

    public com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()
    {
        return this.getSherlock().getMenuInflater();
    }

    public void invalidateOptionsMenu()
    {
        this.getSherlock().dispatchInvalidateOptionsMenu();
        return;
    }

    public void onActionModeFinished(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onActionModeStarted(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        super.onConfigurationChanged(p2);
        this.getSherlock().dispatchConfigurationChanged(p2);
        return;
    }

    public final boolean onCreateOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchCreateOptionsMenu(p2);
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onCreatePanelMenu(int p2, com.actionbarsherlock.view.Menu p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onCreateOptionsMenu(p3);
        }
        return v0;
    }

    protected void onDestroy()
    {
        this.getSherlock().dispatchDestroy();
        super.onDestroy();
        return;
    }

    public boolean onMenuItemSelected(int p2, com.actionbarsherlock.view.MenuItem p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onOptionsItemSelected(p3);
        }
        return v0;
    }

    public final boolean onMenuOpened(int p2, android.view.Menu p3)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchMenuOpened(p2, p3)) {
            v0_2 = super.onMenuOpened(p2, p3);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.getSherlock().dispatchOptionsItemSelected(p2);
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public void onPanelClosed(int p2, android.view.Menu p3)
    {
        this.getSherlock().dispatchPanelClosed(p2, p3);
        super.onPanelClosed(p2, p3);
        return;
    }

    protected void onPause()
    {
        this.getSherlock().dispatchPause();
        super.onPause();
        return;
    }

    protected void onPostCreate(android.os.Bundle p2)
    {
        this.getSherlock().dispatchPostCreate(p2);
        super.onPostCreate(p2);
        return;
    }

    protected void onPostResume()
    {
        super.onPostResume();
        this.getSherlock().dispatchPostResume();
        return;
    }

    public final boolean onPrepareOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchPrepareOptionsMenu(p2);
    }

    public boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onPreparePanel(int p2, android.view.View p3, com.actionbarsherlock.view.Menu p4)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onPrepareOptionsMenu(p4);
        }
        return v0;
    }

    protected void onStop()
    {
        this.getSherlock().dispatchStop();
        super.onStop();
        return;
    }

    protected void onTitleChanged(CharSequence p2, int p3)
    {
        this.getSherlock().dispatchTitleChanged(p2, p3);
        super.onTitleChanged(p2, p3);
        return;
    }

    public void openOptionsMenu()
    {
        if (!this.getSherlock().dispatchOpenOptionsMenu()) {
            super.openOptionsMenu();
        }
        return;
    }

    public void requestWindowFeature(long p3)
    {
        this.getSherlock().requestFeature(((int) p3));
        return;
    }

    public void setContentView(int p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().setContentView(p2, p3);
        return;
    }

    public void setSupportProgress(int p2)
    {
        this.getSherlock().setProgress(p2);
        return;
    }

    public void setSupportProgressBarIndeterminate(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminate(p2);
        return;
    }

    public void setSupportProgressBarIndeterminateVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminateVisibility(p2);
        return;
    }

    public void setSupportProgressBarVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarVisibility(p2);
        return;
    }

    public void setSupportSecondaryProgress(int p2)
    {
        this.getSherlock().setSecondaryProgress(p2);
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p2)
    {
        return this.getSherlock().startActionMode(p2);
    }

    public void supportInvalidateOptionsMenu()
    {
        this.invalidateOptionsMenu();
        return;
    }

    public SherlockDialogFragment()
    {
        return;
    }

    public com.actionbarsherlock.app.SherlockFragmentActivity getSherlockActivity()
    {
        return this.mActivity;
    }

    public void onAttach(android.app.Activity p4)
    {
        if ((p4 instanceof com.actionbarsherlock.app.SherlockFragmentActivity)) {
            this.mActivity = ((com.actionbarsherlock.app.SherlockFragmentActivity) p4);
            super.onAttach(p4);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" must be attached to a SherlockFragmentActivity.").toString());
        }
    }

    public final void onCreateOptionsMenu(android.view.Menu p3, android.view.MenuInflater p4)
    {
        this.onCreateOptionsMenu(new com.actionbarsherlock.internal.view.menu.MenuWrapper(p3), this.mActivity.getSupportMenuInflater());
        return;
    }

    public void onCreateOptionsMenu(com.actionbarsherlock.view.Menu p1, com.actionbarsherlock.view.MenuInflater p2)
    {
        return;
    }

    public void onDetach()
    {
        this.mActivity = 0;
        super.onDetach();
        return;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.onOptionsItemSelected(new com.actionbarsherlock.internal.view.menu.MenuItemWrapper(p2));
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public final void onPrepareOptionsMenu(android.view.Menu p2)
    {
        this.onPrepareOptionsMenu(new com.actionbarsherlock.internal.view.menu.MenuWrapper(p2));
        return;
    }

    public void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p1)
    {
        return;
    }

    public SherlockExpandableListActivity()
    {
        return;
    }

    public void addContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().addContentView(p2, p3);
        return;
    }

    public void closeOptionsMenu()
    {
        if (!this.getSherlock().dispatchCloseOptionsMenu()) {
            super.closeOptionsMenu();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchKeyEvent(p2)) {
            v0_2 = super.dispatchKeyEvent(p2);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    protected final com.actionbarsherlock.ActionBarSherlock getSherlock()
    {
        if (this.mSherlock == null) {
            this.mSherlock = com.actionbarsherlock.ActionBarSherlock.wrap(this, 1);
        }
        return this.mSherlock;
    }

    public com.actionbarsherlock.app.ActionBar getSupportActionBar()
    {
        return this.getSherlock().getActionBar();
    }

    public com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()
    {
        return this.getSherlock().getMenuInflater();
    }

    public void invalidateOptionsMenu()
    {
        this.getSherlock().dispatchInvalidateOptionsMenu();
        return;
    }

    public void onActionModeFinished(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onActionModeStarted(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        super.onConfigurationChanged(p2);
        this.getSherlock().dispatchConfigurationChanged(p2);
        return;
    }

    public final boolean onCreateOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchCreateOptionsMenu(p2);
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onCreatePanelMenu(int p2, com.actionbarsherlock.view.Menu p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onCreateOptionsMenu(p3);
        }
        return v0;
    }

    protected void onDestroy()
    {
        this.getSherlock().dispatchDestroy();
        super.onDestroy();
        return;
    }

    public boolean onMenuItemSelected(int p2, com.actionbarsherlock.view.MenuItem p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onOptionsItemSelected(p3);
        }
        return v0;
    }

    public final boolean onMenuOpened(int p2, android.view.Menu p3)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchMenuOpened(p2, p3)) {
            v0_2 = super.onMenuOpened(p2, p3);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.getSherlock().dispatchOptionsItemSelected(p2);
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public void onPanelClosed(int p2, android.view.Menu p3)
    {
        this.getSherlock().dispatchPanelClosed(p2, p3);
        super.onPanelClosed(p2, p3);
        return;
    }

    protected void onPause()
    {
        this.getSherlock().dispatchPause();
        super.onPause();
        return;
    }

    protected void onPostCreate(android.os.Bundle p2)
    {
        this.getSherlock().dispatchPostCreate(p2);
        super.onPostCreate(p2);
        return;
    }

    protected void onPostResume()
    {
        super.onPostResume();
        this.getSherlock().dispatchPostResume();
        return;
    }

    public final boolean onPrepareOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchPrepareOptionsMenu(p2);
    }

    public boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onPreparePanel(int p2, android.view.View p3, com.actionbarsherlock.view.Menu p4)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onPrepareOptionsMenu(p4);
        }
        return v0;
    }

    protected void onStop()
    {
        this.getSherlock().dispatchStop();
        super.onStop();
        return;
    }

    protected void onTitleChanged(CharSequence p2, int p3)
    {
        this.getSherlock().dispatchTitleChanged(p2, p3);
        super.onTitleChanged(p2, p3);
        return;
    }

    public void openOptionsMenu()
    {
        if (!this.getSherlock().dispatchOpenOptionsMenu()) {
            super.openOptionsMenu();
        }
        return;
    }

    public void requestWindowFeature(long p3)
    {
        this.getSherlock().requestFeature(((int) p3));
        return;
    }

    public void setContentView(int p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().setContentView(p2, p3);
        return;
    }

    public void setSupportProgress(int p2)
    {
        this.getSherlock().setProgress(p2);
        return;
    }

    public void setSupportProgressBarIndeterminate(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminate(p2);
        return;
    }

    public void setSupportProgressBarIndeterminateVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminateVisibility(p2);
        return;
    }

    public void setSupportProgressBarVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarVisibility(p2);
        return;
    }

    public void setSupportSecondaryProgress(int p2)
    {
        this.getSherlock().setSecondaryProgress(p2);
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p2)
    {
        return this.getSherlock().startActionMode(p2);
    }

    public void supportInvalidateOptionsMenu()
    {
        this.invalidateOptionsMenu();
        return;
    }

    public SherlockFragment()
    {
        return;
    }

    public com.actionbarsherlock.app.SherlockFragmentActivity getSherlockActivity()
    {
        return this.mActivity;
    }

    public void onAttach(android.app.Activity p4)
    {
        if ((p4 instanceof com.actionbarsherlock.app.SherlockFragmentActivity)) {
            this.mActivity = ((com.actionbarsherlock.app.SherlockFragmentActivity) p4);
            super.onAttach(p4);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" must be attached to a SherlockFragmentActivity.").toString());
        }
    }

    public final void onCreateOptionsMenu(android.view.Menu p3, android.view.MenuInflater p4)
    {
        this.onCreateOptionsMenu(new com.actionbarsherlock.internal.view.menu.MenuWrapper(p3), this.mActivity.getSupportMenuInflater());
        return;
    }

    public void onCreateOptionsMenu(com.actionbarsherlock.view.Menu p1, com.actionbarsherlock.view.MenuInflater p2)
    {
        return;
    }

    public void onDetach()
    {
        this.mActivity = 0;
        super.onDetach();
        return;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.onOptionsItemSelected(new com.actionbarsherlock.internal.view.menu.MenuItemWrapper(p2));
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public final void onPrepareOptionsMenu(android.view.Menu p2)
    {
        this.onPrepareOptionsMenu(new com.actionbarsherlock.internal.view.menu.MenuWrapper(p2));
        return;
    }

    public void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p1)
    {
        return;
    }

    public SherlockFragmentActivity()
    {
        this.mIgnoreNativeCreate = 0;
        this.mIgnoreNativePrepare = 0;
        this.mIgnoreNativeSelected = 0;
        return;
    }

    public void addContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().addContentView(p2, p3);
        return;
    }

    public void closeOptionsMenu()
    {
        if (!this.getSherlock().dispatchCloseOptionsMenu()) {
            super.closeOptionsMenu();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchKeyEvent(p2)) {
            v0_2 = super.dispatchKeyEvent(p2);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    protected final com.actionbarsherlock.ActionBarSherlock getSherlock()
    {
        if (this.mSherlock == null) {
            this.mSherlock = com.actionbarsherlock.ActionBarSherlock.wrap(this, 1);
        }
        return this.mSherlock;
    }

    public com.actionbarsherlock.app.ActionBar getSupportActionBar()
    {
        return this.getSherlock().getActionBar();
    }

    public com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()
    {
        return this.getSherlock().getMenuInflater();
    }

    public void invalidateOptionsMenu()
    {
        this.getSherlock().dispatchInvalidateOptionsMenu();
        return;
    }

    public void onActionModeFinished(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onActionModeStarted(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        super.onConfigurationChanged(p2);
        this.getSherlock().dispatchConfigurationChanged(p2);
        return;
    }

    public final boolean onCreateOptionsMenu(android.view.Menu p2)
    {
        return 1;
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public final boolean onCreatePanelMenu(int p3, android.view.Menu p4)
    {
        if ((p3 != 0) || (this.mIgnoreNativeCreate)) {
            boolean v0 = super.onCreatePanelMenu(p3, p4);
        } else {
            this.mIgnoreNativeCreate = 1;
            v0 = this.getSherlock().dispatchCreateOptionsMenu(p4);
            this.mIgnoreNativeCreate = 0;
        }
        return v0;
    }

    protected void onDestroy()
    {
        this.getSherlock().dispatchDestroy();
        super.onDestroy();
        return;
    }

    public final boolean onMenuItemSelected(int p3, android.view.MenuItem p4)
    {
        if ((p3 != 0) || (this.mIgnoreNativeSelected)) {
            boolean v0 = super.onMenuItemSelected(p3, p4);
        } else {
            this.mIgnoreNativeSelected = 1;
            v0 = this.getSherlock().dispatchOptionsItemSelected(p4);
            this.mIgnoreNativeSelected = 0;
        }
        return v0;
    }

    public final boolean onMenuOpened(int p2, android.view.Menu p3)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchMenuOpened(p2, p3)) {
            v0_2 = super.onMenuOpened(p2, p3);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return 0;
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public void onPanelClosed(int p2, android.view.Menu p3)
    {
        this.getSherlock().dispatchPanelClosed(p2, p3);
        super.onPanelClosed(p2, p3);
        return;
    }

    protected void onPause()
    {
        this.getSherlock().dispatchPause();
        super.onPause();
        return;
    }

    protected void onPostCreate(android.os.Bundle p2)
    {
        this.getSherlock().dispatchPostCreate(p2);
        super.onPostCreate(p2);
        return;
    }

    protected void onPostResume()
    {
        super.onPostResume();
        this.getSherlock().dispatchPostResume();
        return;
    }

    public final boolean onPrepareOptionsMenu(android.view.Menu p2)
    {
        return 1;
    }

    public boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public final boolean onPreparePanel(int p3, android.view.View p4, android.view.Menu p5)
    {
        if ((p3 != 0) || (this.mIgnoreNativePrepare)) {
            boolean v0 = super.onPreparePanel(p3, p4, p5);
        } else {
            this.mIgnoreNativePrepare = 1;
            v0 = this.getSherlock().dispatchPrepareOptionsMenu(p5);
            this.mIgnoreNativePrepare = 0;
        }
        return v0;
    }

    protected void onStop()
    {
        this.getSherlock().dispatchStop();
        super.onStop();
        return;
    }

    protected void onTitleChanged(CharSequence p2, int p3)
    {
        this.getSherlock().dispatchTitleChanged(p2, p3);
        super.onTitleChanged(p2, p3);
        return;
    }

    public void openOptionsMenu()
    {
        if (!this.getSherlock().dispatchOpenOptionsMenu()) {
            super.openOptionsMenu();
        }
        return;
    }

    public void requestWindowFeature(long p3)
    {
        this.getSherlock().requestFeature(((int) p3));
        return;
    }

    public void setContentView(int p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().setContentView(p2, p3);
        return;
    }

    public void setSupportProgress(int p2)
    {
        this.getSherlock().setProgress(p2);
        return;
    }

    public void setSupportProgressBarIndeterminate(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminate(p2);
        return;
    }

    public void setSupportProgressBarIndeterminateVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminateVisibility(p2);
        return;
    }

    public void setSupportProgressBarVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarVisibility(p2);
        return;
    }

    public void setSupportSecondaryProgress(int p2)
    {
        this.getSherlock().setSecondaryProgress(p2);
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p2)
    {
        return this.getSherlock().startActionMode(p2);
    }

    public void supportInvalidateOptionsMenu()
    {
        this.invalidateOptionsMenu();
        return;
    }

    public SherlockListActivity()
    {
        return;
    }

    public void addContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().addContentView(p2, p3);
        return;
    }

    public void closeOptionsMenu()
    {
        if (!this.getSherlock().dispatchCloseOptionsMenu()) {
            super.closeOptionsMenu();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchKeyEvent(p2)) {
            v0_2 = super.dispatchKeyEvent(p2);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    protected final com.actionbarsherlock.ActionBarSherlock getSherlock()
    {
        if (this.mSherlock == null) {
            this.mSherlock = com.actionbarsherlock.ActionBarSherlock.wrap(this, 1);
        }
        return this.mSherlock;
    }

    public com.actionbarsherlock.app.ActionBar getSupportActionBar()
    {
        return this.getSherlock().getActionBar();
    }

    public com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()
    {
        return this.getSherlock().getMenuInflater();
    }

    public void invalidateOptionsMenu()
    {
        this.getSherlock().dispatchInvalidateOptionsMenu();
        return;
    }

    public void onActionModeFinished(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onActionModeStarted(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        super.onConfigurationChanged(p2);
        this.getSherlock().dispatchConfigurationChanged(p2);
        return;
    }

    public final boolean onCreateOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchCreateOptionsMenu(p2);
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onCreatePanelMenu(int p2, com.actionbarsherlock.view.Menu p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onCreateOptionsMenu(p3);
        }
        return v0;
    }

    protected void onDestroy()
    {
        this.getSherlock().dispatchDestroy();
        super.onDestroy();
        return;
    }

    public boolean onMenuItemSelected(int p2, com.actionbarsherlock.view.MenuItem p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onOptionsItemSelected(p3);
        }
        return v0;
    }

    public final boolean onMenuOpened(int p2, android.view.Menu p3)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchMenuOpened(p2, p3)) {
            v0_2 = super.onMenuOpened(p2, p3);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.getSherlock().dispatchOptionsItemSelected(p2);
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public void onPanelClosed(int p2, android.view.Menu p3)
    {
        this.getSherlock().dispatchPanelClosed(p2, p3);
        super.onPanelClosed(p2, p3);
        return;
    }

    protected void onPause()
    {
        this.getSherlock().dispatchPause();
        super.onPause();
        return;
    }

    protected void onPostCreate(android.os.Bundle p2)
    {
        this.getSherlock().dispatchPostCreate(p2);
        super.onPostCreate(p2);
        return;
    }

    protected void onPostResume()
    {
        super.onPostResume();
        this.getSherlock().dispatchPostResume();
        return;
    }

    public final boolean onPrepareOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchPrepareOptionsMenu(p2);
    }

    public boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onPreparePanel(int p2, android.view.View p3, com.actionbarsherlock.view.Menu p4)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onPrepareOptionsMenu(p4);
        }
        return v0;
    }

    protected void onStop()
    {
        this.getSherlock().dispatchStop();
        super.onStop();
        return;
    }

    protected void onTitleChanged(CharSequence p2, int p3)
    {
        this.getSherlock().dispatchTitleChanged(p2, p3);
        super.onTitleChanged(p2, p3);
        return;
    }

    public void openOptionsMenu()
    {
        if (!this.getSherlock().dispatchOpenOptionsMenu()) {
            super.openOptionsMenu();
        }
        return;
    }

    public void requestWindowFeature(long p3)
    {
        this.getSherlock().requestFeature(((int) p3));
        return;
    }

    public void setContentView(int p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().setContentView(p2, p3);
        return;
    }

    public void setSupportProgress(int p2)
    {
        this.getSherlock().setProgress(p2);
        return;
    }

    public void setSupportProgressBarIndeterminate(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminate(p2);
        return;
    }

    public void setSupportProgressBarIndeterminateVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminateVisibility(p2);
        return;
    }

    public void setSupportProgressBarVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarVisibility(p2);
        return;
    }

    public void setSupportSecondaryProgress(int p2)
    {
        this.getSherlock().setSecondaryProgress(p2);
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p2)
    {
        return this.getSherlock().startActionMode(p2);
    }

    public void supportInvalidateOptionsMenu()
    {
        this.invalidateOptionsMenu();
        return;
    }

    public SherlockListFragment()
    {
        return;
    }

    public com.actionbarsherlock.app.SherlockFragmentActivity getSherlockActivity()
    {
        return this.mActivity;
    }

    public void onAttach(android.app.Activity p4)
    {
        if ((p4 instanceof com.actionbarsherlock.app.SherlockFragmentActivity)) {
            this.mActivity = ((com.actionbarsherlock.app.SherlockFragmentActivity) p4);
            super.onAttach(p4);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" must be attached to a SherlockFragmentActivity.").toString());
        }
    }

    public final void onCreateOptionsMenu(android.view.Menu p3, android.view.MenuInflater p4)
    {
        this.onCreateOptionsMenu(new com.actionbarsherlock.internal.view.menu.MenuWrapper(p3), this.mActivity.getSupportMenuInflater());
        return;
    }

    public void onCreateOptionsMenu(com.actionbarsherlock.view.Menu p1, com.actionbarsherlock.view.MenuInflater p2)
    {
        return;
    }

    public void onDetach()
    {
        this.mActivity = 0;
        super.onDetach();
        return;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.onOptionsItemSelected(new com.actionbarsherlock.internal.view.menu.MenuItemWrapper(p2));
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public final void onPrepareOptionsMenu(android.view.Menu p2)
    {
        this.onPrepareOptionsMenu(new com.actionbarsherlock.internal.view.menu.MenuWrapper(p2));
        return;
    }

    public void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p1)
    {
        return;
    }

    public SherlockPreferenceActivity()
    {
        return;
    }

    public void addContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().addContentView(p2, p3);
        return;
    }

    public void closeOptionsMenu()
    {
        if (!this.getSherlock().dispatchCloseOptionsMenu()) {
            super.closeOptionsMenu();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchKeyEvent(p2)) {
            v0_2 = super.dispatchKeyEvent(p2);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    protected final com.actionbarsherlock.ActionBarSherlock getSherlock()
    {
        if (this.mSherlock == null) {
            this.mSherlock = com.actionbarsherlock.ActionBarSherlock.wrap(this, 1);
        }
        return this.mSherlock;
    }

    public com.actionbarsherlock.app.ActionBar getSupportActionBar()
    {
        return this.getSherlock().getActionBar();
    }

    public com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()
    {
        return this.getSherlock().getMenuInflater();
    }

    public void invalidateOptionsMenu()
    {
        this.getSherlock().dispatchInvalidateOptionsMenu();
        return;
    }

    public void onActionModeFinished(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onActionModeStarted(com.actionbarsherlock.view.ActionMode p1)
    {
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        super.onConfigurationChanged(p2);
        this.getSherlock().dispatchConfigurationChanged(p2);
        return;
    }

    public final boolean onCreateOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchCreateOptionsMenu(p2);
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onCreatePanelMenu(int p2, com.actionbarsherlock.view.Menu p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onCreateOptionsMenu(p3);
        }
        return v0;
    }

    protected void onDestroy()
    {
        this.getSherlock().dispatchDestroy();
        super.onDestroy();
        return;
    }

    public boolean onMenuItemSelected(int p2, com.actionbarsherlock.view.MenuItem p3)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onOptionsItemSelected(p3);
        }
        return v0;
    }

    public final boolean onMenuOpened(int p2, android.view.Menu p3)
    {
        boolean v0_2;
        if (!this.getSherlock().dispatchMenuOpened(p2, p3)) {
            v0_2 = super.onMenuOpened(p2, p3);
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.getSherlock().dispatchOptionsItemSelected(p2);
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p2)
    {
        return 0;
    }

    public void onPanelClosed(int p2, android.view.Menu p3)
    {
        this.getSherlock().dispatchPanelClosed(p2, p3);
        super.onPanelClosed(p2, p3);
        return;
    }

    protected void onPause()
    {
        this.getSherlock().dispatchPause();
        super.onPause();
        return;
    }

    protected void onPostCreate(android.os.Bundle p2)
    {
        this.getSherlock().dispatchPostCreate(p2);
        super.onPostCreate(p2);
        return;
    }

    protected void onPostResume()
    {
        super.onPostResume();
        this.getSherlock().dispatchPostResume();
        return;
    }

    public final boolean onPrepareOptionsMenu(android.view.Menu p2)
    {
        return this.getSherlock().dispatchPrepareOptionsMenu(p2);
    }

    public boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu p2)
    {
        return 1;
    }

    public boolean onPreparePanel(int p2, android.view.View p3, com.actionbarsherlock.view.Menu p4)
    {
        int v0;
        if (p2 != 0) {
            v0 = 0;
        } else {
            v0 = this.onPrepareOptionsMenu(p4);
        }
        return v0;
    }

    protected void onStop()
    {
        this.getSherlock().dispatchStop();
        super.onStop();
        return;
    }

    protected void onTitleChanged(CharSequence p2, int p3)
    {
        this.getSherlock().dispatchTitleChanged(p2, p3);
        super.onTitleChanged(p2, p3);
        return;
    }

    public void openOptionsMenu()
    {
        if (!this.getSherlock().dispatchOpenOptionsMenu()) {
            super.openOptionsMenu();
        }
        return;
    }

    public void requestWindowFeature(long p3)
    {
        this.getSherlock().requestFeature(((int) p3));
        return;
    }

    public void setContentView(int p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2)
    {
        this.getSherlock().setContentView(p2);
        return;
    }

    public void setContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.getSherlock().setContentView(p2, p3);
        return;
    }

    public void setSupportProgress(int p2)
    {
        this.getSherlock().setProgress(p2);
        return;
    }

    public void setSupportProgressBarIndeterminate(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminate(p2);
        return;
    }

    public void setSupportProgressBarIndeterminateVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarIndeterminateVisibility(p2);
        return;
    }

    public void setSupportProgressBarVisibility(boolean p2)
    {
        this.getSherlock().setProgressBarVisibility(p2);
        return;
    }

    public void setSupportSecondaryProgress(int p2)
    {
        this.getSherlock().setSecondaryProgress(p2);
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p2)
    {
        return this.getSherlock().startActionMode(p2);
    }

    public void supportInvalidateOptionsMenu()
    {
        this.invalidateOptionsMenu();
        return;
    }

    ActionBarSherlockCompat$1(com.actionbarsherlock.internal.ActionBarSherlockCompat p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        if ((!com.actionbarsherlock.internal.ActionBarSherlockCompat.access$4(this.this$0)) && ((!com.actionbarsherlock.internal.ActionBarSherlockCompat.access$1(this.this$0).isFinishing()) && (com.actionbarsherlock.internal.ActionBarSherlockCompat.access$5(this.this$0) == null))) {
            this.this$0.dispatchInvalidateOptionsMenu();
        }
        return;
    }

    public abstract boolean onActionItemClicked();

    public abstract boolean onCreateActionMode();

    public abstract void onDestroyActionMode();

    public abstract boolean onPrepareActionMode();

    public ActionBarSherlockCompat$ActionModeCallbackWrapper(com.actionbarsherlock.internal.ActionBarSherlockCompat p1, com.actionbarsherlock.view.ActionMode$Callback p2)
    {
        this.this$0 = p1;
        this.mWrapped = p2;
        return;
    }

    public boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode p2, com.actionbarsherlock.view.MenuItem p3)
    {
        return this.mWrapped.onActionItemClicked(p2, p3);
    }

    public boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode p2, com.actionbarsherlock.view.Menu p3)
    {
        return this.mWrapped.onCreateActionMode(p2, p3);
    }

    public void onDestroyActionMode(com.actionbarsherlock.view.ActionMode p3)
    {
        this.mWrapped.onDestroyActionMode(p3);
        if (com.actionbarsherlock.internal.ActionBarSherlockCompat.access$0(this.this$0) != null) {
            com.actionbarsherlock.internal.ActionBarSherlockCompat.access$0(this.this$0).setVisibility(8);
            com.actionbarsherlock.internal.ActionBarSherlockCompat.access$0(this.this$0).removeAllViews();
        }
        if ((com.actionbarsherlock.internal.ActionBarSherlockCompat.access$1(this.this$0) instanceof com.actionbarsherlock.ActionBarSherlock$OnActionModeFinishedListener)) {
            ((com.actionbarsherlock.ActionBarSherlock$OnActionModeFinishedListener) com.actionbarsherlock.internal.ActionBarSherlockCompat.access$1(this.this$0)).onActionModeFinished(com.actionbarsherlock.internal.ActionBarSherlockCompat.access$2(this.this$0));
        }
        com.actionbarsherlock.internal.ActionBarSherlockCompat.access$3(this.this$0, 0);
        return;
    }

    public boolean onPrepareActionMode(com.actionbarsherlock.view.ActionMode p2, com.actionbarsherlock.view.Menu p3)
    {
        return this.mWrapped.onPrepareActionMode(p2, p3);
    }

    public abstract boolean onMenuItemSelected();

    public abstract void onMenuModeChange();

    public abstract boolean onMenuItemSelected();

    public abstract void onCloseMenu();

    public abstract boolean onOpenSubMenu();

    public ActionBarSherlockCompat(android.app.Activity p2, int p3)
    {
        super(p2, p3);
        super.mReserveOverflowSet = 0;
        super.mMenuKeyIsLongPress = 0;
        super.mIsTitleReady = 0;
        super.mIsDestroyed = 0;
        super.mFeatures = 0;
        super.mUiOptions = 0;
        super.mTitle = 0;
        return;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarContextView access$0(com.actionbarsherlock.internal.ActionBarSherlockCompat p1)
    {
        return p1.mActionModeView;
    }

    static synthetic android.app.Activity access$1(com.actionbarsherlock.internal.ActionBarSherlockCompat p1)
    {
        return p1.mActivity;
    }

    static synthetic com.actionbarsherlock.view.ActionMode access$2(com.actionbarsherlock.internal.ActionBarSherlockCompat p1)
    {
        return p1.mActionMode;
    }

    static synthetic void access$3(com.actionbarsherlock.internal.ActionBarSherlockCompat p0, com.actionbarsherlock.view.ActionMode p1)
    {
        p0.mActionMode = p1;
        return;
    }

    static synthetic boolean access$4(com.actionbarsherlock.internal.ActionBarSherlockCompat p1)
    {
        return p1.mIsDestroyed;
    }

    static synthetic com.actionbarsherlock.internal.view.menu.MenuBuilder access$5(com.actionbarsherlock.internal.ActionBarSherlockCompat p1)
    {
        return p1.mMenu;
    }

    public static String cleanActivityName(String p2, String p3)
    {
        if (p3.charAt(0) != 46) {
            if (p3.indexOf(46, 1) == -1) {
                p3 = new StringBuilder(String.valueOf(p2)).append(".").append(p3).toString();
            }
        } else {
            p3 = new StringBuilder(String.valueOf(p2)).append(p3).toString();
        }
        return p3;
    }

    private android.view.ViewGroup generateLayout()
    {
        android.content.res.TypedArray v0 = this.mActivity.getTheme().obtainStyledAttributes(com.actionbarsherlock.R$styleable.SherlockTheme);
        this.mIsFloating = v0.getBoolean(0, 0);
        if (v0.hasValue(45)) {
            if (!v0.getBoolean(44, 0)) {
                if (v0.getBoolean(45, 0)) {
                    this.requestFeature(8);
                }
            } else {
                this.requestFeature(1);
            }
            if (v0.getBoolean(46, 0)) {
                this.requestFeature(9);
            }
            if (v0.getBoolean(47, 0)) {
                this.requestFeature(10);
            }
            int v3;
            v0.recycle();
            if (this.hasFeature(1)) {
                if ((!this.hasFeature(10)) || (this.hasFeature(1))) {
                    v3 = com.actionbarsherlock.R$layout.abs__screen_simple;
                } else {
                    v3 = com.actionbarsherlock.R$layout.abs__screen_simple_overlay_action_mode;
                }
            } else {
                if (!this.mIsFloating) {
                    if (!this.hasFeature(9)) {
                        v3 = com.actionbarsherlock.R$layout.abs__screen_action_bar;
                    } else {
                        v3 = com.actionbarsherlock.R$layout.abs__screen_action_bar_overlay;
                    }
                } else {
                    this.mDecor = ((android.view.ViewGroup) this.mDecor.getParent());
                    this.mDecor.removeAllViews();
                    v3 = com.actionbarsherlock.R$layout.abs__dialog_title_holo;
                }
            }
            this.mDecor.addView(this.mActivity.getLayoutInflater().inflate(v3, 0), new android.view.ViewGroup$LayoutParams(-1, -1));
            android.view.ViewGroup v1_1 = ((android.view.ViewGroup) this.mDecor.findViewById(com.actionbarsherlock.R$id.abs__content));
            if (v1_1 != null) {
                this.mDecor.setId(-1);
                v1_1.setId(16908290);
                if (this.hasFeature(5)) {
                    com.actionbarsherlock.internal.widget.IcsProgressBar v4 = this.getCircularProgressBar(0);
                    if (v4 != null) {
                        v4.setIndeterminate(1);
                    }
                }
                return v1_1;
            } else {
                throw new RuntimeException("Couldn\'t find content container view");
            }
        } else {
            throw new IllegalStateException("You must use Theme.Sherlock, Theme.Sherlock.Light, Theme.Sherlock.Light.DarkActionBar, or a derivative.");
        }
    }

    private com.actionbarsherlock.internal.widget.IcsProgressBar getCircularProgressBar(boolean p3)
    {
        com.actionbarsherlock.internal.widget.IcsProgressBar v0_4;
        if (this.mCircularProgressBar == null) {
            if ((this.mContentParent == null) && (p3)) {
                this.installDecor();
            }
            this.mCircularProgressBar = ((com.actionbarsherlock.internal.widget.IcsProgressBar) this.mDecor.findViewById(com.actionbarsherlock.R$id.abs__progress_circular));
            if (this.mCircularProgressBar != null) {
                this.mCircularProgressBar.setVisibility(4);
            }
            v0_4 = this.mCircularProgressBar;
        } else {
            v0_4 = this.mCircularProgressBar;
        }
        return v0_4;
    }

    private int getFeatures()
    {
        return this.mFeatures;
    }

    private com.actionbarsherlock.internal.widget.IcsProgressBar getHorizontalProgressBar(boolean p3)
    {
        com.actionbarsherlock.internal.widget.IcsProgressBar v0_4;
        if (this.mHorizontalProgressBar == null) {
            if ((this.mContentParent == null) && (p3)) {
                this.installDecor();
            }
            this.mHorizontalProgressBar = ((com.actionbarsherlock.internal.widget.IcsProgressBar) this.mDecor.findViewById(com.actionbarsherlock.R$id.abs__progress_horizontal));
            if (this.mHorizontalProgressBar != null) {
                this.mHorizontalProgressBar.setVisibility(4);
            }
            v0_4 = this.mHorizontalProgressBar;
        } else {
            v0_4 = this.mHorizontalProgressBar;
        }
        return v0_4;
    }

    private void hideProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar p6, com.actionbarsherlock.internal.widget.IcsProgressBar p7)
    {
        int v1 = this.mFeatures;
        android.view.animation.Animation v0 = android.view.animation.AnimationUtils.loadAnimation(this.mActivity, 17432577);
        v0.setDuration(1000);
        if (((v1 & 32) != 0) && (p7.getVisibility() == 0)) {
            p7.startAnimation(v0);
            p7.setVisibility(4);
        }
        if (((v1 & 4) != 0) && (p6.getVisibility() == 0)) {
            p6.startAnimation(v0);
            p6.setVisibility(4);
        }
        return;
    }

    private void initActionBar()
    {
        if (this.mDecor == null) {
            this.installDecor();
        }
        if ((this.aActionBar == null) && ((this.hasFeature(8)) && ((!this.hasFeature(1)) && (!this.mActivity.isChild())))) {
            this.aActionBar = new com.actionbarsherlock.internal.app.ActionBarImpl(this.mActivity, this.mFeatures);
            if (!this.mIsDelegate) {
                this.wActionBar.setWindowTitle(this.mActivity.getTitle());
            }
        }
        return;
    }

    private boolean initializePanelMenu()
    {
        android.view.ContextThemeWrapper v0 = this.mActivity;
        if (this.wActionBar != null) {
            android.util.TypedValue v3_1 = new android.util.TypedValue();
            v0.getTheme().resolveAttribute(com.actionbarsherlock.R$attr.actionBarWidgetTheme, v3_1, 1);
            int v4 = v3_1.resourceId;
            if (v4 != 0) {
                v0 = new android.view.ContextThemeWrapper(v0, v4);
            }
        }
        this.mMenu = new com.actionbarsherlock.internal.view.menu.MenuBuilder(v0);
        this.mMenu.setCallback(this);
        return 1;
    }

    private void installDecor()
    {
        int v5 = 1;
        if (this.mDecor == null) {
            this.mDecor = ((android.view.ViewGroup) this.mActivity.getWindow().getDecorView().findViewById(16908290));
        }
        if (this.mContentParent == null) {
            java.util.ArrayList v7_0 = 0;
            if (this.mDecor.getChildCount() > 0) {
                v7_0 = new java.util.ArrayList(1);
                int v2 = 0;
                int v1 = this.mDecor.getChildCount();
                while (v2 < v1) {
                    android.view.View v0_0 = this.mDecor.getChildAt(0);
                    this.mDecor.removeView(v0_0);
                    v7_0.add(v0_0);
                    v2++;
                }
            }
            this.mContentParent = this.generateLayout();
            if (v7_0 != null) {
                String v8_33 = v7_0.iterator();
                while (v8_33.hasNext()) {
                    this.mContentParent.addView(((android.view.View) v8_33.next()));
                }
            }
            this.mTitleView = ((android.widget.TextView) this.mDecor.findViewById(16908310));
            if (this.mTitleView == null) {
                this.wActionBar = ((com.actionbarsherlock.internal.widget.ActionBarView) this.mDecor.findViewById(com.actionbarsherlock.R$id.abs__action_bar));
                if (this.wActionBar != null) {
                    this.wActionBar.setWindowCallback(this);
                    if (this.wActionBar.getTitle() == null) {
                        this.wActionBar.setWindowTitle(this.mActivity.getTitle());
                    }
                    if (this.hasFeature(2)) {
                        this.wActionBar.initProgress();
                    }
                    if (this.hasFeature(5)) {
                        this.wActionBar.initIndeterminateProgress();
                    }
                    int v6 = com.actionbarsherlock.internal.ActionBarSherlockCompat.loadUiOptionsFromManifest(this.mActivity);
                    if (v6 != 0) {
                        this.mUiOptions = v6;
                    }
                    if ((this.mUiOptions & 1) == 0) {
                        v5 = 0;
                    }
                    boolean v3;
                    if (v5 == 0) {
                        v3 = this.mActivity.getTheme().obtainStyledAttributes(com.actionbarsherlock.R$styleable.SherlockTheme).getBoolean(48, 0);
                    } else {
                        v3 = com.actionbarsherlock.internal.ResourcesCompat.getResources_getBoolean(this.mActivity, com.actionbarsherlock.R$bool.abs__split_action_bar_is_narrow);
                    }
                    com.actionbarsherlock.internal.widget.ActionBarContainer v4_1 = ((com.actionbarsherlock.internal.widget.ActionBarContainer) this.mDecor.findViewById(com.actionbarsherlock.R$id.abs__split_action_bar));
                    if (v4_1 == null) {
                        if (v3) {
                            android.util.Log.e("ActionBarSherlock", "Requested split action bar with incompatible window decor! Ignoring request.");
                        }
                    } else {
                        this.wActionBar.setSplitView(v4_1);
                        this.wActionBar.setSplitActionBar(v3);
                        this.wActionBar.setSplitWhenNarrow(v5);
                        this.mActionModeView = ((com.actionbarsherlock.internal.widget.ActionBarContextView) this.mDecor.findViewById(com.actionbarsherlock.R$id.abs__action_context_bar));
                        this.mActionModeView.setSplitView(v4_1);
                        this.mActionModeView.setSplitActionBar(v3);
                        this.mActionModeView.setSplitWhenNarrow(v5);
                    }
                    this.mDecor.post(new com.actionbarsherlock.internal.ActionBarSherlockCompat$1(this));
                }
            } else {
                if (!this.hasFeature(1)) {
                    this.mTitleView.setText(this.mTitle);
                } else {
                    this.mTitleView.setVisibility(8);
                    if ((this.mContentParent instanceof android.widget.FrameLayout)) {
                        ((android.widget.FrameLayout) this.mContentParent).setForeground(0);
                    }
                }
            }
        }
        return;
    }

    private boolean isReservingOverflow()
    {
        if (!this.mReserveOverflowSet) {
            this.mReserveOverflow = com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.reserveOverflow(this.mActivity);
            this.mReserveOverflowSet = 1;
        }
        return this.mReserveOverflow;
    }

    private static int loadUiOptionsFromManifest(android.app.Activity p15)
    {
        int v11 = 0;
        try {
            String v10 = p15.getClass().getName();
            String v9 = p15.getApplicationInfo().packageName;
            android.content.res.XmlResourceParser v12 = p15.createPackageContext(v9, 0).getAssets().openXmlResourceParser("AndroidManifest.xml");
            int v5 = v12.getEventType();
        } catch (Exception v4) {
            v4.printStackTrace();
            return v11;
        }
        while (v5 != 1) {
            if (v5 == 2) {
                String v8 = v12.getName();
                if (!"application".equals(v8)) {
                    if ("activity".equals(v8)) {
                        Integer v1 = 0;
                        String v0 = 0;
                        int v7 = 0;
                        int v6_0 = (v12.getAttributeCount() - 1);
                        while (v6_0 >= 0) {
                            String v3 = v12.getAttributeName(v6_0);
                            if (!"uiOptions".equals(v3)) {
                                if ("name".equals(v3)) {
                                    v0 = com.actionbarsherlock.internal.ActionBarSherlockCompat.cleanActivityName(v9, v12.getAttributeValue(v6_0));
                                    if (!v10.equals(v0)) {
                                        break;
                                    }
                                    v7 = 1;
                                }
                            } else {
                                v1 = Integer.valueOf(v12.getAttributeIntValue(v6_0, 0));
                            }
                            if ((v1 != null) && (v0 != null)) {
                                v11 = v1.intValue();
                            }
                            v6_0--;
                        }
                        if (v7 != 0) {
                            break;
                        }
                    }
                } else {
                    int v6_1 = (v12.getAttributeCount() - 1);
                    while (v6_1 >= 0) {
                        if (!"uiOptions".equals(v12.getAttributeName(v6_1))) {
                            v6_1--;
                        } else {
                            v11 = v12.getAttributeIntValue(v6_1, 0);
                            break;
                        }
                    }
                }
            }
            v5 = v12.nextToken();
        }
        return v11;
    }

    private void onIntChanged(int p2, int p3)
    {
        if ((p2 == 2) || (p2 == 5)) {
            this.updateProgressBars(p3);
        }
        return;
    }

    private boolean preparePanel()
    {
        com.actionbarsherlock.internal.view.menu.MenuBuilder v1_0 = 0;
        if (!this.mMenuIsPrepared) {
            if ((this.mMenu == null) || (this.mMenuRefreshContent)) {
                if ((this.mMenu == null) && ((!this.initializePanelMenu()) || (this.mMenu == null))) {
                    return v1_0;
                } else {
                    if (this.wActionBar != null) {
                        this.wActionBar.setMenu(this.mMenu, this);
                    }
                    this.mMenu.stopDispatchingItemsChanged();
                    if (this.callbackCreateOptionsMenu(this.mMenu)) {
                        this.mMenuRefreshContent = 0;
                    } else {
                        this.mMenu = 0;
                        if (this.wActionBar == null) {
                            return v1_0;
                        } else {
                            this.wActionBar.setMenu(0, this);
                            return v1_0;
                        }
                    }
                }
            }
            this.mMenu.stopDispatchingItemsChanged();
            if (this.mMenuFrozenActionViewState != null) {
                this.mMenu.restoreActionViewStates(this.mMenuFrozenActionViewState);
                this.mMenuFrozenActionViewState = 0;
            }
            if (this.callbackPrepareOptionsMenu(this.mMenu)) {
                if (android.view.KeyCharacterMap.load(-1).getKeyboardType() != 1) {
                    v1_0 = 1;
                }
                this.mMenu.setQwertyMode(v1_0);
                this.mMenu.startDispatchingItemsChanged();
                this.mMenuIsPrepared = 1;
                v1_0 = 1;
            } else {
                if (this.wActionBar != null) {
                    this.wActionBar.setMenu(0, this);
                }
                this.mMenu.startDispatchingItemsChanged();
            }
        } else {
            v1_0 = 1;
        }
        return v1_0;
    }

    private void reopenMenu(boolean p2)
    {
        if ((this.wActionBar != null) && (this.wActionBar.isOverflowReserved())) {
            if ((this.wActionBar.isOverflowMenuShowing()) && (p2)) {
                this.wActionBar.hideOverflowMenu();
            } else {
                if ((this.wActionBar.getVisibility() == 0) && (this.callbackPrepareOptionsMenu(this.mMenu))) {
                    this.wActionBar.showOverflowMenu();
                }
            }
        }
        return;
    }

    private void setFeatureInt(int p2, int p3)
    {
        this.updateInt(p2, p3, 0);
        return;
    }

    private void showProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar p5, com.actionbarsherlock.internal.widget.IcsProgressBar p6)
    {
        int v0 = this.mFeatures;
        if (((v0 & 32) != 0) && (p6.getVisibility() == 4)) {
            p6.setVisibility(0);
        }
        if (((v0 & 4) != 0) && (p5.getProgress() < 10000)) {
            p5.setVisibility(0);
        }
        return;
    }

    private void updateInt(int p3, int p4, boolean p5)
    {
        if ((this.mContentParent != null) && (((this.getFeatures() & (1 << p3)) != 0) || (p5))) {
            this.onIntChanged(p3, p4);
        }
        return;
    }

    private void updateProgressBars(int p11)
    {
        com.actionbarsherlock.internal.widget.IcsProgressBar v0 = this.getCircularProgressBar(1);
        com.actionbarsherlock.internal.widget.IcsProgressBar v2 = this.getHorizontalProgressBar(1);
        int v1 = this.mFeatures;
        if (p11 != -1) {
            if (p11 != -2) {
                if (p11 != -3) {
                    if (p11 != -4) {
                        if ((p11 < 0) || (p11 > 10000)) {
                            if ((20000 <= p11) && (p11 <= 30000)) {
                                v2.setSecondaryProgress((p11 + -20000));
                                this.showProgressBars(v2, v0);
                            }
                        } else {
                            v2.setProgress((p11 + 0));
                            if (p11 >= 10000) {
                                this.hideProgressBars(v2, v0);
                            } else {
                                this.showProgressBars(v2, v0);
                            }
                        }
                    } else {
                        v2.setIndeterminate(0);
                    }
                } else {
                    v2.setIndeterminate(1);
                }
            } else {
                if ((v1 & 4) != 0) {
                    v2.setVisibility(8);
                }
                if ((v1 & 32) != 0) {
                    v0.setVisibility(8);
                }
            }
        } else {
            if ((v1 & 4) != 0) {
                int v4;
                int v3 = v2.getProgress();
                if ((!v2.isIndeterminate()) && (v3 >= 10000)) {
                    v4 = 4;
                } else {
                    v4 = 0;
                }
                v2.setVisibility(v4);
            }
            if ((v1 & 32) != 0) {
                v0.setVisibility(0);
            }
        }
        return;
    }

    public void addContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        if (this.mContentParent == null) {
            this.installDecor();
        }
        this.mContentParent.addView(p2, p3);
        this.initActionBar();
        return;
    }

    void checkCloseActionMenu(com.actionbarsherlock.view.Menu p2)
    {
        if (!this.mClosingActionMenu) {
            this.mClosingActionMenu = 1;
            this.wActionBar.dismissPopupMenus();
            this.mClosingActionMenu = 0;
        }
        return;
    }

    public boolean dispatchCloseOptionsMenu()
    {
        boolean v0_2;
        if (this.isReservingOverflow()) {
            v0_2 = this.wActionBar.hideOverflowMenu();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration p2)
    {
        if (this.aActionBar != null) {
            this.aActionBar.onConfigurationChanged(p2);
        }
        return;
    }

    public boolean dispatchCreateOptionsMenu(android.view.Menu p2)
    {
        return 1;
    }

    public void dispatchDestroy()
    {
        this.mIsDestroyed = 1;
        return;
    }

    public void dispatchInvalidateOptionsMenu()
    {
        if (this.mMenu != null) {
            android.os.Bundle v0_1 = new android.os.Bundle();
            this.mMenu.saveActionViewStates(v0_1);
            if (v0_1.size() > 0) {
                this.mMenuFrozenActionViewState = v0_1;
            }
            this.mMenu.stopDispatchingItemsChanged();
            this.mMenu.clear();
        }
        this.mMenuRefreshContent = 1;
        if (this.wActionBar != null) {
            this.mMenuIsPrepared = 0;
            this.preparePanel();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p6)
    {
        int v2;
        int v1 = p6.getKeyCode();
        if (v1 != 4) {
            v2 = 0;
            if ((v1 == 82) && (this.isReservingOverflow())) {
                if ((p6.getAction() != 0) || (!p6.isLongPress())) {
                    if (p6.getAction() == 1) {
                        if (!this.mMenuKeyIsLongPress) {
                            if ((this.mActionMode == null) && (this.wActionBar != null)) {
                                if (!this.wActionBar.isOverflowMenuShowing()) {
                                    this.wActionBar.showOverflowMenu();
                                } else {
                                    this.wActionBar.hideOverflowMenu();
                                }
                            }
                            v2 = 1;
                        }
                        this.mMenuKeyIsLongPress = 0;
                    }
                } else {
                    this.mMenuKeyIsLongPress = 1;
                }
            }
        } else {
            int v0 = p6.getAction();
            if (this.mActionMode == null) {
                if ((this.wActionBar == null) || (!this.wActionBar.hasExpandedActionView())) {
                } else {
                    if (v0 == 1) {
                        this.wActionBar.collapseActionView();
                    }
                    v2 = 1;
                }
            } else {
                if (v0 == 1) {
                    this.mActionMode.finish();
                }
                v2 = 1;
            }
        }
        return v2;
    }

    public boolean dispatchMenuOpened(int p3, android.view.Menu p4)
    {
        int v0 = 1;
        if ((p3 != 8) && (p3 != 0)) {
            v0 = 0;
        } else {
            if (this.aActionBar != null) {
                this.aActionBar.dispatchMenuVisibilityChanged(1);
            }
        }
        return v0;
    }

    public boolean dispatchOpenOptionsMenu()
    {
        boolean v0_2;
        if (this.isReservingOverflow()) {
            v0_2 = this.wActionBar.showOverflowMenu();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean dispatchOptionsItemSelected(android.view.MenuItem p3)
    {
        throw new IllegalStateException("Native callback invoked. Create a test case and report!");
    }

    public void dispatchPanelClosed(int p3, android.view.Menu p4)
    {
        if (((p3 == 8) || (p3 == 0)) && (this.aActionBar != null)) {
            this.aActionBar.dispatchMenuVisibilityChanged(0);
        }
        return;
    }

    public void dispatchPause()
    {
        if ((this.wActionBar != null) && (this.wActionBar.isOverflowMenuShowing())) {
            this.wActionBar.hideOverflowMenu();
        }
        return;
    }

    public void dispatchPostCreate(android.os.Bundle p2)
    {
        if (this.mIsDelegate) {
            this.mIsTitleReady = 1;
        }
        if (this.mDecor == null) {
            this.initActionBar();
        }
        return;
    }

    public void dispatchPostResume()
    {
        if (this.aActionBar != null) {
            this.aActionBar.setShowHideAnimationEnabled(1);
        }
        return;
    }

    public boolean dispatchPrepareOptionsMenu(android.view.Menu p4)
    {
        boolean v0 = 0;
        if (this.mActionMode == null) {
            this.mMenuIsPrepared = 0;
            if ((this.preparePanel()) && (!this.isReservingOverflow())) {
                if (this.mNativeItemMap != null) {
                    this.mNativeItemMap.clear();
                } else {
                    this.mNativeItemMap = new java.util.HashMap();
                }
                if (this.mMenu != null) {
                    v0 = this.mMenu.bindNativeOverflow(p4, this, this.mNativeItemMap);
                }
            }
        }
        return v0;
    }

    public void dispatchStop()
    {
        if (this.aActionBar != null) {
            this.aActionBar.setShowHideAnimationEnabled(0);
        }
        return;
    }

    public void dispatchTitleChanged(CharSequence p2, int p3)
    {
        if ((!this.mIsDelegate) || (this.mIsTitleReady)) {
            if (this.mTitleView == null) {
                if (this.wActionBar != null) {
                    this.wActionBar.setWindowTitle(p2);
                }
            } else {
                this.mTitleView.setText(p2);
            }
        }
        this.mTitle = p2;
        return;
    }

    public com.actionbarsherlock.app.ActionBar getActionBar()
    {
        this.initActionBar();
        return this.aActionBar;
    }

    protected android.content.Context getThemedContext()
    {
        return this.aActionBar.getThemedContext();
    }

    public boolean hasFeature(int p4)
    {
        int v0 = 1;
        if ((this.mFeatures & (1 << p4)) == 0) {
            v0 = 0;
        }
        return v0;
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p1, boolean p2)
    {
        this.checkCloseActionMenu(p1);
        return;
    }

    public boolean onMenuItemClick(android.view.MenuItem p5)
    {
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v0_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mNativeItemMap.get(p5));
        if (v0_1 == null) {
            android.util.Log.e("ActionBarSherlock", new StringBuilder("Options item \"").append(p5).append("\" not found in mapping").toString());
        } else {
            v0_1.invoke();
        }
        return 1;
    }

    public boolean onMenuItemSelected(int p2, com.actionbarsherlock.view.MenuItem p3)
    {
        return this.callbackOptionsItemSelected(p3);
    }

    public boolean onMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.view.MenuItem p3)
    {
        return this.callbackOptionsItemSelected(p3);
    }

    public void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder p2)
    {
        this.reopenMenu(1);
        return;
    }

    public boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p2)
    {
        return 1;
    }

    public boolean requestFeature(int p4)
    {
        int v0_0 = 1;
        if (this.mContentParent == null) {
            switch (p4) {
                case 1:
                case 2:
                case 5:
                case 8:
                case 9:
                case 10:
                    this.mFeatures = (this.mFeatures | (1 << p4));
                    break;
                case 3:
                case 4:
                case 6:
                case 7:
                default:
                    v0_0 = 0;
                    break;
            }
            return v0_0;
        } else {
            throw new android.util.AndroidRuntimeException("requestFeature() must be called before adding content");
        }
    }

    public void setContentView(int p4)
    {
        if (this.mContentParent != null) {
            this.mContentParent.removeAllViews();
        } else {
            this.installDecor();
        }
        this.mActivity.getLayoutInflater().inflate(p4, this.mContentParent);
        android.view.Window$Callback v0 = this.mActivity.getWindow().getCallback();
        if (v0 != null) {
            v0.onContentChanged();
        }
        this.initActionBar();
        return;
    }

    public void setContentView(android.view.View p3, android.view.ViewGroup$LayoutParams p4)
    {
        if (this.mContentParent != null) {
            this.mContentParent.removeAllViews();
        } else {
            this.installDecor();
        }
        this.mContentParent.addView(p3, p4);
        android.view.Window$Callback v0 = this.mActivity.getWindow().getCallback();
        if (v0 != null) {
            v0.onContentChanged();
        }
        this.initActionBar();
        return;
    }

    public void setProgress(int p3)
    {
        this.setFeatureInt(2, (p3 + 0));
        return;
    }

    public void setProgressBarIndeterminate(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = -4;
        } else {
            v0 = -3;
        }
        this.setFeatureInt(2, v0);
        return;
    }

    public void setProgressBarIndeterminateVisibility(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = -2;
        } else {
            v0 = -1;
        }
        this.setFeatureInt(5, v0);
        return;
    }

    public void setProgressBarVisibility(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = -2;
        } else {
            v0 = -1;
        }
        this.setFeatureInt(2, v0);
        return;
    }

    public void setSecondaryProgress(int p3)
    {
        this.setFeatureInt(2, (p3 + 20000));
        return;
    }

    public void setTitle(CharSequence p2)
    {
        this.dispatchTitleChanged(p2, 0);
        return;
    }

    public void setUiOptions(int p1)
    {
        this.mUiOptions = p1;
        return;
    }

    public void setUiOptions(int p3, int p4)
    {
        this.mUiOptions = ((this.mUiOptions & (p4 ^ -1)) | (p3 & p4));
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p7)
    {
        if (this.mActionMode != null) {
            this.mActionMode.finish();
        }
        com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper v2_1 = new com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper(this, p7);
        com.actionbarsherlock.internal.view.StandaloneActionMode v0_0 = 0;
        this.initActionBar();
        if (this.aActionBar != null) {
            v0_0 = this.aActionBar.startActionMode(v2_1);
        }
        if (v0_0 == null) {
            if (this.mActionModeView == null) {
                android.view.ViewStub v1_1 = ((android.view.ViewStub) this.mDecor.findViewById(com.actionbarsherlock.R$id.abs__action_mode_bar_stub));
                if (v1_1 != null) {
                    this.mActionModeView = ((com.actionbarsherlock.internal.widget.ActionBarContextView) v1_1.inflate());
                }
            }
            if (this.mActionModeView != null) {
                this.mActionModeView.killMode();
                com.actionbarsherlock.internal.view.StandaloneActionMode v0_2 = new com.actionbarsherlock.internal.view.StandaloneActionMode(this.mActivity, this.mActionModeView, v2_1, 1);
                if (!p7.onCreateActionMode(v0_2, v0_2.getMenu())) {
                    this.mActionMode = 0;
                } else {
                    v0_2.invalidate();
                    this.mActionModeView.initForMode(v0_2);
                    this.mActionModeView.setVisibility(0);
                    this.mActionMode = v0_2;
                    this.mActionModeView.sendAccessibilityEvent(32);
                }
            }
        } else {
            this.mActionMode = v0_0;
        }
        if ((this.mActionMode != null) && ((this.mActivity instanceof com.actionbarsherlock.ActionBarSherlock$OnActionModeStartedListener))) {
            ((com.actionbarsherlock.ActionBarSherlock$OnActionModeStartedListener) this.mActivity).onActionModeStarted(this.mActionMode);
        }
        return this.mActionMode;
    }

    public ActionBarSherlockNative$ActionModeCallbackWrapper(com.actionbarsherlock.internal.ActionBarSherlockNative p1, com.actionbarsherlock.view.ActionMode$Callback p2)
    {
        this.this$0 = p1;
        this.mCallback = p2;
        return;
    }

    public boolean onActionItemClicked(android.view.ActionMode p4, android.view.MenuItem p5)
    {
        return this.mCallback.onActionItemClicked(com.actionbarsherlock.internal.ActionBarSherlockNative.access$1(this.this$0), com.actionbarsherlock.internal.ActionBarSherlockNative.access$1(this.this$0).getMenu().findItem(p5));
    }

    public boolean onCreateActionMode(android.view.ActionMode p4, android.view.Menu p5)
    {
        com.actionbarsherlock.internal.ActionBarSherlockNative.access$0(this.this$0, new com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper(this.this$0, p4));
        return this.mCallback.onCreateActionMode(com.actionbarsherlock.internal.ActionBarSherlockNative.access$1(this.this$0), com.actionbarsherlock.internal.ActionBarSherlockNative.access$1(this.this$0).getMenu());
    }

    public void onDestroyActionMode(android.view.ActionMode p3)
    {
        this.mCallback.onDestroyActionMode(com.actionbarsherlock.internal.ActionBarSherlockNative.access$1(this.this$0));
        return;
    }

    public boolean onPrepareActionMode(android.view.ActionMode p4, android.view.Menu p5)
    {
        return this.mCallback.onPrepareActionMode(com.actionbarsherlock.internal.ActionBarSherlockNative.access$1(this.this$0), com.actionbarsherlock.internal.ActionBarSherlockNative.access$1(this.this$0).getMenu());
    }

    public ActionMode()
    {
        return;
    }

    public abstract void finish();

    public abstract android.view.View getCustomView();

    public abstract com.actionbarsherlock.view.Menu getMenu();

    public abstract com.actionbarsherlock.view.MenuInflater getMenuInflater();

    public abstract CharSequence getSubtitle();

    public Object getTag()
    {
        return this.mTag;
    }

    public abstract CharSequence getTitle();

    public abstract void invalidate();

    public boolean isUiFocusable()
    {
        return 1;
    }

    public abstract void setCustomView();

    public abstract void setSubtitle();

    public abstract void setSubtitle();

    public void setTag(Object p1)
    {
        this.mTag = p1;
        return;
    }

    public abstract void setTitle();

    public abstract void setTitle();

    ActionBarSherlockNative$ActionModeWrapper(com.actionbarsherlock.internal.ActionBarSherlockNative p2, android.view.ActionMode p3)
    {
        this.this$0 = p2;
        this.mMenu = 0;
        this.mActionMode = p3;
        return;
    }

    public void finish()
    {
        this.mActionMode.finish();
        return;
    }

    public android.view.View getCustomView()
    {
        return this.mActionMode.getCustomView();
    }

    public com.actionbarsherlock.internal.view.menu.MenuWrapper getMenu()
    {
        if (this.mMenu == null) {
            this.mMenu = new com.actionbarsherlock.internal.view.menu.MenuWrapper(this.mActionMode.getMenu());
        }
        return this.mMenu;
    }

    public bridge synthetic com.actionbarsherlock.view.Menu getMenu()
    {
        return this.getMenu();
    }

    public com.actionbarsherlock.view.MenuInflater getMenuInflater()
    {
        return this.this$0.getMenuInflater();
    }

    public CharSequence getSubtitle()
    {
        return this.mActionMode.getSubtitle();
    }

    public Object getTag()
    {
        return this.mActionMode.getTag();
    }

    public CharSequence getTitle()
    {
        return this.mActionMode.getTitle();
    }

    public void invalidate()
    {
        this.mActionMode.invalidate();
        return;
    }

    public void setCustomView(android.view.View p2)
    {
        this.mActionMode.setCustomView(p2);
        return;
    }

    public void setSubtitle(int p2)
    {
        this.mActionMode.setSubtitle(p2);
        return;
    }

    public void setSubtitle(CharSequence p2)
    {
        this.mActionMode.setSubtitle(p2);
        return;
    }

    public void setTag(Object p2)
    {
        this.mActionMode.setTag(p2);
        return;
    }

    public void setTitle(int p2)
    {
        this.mActionMode.setTitle(p2);
        return;
    }

    public void setTitle(CharSequence p2)
    {
        this.mActionMode.setTitle(p2);
        return;
    }

    public ActionBarSherlockNative(android.app.Activity p1, int p2)
    {
        super(p1, p2);
        return;
    }

    static synthetic void access$0(com.actionbarsherlock.internal.ActionBarSherlockNative p0, com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper p1)
    {
        p0.mActionMode = p1;
        return;
    }

    static synthetic com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper access$1(com.actionbarsherlock.internal.ActionBarSherlockNative p1)
    {
        return p1.mActionMode;
    }

    private void initActionBar()
    {
        if ((this.mActionBar == null) && (this.mActivity.getActionBar() != null)) {
            this.mActionBar = new com.actionbarsherlock.internal.app.ActionBarWrapper(this.mActivity);
        }
        return;
    }

    public void addContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.mActivity.getWindow().addContentView(p2, p3);
        this.initActionBar();
        return;
    }

    public boolean dispatchCreateOptionsMenu(android.view.Menu p3)
    {
        if ((this.mMenu == null) || (p3 != this.mMenu.unwrap())) {
            this.mMenu = new com.actionbarsherlock.internal.view.menu.MenuWrapper(p3);
        }
        return this.callbackCreateOptionsMenu(this.mMenu);
    }

    public void dispatchInvalidateOptionsMenu()
    {
        this.mActivity.getWindow().invalidatePanelMenu(0);
        return;
    }

    public boolean dispatchOptionsItemSelected(android.view.MenuItem p3)
    {
        return this.callbackOptionsItemSelected(this.mMenu.findItem(p3));
    }

    public boolean dispatchPrepareOptionsMenu(android.view.Menu p3)
    {
        return this.callbackPrepareOptionsMenu(this.mMenu);
    }

    public com.actionbarsherlock.app.ActionBar getActionBar()
    {
        this.initActionBar();
        return this.mActionBar;
    }

    protected android.content.Context getThemedContext()
    {
        android.view.ContextThemeWrapper v0 = this.mActivity;
        android.util.TypedValue v2_1 = new android.util.TypedValue();
        this.mActivity.getTheme().resolveAttribute(16843671, v2_1, 1);
        if (v2_1.resourceId != 0) {
            v0 = new android.view.ContextThemeWrapper(v0, v2_1.resourceId);
        }
        return v0;
    }

    public boolean hasFeature(int p3)
    {
        return this.mActivity.getWindow().hasFeature(p3);
    }

    public boolean requestFeature(int p3)
    {
        return this.mActivity.getWindow().requestFeature(p3);
    }

    public void setContentView(int p2)
    {
        this.mActivity.getWindow().setContentView(p2);
        this.initActionBar();
        return;
    }

    public void setContentView(android.view.View p2, android.view.ViewGroup$LayoutParams p3)
    {
        this.mActivity.getWindow().setContentView(p2, p3);
        this.initActionBar();
        return;
    }

    public void setProgress(int p2)
    {
        this.mActivity.setProgress(p2);
        return;
    }

    public void setProgressBarIndeterminate(boolean p2)
    {
        this.mActivity.setProgressBarIndeterminate(p2);
        return;
    }

    public void setProgressBarIndeterminateVisibility(boolean p2)
    {
        this.mActivity.setProgressBarIndeterminateVisibility(p2);
        return;
    }

    public void setProgressBarVisibility(boolean p2)
    {
        this.mActivity.setProgressBarVisibility(p2);
        return;
    }

    public void setSecondaryProgress(int p2)
    {
        this.mActivity.setSecondaryProgress(p2);
        return;
    }

    public void setTitle(CharSequence p2)
    {
        this.mActivity.getWindow().setTitle(p2);
        return;
    }

    public void setUiOptions(int p2)
    {
        this.mActivity.getWindow().setUiOptions(p2);
        return;
    }

    public void setUiOptions(int p2, int p3)
    {
        this.mActivity.getWindow().setUiOptions(p2, p3);
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p3)
    {
        if (this.mActionMode != null) {
            this.mActionMode.finish();
        }
        com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper v0_0 = 0;
        if (p3 != null) {
            v0_0 = new com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper(this, p3);
        }
        this.mActivity.startActionMode(v0_0);
        return this.mActionMode;
    }

    private ResourcesCompat()
    {
        return;
    }

    public static boolean getResources_getBoolean(android.content.Context p9, int p10)
    {
        String v4_0 = 1;
        if (android.os.Build$VERSION.SDK_INT < 13) {
            float v2;
            android.util.DisplayMetrics v1 = p9.getResources().getDisplayMetrics();
            float v3 = (((float) v1.widthPixels) / v1.density);
            float v0 = (((float) v1.heightPixels) / v1.density);
            if (v3 >= v0) {
                v2 = v0;
            } else {
                v2 = v3;
            }
            if (p10 != com.actionbarsherlock.R$bool.abs__action_bar_embed_tabs) {
                if (p10 != com.actionbarsherlock.R$bool.abs__split_action_bar_is_narrow) {
                    if (p10 != com.actionbarsherlock.R$bool.abs__action_bar_expanded_action_views_exclusive) {
                        if (p10 != com.actionbarsherlock.R$bool.abs__config_allowActionMenuItemTextWithIcon) {
                            throw new IllegalArgumentException(new StringBuilder("Unknown boolean resource ID ").append(p10).toString());
                        } else {
                            if (v3 < 1139802112) {
                                v4_0 = 0;
                            }
                        }
                    } else {
                        if (v2 >= 1142292480) {
                            v4_0 = 0;
                        }
                    }
                } else {
                    if (v3 >= 1139802112) {
                        v4_0 = 0;
                    }
                }
            } else {
                if (v3 < 1139802112) {
                    v4_0 = 0;
                }
            }
        } else {
            v4_0 = p9.getResources().getBoolean(p10);
        }
        return v4_0;
    }

    public static int getResources_getInteger(android.content.Context p5, int p6)
    {
        int v2_10;
        if (android.os.Build$VERSION.SDK_INT < 13) {
            android.util.DisplayMetrics v0 = p5.getResources().getDisplayMetrics();
            float v1 = (((float) v0.widthPixels) / v0.density);
            if (p6 != com.actionbarsherlock.R$integer.abs__max_action_buttons) {
                throw new IllegalArgumentException(new StringBuilder("Unknown integer resource ID ").append(p6).toString());
            } else {
                if (v1 < 1142292480) {
                    if (v1 < 1140457472) {
                        if (v1 < 1135869952) {
                            v2_10 = 2;
                        } else {
                            v2_10 = 3;
                        }
                    } else {
                        v2_10 = 4;
                    }
                } else {
                    v2_10 = 5;
                }
            }
        } else {
            v2_10 = p5.getResources().getInteger(p6);
        }
        return v2_10;
    }

    public abstract void onAnimationCancel();

    public abstract void onAnimationEnd();

    public abstract void onAnimationRepeat();

    public abstract void onAnimationStart();

    public AnimatorListenerAdapter()
    {
        return;
    }

    public void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationRepeat(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    ActionBarImpl$1(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p4)
    {
        if (com.actionbarsherlock.internal.app.ActionBarImpl.access$0(this.this$0) != null) {
            com.actionbarsherlock.internal.app.ActionBarImpl.access$0(this.this$0).setTranslationY(0);
            com.actionbarsherlock.internal.app.ActionBarImpl.access$1(this.this$0).setTranslationY(0);
        }
        if ((com.actionbarsherlock.internal.app.ActionBarImpl.access$2(this.this$0) != null) && (com.actionbarsherlock.internal.app.ActionBarImpl.access$3(this.this$0) == 1)) {
            com.actionbarsherlock.internal.app.ActionBarImpl.access$2(this.this$0).setVisibility(8);
        }
        com.actionbarsherlock.internal.app.ActionBarImpl.access$1(this.this$0).setVisibility(8);
        com.actionbarsherlock.internal.app.ActionBarImpl.access$1(this.this$0).setTransitioning(0);
        com.actionbarsherlock.internal.app.ActionBarImpl.access$4(this.this$0, 0);
        this.this$0.completeDeferredDestroyActionMode();
        return;
    }

    ActionBarImpl$2(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p3)
    {
        com.actionbarsherlock.internal.app.ActionBarImpl.access$4(this.this$0, 0);
        com.actionbarsherlock.internal.app.ActionBarImpl.access$1(this.this$0).requestLayout();
        return;
    }

    public ActionBarImpl$ActionModeImpl(com.actionbarsherlock.internal.app.ActionBarImpl p3, com.actionbarsherlock.view.ActionMode$Callback p4)
    {
        this.this$0 = p3;
        this.mCallback = p4;
        this.mMenu = new com.actionbarsherlock.internal.view.menu.MenuBuilder(p3.getThemedContext()).setDefaultShowAsAction(1);
        this.mMenu.setCallback(this);
        return;
    }

    public boolean dispatchOnCreate()
    {
        this.mMenu.stopDispatchingItemsChanged();
        try {
            Throwable v0_2 = this.mCallback.onCreateActionMode(this, this.mMenu);
            this.mMenu.startDispatchingItemsChanged();
            return v0_2;
        } catch (Throwable v0_3) {
            this.mMenu.startDispatchingItemsChanged();
            throw v0_3;
        }
    }

    public void finish()
    {
        if (this.this$0.mActionMode == this) {
            if (!this.this$0.mWasHiddenBeforeMode) {
                this.mCallback.onDestroyActionMode(this);
            } else {
                this.this$0.mDeferredDestroyActionMode = this;
                this.this$0.mDeferredModeDestroyCallback = this.mCallback;
            }
            this.mCallback = 0;
            this.this$0.animateToMode(0);
            com.actionbarsherlock.internal.app.ActionBarImpl.access$5(this.this$0).closeMode();
            com.actionbarsherlock.internal.app.ActionBarImpl.access$6(this.this$0).sendAccessibilityEvent(32);
            this.this$0.mActionMode = 0;
            if (this.this$0.mWasHiddenBeforeMode) {
                this.this$0.hide();
            }
        }
        return;
    }

    public android.view.View getCustomView()
    {
        int v0_1;
        if (this.mCustomView == null) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.view.View) this.mCustomView.get());
        }
        return v0_1;
    }

    public com.actionbarsherlock.view.Menu getMenu()
    {
        return this.mMenu;
    }

    public com.actionbarsherlock.view.MenuInflater getMenuInflater()
    {
        return new com.actionbarsherlock.view.MenuInflater(this.this$0.getThemedContext());
    }

    public CharSequence getSubtitle()
    {
        return com.actionbarsherlock.internal.app.ActionBarImpl.access$5(this.this$0).getSubtitle();
    }

    public CharSequence getTitle()
    {
        return com.actionbarsherlock.internal.app.ActionBarImpl.access$5(this.this$0).getTitle();
    }

    public void invalidate()
    {
        this.mMenu.stopDispatchingItemsChanged();
        try {
            this.mCallback.onPrepareActionMode(this, this.mMenu);
            this.mMenu.startDispatchingItemsChanged();
            return;
        } catch (Throwable v0_3) {
            this.mMenu.startDispatchingItemsChanged();
            throw v0_3;
        }
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p1, boolean p2)
    {
        return;
    }

    public void onCloseSubMenu(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p1)
    {
        return;
    }

    public boolean onMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.view.MenuItem p3)
    {
        int v0_1;
        if (this.mCallback == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mCallback.onActionItemClicked(this, p3);
        }
        return v0_1;
    }

    public void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder p2)
    {
        if (this.mCallback != null) {
            this.invalidate();
            com.actionbarsherlock.internal.app.ActionBarImpl.access$5(this.this$0).showOverflowMenu();
        }
        return;
    }

    public boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p4)
    {
        int v0 = 1;
        if (this.mCallback != null) {
            if (p4.hasVisibleItems()) {
                new com.actionbarsherlock.internal.view.menu.MenuPopupHelper(this.this$0.getThemedContext(), p4).show();
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    public void setCustomView(android.view.View p2)
    {
        com.actionbarsherlock.internal.app.ActionBarImpl.access$5(this.this$0).setCustomView(p2);
        this.mCustomView = new ref.WeakReference(p2);
        return;
    }

    public void setSubtitle(int p2)
    {
        this.setSubtitle(com.actionbarsherlock.internal.app.ActionBarImpl.access$7(this.this$0).getResources().getString(p2));
        return;
    }

    public void setSubtitle(CharSequence p2)
    {
        com.actionbarsherlock.internal.app.ActionBarImpl.access$5(this.this$0).setSubtitle(p2);
        return;
    }

    public void setTitle(int p2)
    {
        this.setTitle(com.actionbarsherlock.internal.app.ActionBarImpl.access$7(this.this$0).getResources().getString(p2));
        return;
    }

    public void setTitle(CharSequence p2)
    {
        com.actionbarsherlock.internal.app.ActionBarImpl.access$5(this.this$0).setTitle(p2);
        return;
    }

    public ActionBarImpl$TabImpl(com.actionbarsherlock.internal.app.ActionBarImpl p2)
    {
        this.this$0 = p2;
        this.mPosition = -1;
        return;
    }

    public com.actionbarsherlock.app.ActionBar$TabListener getCallback()
    {
        return this.mCallback;
    }

    public CharSequence getContentDescription()
    {
        return this.mContentDesc;
    }

    public android.view.View getCustomView()
    {
        return this.mCustomView;
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        return this.mIcon;
    }

    public int getPosition()
    {
        return this.mPosition;
    }

    public Object getTag()
    {
        return this.mTag;
    }

    public CharSequence getText()
    {
        return this.mText;
    }

    public void select()
    {
        this.this$0.selectTab(this);
        return;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setContentDescription(int p2)
    {
        return this.setContentDescription(com.actionbarsherlock.internal.app.ActionBarImpl.access$7(this.this$0).getResources().getText(p2));
    }

    public com.actionbarsherlock.app.ActionBar$Tab setContentDescription(CharSequence p3)
    {
        this.mContentDesc = p3;
        if (this.mPosition >= 0) {
            com.actionbarsherlock.internal.app.ActionBarImpl.access$8(this.this$0).updateTab(this.mPosition);
        }
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setCustomView(int p3)
    {
        return this.setCustomView(android.view.LayoutInflater.from(this.this$0.getThemedContext()).inflate(p3, 0));
    }

    public com.actionbarsherlock.app.ActionBar$Tab setCustomView(android.view.View p3)
    {
        this.mCustomView = p3;
        if (this.mPosition >= 0) {
            com.actionbarsherlock.internal.app.ActionBarImpl.access$8(this.this$0).updateTab(this.mPosition);
        }
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setIcon(int p2)
    {
        return this.setIcon(com.actionbarsherlock.internal.app.ActionBarImpl.access$7(this.this$0).getResources().getDrawable(p2));
    }

    public com.actionbarsherlock.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable p3)
    {
        this.mIcon = p3;
        if (this.mPosition >= 0) {
            com.actionbarsherlock.internal.app.ActionBarImpl.access$8(this.this$0).updateTab(this.mPosition);
        }
        return this;
    }

    public void setPosition(int p1)
    {
        this.mPosition = p1;
        return;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setTabListener(com.actionbarsherlock.app.ActionBar$TabListener p1)
    {
        this.mCallback = p1;
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setTag(Object p1)
    {
        this.mTag = p1;
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setText(int p2)
    {
        return this.setText(com.actionbarsherlock.internal.app.ActionBarImpl.access$7(this.this$0).getResources().getText(p2));
    }

    public com.actionbarsherlock.app.ActionBar$Tab setText(CharSequence p3)
    {
        this.mText = p3;
        if (this.mPosition >= 0) {
            com.actionbarsherlock.internal.app.ActionBarImpl.access$8(this.this$0).updateTab(this.mPosition);
        }
        return this;
    }

    public ActionBarImpl(android.app.Activity p4, int p5)
    {
        this.mTabs = new java.util.ArrayList();
        this.mSavedTabPosition = -1;
        this.mMenuVisibilityListeners = new java.util.ArrayList();
        this.mHandler = new android.os.Handler();
        this.mHideListener = new com.actionbarsherlock.internal.app.ActionBarImpl$1(this);
        this.mShowListener = new com.actionbarsherlock.internal.app.ActionBarImpl$2(this);
        this.mActivity = p4;
        android.view.View v0 = p4.getWindow().getDecorView();
        this.init(v0);
        if ((p5 & 512) == 0) {
            this.mContentView = ((com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout) v0.findViewById(16908290));
        }
        return;
    }

    public ActionBarImpl(android.app.Dialog p2)
    {
        this.mTabs = new java.util.ArrayList();
        this.mSavedTabPosition = -1;
        this.mMenuVisibilityListeners = new java.util.ArrayList();
        this.mHandler = new android.os.Handler();
        this.mHideListener = new com.actionbarsherlock.internal.app.ActionBarImpl$1(this);
        this.mShowListener = new com.actionbarsherlock.internal.app.ActionBarImpl$2(this);
        this.init(p2.getWindow().getDecorView());
        return;
    }

    static synthetic com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout access$0(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mContentView;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarContainer access$1(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mContainerView;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarContainer access$2(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mSplitView;
    }

    static synthetic int access$3(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mContextDisplayMode;
    }

    static synthetic void access$4(com.actionbarsherlock.internal.app.ActionBarImpl p0, com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        p0.mCurrentShowAnim = p1;
        return;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarContextView access$5(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mContextView;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarView access$6(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mActionView;
    }

    static synthetic android.content.Context access$7(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mContext;
    }

    static synthetic com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$8(com.actionbarsherlock.internal.app.ActionBarImpl p1)
    {
        return p1.mTabScrollView;
    }

    private void cleanupTabs()
    {
        if (this.mSelectedTab != null) {
            this.selectTab(0);
        }
        this.mTabs.clear();
        if (this.mTabScrollView != null) {
            this.mTabScrollView.removeAllTabs();
        }
        this.mSavedTabPosition = -1;
        return;
    }

    private void configureTab(com.actionbarsherlock.app.ActionBar$Tab p7, int p8)
    {
        if (((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) p7).getCallback() != null) {
            ((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) p7).setPosition(p8);
            this.mTabs.add(p8, ((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) p7));
            int v1 = this.mTabs.size();
            int v2 = (p8 + 1);
            while (v2 < v1) {
                ((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) this.mTabs.get(v2)).setPosition(v2);
                v2++;
            }
            return;
        } else {
            throw new IllegalStateException("Action Bar Tab must have a Callback");
        }
    }

    private void ensureTabsExist()
    {
        int v1_0 = 0;
        if (this.mTabScrollView == null) {
            com.actionbarsherlock.internal.widget.ScrollingTabContainerView v0_1 = new com.actionbarsherlock.internal.widget.ScrollingTabContainerView(this.mContext);
            if (!this.mHasEmbeddedTabs) {
                if (this.getNavigationMode() != 2) {
                    v1_0 = 8;
                }
                v0_1.setVisibility(v1_0);
                this.mContainerView.setTabContainer(v0_1);
            } else {
                v0_1.setVisibility(0);
                this.mActionView.setEmbeddedTabView(v0_1);
            }
            this.mTabScrollView = v0_1;
        }
        return;
    }

    private void init(android.view.View p5)
    {
        String v1_0 = 1;
        this.mContext = p5.getContext();
        this.mActionView = ((com.actionbarsherlock.internal.widget.ActionBarView) p5.findViewById(com.actionbarsherlock.R$id.abs__action_bar));
        this.mContextView = ((com.actionbarsherlock.internal.widget.ActionBarContextView) p5.findViewById(com.actionbarsherlock.R$id.abs__action_context_bar));
        this.mContainerView = ((com.actionbarsherlock.internal.widget.ActionBarContainer) p5.findViewById(com.actionbarsherlock.R$id.abs__action_bar_container));
        this.mSplitView = ((com.actionbarsherlock.internal.widget.ActionBarContainer) p5.findViewById(com.actionbarsherlock.R$id.abs__split_action_bar));
        if ((this.mActionView != null) && ((this.mContextView != null) && (this.mContainerView != null))) {
            boolean v0_16;
            this.mActionView.setContextView(this.mContextView);
            if (!this.mActionView.isSplitActionBar()) {
                v0_16 = 0;
            } else {
                v0_16 = 1;
            }
            this.mContextDisplayMode = v0_16;
            if (this.mContext.getApplicationInfo().targetSdkVersion >= 14) {
                v1_0 = 0;
            }
            this.setHomeButtonEnabled(v1_0);
            this.setHasEmbeddedTabs(com.actionbarsherlock.internal.ResourcesCompat.getResources_getBoolean(this.mContext, com.actionbarsherlock.R$bool.abs__action_bar_embed_tabs));
            return;
        } else {
            throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" can only be used ").append("with a compatible window decor layout").toString());
        }
    }

    private void setHasEmbeddedTabs(boolean p6)
    {
        int v1 = 1;
        this.mHasEmbeddedTabs = p6;
        if (this.mHasEmbeddedTabs) {
            this.mContainerView.setTabContainer(0);
            this.mActionView.setEmbeddedTabView(this.mTabScrollView);
        } else {
            this.mActionView.setEmbeddedTabView(0);
            this.mContainerView.setTabContainer(this.mTabScrollView);
        }
        int v0;
        if (this.getNavigationMode() != 2) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if (this.mTabScrollView != null) {
            int v3_4;
            if (v0 == 0) {
                v3_4 = 8;
            } else {
                v3_4 = 0;
            }
            this.mTabScrollView.setVisibility(v3_4);
        }
        if ((this.mHasEmbeddedTabs) || (v0 == 0)) {
            v1 = 0;
        }
        this.mActionView.setCollapsable(v1);
        return;
    }

    public void addOnMenuVisibilityListener(com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener p2)
    {
        this.mMenuVisibilityListeners.add(p2);
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p2)
    {
        this.addTab(p2, this.mTabs.isEmpty());
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p2, int p3)
    {
        this.addTab(p2, p3, this.mTabs.isEmpty());
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p2, int p3, boolean p4)
    {
        this.ensureTabsExist();
        this.mTabScrollView.addTab(p2, p3, p4);
        this.configureTab(p2, p3);
        if (p4) {
            this.selectTab(p2);
        }
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p2, boolean p3)
    {
        this.ensureTabsExist();
        this.mTabScrollView.addTab(p2, p3);
        this.configureTab(p2, this.mTabs.size());
        if (p3) {
            this.selectTab(p2);
        }
        return;
    }

    void animateToMode(boolean p5)
    {
        int v1 = 8;
        if (p5) {
            this.show(0);
        }
        if (this.mCurrentModeAnim != null) {
            this.mCurrentModeAnim.end();
        }
        com.actionbarsherlock.internal.widget.ScrollingTabContainerView v0_0;
        if (!p5) {
            v0_0 = 0;
        } else {
            v0_0 = 8;
        }
        com.actionbarsherlock.internal.widget.ScrollingTabContainerView v0_1;
        this.mActionView.animateToVisibility(v0_0);
        if (!p5) {
            v0_1 = 8;
        } else {
            v0_1 = 0;
        }
        this.mContextView.animateToVisibility(v0_1);
        if ((this.mTabScrollView != null) && ((!this.mActionView.hasEmbeddedTabs()) && (this.mActionView.isCollapsed()))) {
            if (!p5) {
                v1 = 0;
            }
            this.mTabScrollView.animateToVisibility(v1);
        }
        return;
    }

    void completeDeferredDestroyActionMode()
    {
        if (this.mDeferredModeDestroyCallback != null) {
            this.mDeferredModeDestroyCallback.onDestroyActionMode(this.mDeferredDestroyActionMode);
            this.mDeferredDestroyActionMode = 0;
            this.mDeferredModeDestroyCallback = 0;
        }
        return;
    }

    public void dispatchMenuVisibilityChanged(boolean p4)
    {
        if (p4 != this.mLastMenuVisibility) {
            this.mLastMenuVisibility = p4;
            int v0 = this.mMenuVisibilityListeners.size();
            int v1 = 0;
            while (v1 < v0) {
                ((com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener) this.mMenuVisibilityListeners.get(v1)).onMenuVisibilityChanged(p4);
                v1++;
            }
        }
        return;
    }

    public android.view.View getCustomView()
    {
        return this.mActionView.getCustomNavigationView();
    }

    public int getDisplayOptions()
    {
        return this.mActionView.getDisplayOptions();
    }

    public int getHeight()
    {
        return this.mContainerView.getHeight();
    }

    public int getNavigationItemCount()
    {
        int v1_0 = 0;
        switch (this.mActionView.getNavigationMode()) {
            case 1:
                android.widget.SpinnerAdapter v0 = this.mActionView.getDropdownAdapter();
                if (v0 == null) {
                } else {
                    v1_0 = v0.getCount();
                }
                break;
            case 2:
                v1_0 = this.mTabs.size();
                break;
        }
        return v1_0;
    }

    public int getNavigationMode()
    {
        return this.mActionView.getNavigationMode();
    }

    public int getSelectedNavigationIndex()
    {
        int v0_0 = -1;
        switch (this.mActionView.getNavigationMode()) {
            case 1:
                v0_0 = this.mActionView.getDropdownSelectedPosition();
                break;
            case 2:
                if (this.mSelectedTab == null) {
                } else {
                    v0_0 = this.mSelectedTab.getPosition();
                }
                break;
        }
        return v0_0;
    }

    public com.actionbarsherlock.app.ActionBar$Tab getSelectedTab()
    {
        return this.mSelectedTab;
    }

    public CharSequence getSubtitle()
    {
        return this.mActionView.getSubtitle();
    }

    public com.actionbarsherlock.app.ActionBar$Tab getTabAt(int p2)
    {
        return ((com.actionbarsherlock.app.ActionBar$Tab) this.mTabs.get(p2));
    }

    public int getTabCount()
    {
        return this.mTabs.size();
    }

    public android.content.Context getThemedContext()
    {
        if (this.mThemedContext == null) {
            android.util.TypedValue v1_1 = new android.util.TypedValue();
            this.mContext.getTheme().resolveAttribute(com.actionbarsherlock.R$attr.actionBarWidgetTheme, v1_1, 1);
            int v2 = v1_1.resourceId;
            if (v2 == 0) {
                this.mThemedContext = this.mContext;
            } else {
                this.mThemedContext = new android.view.ContextThemeWrapper(this.mContext, v2);
            }
        }
        return this.mThemedContext;
    }

    public CharSequence getTitle()
    {
        return this.mActionView.getTitle();
    }

    public void hide()
    {
        if (this.mCurrentShowAnim != null) {
            this.mCurrentShowAnim.end();
        }
        if (this.mContainerView.getVisibility() != 8) {
            if (!this.mShowHideAnimationEnabled) {
                this.mHideListener.onAnimationEnd(0);
            } else {
                this.mContainerView.setAlpha(1065353216);
                this.mContainerView.setTransitioning(1);
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet();
                com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_5 = this.mContainerView;
                float[] v4_0 = new float[1];
                v4_0[0] = 0;
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v1 = v0_1.play(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_5, "alpha", v4_0));
                if (this.mContentView != null) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_8 = this.mContentView;
                    float[] v4_2 = new float[2];
                    v4_2[0] = 0;
                    v4_2[1] = ((float) (- this.mContainerView.getHeight()));
                    v1.with(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_8, "translationY", v4_2));
                    com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_11 = this.mContainerView;
                    float[] v4_3 = new float[1];
                    v4_3[0] = ((float) (- this.mContainerView.getHeight()));
                    v1.with(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_11, "translationY", v4_3));
                }
                if ((this.mSplitView != null) && (this.mSplitView.getVisibility() == 0)) {
                    this.mSplitView.setAlpha(1065353216);
                    com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_18 = this.mSplitView;
                    float[] v4_4 = new float[1];
                    v4_4[0] = 0;
                    v1.with(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_18, "alpha", v4_4));
                }
                v0_1.addListener(this.mHideListener);
                this.mCurrentShowAnim = v0_1;
                v0_1.start();
            }
        }
        return;
    }

    public boolean isShowing()
    {
        int v0_2;
        if (this.mContainerView.getVisibility() != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public com.actionbarsherlock.app.ActionBar$Tab newTab()
    {
        return new com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl(this);
    }

    public void onConfigurationChanged(android.content.res.Configuration p3)
    {
        this.setHasEmbeddedTabs(com.actionbarsherlock.internal.ResourcesCompat.getResources_getBoolean(this.mContext, com.actionbarsherlock.R$bool.abs__action_bar_embed_tabs));
        if (android.os.Build$VERSION.SDK_INT < 8) {
            this.mActionView.onConfigurationChanged(p3);
            if (this.mContextView != null) {
                this.mContextView.onConfigurationChanged(p3);
            }
        }
        return;
    }

    public void removeAllTabs()
    {
        this.cleanupTabs();
        return;
    }

    public void removeOnMenuVisibilityListener(com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener p2)
    {
        this.mMenuVisibilityListeners.remove(p2);
        return;
    }

    public void removeTab(com.actionbarsherlock.app.ActionBar$Tab p2)
    {
        this.removeTabAt(p2.getPosition());
        return;
    }

    public void removeTabAt(int p8)
    {
        if (this.mTabScrollView != null) {
            int v3;
            if (this.mSelectedTab == null) {
                v3 = this.mSavedTabPosition;
            } else {
                v3 = this.mSelectedTab.getPosition();
            }
            this.mTabScrollView.removeTabAt(p8);
            com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl v2_1 = ((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) this.mTabs.remove(p8));
            if (v2_1 != null) {
                v2_1.setPosition(-1);
            }
            int v1 = this.mTabs.size();
            int v0 = p8;
            while (v0 < v1) {
                ((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) this.mTabs.get(v0)).setPosition(v0);
                v0++;
            }
            if (v3 == p8) {
                com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl v4_12;
                if (!this.mTabs.isEmpty()) {
                    v4_12 = ((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) this.mTabs.get(Math.max(0, (p8 - 1))));
                } else {
                    v4_12 = 0;
                }
                this.selectTab(v4_12);
            }
        }
        return;
    }

    public void selectTab(com.actionbarsherlock.app.ActionBar$Tab p5)
    {
        com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl v2_0 = -1;
        if (this.getNavigationMode() == 2) {
            android.support.v4.app.FragmentTransaction v0 = 0;
            if ((this.mActivity instanceof com.actionbarsherlock.app.SherlockFragmentActivity)) {
                v0 = ((com.actionbarsherlock.app.SherlockFragmentActivity) this.mActivity).getSupportFragmentManager().beginTransaction().disallowAddToBackStack();
            }
            if (this.mSelectedTab != p5) {
                com.actionbarsherlock.app.ActionBar$TabListener v1_4 = this.mTabScrollView;
                if (p5 != null) {
                    v2_0 = p5.getPosition();
                }
                v1_4.setTabSelected(v2_0);
                if (this.mSelectedTab != null) {
                    this.mSelectedTab.getCallback().onTabUnselected(this.mSelectedTab, v0);
                }
                this.mSelectedTab = ((com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl) p5);
                if (this.mSelectedTab != null) {
                    this.mSelectedTab.getCallback().onTabSelected(this.mSelectedTab, v0);
                }
            } else {
                if (this.mSelectedTab != null) {
                    this.mSelectedTab.getCallback().onTabReselected(this.mSelectedTab, v0);
                    this.mTabScrollView.animateToTab(p5.getPosition());
                }
            }
            if ((v0 != null) && (!v0.isEmpty())) {
                v0.commit();
            }
        } else {
            com.actionbarsherlock.app.ActionBar$TabListener v1_17;
            if (p5 == null) {
                v1_17 = -1;
            } else {
                v1_17 = p5.getPosition();
            }
            this.mSavedTabPosition = v1_17;
        }
        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mContainerView.setPrimaryBackground(p2);
        return;
    }

    public void setCustomView(int p4)
    {
        this.setCustomView(android.view.LayoutInflater.from(this.getThemedContext()).inflate(p4, this.mActionView, 0));
        return;
    }

    public void setCustomView(android.view.View p2)
    {
        this.mActionView.setCustomNavigationView(p2);
        return;
    }

    public void setCustomView(android.view.View p2, com.actionbarsherlock.app.ActionBar$LayoutParams p3)
    {
        p2.setLayoutParams(p3);
        this.mActionView.setCustomNavigationView(p2);
        return;
    }

    public void setDisplayHomeAsUpEnabled(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 0;
        } else {
            v0 = 4;
        }
        this.setDisplayOptions(v0, 4);
        return;
    }

    public void setDisplayOptions(int p2)
    {
        this.mActionView.setDisplayOptions(p2);
        return;
    }

    public void setDisplayOptions(int p5, int p6)
    {
        this.mActionView.setDisplayOptions(((p5 & p6) | ((p6 ^ -1) & this.mActionView.getDisplayOptions())));
        return;
    }

    public void setDisplayShowCustomEnabled(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 0;
        } else {
            v0 = 16;
        }
        this.setDisplayOptions(v0, 16);
        return;
    }

    public void setDisplayShowHomeEnabled(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 0;
        } else {
            v0 = 2;
        }
        this.setDisplayOptions(v0, 2);
        return;
    }

    public void setDisplayShowTitleEnabled(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 0;
        } else {
            v0 = 8;
        }
        this.setDisplayOptions(v0, 8);
        return;
    }

    public void setDisplayUseLogoEnabled(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        this.setDisplayOptions(v0, 1);
        return;
    }

    public void setHomeButtonEnabled(boolean p2)
    {
        this.mActionView.setHomeButtonEnabled(p2);
        return;
    }

    public void setIcon(int p2)
    {
        this.mActionView.setIcon(p2);
        return;
    }

    public void setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mActionView.setIcon(p2);
        return;
    }

    public void setListNavigationCallbacks(android.widget.SpinnerAdapter p2, com.actionbarsherlock.app.ActionBar$OnNavigationListener p3)
    {
        this.mActionView.setDropdownAdapter(p2);
        this.mActionView.setCallback(p3);
        return;
    }

    public void setLogo(int p2)
    {
        this.mActionView.setLogo(p2);
        return;
    }

    public void setLogo(android.graphics.drawable.Drawable p2)
    {
        this.mActionView.setLogo(p2);
        return;
    }

    public void setNavigationMode(int p6)
    {
        int v1 = 0;
        switch (this.mActionView.getNavigationMode()) {
            case 2:
                this.mSavedTabPosition = this.getSelectedNavigationIndex();
                this.selectTab(0);
                this.mTabScrollView.setVisibility(8);
                break;
        }
        this.mActionView.setNavigationMode(p6);
        switch (p6) {
            case 2:
                this.ensureTabsExist();
                this.mTabScrollView.setVisibility(0);
                if (this.mSavedTabPosition == -1) {
                } else {
                    this.setSelectedNavigationItem(this.mSavedTabPosition);
                    this.mSavedTabPosition = -1;
                }
                break;
            default:
                if (p6 != 2) {
                    this.mActionView.setCollapsable(v1);
                    return;
                } else {
                    if (this.mHasEmbeddedTabs) {
                        this.mActionView.setCollapsable(v1);
                        return;
                    } else {
                        v1 = 1;
                        this.mActionView.setCollapsable(v1);
                        return;
                    }
                }
        }
        if ((p6 == 2) && (!this.mHasEmbeddedTabs)) {
        }
        this.mActionView.setCollapsable(v1);
        return;
    }

    public void setSelectedNavigationItem(int p3)
    {
        switch (this.mActionView.getNavigationMode()) {
            case 1:
                this.mActionView.setDropdownSelectedPosition(p3);
                break;
            case 2:
                this.selectTab(((com.actionbarsherlock.app.ActionBar$Tab) this.mTabs.get(p3)));
                break;
            default:
                throw new IllegalStateException("setSelectedNavigationIndex not valid for current navigation mode");
        }
        return;
    }

    public void setShowHideAnimationEnabled(boolean p2)
    {
        this.mShowHideAnimationEnabled = p2;
        if ((!p2) && (this.mCurrentShowAnim != null)) {
            this.mCurrentShowAnim.end();
        }
        return;
    }

    public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        if (this.mSplitView != null) {
            this.mSplitView.setSplitBackground(p2);
        }
        return;
    }

    public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mContainerView.setStackedBackground(p2);
        return;
    }

    public void setSubtitle(int p2)
    {
        this.setSubtitle(this.mContext.getString(p2));
        return;
    }

    public void setSubtitle(CharSequence p2)
    {
        this.mActionView.setSubtitle(p2);
        return;
    }

    public void setTitle(int p2)
    {
        this.setTitle(this.mContext.getString(p2));
        return;
    }

    public void setTitle(CharSequence p2)
    {
        this.mActionView.setTitle(p2);
        return;
    }

    public void show()
    {
        this.show(1);
        return;
    }

    void show(boolean p11)
    {
        if (this.mCurrentShowAnim != null) {
            this.mCurrentShowAnim.end();
        }
        if (this.mContainerView.getVisibility() != 0) {
            this.mContainerView.setVisibility(0);
            if (!this.mShowHideAnimationEnabled) {
                this.mContainerView.setAlpha(1065353216);
                this.mContainerView.setTranslationY(0);
                this.mShowListener.onAnimationEnd(0);
            } else {
                this.mContainerView.setAlpha(0);
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet();
                com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_7 = this.mContainerView;
                float[] v4_0 = new float[1];
                v4_0[0] = 1065353216;
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v1 = v0_1.play(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_7, "alpha", v4_0));
                if (this.mContentView != null) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_10 = this.mContentView;
                    float[] v4_2 = new float[2];
                    v4_2[0] = ((float) (- this.mContainerView.getHeight()));
                    v4_2[1] = 0;
                    v1.with(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_10, "translationY", v4_2));
                    this.mContainerView.setTranslationY(((float) (- this.mContainerView.getHeight())));
                    com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_14 = this.mContainerView;
                    float[] v4_3 = new float[1];
                    v4_3[0] = 0;
                    v1.with(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_14, "translationY", v4_3));
                }
                if ((this.mSplitView != null) && (this.mContextDisplayMode == 1)) {
                    this.mSplitView.setAlpha(0);
                    this.mSplitView.setVisibility(0);
                    com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_21 = this.mSplitView;
                    float[] v4_4 = new float[1];
                    v4_4[0] = 1065353216;
                    v1.with(com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v2_21, "alpha", v4_4));
                }
                v0_1.addListener(this.mShowListener);
                this.mCurrentShowAnim = v0_1;
                v0_1.start();
            }
        } else {
            if (p11) {
                this.mWasHiddenBeforeMode = 0;
            }
        }
        return;
    }

    public com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback p6)
    {
        boolean v1 = 0;
        if (this.mActionMode != null) {
            v1 = this.mWasHiddenBeforeMode;
            this.mActionMode.finish();
        }
        this.mContextView.killMode();
        int v0_1 = new com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl(this, p6);
        if (!v0_1.dispatchOnCreate()) {
            v0_1 = 0;
        } else {
            if ((!this.isShowing()) || (v1)) {
                com.actionbarsherlock.internal.widget.ActionBarContainer v2_2 = 1;
            } else {
                v2_2 = 0;
            }
            this.mWasHiddenBeforeMode = v2_2;
            v0_1.invalidate();
            this.mContextView.initForMode(v0_1);
            this.animateToMode(1);
            if ((this.mSplitView != null) && (this.mContextDisplayMode == 1)) {
                this.mSplitView.setVisibility(0);
            }
            this.mContextView.sendAccessibilityEvent(32);
            this.mActionMode = v0_1;
        }
        return v0_1;
    }

    public ActionBarWrapper$TabWrapper(com.actionbarsherlock.internal.app.ActionBarWrapper p2, android.app.ActionBar$Tab p3)
    {
        this.this$0 = p2;
        this.mNativeTab = p3;
        this.mNativeTab.setTag(this);
        return;
    }

    public CharSequence getContentDescription()
    {
        return this.mNativeTab.getContentDescription();
    }

    public android.view.View getCustomView()
    {
        return this.mNativeTab.getCustomView();
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        return this.mNativeTab.getIcon();
    }

    public int getPosition()
    {
        return this.mNativeTab.getPosition();
    }

    public Object getTag()
    {
        return this.mTag;
    }

    public CharSequence getText()
    {
        return this.mNativeTab.getText();
    }

    public void onTabReselected(android.app.ActionBar$Tab p3, android.app.FragmentTransaction p4)
    {
        if (this.mListener != null) {
            android.support.v4.app.FragmentTransaction v0 = 0;
            if ((com.actionbarsherlock.internal.app.ActionBarWrapper.access$0(this.this$0) instanceof com.actionbarsherlock.app.SherlockFragmentActivity)) {
                v0 = ((com.actionbarsherlock.app.SherlockFragmentActivity) com.actionbarsherlock.internal.app.ActionBarWrapper.access$0(this.this$0)).getSupportFragmentManager().beginTransaction().disallowAddToBackStack();
            }
            this.mListener.onTabReselected(this, v0);
            if ((v0 != null) && (!v0.isEmpty())) {
                v0.commit();
            }
        }
        return;
    }

    public void onTabSelected(android.app.ActionBar$Tab p3, android.app.FragmentTransaction p4)
    {
        if (this.mListener != null) {
            if ((com.actionbarsherlock.internal.app.ActionBarWrapper.access$1(this.this$0) == null) && ((com.actionbarsherlock.internal.app.ActionBarWrapper.access$0(this.this$0) instanceof com.actionbarsherlock.app.SherlockFragmentActivity))) {
                com.actionbarsherlock.internal.app.ActionBarWrapper.access$2(this.this$0, ((com.actionbarsherlock.app.SherlockFragmentActivity) com.actionbarsherlock.internal.app.ActionBarWrapper.access$0(this.this$0)).getSupportFragmentManager().beginTransaction().disallowAddToBackStack());
            }
            this.mListener.onTabSelected(this, com.actionbarsherlock.internal.app.ActionBarWrapper.access$1(this.this$0));
            if (com.actionbarsherlock.internal.app.ActionBarWrapper.access$1(this.this$0) != null) {
                if (!com.actionbarsherlock.internal.app.ActionBarWrapper.access$1(this.this$0).isEmpty()) {
                    com.actionbarsherlock.internal.app.ActionBarWrapper.access$1(this.this$0).commit();
                }
                com.actionbarsherlock.internal.app.ActionBarWrapper.access$2(this.this$0, 0);
            }
        }
        return;
    }

    public void onTabUnselected(android.app.ActionBar$Tab p3, android.app.FragmentTransaction p4)
    {
        if (this.mListener != null) {
            android.support.v4.app.FragmentTransaction v0 = 0;
            if ((com.actionbarsherlock.internal.app.ActionBarWrapper.access$0(this.this$0) instanceof com.actionbarsherlock.app.SherlockFragmentActivity)) {
                v0 = ((com.actionbarsherlock.app.SherlockFragmentActivity) com.actionbarsherlock.internal.app.ActionBarWrapper.access$0(this.this$0)).getSupportFragmentManager().beginTransaction().disallowAddToBackStack();
                com.actionbarsherlock.internal.app.ActionBarWrapper.access$2(this.this$0, v0);
            }
            this.mListener.onTabUnselected(this, v0);
        }
        return;
    }

    public void select()
    {
        this.mNativeTab.select();
        return;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setContentDescription(int p2)
    {
        this.mNativeTab.setContentDescription(p2);
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setContentDescription(CharSequence p2)
    {
        this.mNativeTab.setContentDescription(p2);
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setCustomView(int p2)
    {
        this.mNativeTab.setCustomView(p2);
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setCustomView(android.view.View p2)
    {
        this.mNativeTab.setCustomView(p2);
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setIcon(int p2)
    {
        this.mNativeTab.setIcon(p2);
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mNativeTab.setIcon(p2);
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setTabListener(com.actionbarsherlock.app.ActionBar$TabListener p3)
    {
        int v0;
        if (p3 == null) {
            v0 = 0;
        } else {
            v0 = this;
        }
        this.mNativeTab.setTabListener(v0);
        this.mListener = p3;
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setTag(Object p1)
    {
        this.mTag = p1;
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setText(int p2)
    {
        this.mNativeTab.setText(p2);
        return this;
    }

    public com.actionbarsherlock.app.ActionBar$Tab setText(CharSequence p2)
    {
        this.mNativeTab.setText(p2);
        return this;
    }

    public ActionBarWrapper(android.app.Activity p3)
    {
        this.mMenuVisibilityListeners = new java.util.HashSet(1);
        this.mActivity = p3;
        this.mActionBar = p3.getActionBar();
        if (this.mActionBar != null) {
            this.mActionBar.addOnMenuVisibilityListener(this);
        }
        return;
    }

    static synthetic android.app.Activity access$0(com.actionbarsherlock.internal.app.ActionBarWrapper p1)
    {
        return p1.mActivity;
    }

    static synthetic android.support.v4.app.FragmentTransaction access$1(com.actionbarsherlock.internal.app.ActionBarWrapper p1)
    {
        return p1.mFragmentTransaction;
    }

    static synthetic void access$2(com.actionbarsherlock.internal.app.ActionBarWrapper p0, android.support.v4.app.FragmentTransaction p1)
    {
        p0.mFragmentTransaction = p1;
        return;
    }

    public void addOnMenuVisibilityListener(com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener p2)
    {
        this.mMenuVisibilityListeners.add(p2);
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p3)
    {
        this.mActionBar.addTab(((com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper) p3).mNativeTab);
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p3, int p4)
    {
        this.mActionBar.addTab(((com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper) p3).mNativeTab, p4);
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p3, int p4, boolean p5)
    {
        this.mActionBar.addTab(((com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper) p3).mNativeTab, p4, p5);
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p3, boolean p4)
    {
        this.mActionBar.addTab(((com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper) p3).mNativeTab, p4);
        return;
    }

    public android.view.View getCustomView()
    {
        return this.mActionBar.getCustomView();
    }

    public int getDisplayOptions()
    {
        return this.mActionBar.getDisplayOptions();
    }

    public int getHeight()
    {
        return this.mActionBar.getHeight();
    }

    public int getNavigationItemCount()
    {
        return this.mActionBar.getNavigationItemCount();
    }

    public int getNavigationMode()
    {
        return this.mActionBar.getNavigationMode();
    }

    public int getSelectedNavigationIndex()
    {
        return this.mActionBar.getSelectedNavigationIndex();
    }

    public com.actionbarsherlock.app.ActionBar$Tab getSelectedTab()
    {
        int v1_1;
        android.app.ActionBar$Tab v0 = this.mActionBar.getSelectedTab();
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = ((com.actionbarsherlock.app.ActionBar$Tab) v0.getTag());
        }
        return v1_1;
    }

    public CharSequence getSubtitle()
    {
        return this.mActionBar.getSubtitle();
    }

    public com.actionbarsherlock.app.ActionBar$Tab getTabAt(int p3)
    {
        int v1_1;
        android.app.ActionBar$Tab v0 = this.mActionBar.getTabAt(p3);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = ((com.actionbarsherlock.app.ActionBar$Tab) v0.getTag());
        }
        return v1_1;
    }

    public int getTabCount()
    {
        return this.mActionBar.getTabCount();
    }

    public android.content.Context getThemedContext()
    {
        return this.mActionBar.getThemedContext();
    }

    public CharSequence getTitle()
    {
        return this.mActionBar.getTitle();
    }

    public void hide()
    {
        this.mActionBar.hide();
        return;
    }

    public boolean isShowing()
    {
        return this.mActionBar.isShowing();
    }

    public com.actionbarsherlock.app.ActionBar$Tab newTab()
    {
        return new com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper(this, this.mActionBar.newTab());
    }

    public void onMenuVisibilityChanged(boolean p4)
    {
        java.util.Iterator v1_1 = this.mMenuVisibilityListeners.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener) v1_1.next()).onMenuVisibilityChanged(p4);
        }
        return;
    }

    public boolean onNavigationItemSelected(int p2, long p3)
    {
        return this.mNavigationListener.onNavigationItemSelected(p2, p3);
    }

    public void removeAllTabs()
    {
        this.mActionBar.removeAllTabs();
        return;
    }

    public void removeOnMenuVisibilityListener(com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener p2)
    {
        this.mMenuVisibilityListeners.remove(p2);
        return;
    }

    public void removeTab(com.actionbarsherlock.app.ActionBar$Tab p3)
    {
        this.mActionBar.removeTab(((com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper) p3).mNativeTab);
        return;
    }

    public void removeTabAt(int p2)
    {
        this.mActionBar.removeTabAt(p2);
        return;
    }

    public void selectTab(com.actionbarsherlock.app.ActionBar$Tab p3)
    {
        this.mActionBar.selectTab(((com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper) p3).mNativeTab);
        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mActionBar.setBackgroundDrawable(p2);
        return;
    }

    public void setCustomView(int p2)
    {
        this.mActionBar.setCustomView(p2);
        return;
    }

    public void setCustomView(android.view.View p2)
    {
        this.mActionBar.setCustomView(p2);
        return;
    }

    public void setCustomView(android.view.View p3, com.actionbarsherlock.app.ActionBar$LayoutParams p4)
    {
        android.app.ActionBar$LayoutParams v0_1 = new android.app.ActionBar$LayoutParams(p4);
        v0_1.gravity = p4.gravity;
        v0_1.bottomMargin = p4.bottomMargin;
        v0_1.topMargin = p4.topMargin;
        v0_1.leftMargin = p4.leftMargin;
        v0_1.rightMargin = p4.rightMargin;
        this.mActionBar.setCustomView(p3, v0_1);
        return;
    }

    public void setDisplayHomeAsUpEnabled(boolean p2)
    {
        this.mActionBar.setDisplayHomeAsUpEnabled(p2);
        return;
    }

    public void setDisplayOptions(int p2)
    {
        this.mActionBar.setDisplayOptions(p2);
        return;
    }

    public void setDisplayOptions(int p2, int p3)
    {
        this.mActionBar.setDisplayOptions(p2, p3);
        return;
    }

    public void setDisplayShowCustomEnabled(boolean p2)
    {
        this.mActionBar.setDisplayShowCustomEnabled(p2);
        return;
    }

    public void setDisplayShowHomeEnabled(boolean p2)
    {
        this.mActionBar.setDisplayShowHomeEnabled(p2);
        return;
    }

    public void setDisplayShowTitleEnabled(boolean p2)
    {
        this.mActionBar.setDisplayShowTitleEnabled(p2);
        return;
    }

    public void setDisplayUseLogoEnabled(boolean p2)
    {
        this.mActionBar.setDisplayUseLogoEnabled(p2);
        return;
    }

    public void setHomeButtonEnabled(boolean p2)
    {
        this.mActionBar.setHomeButtonEnabled(p2);
        return;
    }

    public void setIcon(int p2)
    {
        this.mActionBar.setIcon(p2);
        return;
    }

    public void setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mActionBar.setIcon(p2);
        return;
    }

    public void setListNavigationCallbacks(android.widget.SpinnerAdapter p2, com.actionbarsherlock.app.ActionBar$OnNavigationListener p3)
    {
        this.mNavigationListener = p3;
        android.app.ActionBar v0 = this.mActionBar;
        if (p3 == null) {
            this = 0;
        }
        v0.setListNavigationCallbacks(p2, this);
        return;
    }

    public void setLogo(int p2)
    {
        this.mActionBar.setLogo(p2);
        return;
    }

    public void setLogo(android.graphics.drawable.Drawable p2)
    {
        this.mActionBar.setLogo(p2);
        return;
    }

    public void setNavigationMode(int p2)
    {
        this.mActionBar.setNavigationMode(p2);
        return;
    }

    public void setSelectedNavigationItem(int p2)
    {
        this.mActionBar.setSelectedNavigationItem(p2);
        return;
    }

    public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mActionBar.setSplitBackgroundDrawable(p2);
        return;
    }

    public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mActionBar.setStackedBackgroundDrawable(p2);
        return;
    }

    public void setSubtitle(int p2)
    {
        this.mActionBar.setSubtitle(p2);
        return;
    }

    public void setSubtitle(CharSequence p2)
    {
        this.mActionBar.setSubtitle(p2);
        return;
    }

    public void setTitle(int p2)
    {
        this.mActionBar.setTitle(p2);
        return;
    }

    public void setTitle(CharSequence p2)
    {
        this.mActionBar.setTitle(p2);
        return;
    }

    public void show()
    {
        this.mActionBar.show();
        return;
    }

    public Animator()
    {
        this.mListeners = 0;
        return;
    }

    public void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener p2)
    {
        if (this.mListeners == null) {
            this.mListeners = new java.util.ArrayList();
        }
        this.mListeners.add(p2);
        return;
    }

    public void cancel()
    {
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()
    {
        try {
            com.actionbarsherlock.internal.nineoldandroids.animation.Animator v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator) super.clone());
        } catch (CloneNotSupportedException v1) {
            throw new AssertionError();
        }
        if (this.mListeners != null) {
            java.util.ArrayList v4 = this.mListeners;
            v0_1.mListeners = new java.util.ArrayList();
            int v3 = v4.size();
            int v2 = 0;
            while (v2 < v3) {
                v0_1.mListeners.add(((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v4.get(v2)));
                v2++;
            }
        }
        return v0_1;
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public void end()
    {
        return;
    }

    public abstract long getDuration();

    public java.util.ArrayList getListeners()
    {
        return this.mListeners;
    }

    public abstract long getStartDelay();

    public abstract boolean isRunning();

    public boolean isStarted()
    {
        return this.isRunning();
    }

    public void removeAllListeners()
    {
        if (this.mListeners != null) {
            this.mListeners.clear();
            this.mListeners = 0;
        }
        return;
    }

    public void removeListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener p2)
    {
        if (this.mListeners != null) {
            this.mListeners.remove(p2);
            if (this.mListeners.size() == 0) {
                this.mListeners = 0;
            }
        }
        return;
    }

    public abstract com.actionbarsherlock.internal.nineoldandroids.animation.Animator setDuration();

    public abstract void setInterpolator();

    public abstract void setStartDelay();

    public void setTarget(Object p1)
    {
        return;
    }

    public void setupEndValues()
    {
        return;
    }

    public void setupStartValues()
    {
        return;
    }

    public void start()
    {
        return;
    }

    AnimatorSet$1(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p2, java.util.ArrayList p3)
    {
        this.this$0 = p2;
        this.val$nodesToStart = p3;
        this.canceled = 0;
        return;
    }

    public void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p2)
    {
        this.canceled = 1;
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p6)
    {
        if (!this.canceled) {
            int v2 = this.val$nodesToStart.size();
            int v0 = 0;
            while (v0 < v2) {
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v1_0 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) this.val$nodesToStart.get(v0));
                v1_0.animation.start();
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$2(this.this$0).add(v1_0.animation);
                v0++;
            }
        }
        return;
    }

    AnimatorSet$AnimatorSetListener(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p1, com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p2)
    {
        this.this$0 = p1;
        this.mAnimatorSet = p2;
        return;
    }

    public void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p5)
    {
        if ((!this.this$0.mTerminated) && ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$2(this.this$0).size() == 0) && (this.this$0.mListeners != null))) {
            int v1 = this.this$0.mListeners.size();
            int v0 = 0;
            while (v0 < v1) {
                ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) this.this$0.mListeners.get(v0)).onAnimationCancel(this.mAnimatorSet);
                v0++;
            }
        }
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p10)
    {
        p10.removeListener(this);
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$2(this.this$0).remove(p10);
        ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(this.mAnimatorSet).get(p10)).done = 1;
        if (!this.this$0.mTerminated) {
            java.util.ArrayList v5 = com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$4(this.mAnimatorSet);
            int v0 = 1;
            int v4 = v5.size();
            int v2_0 = 0;
            while (v2_0 < v4) {
                if (((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v5.get(v2_0)).done) {
                    v2_0++;
                } else {
                    v0 = 0;
                    break;
                }
            }
            if (v0 != 0) {
                if (this.this$0.mListeners != null) {
                    java.util.ArrayList v6_1 = ((java.util.ArrayList) this.this$0.mListeners.clone());
                    int v3 = v6_1.size();
                    int v2_1 = 0;
                    while (v2_1 < v3) {
                        ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v6_1.get(v2_1)).onAnimationEnd(this.mAnimatorSet);
                        v2_1++;
                    }
                }
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$5(this.mAnimatorSet, 0);
            }
        }
        return;
    }

    public void onAnimationRepeat(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    AnimatorSet$Builder(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p3, com.actionbarsherlock.internal.nineoldandroids.animation.Animator p4)
    {
        this.this$0 = p3;
        this.mCurrentNode = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(p3).get(p4));
        if (this.mCurrentNode == null) {
            this.mCurrentNode = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node(p4);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(p3).put(p4, this.mCurrentNode);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$6(p3).add(this.mCurrentNode);
        }
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(long p3)
    {
        float[] v1_1 = new float[2];
        v1_1 = {0, 1065353216};
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v0 = com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.ofFloat(v1_1);
        v0.setDuration(p3);
        this.after(v0);
        return this;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p4)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v1_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(this.this$0).get(p4));
        if (v1_1 == null) {
            v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node(p4);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(this.this$0).put(p4, v1_1);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$6(this.this$0).add(v1_1);
        }
        this.mCurrentNode.addDependency(new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency(v1_1, 1));
        return this;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p5)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v1_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(this.this$0).get(p5));
        if (v1_1 == null) {
            v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node(p5);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(this.this$0).put(p5, v1_1);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$6(this.this$0).add(v1_1);
        }
        v1_1.addDependency(new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency(this.mCurrentNode, 1));
        return this;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder with(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p5)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v1_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(this.this$0).get(p5));
        if (v1_1 == null) {
            v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node(p5);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$3(this.this$0).put(p5, v1_1);
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$6(this.this$0).add(v1_1);
        }
        v1_1.addDependency(new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency(this.mCurrentNode, 0));
        return this;
    }

    public AnimatorSet$Dependency(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node p1, int p2)
    {
        this.node = p1;
        this.rule = p2;
        return;
    }

    public AnimatorSet$DependencyListener(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p1, com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node p2, int p3)
    {
        this.mAnimatorSet = p1;
        this.mNode = p2;
        this.mRule = p3;
        return;
    }

    private void startIfReady(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p7)
    {
        if (!this.mAnimatorSet.mTerminated) {
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency v1 = 0;
            int v3 = this.mNode.tmpDependencies.size();
            int v2 = 0;
            while (v2 < v3) {
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency) this.mNode.tmpDependencies.get(v2));
                if ((v0_1.rule != this.mRule) || (v0_1.node.animation != p7)) {
                    v2++;
                } else {
                    v1 = v0_1;
                    p7.removeListener(this);
                    break;
                }
            }
            this.mNode.tmpDependencies.remove(v1);
            if (this.mNode.tmpDependencies.size() == 0) {
                this.mNode.animation.start();
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.access$2(this.mAnimatorSet).add(this.mNode.animation);
            }
        }
        return;
    }

    public void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p3)
    {
        if (this.mRule == 1) {
            this.startIfReady(p3);
        }
        return;
    }

    public void onAnimationRepeat(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p2)
    {
        if (this.mRule == 0) {
            this.startIfReady(p2);
        }
        return;
    }

    public AnimatorSet$Node(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p2)
    {
        this.dependencies = 0;
        this.tmpDependencies = 0;
        this.nodeDependencies = 0;
        this.nodeDependents = 0;
        this.done = 0;
        this.animation = p2;
        return;
    }

    public void addDependency(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency p4)
    {
        if (this.dependencies == null) {
            this.dependencies = new java.util.ArrayList();
            this.nodeDependencies = new java.util.ArrayList();
        }
        this.dependencies.add(p4);
        if (!this.nodeDependencies.contains(p4.node)) {
            this.nodeDependencies.add(p4.node);
        }
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v0 = p4.node;
        if (v0.nodeDependents == null) {
            v0.nodeDependents = new java.util.ArrayList();
        }
        v0.nodeDependents.add(this);
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node clone()
    {
        try {
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v1_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) super.clone());
            v1_1.animation = this.animation.clone();
            return v1_1;
        } catch (CloneNotSupportedException v0) {
            throw new AssertionError();
        }
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public AnimatorSet()
    {
        this.mPlayingSet = new java.util.ArrayList();
        this.mNodeMap = new java.util.HashMap();
        this.mNodes = new java.util.ArrayList();
        this.mSortedNodes = new java.util.ArrayList();
        this.mNeedsSort = 1;
        this.mSetListener = 0;
        this.mTerminated = 0;
        this.mStarted = 0;
        this.mStartDelay = 0;
        this.mDelayAnim = 0;
        this.mDuration = -1;
        return;
    }

    static synthetic java.util.ArrayList access$2(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p1)
    {
        return p1.mPlayingSet;
    }

    static synthetic java.util.HashMap access$3(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p1)
    {
        return p1.mNodeMap;
    }

    static synthetic java.util.ArrayList access$4(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p1)
    {
        return p1.mSortedNodes;
    }

    static synthetic void access$5(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p0, boolean p1)
    {
        p0.mStarted = p1;
        return;
    }

    static synthetic java.util.ArrayList access$6(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet p1)
    {
        return p1.mNodes;
    }

    private void sortNodes()
    {
        if (!this.mNeedsSort) {
            int v6_1 = this.mNodes.size();
            int v1_0 = 0;
            while (v1_0 < v6_1) {
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v3_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) this.mNodes.get(v1_0));
                if ((v3_1.dependencies != null) && (v3_1.dependencies.size() > 0)) {
                    int v4 = v3_1.dependencies.size();
                    int v2_0 = 0;
                    while (v2_0 < v4) {
                        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency) v3_1.dependencies.get(v2_0));
                        if (v3_1.nodeDependencies == null) {
                            v3_1.nodeDependencies = new java.util.ArrayList();
                        }
                        if (!v3_1.nodeDependencies.contains(v0_1.node)) {
                            v3_1.nodeDependencies.add(v0_1.node);
                        }
                        v2_0++;
                    }
                }
                v3_1.done = 0;
                v1_0++;
            }
        } else {
            this.mSortedNodes.clear();
            java.util.ArrayList v9_1 = new java.util.ArrayList();
            int v6_0 = this.mNodes.size();
            int v1_1 = 0;
            while (v1_1 < v6_0) {
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v3_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) this.mNodes.get(v1_1));
                if ((v3_3.dependencies == null) || (v3_3.dependencies.size() == 0)) {
                    v9_1.add(v3_3);
                }
                v1_1++;
            }
            java.util.ArrayList v10_1 = new java.util.ArrayList();
            while (v9_1.size() > 0) {
                int v7 = v9_1.size();
                int v1_2 = 0;
                while (v1_2 < v7) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v8_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v9_1.get(v1_2));
                    this.mSortedNodes.add(v8_1);
                    if (v8_1.nodeDependents != null) {
                        int v5 = v8_1.nodeDependents.size();
                        int v2_1 = 0;
                        while (v2_1 < v5) {
                            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v3_5 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v8_1.nodeDependents.get(v2_1));
                            v3_5.nodeDependencies.remove(v8_1);
                            if (v3_5.nodeDependencies.size() == 0) {
                                v10_1.add(v3_5);
                            }
                            v2_1++;
                        }
                    }
                    v1_2++;
                }
                v9_1.clear();
                v9_1.addAll(v10_1);
                v10_1.clear();
            }
            this.mNeedsSort = 0;
            if (this.mSortedNodes.size() != this.mNodes.size()) {
                throw new IllegalStateException("Circular dependencies cannot exist in AnimatorSet");
            }
        }
        return;
    }

    public void cancel()
    {
        this.mTerminated = 1;
        if (this.isStarted()) {
            java.util.ArrayList v2_1 = 0;
            if (this.mListeners != null) {
                v2_1 = ((java.util.ArrayList) this.mListeners.clone());
                int v3_1 = v2_1.iterator();
                while (v3_1.hasNext()) {
                    ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v3_1.next()).onAnimationCancel(this);
                }
            }
            if ((this.mDelayAnim == null) || (!this.mDelayAnim.isRunning())) {
                if (this.mSortedNodes.size() > 0) {
                    int v3_9 = this.mSortedNodes.iterator();
                    while (v3_9.hasNext()) {
                        ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v3_9.next()).animation.cancel();
                    }
                }
            } else {
                this.mDelayAnim.cancel();
            }
            if (v2_1 != null) {
                int v3_11 = v2_1.iterator();
                while (v3_11.hasNext()) {
                    ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v3_11.next()).onAnimationEnd(this);
                }
            }
            this.mStarted = 0;
        }
        return;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()
    {
        return this.clone();
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet) super.clone());
        v0_1.mNeedsSort = 1;
        v0_1.mTerminated = 0;
        v0_1.mStarted = 0;
        v0_1.mPlayingSet = new java.util.ArrayList();
        v0_1.mNodeMap = new java.util.HashMap();
        v0_1.mNodes = new java.util.ArrayList();
        v0_1.mSortedNodes = new java.util.ArrayList();
        java.util.HashMap v9_1 = new java.util.HashMap();
        java.util.Iterator v10_8 = this.mNodes.iterator();
        while (v10_8.hasNext()) {
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v7_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v10_8.next());
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v8_0 = v7_1.clone();
            v9_1.put(v7_1, v8_0);
            v0_1.mNodes.add(v8_0);
            v0_1.mNodeMap.put(v8_0.animation, v8_0);
            v8_0.dependencies = 0;
            v8_0.tmpDependencies = 0;
            v8_0.nodeDependents = 0;
            v8_0.nodeDependencies = 0;
            java.util.ArrayList v2 = v8_0.animation.getListeners();
            if (v2 != null) {
                java.util.ArrayList v6_0 = 0;
                java.util.Iterator v11_5 = v2.iterator();
                while (v11_5.hasNext()) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener v5_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v11_5.next());
                    if ((v5_1 instanceof com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener)) {
                        if (v6_0 == null) {
                            v6_0 = new java.util.ArrayList();
                        }
                        v6_0.add(v5_1);
                    }
                }
                if (v6_0 != null) {
                    java.util.Iterator v11_6 = v6_0.iterator();
                    while (v11_6.hasNext()) {
                        v2.remove(((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v11_6.next()));
                    }
                }
            }
        }
        java.util.Iterator v10_11 = this.mNodes.iterator();
        while (v10_11.hasNext()) {
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v7_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v10_11.next());
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v8_2 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v9_1.get(v7_3));
            if (v7_3.dependencies != null) {
                java.util.Iterator v11_10 = v7_3.dependencies.iterator();
                while (v11_10.hasNext()) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency v4_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency) v11_10.next());
                    v8_2.addDependency(new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency(((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v9_1.get(v4_1.node)), v4_1.rule));
                }
            }
        }
        return v0_1;
    }

    public void end()
    {
        this.mTerminated = 1;
        if (this.isStarted()) {
            if (this.mSortedNodes.size() != this.mNodes.size()) {
                this.sortNodes();
                int v3_2 = this.mSortedNodes.iterator();
                while (v3_2.hasNext()) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v1_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v3_2.next());
                    if (this.mSetListener == null) {
                        this.mSetListener = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener(this, this);
                    }
                    v1_1.animation.addListener(this.mSetListener);
                }
            }
            if (this.mDelayAnim != null) {
                this.mDelayAnim.cancel();
            }
            if (this.mSortedNodes.size() > 0) {
                int v3_9 = this.mSortedNodes.iterator();
                while (v3_9.hasNext()) {
                    ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v3_9.next()).animation.end();
                }
            }
            if (this.mListeners != null) {
                int v3_13 = ((java.util.ArrayList) this.mListeners.clone()).iterator();
                while (v3_13.hasNext()) {
                    ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v3_13.next()).onAnimationEnd(this);
                }
            }
            this.mStarted = 0;
        }
        return;
    }

    public java.util.ArrayList getChildAnimations()
    {
        java.util.ArrayList v0_1 = new java.util.ArrayList();
        java.util.Iterator v2_1 = this.mNodes.iterator();
        while (v2_1.hasNext()) {
            v0_1.add(((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v2_1.next()).animation);
        }
        return v0_1;
    }

    public long getDuration()
    {
        return this.mDuration;
    }

    public long getStartDelay()
    {
        return this.mStartDelay;
    }

    public boolean isRunning()
    {
        int v1_2 = this.mNodes.iterator();
        while (v1_2.hasNext()) {
            if (((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v1_2.next()).animation.isRunning()) {
                int v1_1 = 1;
            }
            return v1_1;
        }
        v1_1 = 0;
        return v1_1;
    }

    public boolean isStarted()
    {
        return this.mStarted;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p2)
    {
        int v0_0;
        if (p2 == null) {
            v0_0 = 0;
        } else {
            this.mNeedsSort = 1;
            v0_0 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder(this, p2);
        }
        return v0_0;
    }

    public void playSequentially(java.util.List p4)
    {
        if ((p4 != null) && (p4.size() > 0)) {
            this.mNeedsSort = 1;
            if (p4.size() != 1) {
                int v0 = 0;
                while (v0 < (p4.size() - 1)) {
                    this.play(((com.actionbarsherlock.internal.nineoldandroids.animation.Animator) p4.get(v0))).before(((com.actionbarsherlock.internal.nineoldandroids.animation.Animator) p4.get((v0 + 1))));
                    v0++;
                }
            } else {
                this.play(((com.actionbarsherlock.internal.nineoldandroids.animation.Animator) p4.get(0)));
            }
        }
        return;
    }

    public varargs void playSequentially(com.actionbarsherlock.internal.nineoldandroids.animation.Animator[] p4)
    {
        if (p4 != null) {
            this.mNeedsSort = 1;
            if (p4.length != 1) {
                int v0 = 0;
                while (v0 < (p4.length - 1)) {
                    this.play(p4[v0]).before(p4[(v0 + 1)]);
                    v0++;
                }
            } else {
                this.play(p4[0]);
            }
        }
        return;
    }

    public void playTogether(java.util.Collection p5)
    {
        if ((p5 != null) && (p5.size() > 0)) {
            this.mNeedsSort = 1;
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v1 = 0;
            java.util.Iterator v2_2 = p5.iterator();
            while (v2_2.hasNext()) {
                com.actionbarsherlock.internal.nineoldandroids.animation.Animator v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator) v2_2.next());
                if (v1 != null) {
                    v1.with(v0_1);
                } else {
                    v1 = this.play(v0_1);
                }
            }
        }
        return;
    }

    public varargs void playTogether(com.actionbarsherlock.internal.nineoldandroids.animation.Animator[] p4)
    {
        if (p4 != null) {
            this.mNeedsSort = 1;
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v0 = this.play(p4[0]);
            int v1 = 1;
            while (v1 < p4.length) {
                v0.with(p4[v1]);
                v1++;
            }
        }
        return;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.Animator setDuration(long p2)
    {
        return this.setDuration(p2);
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet setDuration(long p4)
    {
        if (p4 >= 0) {
            java.util.Iterator v1_5 = this.mNodes.iterator();
            while (v1_5.hasNext()) {
                ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v1_5.next()).animation.setDuration(p4);
            }
            this.mDuration = p4;
            return this;
        } else {
            throw new IllegalArgumentException("duration must be a value of zero or greater");
        }
    }

    public void setInterpolator(android.view.animation.Interpolator p4)
    {
        java.util.Iterator v1_1 = this.mNodes.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v1_1.next()).animation.setInterpolator(p4);
        }
        return;
    }

    public void setStartDelay(long p1)
    {
        this.mStartDelay = p1;
        return;
    }

    public void setTarget(Object p5)
    {
        java.util.Iterator v2_1 = this.mNodes.iterator();
        while (v2_1.hasNext()) {
            com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_2 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v2_1.next()).animation;
            if (!(v0_2 instanceof com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)) {
                if ((v0_2 instanceof com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator)) {
                    ((com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator) v0_2).setTarget(p5);
                }
            } else {
                ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet) v0_2).setTarget(p5);
            }
        }
        return;
    }

    public void setupEndValues()
    {
        java.util.Iterator v1_1 = this.mNodes.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v1_1.next()).animation.setupEndValues();
        }
        return;
    }

    public void setupStartValues()
    {
        java.util.Iterator v1_1 = this.mNodes.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v1_1.next()).animation.setupStartValues();
        }
        return;
    }

    public void start()
    {
        this.mTerminated = 0;
        this.mStarted = 1;
        void v18_1 = this.sortNodes();
        int v11 = v18_1.mSortedNodes.size();
        int v4_0 = 0;
        while (v4_0 < v11) {
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v7_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v18_1.mSortedNodes.get(v4_0));
            java.util.ArrayList v12 = v7_3.animation.getListeners();
            if ((v12 != null) && (v12.size() > 0)) {
                com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener v14_24 = new java.util.ArrayList(v12).iterator();
                while (v14_24.hasNext()) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener v6_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v14_24.next());
                    if (((v6_1 instanceof com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener)) || ((v6_1 instanceof com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener))) {
                        v7_3.animation.removeListener(v6_1);
                    }
                }
            }
            v4_0++;
        }
        java.util.ArrayList v8_1 = new java.util.ArrayList();
        int v4_3 = 0;
        while (v4_3 < v11) {
            com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v7_5 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v18_1.mSortedNodes.get(v4_3));
            if (v18_1.mSetListener == null) {
                v18_1.mSetListener = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener(v18_1, v18_1);
            }
            if ((v7_5.dependencies != null) && (v7_5.dependencies.size() != 0)) {
                int v9 = v7_5.dependencies.size();
                int v5 = 0;
                while (v5 < v9) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency v3_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency) v7_5.dependencies.get(v5));
                    v3_1.node.animation.addListener(new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener(v18_1, v7_5, v3_1.rule));
                    v5++;
                }
                v7_5.tmpDependencies = ((java.util.ArrayList) v7_5.dependencies.clone());
            } else {
                v8_1.add(v7_5);
            }
            v7_5.animation.addListener(v18_1.mSetListener);
            v4_3++;
        }
        if (v18_1.mStartDelay > 0) {
            com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener v14_2 = new float[2];
            v14_2 = {0, 1065353216};
            v18_1.mDelayAnim = com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.ofFloat(v14_2);
            v18_1.mDelayAnim.setDuration(v18_1.mStartDelay);
            v18_1.mDelayAnim.addListener(new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$1(v18_1, v8_1));
            v18_1.mDelayAnim.start();
        } else {
            com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener v14_7 = v8_1.iterator();
            while (v14_7.hasNext()) {
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node v7_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node) v14_7.next());
                v7_1.animation.start();
                v18_1.mPlayingSet.add(v7_1.animation);
            }
        }
        if (v18_1.mListeners != null) {
            java.util.ArrayList v13_1 = ((java.util.ArrayList) v18_1.mListeners.clone());
            int v10_0 = v13_1.size();
            int v4_1 = 0;
            while (v4_1 < v10_0) {
                ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v13_1.get(v4_1)).onAnimationStart(v18_1);
                v4_1++;
            }
        }
        if ((v18_1.mNodes.size() == 0) && (v18_1.mStartDelay == 0)) {
            v18_1.mStarted = 0;
            if (v18_1.mListeners != null) {
                java.util.ArrayList v13_3 = ((java.util.ArrayList) v18_1.mListeners.clone());
                int v10_1 = v13_3.size();
                int v4_2 = 0;
                while (v4_2 < v10_1) {
                    ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v13_3.get(v4_2)).onAnimationEnd(v18_1);
                    v4_2++;
                }
            }
        }
        return;
    }

    public abstract Object evaluate();

    public FloatEvaluator()
    {
        return;
    }

    public Float evaluate(float p3, Number p4, Number p5)
    {
        float v0 = p4.floatValue();
        return Float.valueOf((((p5.floatValue() - v0) * p3) + v0));
    }

    public bridge synthetic Object evaluate(float p2, Object p3, Object p4)
    {
        return this.evaluate(p2, ((Number) p3), ((Number) p4));
    }

    public varargs KeyframeSet(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[] p3)
    {
        this.mNumKeyframes = p3.length;
        this.mKeyframes = new java.util.ArrayList();
        this.mKeyframes.addAll(java.util.Arrays.asList(p3));
        this.mFirstKeyframe = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get(0));
        this.mLastKeyframe = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get((this.mNumKeyframes - 1)));
        this.mInterpolator = this.mLastKeyframe.getInterpolator();
        return;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofFloat(float[] p7)
    {
        int v2 = p7.length;
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[] v1 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[Math.max(v2, 2)];
        if (v2 != 1) {
            v1[0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofFloat(0, p7[0]));
            int v0 = 1;
            while (v0 < v2) {
                v1[v0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofFloat((((float) v0) / ((float) (v2 - 1))), p7[v0]));
                v0++;
            }
        } else {
            v1[0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofFloat(0));
            v1[1] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofFloat(1065353216, p7[0]));
        }
        return new com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet(v1);
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofInt(int[] p7)
    {
        int v2 = p7.length;
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[] v1 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[Math.max(v2, 2)];
        if (v2 != 1) {
            v1[0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofInt(0, p7[0]));
            int v0 = 1;
            while (v0 < v2) {
                v1[v0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofInt((((float) v0) / ((float) (v2 - 1))), p7[v0]));
                v0++;
            }
        } else {
            v1[0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofInt(0));
            v1[1] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofInt(1065353216, p7[0]));
        }
        return new com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet(v1);
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofKeyframe(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[] p8)
    {
        int v6 = p8.length;
        int v1 = 0;
        int v2 = 0;
        int v3 = 0;
        int v4_0 = 0;
        while (v4_0 < v6) {
            if (!(p8[v4_0] instanceof com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe)) {
                if (!(p8[v4_0] instanceof com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe)) {
                    v3 = 1;
                } else {
                    v2 = 1;
                }
            } else {
                v1 = 1;
            }
            v4_0++;
        }
        if ((v1 == 0) || ((v2 != 0) || (v3 != 0))) {
            if ((v2 == 0) || ((v1 != 0) || (v3 != 0))) {
                com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v7_2 = new com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet(p8);
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[] v5 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[v6];
                int v4_1 = 0;
                while (v4_1 < v6) {
                    v5[v4_1] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) p8[v4_1]);
                    v4_1++;
                }
                v7_2 = new com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet(v5);
            }
        } else {
            com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[] v0 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[v6];
            int v4_2 = 0;
            while (v4_2 < v6) {
                v0[v4_2] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) p8[v4_2]);
                v4_2++;
            }
            v7_2 = new com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet(v0);
        }
        return v7_2;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofObject(Object[] p7)
    {
        int v2 = p7.length;
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe[] v1 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe[Math.max(v2, 2)];
        if (v2 != 1) {
            v1[0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofObject(0, p7[0]));
            int v0 = 1;
            while (v0 < v2) {
                v1[v0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofObject((((float) v0) / ((float) (v2 - 1))), p7[v0]));
                v0++;
            }
        } else {
            v1[0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofObject(0));
            v1[1] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe) com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.ofObject(1065353216, p7[0]));
        }
        return new com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet(v1);
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()
    {
        java.util.ArrayList v1 = this.mKeyframes;
        int v4 = this.mKeyframes.size();
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[] v2 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[v4];
        int v0 = 0;
        while (v0 < v4) {
            v2[v0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) v1.get(v0)).clone();
            v0++;
        }
        return new com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet(v2);
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public Object getValue(float p10)
    {
        Object v6_4;
        if (this.mNumKeyframes != 2) {
            if (p10 > 0) {
                if (p10 < 1065353216) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe v5_0 = this.mFirstKeyframe;
                    int v0 = 1;
                    while (v0 < this.mNumKeyframes) {
                        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe v3_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get(v0));
                        if (p10 >= v3_1.getFraction()) {
                            v5_0 = v3_1;
                            v0++;
                        } else {
                            android.view.animation.Interpolator v1_0 = v3_1.getInterpolator();
                            if (v1_0 != null) {
                                p10 = v1_0.getInterpolation(p10);
                            }
                            float v4_0 = v5_0.getFraction();
                            v6_4 = this.mEvaluator.evaluate(((p10 - v4_0) / (v3_1.getFraction() - v4_0)), v5_0.getValue(), v3_1.getValue());
                        }
                    }
                    v6_4 = this.mLastKeyframe.getValue();
                } else {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe v5_2 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get((this.mNumKeyframes - 2)));
                    android.view.animation.Interpolator v1_1 = this.mLastKeyframe.getInterpolator();
                    if (v1_1 != null) {
                        p10 = v1_1.getInterpolation(p10);
                    }
                    float v4_1 = v5_2.getFraction();
                    v6_4 = this.mEvaluator.evaluate(((p10 - v4_1) / (this.mLastKeyframe.getFraction() - v4_1)), v5_2.getValue(), this.mLastKeyframe.getValue());
                }
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe v3_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get(1));
                android.view.animation.Interpolator v1_2 = v3_3.getInterpolator();
                if (v1_2 != null) {
                    p10 = v1_2.getInterpolation(p10);
                }
                float v4_2 = this.mFirstKeyframe.getFraction();
                v6_4 = this.mEvaluator.evaluate(((p10 - v4_2) / (v3_3.getFraction() - v4_2)), this.mFirstKeyframe.getValue(), v3_3.getValue());
            }
        } else {
            if (this.mInterpolator != null) {
                p10 = this.mInterpolator.getInterpolation(p10);
            }
            v6_4 = this.mEvaluator.evaluate(p10, this.mFirstKeyframe.getValue(), this.mLastKeyframe.getValue());
        }
        return v6_4;
    }

    public void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator p1)
    {
        this.mEvaluator = p1;
        return;
    }

    public String toString()
    {
        String v1 = " ";
        int v0 = 0;
        while (v0 < this.mNumKeyframes) {
            v1 = new StringBuilder(String.valueOf(v1)).append(((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get(v0)).getValue()).append("  ").toString();
            v0++;
        }
        return v1;
    }

    public varargs FloatKeyframeSet(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[] p2)
    {
        super(p2);
        super.firstTime = 1;
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet clone()
    {
        java.util.ArrayList v1 = this.mKeyframes;
        int v4 = this.mKeyframes.size();
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[] v2 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[v4];
        int v0 = 0;
        while (v0 < v4) {
            v2[v0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) v1.get(v0)).clone());
            v0++;
        }
        return new com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet(v2);
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()
    {
        return this.clone();
    }

    public float getFloatValue(float p14)
    {
        float v9_5;
        if (this.mNumKeyframes != 2) {
            if (p14 > 0) {
                if (p14 < 1065353216) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe v7_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get(0));
                    int v0 = 1;
                    while (v0 < this.mNumKeyframes) {
                        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe v4_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get(v0));
                        if (p14 >= v4_3.getFraction()) {
                            v7_3 = v4_3;
                            v0++;
                        } else {
                            android.view.animation.Interpolator v1_1 = v4_3.getInterpolator();
                            if (v1_1 != null) {
                                p14 = v1_1.getInterpolation(p14);
                            }
                            float v2_1 = ((p14 - v7_3.getFraction()) / (v4_3.getFraction() - v7_3.getFraction()));
                            float v8_1 = v7_3.getFloatValue();
                            float v5_1 = v4_3.getFloatValue();
                            if (this.mEvaluator != null) {
                                v9_5 = ((Number) this.mEvaluator.evaluate(v2_1, Float.valueOf(v8_1), Float.valueOf(v5_1))).floatValue();
                            } else {
                                v9_5 = (((v5_1 - v8_1) * v2_1) + v8_1);
                            }
                        }
                    }
                    v9_5 = ((Number) ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get((this.mNumKeyframes - 1))).getValue()).floatValue();
                } else {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe v7_5 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get((this.mNumKeyframes - 2)));
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe v4_5 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get((this.mNumKeyframes - 1)));
                    float v8_2 = v7_5.getFloatValue();
                    float v5_2 = v4_5.getFloatValue();
                    float v6_1 = v7_5.getFraction();
                    float v3_1 = v4_5.getFraction();
                    android.view.animation.Interpolator v1_2 = v4_5.getInterpolator();
                    if (v1_2 != null) {
                        p14 = v1_2.getInterpolation(p14);
                    }
                    float v2_2 = ((p14 - v6_1) / (v3_1 - v6_1));
                    if (this.mEvaluator != null) {
                        v9_5 = ((Number) this.mEvaluator.evaluate(v2_2, Float.valueOf(v8_2), Float.valueOf(v5_2))).floatValue();
                    } else {
                        v9_5 = (((v5_2 - v8_2) * v2_2) + v8_2);
                    }
                }
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe v7_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get(0));
                com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe v4_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get(1));
                float v8_0 = v7_1.getFloatValue();
                float v5_0 = v4_1.getFloatValue();
                float v6_0 = v7_1.getFraction();
                float v3_0 = v4_1.getFraction();
                android.view.animation.Interpolator v1_0 = v4_1.getInterpolator();
                if (v1_0 != null) {
                    p14 = v1_0.getInterpolation(p14);
                }
                float v2_0 = ((p14 - v6_0) / (v3_0 - v6_0));
                if (this.mEvaluator != null) {
                    v9_5 = ((Number) this.mEvaluator.evaluate(v2_0, Float.valueOf(v8_0), Float.valueOf(v5_0))).floatValue();
                } else {
                    v9_5 = (((v5_0 - v8_0) * v2_0) + v8_0);
                }
            }
        } else {
            if (this.firstTime) {
                this.firstTime = 0;
                this.firstValue = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get(0)).getFloatValue();
                this.lastValue = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe) this.mKeyframes.get(1)).getFloatValue();
                this.deltaValue = (this.lastValue - this.firstValue);
            }
            if (this.mInterpolator != null) {
                p14 = this.mInterpolator.getInterpolation(p14);
            }
            if (this.mEvaluator != null) {
                v9_5 = ((Number) this.mEvaluator.evaluate(p14, Float.valueOf(this.firstValue), Float.valueOf(this.lastValue))).floatValue();
            } else {
                v9_5 = (this.firstValue + (this.deltaValue * p14));
            }
        }
        return v9_5;
    }

    public Object getValue(float p2)
    {
        return Float.valueOf(this.getFloatValue(p2));
    }

    public IntEvaluator()
    {
        return;
    }

    public Integer evaluate(float p4, Integer p5, Integer p6)
    {
        int v0 = p5.intValue();
        return Integer.valueOf(((int) (((float) v0) + (((float) (p6.intValue() - v0)) * p4))));
    }

    public bridge synthetic Object evaluate(float p2, Object p3, Object p4)
    {
        return this.evaluate(p2, ((Integer) p3), ((Integer) p4));
    }

    public varargs IntKeyframeSet(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[] p2)
    {
        super(p2);
        super.firstTime = 1;
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet clone()
    {
        java.util.ArrayList v1 = this.mKeyframes;
        int v4 = this.mKeyframes.size();
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[] v2 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[v4];
        int v0 = 0;
        while (v0 < v4) {
            v2[v0] = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) v1.get(v0)).clone());
            v0++;
        }
        return new com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet(v2);
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()
    {
        return this.clone();
    }

    public int getIntValue(float p14)
    {
        int v9_5;
        if (this.mNumKeyframes != 2) {
            if (p14 > 0) {
                if (p14 < 1065353216) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v7_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get(0));
                    int v0 = 1;
                    while (v0 < this.mNumKeyframes) {
                        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v4_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get(v0));
                        if (p14 >= v4_3.getFraction()) {
                            v7_3 = v4_3;
                            v0++;
                        } else {
                            android.view.animation.Interpolator v1_1 = v4_3.getInterpolator();
                            if (v1_1 != null) {
                                p14 = v1_1.getInterpolation(p14);
                            }
                            float v2_2 = ((p14 - v7_3.getFraction()) / (v4_3.getFraction() - v7_3.getFraction()));
                            int v8_1 = v7_3.getIntValue();
                            int v5_1 = v4_3.getIntValue();
                            if (this.mEvaluator != null) {
                                v9_5 = ((Number) this.mEvaluator.evaluate(v2_2, Integer.valueOf(v8_1), Integer.valueOf(v5_1))).intValue();
                            } else {
                                v9_5 = (((int) (((float) (v5_1 - v8_1)) * v2_2)) + v8_1);
                            }
                        }
                    }
                    v9_5 = ((Number) ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframes.get((this.mNumKeyframes - 1))).getValue()).intValue();
                } else {
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v7_5 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get((this.mNumKeyframes - 2)));
                    com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v4_5 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get((this.mNumKeyframes - 1)));
                    int v8_2 = v7_5.getIntValue();
                    int v5_2 = v4_5.getIntValue();
                    float v6_1 = v7_5.getFraction();
                    float v3_1 = v4_5.getFraction();
                    android.view.animation.Interpolator v1_2 = v4_5.getInterpolator();
                    if (v1_2 != null) {
                        p14 = v1_2.getInterpolation(p14);
                    }
                    float v2_0 = ((p14 - v6_1) / (v3_1 - v6_1));
                    if (this.mEvaluator != null) {
                        v9_5 = ((Number) this.mEvaluator.evaluate(v2_0, Integer.valueOf(v8_2), Integer.valueOf(v5_2))).intValue();
                    } else {
                        v9_5 = (((int) (((float) (v5_2 - v8_2)) * v2_0)) + v8_2);
                    }
                }
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v7_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get(0));
                com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v4_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get(1));
                int v8_0 = v7_1.getIntValue();
                int v5_0 = v4_1.getIntValue();
                float v6_0 = v7_1.getFraction();
                float v3_0 = v4_1.getFraction();
                android.view.animation.Interpolator v1_0 = v4_1.getInterpolator();
                if (v1_0 != null) {
                    p14 = v1_0.getInterpolation(p14);
                }
                float v2_1 = ((p14 - v6_0) / (v3_0 - v6_0));
                if (this.mEvaluator != null) {
                    v9_5 = ((Number) this.mEvaluator.evaluate(v2_1, Integer.valueOf(v8_0), Integer.valueOf(v5_0))).intValue();
                } else {
                    v9_5 = (((int) (((float) (v5_0 - v8_0)) * v2_1)) + v8_0);
                }
            }
        } else {
            if (this.firstTime) {
                this.firstTime = 0;
                this.firstValue = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get(0)).getIntValue();
                this.lastValue = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe) this.mKeyframes.get(1)).getIntValue();
                this.deltaValue = (this.lastValue - this.firstValue);
            }
            if (this.mInterpolator != null) {
                p14 = this.mInterpolator.getInterpolation(p14);
            }
            if (this.mEvaluator != null) {
                v9_5 = ((Number) this.mEvaluator.evaluate(p14, Integer.valueOf(this.firstValue), Integer.valueOf(this.lastValue))).intValue();
            } else {
                v9_5 = (this.firstValue + ((int) (((float) this.deltaValue) * p14)));
            }
        }
        return v9_5;
    }

    public Object getValue(float p2)
    {
        return Integer.valueOf(this.getIntValue(p2));
    }

    public Keyframe()
    {
        this.mInterpolator = 0;
        this.mHasValue = 0;
        return;
    }

    public static com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofFloat(float p1)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe(p1);
    }

    public static com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofFloat(float p1, float p2)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe(p1, p2);
    }

    public static com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofInt(float p1)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe(p1);
    }

    public static com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofInt(float p1, int p2)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe(p1, p2);
    }

    public static com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofObject(float p2)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe(p2, 0);
    }

    public static com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofObject(float p1, Object p2)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe(p1, p2);
    }

    public abstract com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone();

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public float getFraction()
    {
        return this.mFraction;
    }

    public android.view.animation.Interpolator getInterpolator()
    {
        return this.mInterpolator;
    }

    public Class getType()
    {
        return this.mValueType;
    }

    public abstract Object getValue();

    public boolean hasValue()
    {
        return this.mHasValue;
    }

    public void setFraction(float p1)
    {
        this.mFraction = p1;
        return;
    }

    public void setInterpolator(android.view.animation.Interpolator p1)
    {
        this.mInterpolator = p1;
        return;
    }

    public abstract void setValue();

    Keyframe$FloatKeyframe(float p2)
    {
        this.mFraction = p2;
        this.mValueType = Float.TYPE;
        return;
    }

    Keyframe$FloatKeyframe(float p2, float p3)
    {
        this.mFraction = p2;
        this.mValue = p3;
        this.mValueType = Float.TYPE;
        this.mHasValue = 1;
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe clone()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe(this.getFraction(), this.mValue);
        v0_1.setInterpolator(this.getInterpolator());
        return v0_1;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()
    {
        return this.clone();
    }

    public float getFloatValue()
    {
        return this.mValue;
    }

    public Object getValue()
    {
        return Float.valueOf(this.mValue);
    }

    public void setValue(Object p3)
    {
        if ((p3 != null) && (p3.getClass() == Float)) {
            this.mValue = ((Float) p3).floatValue();
            this.mHasValue = 1;
        }
        return;
    }

    Keyframe$IntKeyframe(float p2)
    {
        this.mFraction = p2;
        this.mValueType = Integer.TYPE;
        return;
    }

    Keyframe$IntKeyframe(float p2, int p3)
    {
        this.mFraction = p2;
        this.mValue = p3;
        this.mValueType = Integer.TYPE;
        this.mHasValue = 1;
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe clone()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe(this.getFraction(), this.mValue);
        v0_1.setInterpolator(this.getInterpolator());
        return v0_1;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()
    {
        return this.clone();
    }

    public int getIntValue()
    {
        return this.mValue;
    }

    public Object getValue()
    {
        return Integer.valueOf(this.mValue);
    }

    public void setValue(Object p3)
    {
        if ((p3 != null) && (p3.getClass() == Integer)) {
            this.mValue = ((Integer) p3).intValue();
            this.mHasValue = 1;
        }
        return;
    }

    Keyframe$ObjectKeyframe(float p2, Object p3)
    {
        Class v0_1;
        this.mFraction = p2;
        this.mValue = p3;
        if (p3 == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        Class v0_0;
        this.mHasValue = v0_1;
        if (!this.mHasValue) {
            v0_0 = Object;
        } else {
            v0_0 = p3.getClass();
        }
        this.mValueType = v0_0;
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe clone()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe(this.getFraction(), this.mValue);
        v0_1.setInterpolator(this.getInterpolator());
        return v0_1;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()
    {
        return this.clone();
    }

    public Object getValue()
    {
        return this.mValue;
    }

    public void setValue(Object p2)
    {
        int v0;
        this.mValue = p2;
        if (p2 == null) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        this.mHasValue = v0;
        return;
    }

    static ValueAnimator()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimationHandler = new ThreadLocal();
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimations = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$1();
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sPendingAnimations = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$2();
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sDelayedAnims = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$3();
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sEndingAnims = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$4();
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sReadyAnims = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$5();
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sDefaultInterpolator = new android.view.animation.AccelerateDecelerateInterpolator();
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sFrameDelay = 10;
        return;
    }

    public ValueAnimator()
    {
        this.mSeekTime = -1;
        this.mPlayingBackwards = 0;
        this.mCurrentIteration = 0;
        this.mCurrentFraction = 0;
        this.mStartedDelay = 0;
        this.mPlayingState = 0;
        this.mRunning = 0;
        this.mStarted = 0;
        this.mInitialized = 0;
        this.mDuration = 300;
        this.mStartDelay = 0;
        this.mRepeatCount = 0;
        this.mRepeatMode = 1;
        this.mInterpolator = com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sDefaultInterpolator;
        this.mUpdateListeners = 0;
        return;
    }

    static synthetic void access$10(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator p0, boolean p1)
    {
        p0.mRunning = p1;
        return;
    }

    static synthetic void access$11(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator p0)
    {
        p0.endAnimation();
        return;
    }

    static synthetic long access$12()
    {
        return com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sFrameDelay;
    }

    static synthetic ThreadLocal access$2()
    {
        return com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimations;
    }

    static synthetic ThreadLocal access$3()
    {
        return com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sDelayedAnims;
    }

    static synthetic ThreadLocal access$4()
    {
        return com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sPendingAnimations;
    }

    static synthetic long access$5(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator p2)
    {
        return p2.mStartDelay;
    }

    static synthetic void access$6(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator p0)
    {
        p0.startAnimation();
        return;
    }

    static synthetic ThreadLocal access$7()
    {
        return com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sReadyAnims;
    }

    static synthetic ThreadLocal access$8()
    {
        return com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sEndingAnims;
    }

    static synthetic boolean access$9(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator p1, long p2)
    {
        return p1.delayedAnimationFrame(p2);
    }

    public static void clearAllAnimations()
    {
        ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimations.get()).clear();
        ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sPendingAnimations.get()).clear();
        ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sDelayedAnims.get()).clear();
        return;
    }

    private boolean delayedAnimationFrame(long p6)
    {
        int v2 = 1;
        if (this.mStartedDelay) {
            long v0 = (p6 - this.mDelayStartTime);
            if (v0 <= this.mStartDelay) {
                v2 = 0;
            } else {
                this.mStartTime = (p6 - (v0 - this.mStartDelay));
                this.mPlayingState = 1;
            }
        } else {
            this.mStartedDelay = 1;
            this.mDelayStartTime = p6;
        }
        return v2;
    }

    private void endAnimation()
    {
        ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimations.get()).remove(this);
        ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sPendingAnimations.get()).remove(this);
        ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sDelayedAnims.get()).remove(this);
        this.mPlayingState = 0;
        if ((this.mRunning) && (this.mListeners != null)) {
            java.util.ArrayList v2_1 = ((java.util.ArrayList) this.mListeners.clone());
            int v1 = v2_1.size();
            int v0 = 0;
            while (v0 < v1) {
                ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v2_1.get(v0)).onAnimationEnd(this);
                v0++;
            }
        }
        this.mRunning = 0;
        this.mStarted = 0;
        return;
    }

    public static int getCurrentAnimationsCount()
    {
        return ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimations.get()).size();
    }

    public static long getFrameDelay()
    {
        return com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sFrameDelay;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofFloat(float[] p1)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator();
        v0_1.setFloatValues(p1);
        return v0_1;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofInt(int[] p1)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator();
        v0_1.setIntValues(p1);
        return v0_1;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofObject(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator p1, Object[] p2)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator();
        v0_1.setObjectValues(p2);
        v0_1.setEvaluator(p1);
        return v0_1;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofPropertyValuesHolder(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] p1)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator();
        v0_1.setValues(p1);
        return v0_1;
    }

    public static void setFrameDelay(long p0)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sFrameDelay = p0;
        return;
    }

    private void start(boolean p11)
    {
        if (android.os.Looper.myLooper() != null) {
            this.mPlayingBackwards = p11;
            this.mCurrentIteration = 0;
            this.mPlayingState = 0;
            this.mStarted = 1;
            this.mStartedDelay = 0;
            ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sPendingAnimations.get()).add(this);
            if (this.mStartDelay == 0) {
                this.setCurrentPlayTime(this.getCurrentPlayTime());
                this.mPlayingState = 0;
                this.mRunning = 1;
                if (this.mListeners != null) {
                    java.util.ArrayList v3_1 = ((java.util.ArrayList) this.mListeners.clone());
                    int v2 = v3_1.size();
                    int v1 = 0;
                    while (v1 < v2) {
                        ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v3_1.get(v1)).onAnimationStart(this);
                        v1++;
                    }
                }
            }
            com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimationHandler.get());
            if (v0_1 == null) {
                v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler(0);
                com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimationHandler.set(v0_1);
            }
            v0_1.sendEmptyMessage(0);
            return;
        } else {
            throw new android.util.AndroidRuntimeException("Animators may only be run on Looper threads");
        }
    }

    private void startAnimation()
    {
        this.initAnimation();
        ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimations.get()).add(this);
        if ((this.mStartDelay > 0) && (this.mListeners != null)) {
            java.util.ArrayList v2_1 = ((java.util.ArrayList) this.mListeners.clone());
            int v1 = v2_1.size();
            int v0 = 0;
            while (v0 < v1) {
                ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v2_1.get(v0)).onAnimationStart(this);
                v0++;
            }
        }
        return;
    }

    public void addUpdateListener(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener p2)
    {
        if (this.mUpdateListeners == null) {
            this.mUpdateListeners = new java.util.ArrayList();
        }
        this.mUpdateListeners.add(p2);
        return;
    }

    void animateValue(float p5)
    {
        float v5_1 = this.mInterpolator.getInterpolation(p5);
        this.mCurrentFraction = v5_1;
        int v2 = this.mValues.length;
        int v0_0 = 0;
        while (v0_0 < v2) {
            this.mValues[v0_0].calculateValue(v5_1);
            v0_0++;
        }
        if (this.mUpdateListeners != null) {
            int v1 = this.mUpdateListeners.size();
            int v0_1 = 0;
            while (v0_1 < v1) {
                ((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener) this.mUpdateListeners.get(v0_1)).onAnimationUpdate(this);
                v0_1++;
            }
        }
        return;
    }

    boolean animationFrame(long p12)
    {
        int v0 = 0;
        if (this.mPlayingState == 0) {
            this.mPlayingState = 1;
            if (this.mSeekTime >= 0) {
                this.mStartTime = (p12 - this.mSeekTime);
                this.mSeekTime = -1;
            } else {
                this.mStartTime = p12;
            }
        }
        switch (this.mPlayingState) {
            case 1:
            case 2:
                float v1;
                if (this.mDuration <= 0) {
                    v1 = 1065353216;
                } else {
                    v1 = (((float) (p12 - this.mStartTime)) / ((float) this.mDuration));
                }
                if (v1 >= 1065353216) {
                    if ((this.mCurrentIteration >= this.mRepeatCount) && (this.mRepeatCount != -1)) {
                        v0 = 1;
                        v1 = Math.min(v1, 1065353216);
                    } else {
                        if (this.mListeners != null) {
                            int v3 = this.mListeners.size();
                            int v2 = 0;
                            while (v2 < v3) {
                                ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) this.mListeners.get(v2)).onAnimationRepeat(this);
                                v2++;
                            }
                        }
                        if (this.mRepeatMode == 2) {
                            int v4_14;
                            if (!this.mPlayingBackwards) {
                                v4_14 = 1;
                            } else {
                                v4_14 = 0;
                            }
                            this.mPlayingBackwards = v4_14;
                        }
                        this.mCurrentIteration = (this.mCurrentIteration + ((int) v1));
                        v1 %= 1065353216;
                        this.mStartTime = (this.mStartTime + this.mDuration);
                    }
                }
                if (this.mPlayingBackwards) {
                    v1 = (1065353216 - v1);
                }
                this.animateValue(v1);
                break;
        }
        return v0;
    }

    public void cancel()
    {
        if ((this.mPlayingState != 0) || ((((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sPendingAnimations.get()).contains(this)) || (((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sDelayedAnims.get()).contains(this)))) {
            if ((this.mRunning) && (this.mListeners != null)) {
                java.util.Iterator v2_8 = ((java.util.ArrayList) this.mListeners.clone()).iterator();
                while (v2_8.hasNext()) {
                    ((com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener) v2_8.next()).onAnimationCancel(this);
                }
            }
            this.endAnimation();
        }
        return;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()
    {
        return this.clone();
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator) super.clone());
        if (this.mUpdateListeners != null) {
            java.util.ArrayList v5 = this.mUpdateListeners;
            v0_1.mUpdateListeners = new java.util.ArrayList();
            int v3 = v5.size();
            int v1_0 = 0;
            while (v1_0 < v3) {
                v0_1.mUpdateListeners.add(((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener) v5.get(v1_0)));
                v1_0++;
            }
        }
        v0_1.mSeekTime = -1;
        v0_1.mPlayingBackwards = 0;
        v0_1.mCurrentIteration = 0;
        v0_1.mInitialized = 0;
        v0_1.mPlayingState = 0;
        v0_1.mStartedDelay = 0;
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] v6 = this.mValues;
        if (v6 != null) {
            int v4 = v6.length;
            java.util.HashMap v7_3 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[v4];
            v0_1.mValues = v7_3;
            v0_1.mValuesMap = new java.util.HashMap(v4);
            int v1_1 = 0;
            while (v1_1 < v4) {
                com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder v2 = v6[v1_1].clone();
                v0_1.mValues[v1_1] = v2;
                v0_1.mValuesMap.put(v2.getPropertyName(), v2);
                v1_1++;
            }
        }
        return v0_1;
    }

    public void end()
    {
        if ((((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sAnimations.get()).contains(this)) || (((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.sPendingAnimations.get()).contains(this))) {
            if (!this.mInitialized) {
                this.initAnimation();
            }
        } else {
            this.mStartedDelay = 0;
            this.startAnimation();
        }
        if ((this.mRepeatCount <= 0) || ((this.mRepeatCount & 1) != 1)) {
            this.animateValue(1065353216);
        } else {
            this.animateValue(0);
        }
        this.endAnimation();
        return;
    }

    public float getAnimatedFraction()
    {
        return this.mCurrentFraction;
    }

    public Object getAnimatedValue()
    {
        if ((this.mValues == null) || (this.mValues.length <= 0)) {
            Object v0_1 = 0;
        } else {
            v0_1 = this.mValues[0].getAnimatedValue();
        }
        return v0_1;
    }

    public Object getAnimatedValue(String p3)
    {
        int v1_1;
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder) this.mValuesMap.get(p3));
        if (v0_1 == null) {
            v1_1 = 0;
        } else {
            v1_1 = v0_1.getAnimatedValue();
        }
        return v1_1;
    }

    public long getCurrentPlayTime()
    {
        if ((this.mInitialized) && (this.mPlayingState != 0)) {
            long v0_3 = (android.view.animation.AnimationUtils.currentAnimationTimeMillis() - this.mStartTime);
        } else {
            v0_3 = 0;
        }
        return v0_3;
    }

    public long getDuration()
    {
        return this.mDuration;
    }

    public android.view.animation.Interpolator getInterpolator()
    {
        return this.mInterpolator;
    }

    public int getRepeatCount()
    {
        return this.mRepeatCount;
    }

    public int getRepeatMode()
    {
        return this.mRepeatMode;
    }

    public long getStartDelay()
    {
        return this.mStartDelay;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] getValues()
    {
        return this.mValues;
    }

    void initAnimation()
    {
        if (!this.mInitialized) {
            int v1 = this.mValues.length;
            int v0 = 0;
            while (v0 < v1) {
                this.mValues[v0].init();
                v0++;
            }
            this.mInitialized = 1;
        }
        return;
    }

    public boolean isRunning()
    {
        int v0 = 1;
        if ((this.mPlayingState != 1) && (!this.mRunning)) {
            v0 = 0;
        }
        return v0;
    }

    public boolean isStarted()
    {
        return this.mStarted;
    }

    public void removeAllUpdateListeners()
    {
        if (this.mUpdateListeners != null) {
            this.mUpdateListeners.clear();
            this.mUpdateListeners = 0;
        }
        return;
    }

    public void removeUpdateListener(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener p2)
    {
        if (this.mUpdateListeners != null) {
            this.mUpdateListeners.remove(p2);
            if (this.mUpdateListeners.size() == 0) {
                this.mUpdateListeners = 0;
            }
        }
        return;
    }

    public void reverse()
    {
        long v6_4;
        if (!this.mPlayingBackwards) {
            v6_4 = 1;
        } else {
            v6_4 = 0;
        }
        this.mPlayingBackwards = v6_4;
        if (this.mPlayingState != 1) {
            this.start(1);
        } else {
            long v2 = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
            this.mStartTime = (v2 - (this.mDuration - (v2 - this.mStartTime)));
        }
        return;
    }

    public void setCurrentPlayTime(long p5)
    {
        this.initAnimation();
        long v0 = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
        if (this.mPlayingState != 1) {
            this.mSeekTime = p5;
            this.mPlayingState = 2;
        }
        this.mStartTime = (v0 - p5);
        this.animationFrame(v0);
        return;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.Animator setDuration(long p2)
    {
        return this.setDuration(p2);
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator setDuration(long p4)
    {
        if (p4 >= 0) {
            this.mDuration = p4;
            return this;
        } else {
            throw new IllegalArgumentException(new StringBuilder("Animators cannot have negative duration: ").append(p4).toString());
        }
    }

    public void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator p3)
    {
        if ((p3 != null) && ((this.mValues != null) && (this.mValues.length > 0))) {
            this.mValues[0].setEvaluator(p3);
        }
        return;
    }

    public varargs void setFloatValues(float[] p5)
    {
        if ((p5 != null) && (p5.length != 0)) {
            if ((this.mValues != null) && (this.mValues.length != 0)) {
                this.mValues[0].setFloatValues(p5);
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[1];
                v1_1[0] = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofFloat("", p5);
                this.setValues(v1_1);
            }
            this.mInitialized = 0;
        }
        return;
    }

    public varargs void setIntValues(int[] p5)
    {
        if ((p5 != null) && (p5.length != 0)) {
            if ((this.mValues != null) && (this.mValues.length != 0)) {
                this.mValues[0].setIntValues(p5);
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[1];
                v1_1[0] = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofInt("", p5);
                this.setValues(v1_1);
            }
            this.mInitialized = 0;
        }
        return;
    }

    public void setInterpolator(android.view.animation.Interpolator p2)
    {
        if (p2 == null) {
            this.mInterpolator = new android.view.animation.LinearInterpolator();
        } else {
            this.mInterpolator = p2;
        }
        return;
    }

    public varargs void setObjectValues(Object[] p6)
    {
        if ((p6 != null) && (p6.length != 0)) {
            if ((this.mValues != null) && (this.mValues.length != 0)) {
                this.mValues[0].setObjectValues(p6);
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[1];
                v1_1[0] = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofObject("", 0, p6);
                this.setValues(v1_1);
            }
            this.mInitialized = 0;
        }
        return;
    }

    public void setRepeatCount(int p1)
    {
        this.mRepeatCount = p1;
        return;
    }

    public void setRepeatMode(int p1)
    {
        this.mRepeatMode = p1;
        return;
    }

    public void setStartDelay(long p1)
    {
        this.mStartDelay = p1;
        return;
    }

    public varargs void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] p6)
    {
        int v1 = p6.length;
        this.mValues = p6;
        this.mValuesMap = new java.util.HashMap(v1);
        int v0 = 0;
        while (v0 < v1) {
            com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder v2 = p6[v0];
            this.mValuesMap.put(v2.getPropertyName(), v2);
            v0++;
        }
        this.mInitialized = 0;
        return;
    }

    public void start()
    {
        this.start(0);
        return;
    }

    public String toString()
    {
        String v1 = new StringBuilder("ValueAnimator@").append(Integer.toHexString(this.hashCode())).toString();
        if (this.mValues != null) {
            int v0 = 0;
            while (v0 < this.mValues.length) {
                v1 = new StringBuilder(String.valueOf(v1)).append("\n    ").append(this.mValues[v0].toString()).toString();
                v0++;
            }
        }
        return v1;
    }

    public ObjectAnimator()
    {
        return;
    }

    private ObjectAnimator(Object p1, String p2)
    {
        this.mTarget = p1;
        this.setPropertyName(p2);
        return;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(Object p1, String p2, float[] p3)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator(p1, p2);
        v0_1.setFloatValues(p3);
        return v0_1;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofInt(Object p1, String p2, int[] p3)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator(p1, p2);
        v0_1.setIntValues(p3);
        return v0_1;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofObject(Object p1, String p2, com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator p3, Object[] p4)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator(p1, p2);
        v0_1.setObjectValues(p4);
        v0_1.setEvaluator(p3);
        return v0_1;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofPropertyValuesHolder(Object p1, com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] p2)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator();
        v0_1.mTarget = p1;
        v0_1.setValues(p2);
        return v0_1;
    }

    void animateValue(float p5)
    {
        super.animateValue(p5);
        int v1 = this.mValues.length;
        int v0 = 0;
        while (v0 < v1) {
            this.mValues[v0].setAnimatedValue(this.mTarget);
            v0++;
        }
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator clone()
    {
        return ((com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator) super.clone());
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()
    {
        return this.clone();
    }

    public String getPropertyName()
    {
        return this.mPropertyName;
    }

    public Object getTarget()
    {
        return this.mTarget;
    }

    void initAnimation()
    {
        if (!this.mInitialized) {
            int v1 = this.mValues.length;
            int v0 = 0;
            while (v0 < v1) {
                this.mValues[v0].setupSetterAndGetter(this.mTarget);
                v0++;
            }
            super.initAnimation();
        }
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long p1)
    {
        super.setDuration(p1);
        return this;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator setDuration(long p2)
    {
        return this.setDuration(p2);
    }

    public varargs void setFloatValues(float[] p4)
    {
        if ((this.mValues != null) && (this.mValues.length != 0)) {
            super.setFloatValues(p4);
        } else {
            com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] v0_4 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[1];
            v0_4[0] = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofFloat(this.mPropertyName, p4);
            this.setValues(v0_4);
        }
        return;
    }

    public varargs void setIntValues(int[] p4)
    {
        if ((this.mValues != null) && (this.mValues.length != 0)) {
            super.setIntValues(p4);
        } else {
            com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] v0_4 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[1];
            v0_4[0] = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofInt(this.mPropertyName, p4);
            this.setValues(v0_4);
        }
        return;
    }

    public varargs void setObjectValues(Object[] p5)
    {
        if ((this.mValues != null) && (this.mValues.length != 0)) {
            super.setObjectValues(p5);
        } else {
            com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[] v0_4 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[1];
            v0_4[0] = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofObject(this.mPropertyName, 0, p5);
            this.setValues(v0_4);
        }
        return;
    }

    public void setPropertyName(String p5)
    {
        if (this.mValues != null) {
            com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder v1 = this.mValues[0];
            String v0 = v1.getPropertyName();
            v1.setPropertyName(p5);
            this.mValuesMap.remove(v0);
            this.mValuesMap.put(p5, v1);
        }
        this.mPropertyName = p5;
        this.mInitialized = 0;
        return;
    }

    public void setTarget(Object p4)
    {
        if (this.mTarget != p4) {
            Object v0 = this.mTarget;
            this.mTarget = p4;
            if ((v0 == null) || ((p4 == null) || (v0.getClass() != p4.getClass()))) {
                this.mInitialized = 0;
            }
        }
        return;
    }

    public void setupEndValues()
    {
        this.initAnimation();
        int v1 = this.mValues.length;
        int v0 = 0;
        while (v0 < v1) {
            this.mValues[v0].setupEndValue(this.mTarget);
            v0++;
        }
        return;
    }

    public void setupStartValues()
    {
        this.initAnimation();
        int v1 = this.mValues.length;
        int v0 = 0;
        while (v0 < v1) {
            this.mValues[v0].setupStartValue(this.mTarget);
            v0++;
        }
        return;
    }

    public void start()
    {
        super.start();
        return;
    }

    public String toString()
    {
        String v1 = new StringBuilder("ObjectAnimator@").append(Integer.toHexString(this.hashCode())).append(", target ").append(this.mTarget).toString();
        if (this.mValues != null) {
            int v0 = 0;
            while (v0 < this.mValues.length) {
                v1 = new StringBuilder(String.valueOf(v1)).append("\n    ").append(this.mValues[v0].toString()).toString();
                v0++;
            }
        }
        return v1;
    }

    static PropertyValuesHolder()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sIntEvaluator = new com.actionbarsherlock.internal.nineoldandroids.animation.IntEvaluator();
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sFloatEvaluator = new com.actionbarsherlock.internal.nineoldandroids.animation.FloatEvaluator();
        java.util.HashMap v0_1 = new Class[6];
        v0_1[0] = Float.TYPE;
        v0_1[1] = Float;
        v0_1[2] = Double.TYPE;
        v0_1[3] = Integer.TYPE;
        v0_1[4] = Double;
        v0_1[5] = Integer;
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.FLOAT_VARIANTS = v0_1;
        java.util.HashMap v0_3 = new Class[6];
        v0_3[0] = Integer.TYPE;
        v0_3[1] = Integer;
        v0_3[2] = Float.TYPE;
        v0_3[3] = Double.TYPE;
        v0_3[4] = Float;
        v0_3[5] = Double;
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.INTEGER_VARIANTS = v0_3;
        java.util.HashMap v0_5 = new Class[6];
        v0_5[0] = Double.TYPE;
        v0_5[1] = Double;
        v0_5[2] = Float.TYPE;
        v0_5[3] = Integer.TYPE;
        v0_5[4] = Float;
        v0_5[5] = Integer;
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.DOUBLE_VARIANTS = v0_5;
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sSetterPropertyMap = new java.util.HashMap();
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sGetterPropertyMap = new java.util.HashMap();
        return;
    }

    private PropertyValuesHolder(String p2)
    {
        this.mSetter = 0;
        this.mGetter = 0;
        this.mKeyframeSet = 0;
        this.mPropertyMapLock = new java.util.concurrent.locks.ReentrantReadWriteLock();
        Object[] v0_4 = new Object[1];
        this.mTmpValueArray = v0_4;
        this.mPropertyName = p2;
        return;
    }

    synthetic PropertyValuesHolder(String p1, com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder p2)
    {
        this(p1);
        return;
    }

    static String getMethodName(String p4, String p5)
    {
        if ((p5 != null) && (p5.length() != 0)) {
            p4 = new StringBuilder(String.valueOf(p4)).append(Character.toUpperCase(p5.charAt(0))).append(p5.substring(1)).toString();
        }
        return p4;
    }

    private reflect.Method getPropertyFunction(Class p12, String p13, Class p14)
    {
        reflect.Method v4;
        reflect.Method v3 = 0;
        String v2 = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.getMethodName(p13, this.mPropertyName);
        if (p14 != null) {
            Class[] v6;
            Class[] v0_1 = new Class[1];
            if (!this.mValueType.equals(Float)) {
                if (!this.mValueType.equals(Integer)) {
                    if (!this.mValueType.equals(Double)) {
                        v6 = new Class[1];
                        v6[0] = this.mValueType;
                    } else {
                        v6 = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.DOUBLE_VARIANTS;
                    }
                } else {
                    v6 = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.INTEGER_VARIANTS;
                }
            } else {
                v6 = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.FLOAT_VARIANTS;
            }
            Class v9_3 = v6.length;
            int v7_7 = 0;
            while (v7_7 < v9_3) {
                Class v5 = v6[v7_7];
                v0_1[0] = v5;
                try {
                    v3 = p12.getMethod(v2, v0_1);
                    this.mValueType = v5;
                    v4 = v3;
                } catch (NoSuchMethodException v10) {
                    v7_7++;
                }
            }
            android.util.Log.e("PropertyValuesHolder", new StringBuilder("Couldn\'t find ").append(p13).append("ter property ").append(this.mPropertyName).append(" for ").append(p12.getSimpleName()).append(" with value type ").append(this.mValueType).toString());
            v4 = v3;
        } else {
            try {
                v3 = p12.getMethod(v2, 0);
            } catch (NoSuchMethodException v1) {
                android.util.Log.e("PropertyValuesHolder", new StringBuilder(String.valueOf(p12.getSimpleName())).append(" - ").append("Couldn\'t find no-arg method for property ").append(this.mPropertyName).append(": ").append(v1).toString());
            }
        }
        return v4;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofFloat(String p1, float[] p2)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder(p1, p2);
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofInt(String p1, int[] p2)
    {
        return new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder(p1, p2);
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(String p3, com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[] p4)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder v1_1;
        com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet v0_0 = com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet.ofKeyframe(p4);
        if (!(v0_0 instanceof com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet)) {
            if (!(v0_0 instanceof com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet)) {
                v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder(p3);
                v1_1.mKeyframeSet = v0_0;
                v1_1.mValueType = p4[0].getType();
            } else {
                v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder(p3, ((com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet) v0_0));
            }
        } else {
            v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder(p3, ((com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet) v0_0));
        }
        return v1_1;
    }

    public static varargs com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofObject(String p1, com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator p2, Object[] p3)
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder v0_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder(p1);
        v0_1.setObjectValues(p3);
        v0_1.setEvaluator(p2);
        return v0_1;
    }

    private void setupGetter(Class p4)
    {
        this.mGetter = this.setupSetterOrGetter(p4, com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sGetterPropertyMap, "get", 0);
        return;
    }

    private reflect.Method setupSetterOrGetter(Class p6, java.util.HashMap p7, String p8, Class p9)
    {
        reflect.Method v2 = 0;
        try {
            this.mPropertyMapLock.writeLock().lock();
            java.util.HashMap v1_1 = ((java.util.HashMap) p7.get(p6));
        } catch (String v3_3) {
            this.mPropertyMapLock.writeLock().unlock();
            throw v3_3;
        }
        if (v1_1 != null) {
            v2 = ((reflect.Method) v1_1.get(this.mPropertyName));
        }
        if (v2 == null) {
            v2 = this.getPropertyFunction(p6, p8, p9);
            if (v1_1 == null) {
                v1_1 = new java.util.HashMap();
                p7.put(p6, v1_1);
            }
            v1_1.put(this.mPropertyName, v2);
        }
        this.mPropertyMapLock.writeLock().unlock();
        return v2;
    }

    private void setupValue(Object p5, com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe p6)
    {
        try {
            if (this.mGetter != null) {
                Object[] v3_3 = new Object[0];
                p6.setValue(this.mGetter.invoke(p5, v3_3));
            } else {
                this.setupGetter(p5.getClass());
            }
        } catch (IllegalAccessException v0_1) {
            android.util.Log.e("PropertyValuesHolder", v0_1.toString());
        } catch (IllegalAccessException v0_0) {
            android.util.Log.e("PropertyValuesHolder", v0_0.toString());
        }
        return;
    }

    void calculateValue(float p2)
    {
        this.mAnimatedValue = this.mKeyframeSet.getValue(p2);
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()
    {
        try {
            int v1_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder) super.clone());
            v1_1.mPropertyName = this.mPropertyName;
            v1_1.mKeyframeSet = this.mKeyframeSet.clone();
            v1_1.mEvaluator = this.mEvaluator;
        } catch (CloneNotSupportedException v0) {
            v1_1 = 0;
        }
        return v1_1;
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    Object getAnimatedValue()
    {
        return this.mAnimatedValue;
    }

    public String getPropertyName()
    {
        return this.mPropertyName;
    }

    void init()
    {
        if (this.mEvaluator == null) {
            int v0_1;
            if (this.mValueType != Integer) {
                if (this.mValueType != Float) {
                    v0_1 = 0;
                } else {
                    v0_1 = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sFloatEvaluator;
                }
            } else {
                v0_1 = com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sIntEvaluator;
            }
            this.mEvaluator = v0_1;
        }
        if (this.mEvaluator != null) {
            this.mKeyframeSet.setEvaluator(this.mEvaluator);
        }
        return;
    }

    void setAnimatedValue(Object p5)
    {
        if (this.mSetter != null) {
            try {
                this.mTmpValueArray[0] = this.getAnimatedValue();
                this.mSetter.invoke(p5, this.mTmpValueArray);
            } catch (IllegalAccessException v0_1) {
                android.util.Log.e("PropertyValuesHolder", v0_1.toString());
            } catch (IllegalAccessException v0_0) {
                android.util.Log.e("PropertyValuesHolder", v0_0.toString());
            }
        }
        return;
    }

    public void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator p2)
    {
        this.mEvaluator = p2;
        this.mKeyframeSet.setEvaluator(p2);
        return;
    }

    public varargs void setFloatValues(float[] p2)
    {
        this.mValueType = Float.TYPE;
        this.mKeyframeSet = com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet.ofFloat(p2);
        return;
    }

    public varargs void setIntValues(int[] p2)
    {
        this.mValueType = Integer.TYPE;
        this.mKeyframeSet = com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet.ofInt(p2);
        return;
    }

    public varargs void setKeyframes(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[] p5)
    {
        int v2 = p5.length;
        com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[] v1 = new com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[Math.max(v2, 2)];
        this.mValueType = p5[0].getType();
        int v0 = 0;
        while (v0 < v2) {
            v1[v0] = p5[v0];
            v0++;
        }
        this.mKeyframeSet = new com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet(v1);
        return;
    }

    public varargs void setObjectValues(Object[] p2)
    {
        this.mValueType = p2[0].getClass();
        this.mKeyframeSet = com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet.ofObject(p2);
        return;
    }

    public void setPropertyName(String p1)
    {
        this.mPropertyName = p1;
        return;
    }

    void setupEndValue(Object p3)
    {
        this.setupValue(p3, ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframeSet.mKeyframes.get((this.mKeyframeSet.mKeyframes.size() - 1))));
        return;
    }

    void setupSetter(Class p4)
    {
        this.mSetter = this.setupSetterOrGetter(p4, com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.sSetterPropertyMap, "set", this.mValueType);
        return;
    }

    void setupSetterAndGetter(Object p7)
    {
        Class v2 = p7.getClass();
        if (this.mSetter == null) {
            this.setupSetter(v2);
        }
        java.util.Iterator v3_3 = this.mKeyframeSet.mKeyframes.iterator();
        while (v3_3.hasNext()) {
            com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe v1_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) v3_3.next());
            if (!v1_1.hasValue()) {
                if (this.mGetter == null) {
                    this.setupGetter(v2);
                }
                try {
                    String v5_1 = new Object[0];
                    v1_1.setValue(this.mGetter.invoke(p7, v5_1));
                } catch (IllegalAccessException v0_1) {
                    android.util.Log.e("PropertyValuesHolder", v0_1.toString());
                } catch (IllegalAccessException v0_0) {
                    android.util.Log.e("PropertyValuesHolder", v0_0.toString());
                }
            }
        }
        return;
    }

    void setupStartValue(Object p3)
    {
        this.setupValue(p3, ((com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe) this.mKeyframeSet.mKeyframes.get(0)));
        return;
    }

    public String toString()
    {
        return new StringBuilder(String.valueOf(this.mPropertyName)).append(": ").append(this.mKeyframeSet.toString()).toString();
    }

    public PropertyValuesHolder$FloatPropertyValuesHolder(String p2, com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet p3)
    {
        super(p2, 0);
        super.mValueType = Float.TYPE;
        super.mKeyframeSet = p3;
        super.mFloatKeyframeSet = ((com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet) super.mKeyframeSet);
        return;
    }

    public varargs PropertyValuesHolder$FloatPropertyValuesHolder(String p2, float[] p3)
    {
        super(p2, 0);
        super.setFloatValues(p3);
        return;
    }

    void calculateValue(float p2)
    {
        this.mFloatAnimatedValue = this.mFloatKeyframeSet.getFloatValue(p2);
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder clone()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder) super.clone());
        v0_1.mFloatKeyframeSet = ((com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet) v0_1.mKeyframeSet);
        return v0_1;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()
    {
        return this.clone();
    }

    Object getAnimatedValue()
    {
        return Float.valueOf(this.mFloatAnimatedValue);
    }

    void setAnimatedValue(Object p5)
    {
        if (this.mSetter != null) {
            try {
                this.mTmpValueArray[0] = Float.valueOf(this.mFloatAnimatedValue);
                this.mSetter.invoke(p5, this.mTmpValueArray);
            } catch (IllegalAccessException v0_1) {
                android.util.Log.e("PropertyValuesHolder", v0_1.toString());
            } catch (IllegalAccessException v0_0) {
                android.util.Log.e("PropertyValuesHolder", v0_0.toString());
            }
        }
        return;
    }

    public varargs void setFloatValues(float[] p2)
    {
        super.setFloatValues(p2);
        this.mFloatKeyframeSet = ((com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet) this.mKeyframeSet);
        return;
    }

    void setupSetter(Class p1)
    {
        super.setupSetter(p1);
        return;
    }

    public PropertyValuesHolder$IntPropertyValuesHolder(String p2, com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet p3)
    {
        super(p2, 0);
        super.mValueType = Integer.TYPE;
        super.mKeyframeSet = p3;
        super.mIntKeyframeSet = ((com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet) super.mKeyframeSet);
        return;
    }

    public varargs PropertyValuesHolder$IntPropertyValuesHolder(String p2, int[] p3)
    {
        super(p2, 0);
        super.setIntValues(p3);
        return;
    }

    void calculateValue(float p2)
    {
        this.mIntAnimatedValue = this.mIntKeyframeSet.getIntValue(p2);
        return;
    }

    public com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder clone()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder) super.clone());
        v0_1.mIntKeyframeSet = ((com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet) v0_1.mKeyframeSet);
        return v0_1;
    }

    public bridge synthetic com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()
    {
        return this.clone();
    }

    Object getAnimatedValue()
    {
        return Integer.valueOf(this.mIntAnimatedValue);
    }

    void setAnimatedValue(Object p5)
    {
        if (this.mSetter != null) {
            try {
                this.mTmpValueArray[0] = Integer.valueOf(this.mIntAnimatedValue);
                this.mSetter.invoke(p5, this.mTmpValueArray);
            } catch (IllegalAccessException v0_1) {
                android.util.Log.e("PropertyValuesHolder", v0_1.toString());
            } catch (IllegalAccessException v0_0) {
                android.util.Log.e("PropertyValuesHolder", v0_0.toString());
            }
        }
        return;
    }

    public varargs void setIntValues(int[] p2)
    {
        super.setIntValues(p2);
        this.mIntKeyframeSet = ((com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet) this.mKeyframeSet);
        return;
    }

    void setupSetter(Class p1)
    {
        super.setupSetter(p1);
        return;
    }

    ValueAnimator$1()
    {
        return;
    }

    protected bridge synthetic Object initialValue()
    {
        return this.initialValue();
    }

    protected java.util.ArrayList initialValue()
    {
        return new java.util.ArrayList();
    }

    ValueAnimator$2()
    {
        return;
    }

    protected bridge synthetic Object initialValue()
    {
        return this.initialValue();
    }

    protected java.util.ArrayList initialValue()
    {
        return new java.util.ArrayList();
    }

    ValueAnimator$3()
    {
        return;
    }

    protected bridge synthetic Object initialValue()
    {
        return this.initialValue();
    }

    protected java.util.ArrayList initialValue()
    {
        return new java.util.ArrayList();
    }

    ValueAnimator$4()
    {
        return;
    }

    protected bridge synthetic Object initialValue()
    {
        return this.initialValue();
    }

    protected java.util.ArrayList initialValue()
    {
        return new java.util.ArrayList();
    }

    ValueAnimator$5()
    {
        return;
    }

    protected bridge synthetic Object initialValue()
    {
        return this.initialValue();
    }

    protected java.util.ArrayList initialValue()
    {
        return new java.util.ArrayList();
    }

    private ValueAnimator$AnimationHandler()
    {
        return;
    }

    synthetic ValueAnimator$AnimationHandler(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler p1)
    {
        return;
    }

    public void handleMessage(android.os.Message p27)
    {
        int v6 = 1;
        java.util.ArrayList v5_1 = ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$2().get());
        java.util.ArrayList v10_0 = ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$3().get());
        switch (p27.what) {
            case 0:
                java.util.ArrayList v16_1 = ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$4().get());
                if ((v5_1.size() > 0) || (v10_0.size() > 0)) {
                    v6 = 0;
                }
                while (v16_1.size() > 0) {
                    java.util.ArrayList v17_1 = ((java.util.ArrayList) v16_1.clone());
                    v16_1.clear();
                    int v7 = v17_1.size();
                    int v12_2 = 0;
                    while (v12_2 < v7) {
                        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v4_1 = ((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator) v17_1.get(v12_2));
                        if (com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$5(v4_1) != 0) {
                            v10_0.add(v4_1);
                        } else {
                            com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$6(v4_1);
                        }
                        v12_2++;
                    }
                }
                long v8 = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
                java.util.ArrayList v18_1 = ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$7().get());
                java.util.ArrayList v11_1 = ((java.util.ArrayList) com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$8().get());
                int v14 = v10_0.size();
                int v12_3 = 0;
                while (v12_3 < v14) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v4_3 = ((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator) v10_0.get(v12_3));
                    if (com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$9(v4_3, v8)) {
                        v18_1.add(v4_3);
                    }
                    v12_3++;
                }
                int v15 = v18_1.size();
                if (v15 > 0) {
                    int v12_4 = 0;
                    while (v12_4 < v15) {
                        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v4_5 = ((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator) v18_1.get(v12_4));
                        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$6(v4_5);
                        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$10(v4_5, 1);
                        v10_0.remove(v4_5);
                        v12_4++;
                    }
                    v18_1.clear();
                }
                int v13 = v5_1.size();
                int v12_0 = 0;
                while (v12_0 < v13) {
                    com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator v4_7 = ((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator) v5_1.get(v12_0));
                    if (v4_7.animationFrame(v8)) {
                        v11_1.add(v4_7);
                    }
                    if (v5_1.size() != v13) {
                        v13--;
                        v11_1.remove(v4_7);
                    } else {
                        v12_0++;
                    }
                }
                if (v11_1.size() > 0) {
                    int v12_1 = 0;
                    while (v12_1 < v11_1.size()) {
                        com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$11(((com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator) v11_1.get(v12_1)));
                        v12_1++;
                    }
                    v11_1.clear();
                }
                if ((v6 == 0) || ((v5_1.isEmpty()) && (v10_0.isEmpty()))) {
                } else {
                    this.sendEmptyMessageDelayed(1, Math.max(0, (com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.access$12() - (android.view.animation.AnimationUtils.currentAnimationTimeMillis() - v8))));
                }
                break;
        }
        return;
    }

    public abstract void onAnimationUpdate();

    public NineViewGroup(android.content.Context p2)
    {
        int v0_1;
        super(p2);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public NineViewGroup(android.content.Context p2, android.util.AttributeSet p3)
    {
        int v0_1;
        super(p2, p3);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public NineViewGroup(android.content.Context p2, android.util.AttributeSet p3, int p4)
    {
        int v0_1;
        super(p2, p3, p4);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public float getAlpha()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getAlpha();
        } else {
            v0_1 = this.mProxy.getAlpha();
        }
        return v0_1;
    }

    public float getTranslationX()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getTranslationX();
        } else {
            v0_1 = this.mProxy.getTranslationX();
        }
        return v0_1;
    }

    public float getTranslationY()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getTranslationY();
        } else {
            v0_1 = this.mProxy.getTranslationY();
        }
        return v0_1;
    }

    public void setAlpha(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setAlpha(p2);
        } else {
            this.mProxy.setAlpha(p2);
        }
        return;
    }

    public void setTranslationX(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setTranslationX(p2);
        } else {
            this.mProxy.setTranslationX(p2);
        }
        return;
    }

    public void setTranslationY(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setTranslationY(p2);
        } else {
            this.mProxy.setTranslationY(p2);
        }
        return;
    }

    public void setVisibility(int p2)
    {
        if (this.mProxy != null) {
            if (p2 != 8) {
                if (p2 == 0) {
                    this.setAnimation(this.mProxy);
                }
            } else {
                this.clearAnimation();
            }
        }
        super.setVisibility(p2);
        return;
    }

    static AnimatorProxy()
    {
        java.util.WeakHashMap v0_1;
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY = v0_1;
        com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.PROXIES = new java.util.WeakHashMap();
        return;
    }

    private AnimatorProxy(android.view.View p3)
    {
        this.mAlpha = 1065353216;
        this.mScaleX = 1065353216;
        this.mScaleY = 1065353216;
        this.mBefore = new android.graphics.RectF();
        this.mAfter = new android.graphics.RectF();
        this.mTempMatrix = new android.graphics.Matrix();
        this.setDuration(0);
        this.setFillAfter(1);
        p3.setAnimation(this);
        this.mView = new ref.WeakReference(p3);
        return;
    }

    private void computeRect(android.graphics.RectF p7, android.view.View p8)
    {
        p7.set(0, 0, ((float) p8.getWidth()), ((float) p8.getHeight()));
        android.graphics.Matrix v2 = this.mTempMatrix;
        v2.reset();
        this.transformMatrix(v2, p8);
        this.mTempMatrix.mapRect(p7);
        p7.offset(((float) p8.getLeft()), ((float) p8.getTop()));
        if (p7.right < p7.left) {
            float v0_0 = p7.right;
            p7.right = p7.left;
            p7.left = v0_0;
        }
        if (p7.bottom < p7.top) {
            float v0_1 = p7.top;
            p7.top = p7.bottom;
            p7.bottom = v0_1;
        }
        return;
    }

    private void invalidateAfterUpdate()
    {
        android.view.View v2_1 = ((android.view.View) this.mView.get());
        if (v2_1 != null) {
            android.view.View v1_1 = ((android.view.View) v2_1.getParent());
            if (v1_1 != null) {
                v2_1.setAnimation(this);
                android.graphics.RectF v0 = this.mAfter;
                this.computeRect(v0, v2_1);
                v0.union(this.mBefore);
                v1_1.invalidate(((int) android.util.FloatMath.floor(v0.left)), ((int) android.util.FloatMath.floor(v0.top)), ((int) android.util.FloatMath.ceil(v0.right)), ((int) android.util.FloatMath.ceil(v0.bottom)));
            }
        }
        return;
    }

    private void prepareForUpdate()
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            this.computeRect(this.mBefore, v0_1);
        }
        return;
    }

    private void transformMatrix(android.graphics.Matrix p10, android.view.View p11)
    {
        float v5 = ((float) p11.getWidth());
        float v2 = ((float) p11.getHeight());
        float v3 = this.mScaleX;
        float v4 = this.mScaleY;
        if ((v3 != 1065353216) || (v4 != 1065353216)) {
            float v0 = (((v3 * v5) - v5) / 1073741824);
            float v1 = (((v4 * v2) - v2) / 1073741824);
            p10.postScale(v3, v4);
            p10.postTranslate((- v0), (- v1));
        }
        p10.postTranslate(this.mTranslationX, this.mTranslationY);
        return;
    }

    public static com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View p2)
    {
        com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy v0_1 = ((com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy) com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.PROXIES.get(p2));
        if (v0_1 == null) {
            v0_1 = new com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy(p2);
            com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.PROXIES.put(p2, v0_1);
        }
        return v0_1;
    }

    protected void applyTransformation(float p3, android.view.animation.Transformation p4)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            p4.setAlpha(this.mAlpha);
            this.transformMatrix(p4.getMatrix(), v0_1);
        }
        return;
    }

    public float getAlpha()
    {
        return this.mAlpha;
    }

    public float getScaleX()
    {
        return this.mScaleX;
    }

    public float getScaleY()
    {
        return this.mScaleY;
    }

    public int getScrollX()
    {
        int v1_1;
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            v1_1 = v0_1.getScrollX();
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public int getScrollY()
    {
        int v1_1;
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            v1_1 = v0_1.getScrollY();
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public float getTranslationX()
    {
        return this.mTranslationX;
    }

    public float getTranslationY()
    {
        return this.mTranslationY;
    }

    public void reset()
    {
        return;
    }

    public void setAlpha(float p3)
    {
        if (this.mAlpha != p3) {
            this.mAlpha = p3;
            android.view.View v0_1 = ((android.view.View) this.mView.get());
            if (v0_1 != null) {
                v0_1.invalidate();
            }
        }
        return;
    }

    public void setScaleX(float p2)
    {
        if (this.mScaleX != p2) {
            this.prepareForUpdate();
            this.mScaleX = p2;
            this.invalidateAfterUpdate();
        }
        return;
    }

    public void setScaleY(float p2)
    {
        if (this.mScaleY != p2) {
            this.prepareForUpdate();
            this.mScaleY = p2;
            this.invalidateAfterUpdate();
        }
        return;
    }

    public void setScrollX(int p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            v0_1.scrollTo(p3, v0_1.getScrollY());
        }
        return;
    }

    public void setScrollY(int p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            v0_1.scrollTo(v0_1.getScrollY(), p3);
        }
        return;
    }

    public void setTranslationX(float p2)
    {
        if (this.mTranslationX != p2) {
            this.prepareForUpdate();
            this.mTranslationX = p2;
            this.invalidateAfterUpdate();
        }
        return;
    }

    public void setTranslationY(float p2)
    {
        if (this.mTranslationY != p2) {
            this.prepareForUpdate();
            this.mTranslationY = p2;
            this.invalidateAfterUpdate();
        }
        return;
    }

    public NineFrameLayout(android.content.Context p2)
    {
        int v0_1;
        super(p2);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public NineFrameLayout(android.content.Context p2, android.util.AttributeSet p3)
    {
        int v0_1;
        super(p2, p3);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public NineFrameLayout(android.content.Context p2, android.util.AttributeSet p3, int p4)
    {
        int v0_1;
        super(p2, p3, p4);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public float getAlpha()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getAlpha();
        } else {
            v0_1 = this.mProxy.getAlpha();
        }
        return v0_1;
    }

    public float getTranslationY()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getTranslationY();
        } else {
            v0_1 = this.mProxy.getTranslationY();
        }
        return v0_1;
    }

    public void setAlpha(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setAlpha(p2);
        } else {
            this.mProxy.setAlpha(p2);
        }
        return;
    }

    public void setTranslationY(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setTranslationY(p2);
        } else {
            this.mProxy.setTranslationY(p2);
        }
        return;
    }

    public void setVisibility(int p2)
    {
        if (this.mProxy != null) {
            if (p2 != 8) {
                if (p2 == 0) {
                    this.setAnimation(this.mProxy);
                }
            } else {
                this.clearAnimation();
            }
        }
        super.setVisibility(p2);
        return;
    }

    public NineHorizontalScrollView(android.content.Context p2)
    {
        int v0_1;
        super(p2);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public float getAlpha()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getAlpha();
        } else {
            v0_1 = this.mProxy.getAlpha();
        }
        return v0_1;
    }

    public void setAlpha(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setAlpha(p2);
        } else {
            this.mProxy.setAlpha(p2);
        }
        return;
    }

    public void setVisibility(int p2)
    {
        if (this.mProxy != null) {
            if (p2 != 8) {
                if (p2 == 0) {
                    this.setAnimation(this.mProxy);
                }
            } else {
                this.clearAnimation();
            }
        }
        super.setVisibility(p2);
        return;
    }

    public NineLinearLayout(android.content.Context p2)
    {
        int v0_1;
        super(p2);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public NineLinearLayout(android.content.Context p2, android.util.AttributeSet p3)
    {
        int v0_1;
        super(p2, p3);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public NineLinearLayout(android.content.Context p2, android.util.AttributeSet p3, int p4)
    {
        int v0_1;
        super(p2, p3, p4);
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(super);
        }
        super.mProxy = v0_1;
        return;
    }

    public float getAlpha()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getAlpha();
        } else {
            v0_1 = this.mProxy.getAlpha();
        }
        return v0_1;
    }

    public float getTranslationX()
    {
        float v0_1;
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            v0_1 = super.getTranslationX();
        } else {
            v0_1 = this.mProxy.getTranslationX();
        }
        return v0_1;
    }

    public void setAlpha(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setAlpha(p2);
        } else {
            this.mProxy.setAlpha(p2);
        }
        return;
    }

    public void setTranslationX(float p2)
    {
        if (!com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY) {
            super.setTranslationX(p2);
        } else {
            this.mProxy.setTranslationX(p2);
        }
        return;
    }

    public void setVisibility(int p2)
    {
        if (this.mProxy != null) {
            if (p2 != 8) {
                if (p2 == 0) {
                    this.setAnimation(this.mProxy);
                }
            } else {
                this.clearAnimation();
            }
        }
        super.setVisibility(p2);
        return;
    }

    public ActionProviderWrapper(com.actionbarsherlock.view.ActionProvider p2)
    {
        super(0);
        super.mProvider = p2;
        return;
    }

    public boolean hasSubMenu()
    {
        return this.mProvider.hasSubMenu();
    }

    public android.view.View onCreateActionView()
    {
        return this.mProvider.onCreateActionView();
    }

    public boolean onPerformDefaultAction()
    {
        return this.mProvider.onPerformDefaultAction();
    }

    public void onPrepareSubMenu(android.view.SubMenu p3)
    {
        this.mProvider.onPrepareSubMenu(new com.actionbarsherlock.internal.view.menu.SubMenuWrapper(p3));
        return;
    }

    public com.actionbarsherlock.view.ActionProvider unwrap()
    {
        return this.mProvider;
    }

    public StandaloneActionMode(android.content.Context p3, com.actionbarsherlock.internal.widget.ActionBarContextView p4, com.actionbarsherlock.view.ActionMode$Callback p5, boolean p6)
    {
        this.mContext = p3;
        this.mContextView = p4;
        this.mCallback = p5;
        this.mMenu = new com.actionbarsherlock.internal.view.menu.MenuBuilder(p3).setDefaultShowAsAction(1);
        this.mMenu.setCallback(this);
        this.mFocusable = p6;
        return;
    }

    public void finish()
    {
        if (!this.mFinished) {
            this.mFinished = 1;
            this.mContextView.sendAccessibilityEvent(32);
            this.mCallback.onDestroyActionMode(this);
        }
        return;
    }

    public android.view.View getCustomView()
    {
        int v0_1;
        if (this.mCustomView == null) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.view.View) this.mCustomView.get());
        }
        return v0_1;
    }

    public com.actionbarsherlock.view.Menu getMenu()
    {
        return this.mMenu;
    }

    public com.actionbarsherlock.view.MenuInflater getMenuInflater()
    {
        return new com.actionbarsherlock.view.MenuInflater(this.mContext);
    }

    public CharSequence getSubtitle()
    {
        return this.mContextView.getSubtitle();
    }

    public CharSequence getTitle()
    {
        return this.mContextView.getTitle();
    }

    public void invalidate()
    {
        this.mCallback.onPrepareActionMode(this, this.mMenu);
        return;
    }

    public boolean isUiFocusable()
    {
        return this.mFocusable;
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p1, boolean p2)
    {
        return;
    }

    public void onCloseSubMenu(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p1)
    {
        return;
    }

    public boolean onMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.view.MenuItem p3)
    {
        return this.mCallback.onActionItemClicked(this, p3);
    }

    public void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder p2)
    {
        this.invalidate();
        this.mContextView.showOverflowMenu();
        return;
    }

    public boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p4)
    {
        if (p4.hasVisibleItems()) {
            new com.actionbarsherlock.internal.view.menu.MenuPopupHelper(this.mContext, p4).show();
        }
        return 1;
    }

    public void setCustomView(android.view.View p2)
    {
        int v0_1;
        this.mContextView.setCustomView(p2);
        if (p2 == null) {
            v0_1 = 0;
        } else {
            v0_1 = new ref.WeakReference(p2);
        }
        this.mCustomView = v0_1;
        return;
    }

    public void setSubtitle(int p2)
    {
        this.setSubtitle(this.mContext.getString(p2));
        return;
    }

    public void setSubtitle(CharSequence p2)
    {
        this.mContextView.setSubtitle(p2);
        return;
    }

    public void setTitle(int p2)
    {
        this.setTitle(this.mContext.getString(p2));
        return;
    }

    public void setTitle(CharSequence p2)
    {
        this.mContextView.setTitle(p2);
        return;
    }

    public abstract void addOnAttachStateChangeListener();

    public abstract void removeOnAttachStateChangeListener();

    public abstract void onViewAttachedToWindow();

    public abstract void onViewDetachedFromWindow();

    public abstract com.actionbarsherlock.view.MenuItem add();

    public abstract com.actionbarsherlock.view.MenuItem add();

    public abstract com.actionbarsherlock.view.MenuItem add();

    public abstract com.actionbarsherlock.view.MenuItem add();

    public abstract int addIntentOptions();

    public abstract com.actionbarsherlock.view.SubMenu addSubMenu();

    public abstract com.actionbarsherlock.view.SubMenu addSubMenu();

    public abstract com.actionbarsherlock.view.SubMenu addSubMenu();

    public abstract com.actionbarsherlock.view.SubMenu addSubMenu();

    public abstract void clear();

    public abstract void close();

    public abstract com.actionbarsherlock.view.MenuItem findItem();

    public abstract com.actionbarsherlock.view.MenuItem getItem();

    public abstract boolean hasVisibleItems();

    public abstract boolean isShortcutKey();

    public abstract boolean performIdentifierAction();

    public abstract boolean performShortcut();

    public abstract void removeGroup();

    public abstract void removeItem();

    public abstract void setGroupCheckable();

    public abstract void setGroupEnabled();

    public abstract void setGroupVisible();

    public abstract void setQwertyMode();

    public abstract int size();

    public ActionMenu(android.content.Context p2)
    {
        this.mContext = p2;
        this.mItems = new java.util.ArrayList();
        return;
    }

    private int findItemIndex(int p5)
    {
        java.util.ArrayList v2 = this.mItems;
        int v1 = v2.size();
        int v0 = 0;
        while (v0 < v1) {
            if (((com.actionbarsherlock.internal.view.menu.ActionMenuItem) v2.get(v0)).getItemId() != p5) {
                v0++;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    private com.actionbarsherlock.internal.view.menu.ActionMenuItem findItemWithShortcut(int p7, android.view.KeyEvent p8)
    {
        boolean v4 = this.mIsQwerty;
        java.util.ArrayList v3 = this.mItems;
        int v2 = v3.size();
        int v0 = 0;
        while (v0 < v2) {
            char v5;
            com.actionbarsherlock.internal.view.menu.ActionMenuItem v1_0 = ((com.actionbarsherlock.internal.view.menu.ActionMenuItem) v3.get(v0));
            if (!v4) {
                v5 = v1_0.getNumericShortcut();
            } else {
                v5 = v1_0.getAlphabeticShortcut();
            }
            if (p7 != v5) {
                v0++;
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    public com.actionbarsherlock.view.MenuItem add(int p2)
    {
        return this.add(0, 0, 0, p2);
    }

    public com.actionbarsherlock.view.MenuItem add(int p2, int p3, int p4, int p5)
    {
        return this.add(p2, p3, p4, this.mContext.getResources().getString(p5));
    }

    public com.actionbarsherlock.view.MenuItem add(int p8, int p9, int p10, CharSequence p11)
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuItem v0_1 = new com.actionbarsherlock.internal.view.menu.ActionMenuItem(this.getContext(), p8, p9, 0, p10, p11);
        this.mItems.add(p10, v0_1);
        return v0_1;
    }

    public com.actionbarsherlock.view.MenuItem add(CharSequence p2)
    {
        return this.add(0, 0, 0, p2);
    }

    public int addIntentOptions(int p14, int p15, int p16, android.content.ComponentName p17, android.content.Intent[] p18, android.content.Intent p19, int p20, com.actionbarsherlock.view.MenuItem[] p21)
    {
        int v3;
        android.content.pm.PackageManager v7 = this.mContext.getPackageManager();
        java.util.List v6 = v7.queryIntentActivityOptions(p17, p18, p19, 0);
        if (v6 == null) {
            v3 = 0;
        } else {
            v3 = v6.size();
        }
        if ((p20 & 1) == 0) {
            this.removeGroup(p14);
        }
        int v4 = 0;
        while (v4 < v3) {
            int v10_4;
            android.content.pm.ResolveInfo v8_1 = ((android.content.pm.ResolveInfo) v6.get(v4));
            if (v8_1.specificIndex >= 0) {
                v10_4 = p18[v8_1.specificIndex];
            } else {
                v10_4 = p19;
            }
            android.content.Intent v9_1 = new android.content.Intent(v10_4);
            v9_1.setComponent(new android.content.ComponentName(v8_1.activityInfo.applicationInfo.packageName, v8_1.activityInfo.name));
            com.actionbarsherlock.view.MenuItem v5 = this.add(p14, p15, p16, v8_1.loadLabel(v7)).setIcon(v8_1.loadIcon(v7)).setIntent(v9_1);
            if ((p21 != null) && (v8_1.specificIndex >= 0)) {
                p21[v8_1.specificIndex] = v5;
            }
            v4++;
        }
        return v3;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p2)
    {
        return 0;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p2, int p3, int p4, int p5)
    {
        return 0;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p2, int p3, int p4, CharSequence p5)
    {
        return 0;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(CharSequence p2)
    {
        return 0;
    }

    public void clear()
    {
        this.mItems.clear();
        return;
    }

    public void close()
    {
        return;
    }

    public com.actionbarsherlock.view.MenuItem findItem(int p3)
    {
        return ((com.actionbarsherlock.view.MenuItem) this.mItems.get(this.findItemIndex(p3)));
    }

    public android.content.Context getContext()
    {
        return this.mContext;
    }

    public com.actionbarsherlock.view.MenuItem getItem(int p2)
    {
        return ((com.actionbarsherlock.view.MenuItem) this.mItems.get(p2));
    }

    public boolean hasVisibleItems()
    {
        java.util.ArrayList v2 = this.mItems;
        int v1 = v2.size();
        int v0 = 0;
        while (v0 < v1) {
            if (!((com.actionbarsherlock.internal.view.menu.ActionMenuItem) v2.get(v0)).isVisible()) {
                v0++;
            } else {
                int v3_0 = 1;
            }
            return v3_0;
        }
        v3_0 = 0;
        return v3_0;
    }

    public boolean isShortcutKey(int p2, android.view.KeyEvent p3)
    {
        int v0_1;
        if (this.findItemWithShortcut(p2, p3) == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean performIdentifierAction(int p3, int p4)
    {
        boolean v1_3;
        int v0 = this.findItemIndex(p3);
        if (v0 >= 0) {
            v1_3 = ((com.actionbarsherlock.internal.view.menu.ActionMenuItem) this.mItems.get(v0)).invoke();
        } else {
            v1_3 = 0;
        }
        return v1_3;
    }

    public boolean performShortcut(int p3, android.view.KeyEvent p4, int p5)
    {
        boolean v1;
        com.actionbarsherlock.internal.view.menu.ActionMenuItem v0 = this.findItemWithShortcut(p3, p4);
        if (v0 != null) {
            v1 = v0.invoke();
        } else {
            v1 = 0;
        }
        return v1;
    }

    public void removeGroup(int p5)
    {
        java.util.ArrayList v2 = this.mItems;
        int v1 = v2.size();
        int v0 = 0;
        while (v0 < v1) {
            if (((com.actionbarsherlock.internal.view.menu.ActionMenuItem) v2.get(v0)).getGroupId() != p5) {
                v0++;
            } else {
                v2.remove(v0);
                v1--;
            }
        }
        return;
    }

    public void removeItem(int p3)
    {
        this.mItems.remove(this.findItemIndex(p3));
        return;
    }

    public void setGroupCheckable(int p6, boolean p7, boolean p8)
    {
        java.util.ArrayList v3 = this.mItems;
        int v2 = v3.size();
        int v0 = 0;
        while (v0 < v2) {
            com.actionbarsherlock.internal.view.menu.ActionMenuItem v1_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuItem) v3.get(v0));
            if (v1_1.getGroupId() == p6) {
                v1_1.setCheckable(p7);
                v1_1.setExclusiveCheckable(p8);
            }
            v0++;
        }
        return;
    }

    public void setGroupEnabled(int p6, boolean p7)
    {
        java.util.ArrayList v3 = this.mItems;
        int v2 = v3.size();
        int v0 = 0;
        while (v0 < v2) {
            com.actionbarsherlock.internal.view.menu.ActionMenuItem v1_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuItem) v3.get(v0));
            if (v1_1.getGroupId() == p6) {
                v1_1.setEnabled(p7);
            }
            v0++;
        }
        return;
    }

    public void setGroupVisible(int p6, boolean p7)
    {
        java.util.ArrayList v3 = this.mItems;
        int v2 = v3.size();
        int v0 = 0;
        while (v0 < v2) {
            com.actionbarsherlock.internal.view.menu.ActionMenuItem v1_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuItem) v3.get(v0));
            if (v1_1.getGroupId() == p6) {
                v1_1.setVisible(p7);
            }
            v0++;
        }
        return;
    }

    public void setQwertyMode(boolean p1)
    {
        this.mIsQwerty = p1;
        return;
    }

    public int size()
    {
        return this.mItems.size();
    }

    public abstract boolean collapseActionView();

    public abstract boolean expandActionView();

    public abstract com.actionbarsherlock.view.ActionProvider getActionProvider();

    public abstract android.view.View getActionView();

    public abstract char getAlphabeticShortcut();

    public abstract int getGroupId();

    public abstract android.graphics.drawable.Drawable getIcon();

    public abstract android.content.Intent getIntent();

    public abstract int getItemId();

    public abstract android.view.ContextMenu$ContextMenuInfo getMenuInfo();

    public abstract char getNumericShortcut();

    public abstract int getOrder();

    public abstract com.actionbarsherlock.view.SubMenu getSubMenu();

    public abstract CharSequence getTitle();

    public abstract CharSequence getTitleCondensed();

    public abstract boolean hasSubMenu();

    public abstract boolean isActionViewExpanded();

    public abstract boolean isCheckable();

    public abstract boolean isChecked();

    public abstract boolean isEnabled();

    public abstract boolean isVisible();

    public abstract com.actionbarsherlock.view.MenuItem setActionProvider();

    public abstract com.actionbarsherlock.view.MenuItem setActionView();

    public abstract com.actionbarsherlock.view.MenuItem setActionView();

    public abstract com.actionbarsherlock.view.MenuItem setAlphabeticShortcut();

    public abstract com.actionbarsherlock.view.MenuItem setCheckable();

    public abstract com.actionbarsherlock.view.MenuItem setChecked();

    public abstract com.actionbarsherlock.view.MenuItem setEnabled();

    public abstract com.actionbarsherlock.view.MenuItem setIcon();

    public abstract com.actionbarsherlock.view.MenuItem setIcon();

    public abstract com.actionbarsherlock.view.MenuItem setIntent();

    public abstract com.actionbarsherlock.view.MenuItem setNumericShortcut();

    public abstract com.actionbarsherlock.view.MenuItem setOnActionExpandListener();

    public abstract com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener();

    public abstract com.actionbarsherlock.view.MenuItem setShortcut();

    public abstract void setShowAsAction();

    public abstract com.actionbarsherlock.view.MenuItem setShowAsActionFlags();

    public abstract com.actionbarsherlock.view.MenuItem setTitle();

    public abstract com.actionbarsherlock.view.MenuItem setTitle();

    public abstract com.actionbarsherlock.view.MenuItem setTitleCondensed();

    public abstract com.actionbarsherlock.view.MenuItem setVisible();

    public ActionMenuItem(android.content.Context p2, int p3, int p4, int p5, int p6, CharSequence p7)
    {
        this.mFlags = 16;
        this.mContext = p2;
        this.mId = p4;
        this.mGroup = p3;
        this.mOrdering = p6;
        this.mTitle = p7;
        return;
    }

    public boolean collapseActionView()
    {
        return 0;
    }

    public boolean expandActionView()
    {
        return 0;
    }

    public com.actionbarsherlock.view.ActionProvider getActionProvider()
    {
        return 0;
    }

    public android.view.View getActionView()
    {
        return 0;
    }

    public char getAlphabeticShortcut()
    {
        return this.mShortcutAlphabeticChar;
    }

    public int getGroupId()
    {
        return this.mGroup;
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        return this.mIconDrawable;
    }

    public android.content.Intent getIntent()
    {
        return this.mIntent;
    }

    public int getItemId()
    {
        return this.mId;
    }

    public android.view.ContextMenu$ContextMenuInfo getMenuInfo()
    {
        return 0;
    }

    public char getNumericShortcut()
    {
        return this.mShortcutNumericChar;
    }

    public int getOrder()
    {
        return this.mOrdering;
    }

    public com.actionbarsherlock.view.SubMenu getSubMenu()
    {
        return 0;
    }

    public CharSequence getTitle()
    {
        return this.mTitle;
    }

    public CharSequence getTitleCondensed()
    {
        return this.mTitleCondensed;
    }

    public boolean hasSubMenu()
    {
        return 0;
    }

    public boolean invoke()
    {
        int v0 = 1;
        if ((this.mClickListener == null) || (!this.mClickListener.onMenuItemClick(this))) {
            if (this.mIntent == null) {
                v0 = 0;
            } else {
                this.mContext.startActivity(this.mIntent);
            }
        }
        return v0;
    }

    public boolean isActionViewExpanded()
    {
        return 0;
    }

    public boolean isCheckable()
    {
        int v0_2;
        if ((this.mFlags & 1) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isChecked()
    {
        int v0_2;
        if ((this.mFlags & 2) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isEnabled()
    {
        int v0_2;
        if ((this.mFlags & 16) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isVisible()
    {
        int v0_2;
        if ((this.mFlags & 8) != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public com.actionbarsherlock.view.MenuItem setActionProvider(com.actionbarsherlock.view.ActionProvider p2)
    {
        throw new UnsupportedOperationException();
    }

    public com.actionbarsherlock.view.MenuItem setActionView(int p2)
    {
        throw new UnsupportedOperationException();
    }

    public com.actionbarsherlock.view.MenuItem setActionView(android.view.View p2)
    {
        throw new UnsupportedOperationException();
    }

    public com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char p1)
    {
        this.mShortcutAlphabeticChar = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setCheckable(boolean p3)
    {
        int v0_1;
        if (!p3) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.mFlags = (v0_1 | (this.mFlags & -2));
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setChecked(boolean p3)
    {
        int v0_1;
        if (!p3) {
            v0_1 = 0;
        } else {
            v0_1 = 2;
        }
        this.mFlags = (v0_1 | (this.mFlags & -3));
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setEnabled(boolean p3)
    {
        int v0_1;
        if (!p3) {
            v0_1 = 0;
        } else {
            v0_1 = 16;
        }
        this.mFlags = (v0_1 | (this.mFlags & -17));
        return this;
    }

    public com.actionbarsherlock.internal.view.menu.ActionMenuItem setExclusiveCheckable(boolean p3)
    {
        int v0_1;
        if (!p3) {
            v0_1 = 0;
        } else {
            v0_1 = 4;
        }
        this.mFlags = (v0_1 | (this.mFlags & -5));
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIcon(int p2)
    {
        this.mIconDrawable = this.mContext.getResources().getDrawable(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable p1)
    {
        this.mIconDrawable = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent p1)
    {
        this.mIntent = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setNumericShortcut(char p1)
    {
        this.mShortcutNumericChar = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setOnActionExpandListener(com.actionbarsherlock.view.MenuItem$OnActionExpandListener p1)
    {
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener p1)
    {
        this.mClickListener = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setShortcut(char p1, char p2)
    {
        this.mShortcutNumericChar = p1;
        this.mShortcutAlphabeticChar = p2;
        return this;
    }

    public void setShowAsAction(int p1)
    {
        return;
    }

    public com.actionbarsherlock.view.MenuItem setShowAsActionFlags(int p1)
    {
        this.setShowAsAction(p1);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setTitle(int p2)
    {
        this.mTitle = this.mContext.getResources().getString(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setTitle(CharSequence p1)
    {
        this.mTitle = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setTitleCondensed(CharSequence p1)
    {
        this.mTitleCondensed = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setVisible(boolean p3)
    {
        int v0_1;
        if (!p3) {
            v0_1 = 8;
        } else {
            v0_1 = 0;
        }
        this.mFlags = (v0_1 | (this.mFlags & 8));
        return this;
    }

    public abstract com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData();

    public abstract void initialize();

    public abstract boolean prefersCondensedTitle();

    public abstract void setCheckable();

    public abstract void setChecked();

    public abstract void setEnabled();

    public abstract void setIcon();

    public abstract void setShortcut();

    public abstract void setTitle();

    public abstract boolean showsIcon();

    public abstract boolean needsDividerAfter();

    public abstract boolean needsDividerBefore();

    public ActionMenuItemView(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public ActionMenuItemView(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public ActionMenuItemView(android.content.Context p4, android.util.AttributeSet p5, int p6)
    {
        super(p4, p5);
        super.mListeners = new java.util.HashSet();
        super.mAllowTextWithIcon = com.actionbarsherlock.internal.ResourcesCompat.getResources_getBoolean(p4, com.actionbarsherlock.R$bool.abs__config_allowActionMenuItemTextWithIcon);
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, com.actionbarsherlock.R$styleable.SherlockActionMenuItemView, 0, 0);
        super.mMinWidth = v0.getDimensionPixelSize(0, 0);
        v0.recycle();
        return;
    }

    private void updateTextButtonVisibility()
    {
        int v0_1;
        int v2_0 = 1;
        int v1 = 0;
        if (!android.text.TextUtils.isEmpty(this.mTextButton.getText())) {
            v0_1 = 1;
        } else {
            v0_1 = 0;
        }
        if ((this.mImageButton.getDrawable() != null) && ((!this.mItemData.showsTextAsAction()) || ((!this.mAllowTextWithIcon) && (!this.mExpandedFormat)))) {
            v2_0 = 0;
        }
        if ((v0_1 & v2_0) == 0) {
            v1 = 8;
        }
        this.mTextButton.setVisibility(v1);
        return;
    }

    public void addOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener p2)
    {
        this.mListeners.add(p2);
        return;
    }

    public boolean dispatchHoverEvent(android.view.MotionEvent p3)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 14) {
            v0_1 = 0;
        } else {
            v0_1 = this.onHoverEvent(p3);
        }
        return v0_1;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p2)
    {
        this.onPopulateAccessibilityEvent(p2);
        return 1;
    }

    public com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData()
    {
        return this.mItemData;
    }

    public boolean hasText()
    {
        int v0_2;
        if (this.mTextButton.getVisibility() == 8) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl p2, int p3)
    {
        boolean v0_1;
        this.mItemData = p2;
        this.setIcon(p2.getIcon());
        this.setTitle(p2.getTitleForItemView(this));
        this.setId(p2.getItemId());
        if (!p2.isVisible()) {
            v0_1 = 8;
        } else {
            v0_1 = 0;
        }
        this.setVisibility(v0_1);
        this.setEnabled(p2.isEnabled());
        return;
    }

    public boolean needsDividerAfter()
    {
        return this.hasText();
    }

    public boolean needsDividerBefore()
    {
        if ((!this.hasText()) || (this.mItemData.getIcon() != null)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        java.util.Iterator v1_1 = this.mListeners.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) v1_1.next()).onViewAttachedToWindow(this);
        }
        return;
    }

    public void onClick(android.view.View p3)
    {
        if (this.mItemInvoker != null) {
            this.mItemInvoker.invokeItem(this.mItemData);
        }
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        java.util.Iterator v1_1 = this.mListeners.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) v1_1.next()).onViewDetachedFromWindow(this);
        }
        return;
    }

    public void onFinishInflate()
    {
        this.mImageButton = ((android.widget.ImageButton) this.findViewById(com.actionbarsherlock.R$id.abs__imageButton));
        this.mTextButton = ((com.actionbarsherlock.internal.widget.CapitalizingButton) this.findViewById(com.actionbarsherlock.R$id.abs__textButton));
        this.mImageButton.setOnClickListener(this);
        this.mTextButton.setOnClickListener(this);
        this.mImageButton.setOnLongClickListener(this);
        this.setOnClickListener(this);
        this.setOnLongClickListener(this);
        return;
    }

    public boolean onLongClick(android.view.View p13)
    {
        int v8_0 = 0;
        if (!this.hasText()) {
            int[] v5 = new int[2];
            android.graphics.Rect v2_1 = new android.graphics.Rect();
            this.getLocationOnScreen(v5);
            this.getWindowVisibleDisplayFrame(v2_1);
            android.content.Context v1 = this.getContext();
            int v7 = this.getWidth();
            int v3 = this.getHeight();
            int v4 = (v5[1] + (v3 / 2));
            int v6 = v1.getResources().getDisplayMetrics().widthPixels;
            android.widget.Toast v0 = android.widget.Toast.makeText(v1, this.mItemData.getTitle(), 0);
            if (v4 >= v2_1.height()) {
                v0.setGravity(81, 0, v3);
            } else {
                v0.setGravity(53, ((v6 - v5[0]) - (v7 / 2)), v3);
            }
            v0.show();
            v8_0 = 1;
        }
        return v8_0;
    }

    protected void onMeasure(int p7, int p8)
    {
        int v2;
        super.onMeasure(p7, p8);
        int v3 = android.view.View$MeasureSpec.getMode(p7);
        int v1 = android.view.View$MeasureSpec.getSize(p7);
        int v0 = this.getMeasuredWidth();
        if (v3 != -2147483648) {
            v2 = this.mMinWidth;
        } else {
            v2 = Math.min(v1, this.mMinWidth);
        }
        if ((v3 != 1073741824) && ((this.mMinWidth > 0) && (v0 < v2))) {
            super.onMeasure(android.view.View$MeasureSpec.makeMeasureSpec(v2, 1073741824), p8);
        }
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p4)
    {
        if (android.os.Build$VERSION.SDK_INT >= 14) {
            super.onPopulateAccessibilityEvent(p4);
        }
        CharSequence v0 = this.getContentDescription();
        if (!android.text.TextUtils.isEmpty(v0)) {
            p4.getText().add(v0);
        }
        return;
    }

    public boolean prefersCondensedTitle()
    {
        return 1;
    }

    public void removeOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener p2)
    {
        this.mListeners.remove(p2);
        return;
    }

    public void setCheckable(boolean p1)
    {
        return;
    }

    public void setChecked(boolean p1)
    {
        return;
    }

    public void setEnabled(boolean p2)
    {
        super.setEnabled(p2);
        this.mImageButton.setEnabled(p2);
        this.mTextButton.setEnabled(p2);
        return;
    }

    public void setExpandedFormat(boolean p2)
    {
        if (this.mExpandedFormat != p2) {
            this.mExpandedFormat = p2;
            if (this.mItemData != null) {
                this.mItemData.actionFormatChanged();
            }
        }
        return;
    }

    public void setIcon(android.graphics.drawable.Drawable p3)
    {
        this.mImageButton.setImageDrawable(p3);
        if (p3 == null) {
            this.mImageButton.setVisibility(8);
        } else {
            this.mImageButton.setVisibility(0);
        }
        this.updateTextButtonVisibility();
        return;
    }

    public void setItemInvoker(com.actionbarsherlock.internal.view.menu.MenuBuilder$ItemInvoker p1)
    {
        this.mItemInvoker = p1;
        return;
    }

    public void setShortcut(boolean p1, char p2)
    {
        return;
    }

    public void setTitle(CharSequence p3)
    {
        this.mTitle = p3;
        this.mTextButton.setTextCompat(this.mTitle);
        this.setContentDescription(this.mTitle);
        this.updateTextButtonVisibility();
        return;
    }

    public boolean showsIcon()
    {
        return 1;
    }

    public abstract boolean collapseItemActionView();

    public abstract boolean expandItemActionView();

    public abstract boolean flagActionItems();

    public abstract int getId();

    public abstract com.actionbarsherlock.internal.view.menu.MenuView getMenuView();

    public abstract void initForMenu();

    public abstract void onCloseMenu();

    public abstract void onRestoreInstanceState();

    public abstract android.os.Parcelable onSaveInstanceState();

    public abstract boolean onSubMenuSelected();

    public abstract void setCallback();

    public abstract void updateMenuView();

    static MenuPopupHelper()
    {
        com.actionbarsherlock.internal.view.menu.MenuPopupHelper.ITEM_LAYOUT = com.actionbarsherlock.R$layout.abs__popup_menu_item_layout;
        return;
    }

    public MenuPopupHelper(android.content.Context p3, com.actionbarsherlock.internal.view.menu.MenuBuilder p4)
    {
        this(p3, p4, 0, 0);
        return;
    }

    public MenuPopupHelper(android.content.Context p2, com.actionbarsherlock.internal.view.menu.MenuBuilder p3, android.view.View p4)
    {
        this(p2, p3, p4, 0);
        return;
    }

    public MenuPopupHelper(android.content.Context p4, com.actionbarsherlock.internal.view.menu.MenuBuilder p5, android.view.View p6, boolean p7)
    {
        this.mContext = p4;
        this.mInflater = android.view.LayoutInflater.from(p4);
        this.mMenu = p5;
        this.mOverflowOnly = p7;
        android.content.res.Resources v0 = p4.getResources();
        this.mPopupMaxWidth = Math.max((v0.getDisplayMetrics().widthPixels / 2), v0.getDimensionPixelSize(com.actionbarsherlock.R$dimen.abs__config_prefDialogWidth));
        this.mAnchorView = p6;
        p5.addMenuPresenter(this);
        return;
    }

    static synthetic boolean access$0(com.actionbarsherlock.internal.view.menu.MenuPopupHelper p1)
    {
        return p1.mOverflowOnly;
    }

    static synthetic android.view.LayoutInflater access$1(com.actionbarsherlock.internal.view.menu.MenuPopupHelper p1)
    {
        return p1.mInflater;
    }

    static synthetic com.actionbarsherlock.internal.view.menu.MenuBuilder access$2(com.actionbarsherlock.internal.view.menu.MenuPopupHelper p1)
    {
        return p1.mMenu;
    }

    static synthetic com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter access$3(com.actionbarsherlock.internal.view.menu.MenuPopupHelper p1)
    {
        return p1.mAdapter;
    }

    private int measureContentWidth(android.widget.ListAdapter p11)
    {
        int v6 = 0;
        android.view.View v4 = 0;
        int v3 = 0;
        int v7 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
        int v1 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
        int v0 = p11.getCount();
        int v2 = 0;
        while (v2 < v0) {
            int v5 = p11.getItemViewType(v2);
            if (v5 != v3) {
                v3 = v5;
                v4 = 0;
            }
            if (this.mMeasureParent == null) {
                this.mMeasureParent = new android.widget.FrameLayout(this.mContext);
            }
            v4 = p11.getView(v2, v4, this.mMeasureParent);
            v4.measure(v7, v1);
            v6 = Math.max(v6, v4.getMeasuredWidth());
            v2++;
        }
        return v6;
    }

    public boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        return 0;
    }

    public void dismiss()
    {
        if (this.isShowing()) {
            this.mPopup.dismiss();
        }
        return;
    }

    public boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        return 0;
    }

    public boolean flagActionItems()
    {
        return 0;
    }

    public int getId()
    {
        return 0;
    }

    public com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup p3)
    {
        throw new UnsupportedOperationException("MenuPopupHelpers manage their own views");
    }

    public void initForMenu(android.content.Context p1, com.actionbarsherlock.internal.view.menu.MenuBuilder p2)
    {
        return;
    }

    public boolean isShowing()
    {
        if ((this.mPopup == null) || (!this.mPopup.isShowing())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, boolean p3)
    {
        if (p2 == this.mMenu) {
            this.dismiss();
            if (this.mPresenterCallback != null) {
                this.mPresenterCallback.onCloseMenu(p2, p3);
            }
        }
        return;
    }

    public void onDismiss()
    {
        this.mPopup = 0;
        this.mMenu.close();
        if (this.mTreeObserver != null) {
            if (!this.mTreeObserver.isAlive()) {
                this.mTreeObserver = this.mAnchorView.getViewTreeObserver();
            }
            this.mTreeObserver.removeGlobalOnLayoutListener(this);
            this.mTreeObserver = 0;
        }
        ((com.actionbarsherlock.internal.view.View_HasStateListenerSupport) this.mAnchorView).removeOnAttachStateChangeListener(this);
        return;
    }

    public void onGlobalLayout()
    {
        if (this.isShowing()) {
            android.view.View v0 = this.mAnchorView;
            if ((v0 != null) && (v0.isShown())) {
                if (this.isShowing()) {
                    this.mPopup.show();
                }
            } else {
                this.dismiss();
            }
        }
        return;
    }

    public void onItemClick(android.widget.AdapterView p5, android.view.View p6, int p7, long p8)
    {
        com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter v0 = this.mAdapter;
        com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter.access$1(v0).performItemAction(v0.getItem(p7), 0);
        return;
    }

    public boolean onKey(android.view.View p3, int p4, android.view.KeyEvent p5)
    {
        int v0 = 1;
        if ((p5.getAction() != 1) || (p4 != 82)) {
            v0 = 0;
        } else {
            this.dismiss();
        }
        return v0;
    }

    public void onRestoreInstanceState(android.os.Parcelable p1)
    {
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        return 0;
    }

    public boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p9)
    {
        int v5_0 = 0;
        if (p9.hasVisibleItems()) {
            com.actionbarsherlock.internal.view.menu.MenuPopupHelper v4_1 = new com.actionbarsherlock.internal.view.menu.MenuPopupHelper(this.mContext, p9, this.mAnchorView, 0);
            v4_1.setCallback(this.mPresenterCallback);
            int v3 = 0;
            int v1 = p9.size();
            int v2 = 0;
            while (v2 < v1) {
                com.actionbarsherlock.view.MenuItem v0 = p9.getItem(v2);
                if ((!v0.isVisible()) || (v0.getIcon() == null)) {
                    v2++;
                } else {
                    v3 = 1;
                    break;
                }
            }
            v4_1.setForceShowIcon(v3);
            if (v4_1.tryShow()) {
                if (this.mPresenterCallback != null) {
                    this.mPresenterCallback.onOpenSubMenu(p9);
                }
                v5_0 = 1;
            }
        }
        return v5_0;
    }

    public void onViewAttachedToWindow(android.view.View p1)
    {
        return;
    }

    public void onViewDetachedFromWindow(android.view.View p2)
    {
        if (this.mTreeObserver != null) {
            if (!this.mTreeObserver.isAlive()) {
                this.mTreeObserver = p2.getViewTreeObserver();
            }
            this.mTreeObserver.removeGlobalOnLayoutListener(this);
        }
        ((com.actionbarsherlock.internal.view.View_HasStateListenerSupport) p2).removeOnAttachStateChangeListener(this);
        return;
    }

    public void setAnchorView(android.view.View p1)
    {
        this.mAnchorView = p1;
        return;
    }

    public void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback p1)
    {
        this.mPresenterCallback = p1;
        return;
    }

    public void setForceShowIcon(boolean p1)
    {
        this.mForceShowIcon = p1;
        return;
    }

    public void show()
    {
        if (this.tryShow()) {
            return;
        } else {
            throw new IllegalStateException("MenuPopupHelper cannot be used without an anchor");
        }
    }

    public boolean tryShow()
    {
        int v0 = 0;
        int v3 = 1;
        this.mPopup = new com.actionbarsherlock.internal.widget.IcsListPopupWindow(this.mContext, 0, com.actionbarsherlock.R$attr.popupMenuStyle);
        this.mPopup.setOnDismissListener(this);
        this.mPopup.setOnItemClickListener(this);
        this.mAdapter = new com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter(this, this.mMenu);
        this.mPopup.setAdapter(this.mAdapter);
        this.mPopup.setModal(1);
        android.view.View v1 = this.mAnchorView;
        if (v1 == null) {
            v3 = 0;
        } else {
            if (this.mTreeObserver == null) {
                v0 = 1;
            }
            this.mTreeObserver = v1.getViewTreeObserver();
            if (v0 != 0) {
                this.mTreeObserver.addOnGlobalLayoutListener(this);
            }
            ((com.actionbarsherlock.internal.view.View_HasStateListenerSupport) v1).addOnAttachStateChangeListener(this);
            this.mPopup.setAnchorView(v1);
            this.mPopup.setContentWidth(Math.min(this.measureContentWidth(this.mAdapter), this.mPopupMaxWidth));
            this.mPopup.setInputMethodMode(2);
            this.mPopup.show();
            this.mPopup.getListView().setOnKeyListener(this);
        }
        return v3;
    }

    public void updateMenuView(boolean p2)
    {
        if (this.mAdapter != null) {
            this.mAdapter.notifyDataSetChanged();
        }
        return;
    }

    public ActionMenuPresenter$ActionButtonSubmenu(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p7, android.content.Context p8, com.actionbarsherlock.internal.view.menu.SubMenuBuilder p9)
    {
        this.this$0 = p7;
        super(p8, p9);
        if (!((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p9.getItem()).isActionButton()) {
            android.graphics.drawable.Drawable v5_0;
            if (com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.access$1(p7) != null) {
                v5_0 = com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.access$1(p7);
            } else {
                v5_0 = ((android.view.View) p7.mMenuView);
            }
            super.setAnchorView(v5_0);
        }
        super.setCallback(p7.mPopupPresenterCallback);
        int v4 = 0;
        int v1 = p9.size();
        int v2 = 0;
        while (v2 < v1) {
            com.actionbarsherlock.view.MenuItem v0 = p9.getItem(v2);
            if ((!v0.isVisible()) || (v0.getIcon() == null)) {
                v2++;
            } else {
                v4 = 1;
                break;
            }
        }
        super.setForceShowIcon(v4);
        return;
    }

    public void onDismiss()
    {
        super.onDismiss();
        com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.access$2(this.this$0, 0);
        this.this$0.mOpenSubMenuId = 0;
        return;
    }

    private ActionMenuPresenter$HasPermanentMenuKey()
    {
        return;
    }

    public static boolean get(android.content.Context p1)
    {
        return android.view.ViewConfiguration.get(p1).hasPermanentMenuKey();
    }

    public ActionMenuPresenter$OpenOverflowRunnable(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p1, com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup p2)
    {
        this.this$0 = p1;
        this.mPopup = p2;
        return;
    }

    public void run()
    {
        this.this$0.mMenu.changeMenuMode();
        android.view.View v0_1 = ((android.view.View) this.this$0.mMenuView);
        if ((v0_1 != null) && ((v0_1.getWindowToken() != null) && (this.mPopup.tryShow()))) {
            com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.access$0(this.this$0, this.mPopup);
        }
        com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.access$3(this.this$0, 0);
        return;
    }

    public ActionMenuPresenter$OverflowMenuButton(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p4, android.content.Context p5)
    {
        this.this$0 = p4;
        super(p5, 0, com.actionbarsherlock.R$attr.actionOverflowButtonStyle);
        super.mListeners = new java.util.HashSet();
        super.setClickable(1);
        super.setFocusable(1);
        super.setVisibility(0);
        super.setEnabled(1);
        return;
    }

    public void addOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener p2)
    {
        this.mListeners.add(p2);
        return;
    }

    public boolean needsDividerAfter()
    {
        return 0;
    }

    public boolean needsDividerBefore()
    {
        return 0;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        java.util.Iterator v1_1 = this.mListeners.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) v1_1.next()).onViewAttachedToWindow(this);
        }
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        java.util.Iterator v1_1 = this.mListeners.iterator();
        while (v1_1.hasNext()) {
            ((com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) v1_1.next()).onViewDetachedFromWindow(this);
        }
        return;
    }

    public boolean performClick()
    {
        if (!super.performClick()) {
            this.playSoundEffect(0);
            this.this$0.showOverflowMenu();
        }
        return 1;
    }

    public void removeOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener p2)
    {
        this.mListeners.remove(p2);
        return;
    }

    public ActionMenuPresenter$OverflowPopup(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p2, android.content.Context p3, com.actionbarsherlock.internal.view.menu.MenuBuilder p4, android.view.View p5, boolean p6)
    {
        this.this$0 = p2;
        super(p3, p4, p5, p6);
        super.setCallback(p2.mPopupPresenterCallback);
        return;
    }

    public void onDismiss()
    {
        super.onDismiss();
        this.this$0.mMenu.close();
        com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.access$0(this.this$0, 0);
        return;
    }

    private ActionMenuPresenter$PopupPresenterCallback(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ActionMenuPresenter$PopupPresenterCallback(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p1, com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback p2)
    {
        this(p1);
        return;
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p3, boolean p4)
    {
        if ((p3 instanceof com.actionbarsherlock.internal.view.menu.SubMenuBuilder)) {
            ((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) p3).getRootMenu().close(0);
        }
        return;
    }

    public boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p4)
    {
        if (p4 != null) {
            this.this$0.mOpenSubMenuId = ((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) p4).getItem().getItemId();
        }
        return 0;
    }

    ActionMenuPresenter$SavedState$1()
    {
        return;
    }

    public com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel p2)
    {
        return new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState[] newArray(int p2)
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState[] v0 = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static ActionMenuPresenter$SavedState()
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState.CREATOR = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState$1();
        return;
    }

    ActionMenuPresenter$SavedState()
    {
        return;
    }

    ActionMenuPresenter$SavedState(android.os.Parcel p2)
    {
        this.openSubMenuId = p2.readInt();
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeInt(this.openSubMenuId);
        return;
    }

    static BaseMenuPresenter()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        com.actionbarsherlock.internal.view.menu.BaseMenuPresenter.IS_HONEYCOMB = v0_1;
        return;
    }

    public BaseMenuPresenter(android.content.Context p2, int p3, int p4)
    {
        this.mSystemContext = p2;
        this.mSystemInflater = android.view.LayoutInflater.from(p2);
        this.mMenuLayoutRes = p3;
        this.mItemLayoutRes = p4;
        return;
    }

    protected void addItemView(android.view.View p3, int p4)
    {
        android.view.ViewGroup v0_1 = ((android.view.ViewGroup) p3.getParent());
        if (v0_1 != null) {
            v0_1.removeView(p3);
        }
        ((android.view.ViewGroup) this.mMenuView).addView(p3, p4);
        return;
    }

    public abstract void bindItemView();

    public boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        return 0;
    }

    public com.actionbarsherlock.internal.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup p4)
    {
        return ((com.actionbarsherlock.internal.view.menu.MenuView$ItemView) this.mSystemInflater.inflate(this.mItemLayoutRes, p4, 0));
    }

    public boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        return 0;
    }

    protected boolean filterLeftoverView(android.view.ViewGroup p2, int p3)
    {
        p2.removeViewAt(p3);
        return 1;
    }

    public boolean flagActionItems()
    {
        return 0;
    }

    public int getId()
    {
        return this.mId;
    }

    public android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl p3, android.view.View p4, android.view.ViewGroup p5)
    {
        android.view.View v0_0;
        if (!(p4 instanceof com.actionbarsherlock.internal.view.menu.MenuView$ItemView)) {
            v0_0 = this.createItemView(p5);
        } else {
            v0_0 = ((com.actionbarsherlock.internal.view.menu.MenuView$ItemView) p4);
        }
        this.bindItemView(p3, v0_0);
        return ((android.view.View) v0_0);
    }

    public com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup p4)
    {
        if (this.mMenuView == null) {
            this.mMenuView = ((com.actionbarsherlock.internal.view.menu.MenuView) this.mSystemInflater.inflate(this.mMenuLayoutRes, p4, 0));
            this.mMenuView.initialize(this.mMenu);
            this.updateMenuView(1);
        }
        return this.mMenuView;
    }

    public void initForMenu(android.content.Context p2, com.actionbarsherlock.internal.view.menu.MenuBuilder p3)
    {
        this.mContext = p2;
        this.mInflater = android.view.LayoutInflater.from(this.mContext);
        this.mMenu = p3;
        return;
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, boolean p3)
    {
        if (this.mCallback != null) {
            this.mCallback.onCloseMenu(p2, p3);
        }
        return;
    }

    public boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p2)
    {
        int v0_1;
        if (this.mCallback == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mCallback.onOpenSubMenu(p2);
        }
        return v0_1;
    }

    public void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    public void setId(int p1)
    {
        this.mId = p1;
        return;
    }

    public boolean shouldIncludeItem(int p2, com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        return 1;
    }

    public void updateMenuView(boolean p11)
    {
        android.view.ViewGroup v7_1 = ((android.view.ViewGroup) this.mMenuView);
        if (v7_1 != null) {
            int v0 = 0;
            if (this.mMenu != null) {
                this.mMenu.flagActionItems();
                java.util.ArrayList v8 = this.mMenu.getVisibleItems();
                int v4 = v8.size();
                int v2 = 0;
                while (v2 < v4) {
                    com.actionbarsherlock.internal.view.menu.MenuItemImpl v3_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v8.get(v2));
                    if (this.shouldIncludeItem(v0, v3_1)) {
                        int v6;
                        android.view.View v1 = v7_1.getChildAt(v0);
                        if (!(v1 instanceof com.actionbarsherlock.internal.view.menu.MenuView$ItemView)) {
                            v6 = 0;
                        } else {
                            v6 = ((com.actionbarsherlock.internal.view.menu.MenuView$ItemView) v1).getItemData();
                        }
                        android.view.View v5 = this.getItemView(v3_1, v1, v7_1);
                        if (v3_1 != v6) {
                            v5.setPressed(0);
                            if (com.actionbarsherlock.internal.view.menu.BaseMenuPresenter.IS_HONEYCOMB) {
                                v5.jumpDrawablesToCurrentState();
                            }
                        }
                        if (v5 != v1) {
                            this.addItemView(v5, v0);
                        }
                        v0++;
                    }
                    v2++;
                }
            }
            while (v0 < v7_1.getChildCount()) {
                if (!this.filterLeftoverView(v7_1, v0)) {
                    v0++;
                }
            }
        }
        return;
    }

    public abstract void onSubUiVisibilityChanged();

    public ActionMenuPresenter(android.content.Context p3)
    {
        super(p3, com.actionbarsherlock.R$layout.abs__action_menu_layout, com.actionbarsherlock.R$layout.abs__action_menu_item_layout);
        super.mActionButtonGroups = new android.util.SparseBooleanArray();
        super.mPopupPresenterCallback = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback(super, 0);
        return;
    }

    static synthetic void access$0(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p0, com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup p1)
    {
        p0.mOverflowPopup = p1;
        return;
    }

    static synthetic android.view.View access$1(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p1)
    {
        return p1.mOverflowButton;
    }

    static synthetic void access$2(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p0, com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu p1)
    {
        p0.mActionButtonPopup = p1;
        return;
    }

    static synthetic void access$3(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p0, com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable p1)
    {
        p0.mPostedOpenRunnable = p1;
        return;
    }

    private android.view.View findViewForItem(com.actionbarsherlock.view.MenuItem p7)
    {
        android.view.View v0;
        android.view.ViewGroup v3_1 = ((android.view.ViewGroup) this.mMenuView);
        if (v3_1 != null) {
            int v1 = v3_1.getChildCount();
            int v2 = 0;
            while (v2 < v1) {
                v0 = v3_1.getChildAt(v2);
                if ((!(v0 instanceof com.actionbarsherlock.internal.view.menu.MenuView$ItemView)) || (((com.actionbarsherlock.internal.view.menu.MenuView$ItemView) v0).getItemData() != p7)) {
                    v2++;
                }
            }
            v0 = 0;
        } else {
            v0 = 0;
        }
        return v0;
    }

    public static boolean reserveOverflow(android.content.Context p6)
    {
        int v3 = 1;
        int v2 = 0;
        android.content.res.TypedArray v0 = p6.getTheme().obtainStyledAttributes(com.actionbarsherlock.R$styleable.SherlockTheme);
        boolean v1 = v0.getBoolean(52, 0);
        v0.recycle();
        if (!v1) {
            if (android.os.Build$VERSION.SDK_INT >= 14) {
                if (!com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$HasPermanentMenuKey.get(p6)) {
                    v2 = 1;
                }
                v3 = v2;
            } else {
                if (android.os.Build$VERSION.SDK_INT < 11) {
                    v3 = 0;
                }
            }
        }
        return v3;
    }

    public void bindItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl p4, com.actionbarsherlock.internal.view.menu.MenuView$ItemView p5)
    {
        p5.initialize(p4, 0);
        ((com.actionbarsherlock.internal.view.menu.ActionMenuItemView) p5).setItemInvoker(((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mMenuView));
        return;
    }

    public boolean dismissPopupMenus()
    {
        return (this.hideOverflowMenu() | this.hideSubMenus());
    }

    public boolean filterLeftoverView(android.view.ViewGroup p3, int p4)
    {
        boolean v0_1;
        if (p3.getChildAt(p4) != this.mOverflowButton) {
            v0_1 = super.filterLeftoverView(p3, p4);
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public boolean flagActionItems()
    {
        java.util.ArrayList v25 = this.mMenu.getVisibleItems();
        int v15 = v25.size();
        int v17_1 = this.mMaxItems;
        int v26 = this.mActionItemWidthLimit;
        int v20 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
        android.view.ViewGroup v19_1 = ((android.view.ViewGroup) this.mMenuView);
        int v22 = 0;
        int v21 = 0;
        int v8 = 0;
        int v10 = 0;
        int v11_1 = 0;
        while (v11_1 < v15) {
            com.actionbarsherlock.internal.view.menu.MenuItemImpl v14_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v25.get(v11_1));
            if (!v14_1.requiresActionButton()) {
                if (!v14_1.requestsActionButton()) {
                    v10 = 1;
                } else {
                    v21++;
                }
            } else {
                v22++;
            }
            if ((this.mExpandedActionViewsExclusive) && (v14_1.isActionViewExpanded())) {
                v17_1 = 0;
            }
            v11_1++;
        }
        if ((this.mReserveOverflow) && ((v10 != 0) || ((v22 + v21) > v17_1))) {
            v17_1--;
        }
        int v17_0 = (v17_1 - v22);
        android.util.SparseBooleanArray v23 = this.mActionButtonGroups;
        v23.clear();
        int v4 = 0;
        int v7 = 0;
        if (this.mStrictWidthLimit) {
            v7 = (v26 / this.mMinCellSize);
            v4 = (this.mMinCellSize + ((v26 % this.mMinCellSize) / v7));
        }
        int v11_0 = 0;
        while (v11_0 < v15) {
            com.actionbarsherlock.internal.view.menu.MenuItemImpl v14_3 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v25.get(v11_0));
            if (!v14_3.requiresActionButton()) {
                if (v14_3.requestsActionButton()) {
                    int v13;
                    int v9_1 = v14_3.getGroupId();
                    boolean v12 = v23.get(v9_1);
                    if (((v17_0 <= 0) && (!v12)) || ((v26 <= 0) || ((this.mStrictWidthLimit) && (v7 <= 0)))) {
                        v13 = 0;
                    } else {
                        v13 = 1;
                    }
                    if (v13 != 0) {
                        android.view.View v24_0 = this.getItemView(v14_3, this.mScrapActionButtonView, v19_1);
                        if (this.mScrapActionButtonView == null) {
                            this.mScrapActionButtonView = v24_0;
                        }
                        if (!this.mStrictWidthLimit) {
                            v24_0.measure(v20, v20);
                        } else {
                            int v6 = com.actionbarsherlock.internal.view.menu.ActionMenuView.measureChildForCells(v24_0, v4, v7, v20, 0);
                            v7 -= v6;
                            if (v6 == 0) {
                                v13 = 0;
                            }
                        }
                        int v18_0 = v24_0.getMeasuredWidth();
                        v26 -= v18_0;
                        if (v8 == 0) {
                            v8 = v18_0;
                        }
                        if (!this.mStrictWidthLimit) {
                            int v27_8;
                            if ((v26 + v8) <= 0) {
                                v27_8 = 0;
                            } else {
                                v27_8 = 1;
                            }
                            v13 &= v27_8;
                        } else {
                            int v27_9;
                            if (v26 < 0) {
                                v27_9 = 0;
                            } else {
                                v27_9 = 1;
                            }
                            v13 &= v27_9;
                        }
                    }
                    if ((v13 == 0) || (v9_1 == 0)) {
                        if (v12) {
                            v23.put(v9_1, 0);
                            int v16 = 0;
                            while (v16 < v11_0) {
                                com.actionbarsherlock.internal.view.menu.MenuItemImpl v3_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v25.get(v16));
                                if (v3_1.getGroupId() == v9_1) {
                                    if (v3_1.isActionButton()) {
                                        v17_0++;
                                    }
                                    v3_1.setIsActionButton(0);
                                }
                                v16++;
                            }
                        }
                    } else {
                        v23.put(v9_1, 1);
                    }
                    if (v13 != 0) {
                        v17_0--;
                    }
                    v14_3.setIsActionButton(v13);
                }
            } else {
                android.view.View v24_1 = this.getItemView(v14_3, this.mScrapActionButtonView, v19_1);
                if (this.mScrapActionButtonView == null) {
                    this.mScrapActionButtonView = v24_1;
                }
                if (!this.mStrictWidthLimit) {
                    v24_1.measure(v20, v20);
                } else {
                    v7 -= com.actionbarsherlock.internal.view.menu.ActionMenuView.measureChildForCells(v24_1, v4, v7, v20, 0);
                }
                int v18_1 = v24_1.getMeasuredWidth();
                v26 -= v18_1;
                if (v8 == 0) {
                    v8 = v18_1;
                }
                int v9_0 = v14_3.getGroupId();
                if (v9_0 != 0) {
                    v23.put(v9_0, 1);
                }
                v14_3.setIsActionButton(1);
            }
            v11_0++;
        }
        return 1;
    }

    public android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl p5, android.view.View p6, android.view.ViewGroup p7)
    {
        android.view.View v0 = p5.getActionView();
        if ((v0 == null) || (p5.hasCollapsibleActionView())) {
            if (!(p6 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuItemView)) {
                p6 = 0;
            }
            v0 = super.getItemView(p5, p6, p7);
        }
        com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v3_1;
        if (!p5.isActionViewExpanded()) {
            v3_1 = 0;
        } else {
            v3_1 = 8;
        }
        v0.setVisibility(v3_1);
        android.view.ViewGroup$LayoutParams v1 = v0.getLayoutParams();
        if (!((com.actionbarsherlock.internal.view.menu.ActionMenuView) p7).checkLayoutParams(v1)) {
            v0.setLayoutParams(((com.actionbarsherlock.internal.view.menu.ActionMenuView) p7).generateLayoutParams(v1));
        }
        return v0;
    }

    public com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup p3)
    {
        com.actionbarsherlock.internal.view.menu.MenuView v0 = super.getMenuView(p3);
        ((com.actionbarsherlock.internal.view.menu.ActionMenuView) v0).setPresenter(this);
        return v0;
    }

    public boolean hideOverflowMenu()
    {
        if ((this.mPostedOpenRunnable == null) || (this.mMenuView == null)) {
            com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup v0 = this.mOverflowPopup;
            if (v0 == null) {
                int v1_4 = 0;
            } else {
                v0.dismiss();
                v1_4 = 1;
            }
        } else {
            ((android.view.View) this.mMenuView).removeCallbacks(this.mPostedOpenRunnable);
            this.mPostedOpenRunnable = 0;
            v1_4 = 1;
        }
        return v1_4;
    }

    public boolean hideSubMenus()
    {
        int v0_1;
        if (this.mActionButtonPopup == null) {
            v0_1 = 0;
        } else {
            this.mActionButtonPopup.dismiss();
            v0_1 = 1;
        }
        return v0_1;
    }

    public void initForMenu(android.content.Context p8, com.actionbarsherlock.internal.view.menu.MenuBuilder p9)
    {
        super.initForMenu(p8, p9);
        android.content.res.Resources v0 = p8.getResources();
        if (!this.mReserveOverflowSet) {
            this.mReserveOverflow = com.actionbarsherlock.internal.view.menu.ActionMenuPresenter.reserveOverflow(this.mContext);
        }
        if (!this.mWidthLimitSet) {
            this.mWidthLimit = (v0.getDisplayMetrics().widthPixels / 2);
        }
        if (!this.mMaxItemsSet) {
            this.mMaxItems = com.actionbarsherlock.internal.ResourcesCompat.getResources_getInteger(p8, com.actionbarsherlock.R$integer.abs__max_action_buttons);
        }
        int v2 = this.mWidthLimit;
        if (!this.mReserveOverflow) {
            this.mOverflowButton = 0;
        } else {
            if (this.mOverflowButton == null) {
                this.mOverflowButton = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton(this, this.mSystemContext);
                this.mOverflowButton.measure(android.view.View$MeasureSpec.makeMeasureSpec(0, 0), android.view.View$MeasureSpec.makeMeasureSpec(0, 0));
            }
            v2 -= this.mOverflowButton.getMeasuredWidth();
        }
        this.mActionItemWidthLimit = v2;
        this.mMinCellSize = ((int) (1113587712 * v0.getDisplayMetrics().density));
        this.mScrapActionButtonView = 0;
        return;
    }

    public boolean isOverflowMenuShowing()
    {
        if ((this.mOverflowPopup == null) || (!this.mOverflowPopup.isShowing())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean isOverflowReserved()
    {
        return this.mReserveOverflow;
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p1, boolean p2)
    {
        this.dismissPopupMenus();
        super.onCloseMenu(p1, p2);
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p3)
    {
        if (!this.mMaxItemsSet) {
            this.mMaxItems = com.actionbarsherlock.internal.ResourcesCompat.getResources_getInteger(this.mContext, com.actionbarsherlock.R$integer.abs__max_action_buttons);
            if (this.mMenu != null) {
                this.mMenu.onItemsChanged(1);
            }
        }
        return;
    }

    public void onRestoreInstanceState(android.os.Parcelable p6)
    {
        if (((com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState) p6).openSubMenuId > 0) {
            com.actionbarsherlock.view.MenuItem v0 = this.mMenu.findItem(((com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState) p6).openSubMenuId);
            if (v0 != null) {
                this.onSubMenuSelected(((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) v0.getSubMenu()));
            }
        }
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState v0_1 = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState();
        v0_1.openSubMenuId = this.mOpenSubMenuId;
        return v0_1;
    }

    public boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p6)
    {
        int v2_0 = 0;
        if (p6.hasVisibleItems()) {
            com.actionbarsherlock.internal.view.menu.SubMenuBuilder v1_1 = p6;
            while (v1_1.getParentMenu() != this.mMenu) {
                v1_1 = ((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) v1_1.getParentMenu());
            }
            android.view.View v0 = this.findViewForItem(v1_1.getItem());
            if (v0 == null) {
                if (this.mOverflowButton == null) {
                    return v2_0;
                } else {
                    v0 = this.mOverflowButton;
                }
            }
            this.mOpenSubMenuId = p6.getItem().getItemId();
            this.mActionButtonPopup = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu(this, this.mContext, p6);
            this.mActionButtonPopup.setAnchorView(v0);
            this.mActionButtonPopup.show();
            super.onSubMenuSelected(p6);
            v2_0 = 1;
        }
        return v2_0;
    }

    public void onSubUiVisibilityChanged(boolean p3)
    {
        if (!p3) {
            this.mMenu.close(0);
        } else {
            super.onSubMenuSelected(0);
        }
        return;
    }

    public void setExpandedActionViewsExclusive(boolean p1)
    {
        this.mExpandedActionViewsExclusive = p1;
        return;
    }

    public void setItemLimit(int p2)
    {
        this.mMaxItems = p2;
        this.mMaxItemsSet = 1;
        return;
    }

    public void setReserveOverflow(boolean p2)
    {
        this.mReserveOverflow = p2;
        this.mReserveOverflowSet = 1;
        return;
    }

    public void setWidthLimit(int p2, boolean p3)
    {
        this.mWidthLimit = p2;
        this.mStrictWidthLimit = p3;
        this.mWidthLimitSet = 1;
        return;
    }

    public boolean shouldIncludeItem(int p2, com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        return p3.isActionButton();
    }

    public boolean showOverflowMenu()
    {
        int v5 = 1;
        if ((!this.mReserveOverflow) || ((this.isOverflowMenuShowing()) || ((this.mMenu == null) || ((this.mMenuView == null) || ((this.mPostedOpenRunnable != null) || (this.mMenu.getNonActionItems().isEmpty())))))) {
            v5 = 0;
        } else {
            this.mPostedOpenRunnable = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable(this, new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup(this, this.mContext, this.mMenu, this.mOverflowButton, 1));
            ((android.view.View) this.mMenuView).post(this.mPostedOpenRunnable);
            super.onSubMenuSelected(0);
        }
        return v5;
    }

    public void updateMenuView(boolean p12)
    {
        super.updateMenuView(p12);
        if (this.mMenu != null) {
            java.util.ArrayList v0 = this.mMenu.getActionItems();
            int v1_1 = v0.size();
            int v3 = 0;
            while (v3 < v1_1) {
                com.actionbarsherlock.view.ActionProvider v7 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v0.get(v3)).getActionProvider();
                if (v7 != null) {
                    v7.setSubUiVisibilityListener(this);
                }
                v3++;
            }
        }
        int v5;
        if (this.mMenu == null) {
            v5 = 0;
        } else {
            v5 = this.mMenu.getNonActionItems();
        }
        boolean v2 = 0;
        if ((this.mReserveOverflow) && (v5 != 0)) {
            int v1_0 = v5.size();
            if (v1_0 != 1) {
                if (v1_0 <= 0) {
                    v2 = 0;
                } else {
                    v2 = 1;
                }
            } else {
                if (!((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v5.get(0)).isActionViewExpanded()) {
                    v2 = 1;
                } else {
                    v2 = 0;
                }
            }
        }
        if (!v2) {
            if ((this.mOverflowButton != null) && (this.mOverflowButton.getParent() == this.mMenuView)) {
                ((android.view.ViewGroup) this.mMenuView).removeView(this.mOverflowButton);
            }
        } else {
            if (this.mOverflowButton == null) {
                this.mOverflowButton = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton(this, this.mSystemContext);
            }
            android.view.ViewGroup v6_1 = ((android.view.ViewGroup) this.mOverflowButton.getParent());
            if (v6_1 != this.mMenuView) {
                if (v6_1 != null) {
                    v6_1.removeView(this.mOverflowButton);
                }
                com.actionbarsherlock.internal.view.menu.ActionMenuView v4_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mMenuView);
                v4_1.addView(this.mOverflowButton, v4_1.generateOverflowButtonLayoutParams());
            }
        }
        ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mMenuView).setOverflowReserved(this.mReserveOverflow);
        return;
    }

    public ActionMenuView$LayoutParams(int p2, int p3)
    {
        super(p2, p3);
        super.isOverflowButton = 0;
        return;
    }

    public ActionMenuView$LayoutParams(int p1, int p2, boolean p3)
    {
        super(p1, p2);
        super.isOverflowButton = p3;
        return;
    }

    public ActionMenuView$LayoutParams(android.content.Context p1, android.util.AttributeSet p2)
    {
        super(p1, p2);
        return;
    }

    public ActionMenuView$LayoutParams(com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams p2)
    {
        super(p2);
        super.isOverflowButton = p2.isOverflowButton;
        return;
    }

    static IcsLinearLayout()
    {
        int[] v0_1 = new int[3];
        v0_1 = {16843049, 16843561, 16843562};
        com.actionbarsherlock.internal.widget.IcsLinearLayout.LinearLayout = v0_1;
        return;
    }

    public IcsLinearLayout(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, com.actionbarsherlock.internal.widget.IcsLinearLayout.LinearLayout);
        super.setDividerDrawable(v0.getDrawable(0));
        super.mShowDividers = v0.getInt(1, 0);
        super.mDividerPadding = v0.getDimensionPixelSize(2, 0);
        v0.recycle();
        return;
    }

    void drawDividersHorizontal(android.graphics.Canvas p9)
    {
        int v1 = this.getChildCount();
        int v2 = 0;
        while (v2 < v1) {
            android.view.View v0_1 = this.getChildAt(v2);
            if ((v0_1 != null) && ((v0_1.getVisibility() != 8) && (this.hasDividerBeforeChildAt(v2)))) {
                this.drawVerticalDivider(p9, (v0_1.getLeft() - ((android.widget.LinearLayout$LayoutParams) v0_1.getLayoutParams()).leftMargin));
            }
            v2++;
        }
        if (this.hasDividerBeforeChildAt(v1)) {
            int v5;
            android.view.View v0_0 = this.getChildAt((v1 - 1));
            if (v0_0 != null) {
                v0_0.getLayoutParams();
                v5 = v0_0.getRight();
            } else {
                v5 = ((this.getWidth() - this.getPaddingRight()) - this.mDividerWidth);
            }
            this.drawVerticalDivider(p9, v5);
        }
        return;
    }

    void drawDividersVertical(android.graphics.Canvas p9)
    {
        int v2 = this.getChildCount();
        int v3 = 0;
        while (v3 < v2) {
            android.view.View v1_1 = this.getChildAt(v3);
            if ((v1_1 != null) && ((v1_1.getVisibility() != 8) && (this.hasDividerBeforeChildAt(v3)))) {
                this.drawHorizontalDivider(p9, (v1_1.getTop() - ((android.widget.LinearLayout$LayoutParams) v1_1.getLayoutParams()).topMargin));
            }
            v3++;
        }
        if (this.hasDividerBeforeChildAt(v2)) {
            int v0;
            android.view.View v1_0 = this.getChildAt((v2 - 1));
            if (v1_0 != null) {
                v1_0.getLayoutParams();
                v0 = v1_0.getBottom();
            } else {
                v0 = ((this.getHeight() - this.getPaddingBottom()) - this.mDividerHeight);
            }
            this.drawHorizontalDivider(p9, v0);
        }
        return;
    }

    void drawHorizontalDivider(android.graphics.Canvas p5, int p6)
    {
        this.mDivider.setBounds((this.getPaddingLeft() + this.mDividerPadding), p6, ((this.getWidth() - this.getPaddingRight()) - this.mDividerPadding), (this.mDividerHeight + p6));
        this.mDivider.draw(p5);
        return;
    }

    void drawVerticalDivider(android.graphics.Canvas p6, int p7)
    {
        this.mDivider.setBounds(p7, (this.getPaddingTop() + this.mDividerPadding), (this.mDividerWidth + p7), ((this.getHeight() - this.getPaddingBottom()) - this.mDividerPadding));
        this.mDivider.draw(p6);
        return;
    }

    public int getDividerPadding()
    {
        return this.mDividerPadding;
    }

    public int getDividerWidth()
    {
        return this.mDividerWidth;
    }

    public int getShowDividers()
    {
        return this.mShowDividers;
    }

    protected boolean hasDividerBeforeChildAt(int p5)
    {
        int v0 = 1;
        if (p5 != 0) {
            if (p5 != this.getChildCount()) {
                if ((this.mShowDividers & 2) == 0) {
                    v0 = 0;
                } else {
                    v0 = 0;
                    int v1 = (p5 - 1);
                    while (v1 >= 0) {
                        if (this.getChildAt(v1).getVisibility() == 8) {
                            v1--;
                        } else {
                            v0 = 1;
                            break;
                        }
                    }
                }
            } else {
                if ((this.mShowDividers & 4) == 0) {
                    v0 = 0;
                }
            }
        } else {
            if ((this.mShowDividers & 1) == 0) {
                v0 = 0;
            }
        }
        return v0;
    }

    protected void measureChildWithMargins(android.view.View p7, int p8, int p9, int p10, int p11)
    {
        int v1 = this.indexOfChild(p7);
        int v2 = this.getOrientation();
        android.widget.LinearLayout$LayoutParams v3_1 = ((android.widget.LinearLayout$LayoutParams) p7.getLayoutParams());
        if (this.hasDividerBeforeChildAt(v1)) {
            if (v2 != 1) {
                v3_1.leftMargin = this.mDividerWidth;
            } else {
                v3_1.topMargin = this.mDividerHeight;
            }
        }
        int v0 = this.getChildCount();
        if ((v1 == (v0 - 1)) && (this.hasDividerBeforeChildAt(v0))) {
            if (v2 != 1) {
                v3_1.rightMargin = this.mDividerWidth;
            } else {
                v3_1.bottomMargin = this.mDividerHeight;
            }
        }
        super.measureChildWithMargins(p7, p8, p9, p10, p11);
        return;
    }

    protected void onDraw(android.graphics.Canvas p3)
    {
        if (this.mDivider != null) {
            if (this.getOrientation() != 1) {
                this.drawDividersHorizontal(p3);
            } else {
                this.drawDividersVertical(p3);
            }
        }
        super.onDraw(p3);
        return;
    }

    public void setDividerDrawable(android.graphics.drawable.Drawable p3)
    {
        int v0 = 0;
        if (p3 != this.mDivider) {
            this.mDivider = p3;
            if (p3 == null) {
                this.mDividerWidth = 0;
                this.mDividerHeight = 0;
            } else {
                this.mDividerWidth = p3.getIntrinsicWidth();
                this.mDividerHeight = p3.getIntrinsicHeight();
            }
            if (p3 == null) {
                v0 = 1;
            }
            this.setWillNotDraw(v0);
            this.requestLayout();
        }
        return;
    }

    public void setDividerPadding(int p1)
    {
        this.mDividerPadding = p1;
        return;
    }

    public void setShowDividers(int p2)
    {
        if (p2 != this.mShowDividers) {
            this.requestLayout();
            this.invalidate();
        }
        this.mShowDividers = p2;
        return;
    }

    public abstract boolean invokeItem();

    public abstract int getWindowAnimations();

    public abstract void initialize();

    static ActionMenuView()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 8) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        com.actionbarsherlock.internal.view.menu.ActionMenuView.IS_FROYO = v0_1;
        return;
    }

    public ActionMenuView(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public ActionMenuView(android.content.Context p3, android.util.AttributeSet p4)
    {
        super(p3, p4);
        super.mFirst = 1;
        super.setBaselineAligned(0);
        float v0 = p3.getResources().getDisplayMetrics().density;
        super.mMinCellSize = ((int) (1113587712 * v0));
        super.mGeneratedItemPadding = ((int) (1082130432 * v0));
        return;
    }

    static int measureChildForCells(android.view.View p12, int p13, int p14, int p15, int p16)
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v7_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) p12.getLayoutParams());
        int v3 = android.view.View$MeasureSpec.makeMeasureSpec((android.view.View$MeasureSpec.getSize(p15) - p16), android.view.View$MeasureSpec.getMode(p15));
        int v0 = 0;
        if (p14 > 0) {
            p12.measure(android.view.View$MeasureSpec.makeMeasureSpec((p13 * p14), -2147483648), v3);
            int v8 = p12.getMeasuredWidth();
            v0 = (v8 / p13);
            if ((v8 % p13) != 0) {
                v0++;
            }
        }
        int v6;
        if (!(p12 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuItemView)) {
            v6 = 0;
        } else {
            v6 = ((com.actionbarsherlock.internal.view.menu.ActionMenuItemView) p12);
        }
        if ((v7_1.isOverflowButton) || ((v6 == 0) || (!v6.hasText()))) {
            int v5 = 0;
        } else {
            v5 = 1;
        }
        v7_1.expandable = v5;
        v7_1.cellsUsed = v0;
        p12.measure(android.view.View$MeasureSpec.makeMeasureSpec((v0 * p13), 1073741824), v3);
        return v0;
    }

    private void onMeasureExactFormat(int p43, int p44)
    {
        int v17 = android.view.View$MeasureSpec.getMode(p44);
        int v37_1 = android.view.View$MeasureSpec.getSize(p43);
        int v19 = android.view.View$MeasureSpec.getSize(p44);
        int v36 = (this.getPaddingLeft() + this.getPaddingRight());
        int v18 = (this.getPaddingTop() + this.getPaddingBottom());
        int v37_0 = (v37_1 - v36);
        int v4 = (v37_0 / this.mMinCellSize);
        if (v4 != 0) {
            int v5 = (this.mMinCellSize + ((v37_0 % this.mMinCellSize) / v4));
            int v8 = v4;
            int v25 = 0;
            int v24 = 0;
            int v14 = 0;
            int v34 = 0;
            int v16 = 0;
            long v32 = 0;
            int v12 = this.getChildCount();
            int v21_0 = 0;
            while (v21_0 < v12) {
                android.view.View v11_4 = this.getChildAt(v21_0);
                if (v11_4.getVisibility() != 8) {
                    boolean v22 = (v11_4 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuItemView);
                    v34++;
                    if (v22) {
                        v11_4.setPadding(this.mGeneratedItemPadding, 0, this.mGeneratedItemPadding, 0);
                    }
                    int v38_1;
                    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v23_13 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) v11_4.getLayoutParams());
                    v23_13.expanded = 0;
                    v23_13.extraPixels = 0;
                    v23_13.cellsUsed = 0;
                    v23_13.expandable = 0;
                    v23_13.leftMargin = 0;
                    v23_13.rightMargin = 0;
                    if ((!v22) || (!((com.actionbarsherlock.internal.view.menu.ActionMenuItemView) v11_4).hasText())) {
                        v38_1 = 0;
                    } else {
                        v38_1 = 1;
                    }
                    int v7;
                    v23_13.preventEdgeOffset = v38_1;
                    if (!v23_13.isOverflowButton) {
                        v7 = v8;
                    } else {
                        v7 = 1;
                    }
                    int v9 = com.actionbarsherlock.internal.view.menu.ActionMenuView.measureChildForCells(v11_4, v5, v7, p44, v18);
                    v24 = Math.max(v24, v9);
                    if (v23_13.expandable) {
                        v14++;
                    }
                    if (v23_13.isOverflowButton) {
                        v16 = 1;
                    }
                    v8 -= v9;
                    v25 = Math.max(v25, v11_4.getMeasuredHeight());
                    if (v9 == 1) {
                        v32 |= ((long) (1 << v21_0));
                    }
                }
                v21_0++;
            }
            if ((v16 == 0) || (v34 != 2)) {
                int v10 = 0;
            } else {
                v10 = 1;
            }
            int v30 = 0;
            while ((v14 > 0) && (v8 > 0)) {
                int v26_0 = 2147483647;
                long v27 = 0;
                int v29 = 0;
                int v21_1 = 0;
                while (v21_1 < v12) {
                    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v23_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) this.getChildAt(v21_1).getLayoutParams());
                    if (v23_1.expandable) {
                        if (v23_1.cellsUsed >= v26_0) {
                            if (v23_1.cellsUsed == v26_0) {
                                v27 |= ((long) (1 << v21_1));
                                v29++;
                            }
                        } else {
                            v26_0 = v23_1.cellsUsed;
                            v27 = ((long) (1 << v21_1));
                            v29 = 1;
                        }
                    }
                    v21_1++;
                }
                v32 |= v27;
                if (v29 > v8) {
                    break;
                }
                int v26_1 = (v26_0 + 1);
                int v21_2 = 0;
                while (v21_2 < v12) {
                    android.view.View v11_1 = this.getChildAt(v21_2);
                    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v23_3 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) v11_1.getLayoutParams());
                    if ((((long) (1 << v21_2)) & v27) != 0) {
                        if ((v10 != 0) && ((v23_3.preventEdgeOffset) && (v8 == 1))) {
                            v11_1.setPadding((this.mGeneratedItemPadding + v5), 0, this.mGeneratedItemPadding, 0);
                        }
                        v23_3.cellsUsed = (v23_3.cellsUsed + 1);
                        v23_3.expanded = 1;
                        v8--;
                    } else {
                        if (v23_3.cellsUsed == v26_1) {
                            v32 |= ((long) (1 << v21_2));
                        }
                    }
                    v21_2++;
                }
                v30 = 1;
            }
            if ((v16 != 0) || (v34 != 1)) {
                int v31 = 0;
            } else {
                v31 = 1;
            }
            if ((v8 > 0) && ((v32 != 0) && ((v8 < (v34 - 1)) || ((v31 != 0) || (v24 > 1))))) {
                float v13 = ((float) Long.bitCount(v32));
                if (v31 == 0) {
                    if (((1 & v32) != 0) && (!((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) this.getChildAt(0).getLayoutParams()).preventEdgeOffset)) {
                        v13 -= 1056964608;
                    }
                    if (((((long) (1 << (v12 - 1))) & v32) != 0) && (!((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) this.getChildAt((v12 - 1)).getLayoutParams()).preventEdgeOffset)) {
                        v13 -= 1056964608;
                    }
                }
                int v15;
                if (v13 <= 0) {
                    v15 = 0;
                } else {
                    v15 = ((int) (((float) (v8 * v5)) / v13));
                }
                int v21_3 = 0;
                while (v21_3 < v12) {
                    if ((((long) (1 << v21_3)) & v32) != 0) {
                        android.view.View v11_2 = this.getChildAt(v21_3);
                        com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v23_9 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) v11_2.getLayoutParams());
                        if (!(v11_2 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuItemView)) {
                            if (!v23_9.isOverflowButton) {
                                if (v21_3 != 0) {
                                    v23_9.leftMargin = (v15 / 2);
                                }
                                if (v21_3 != (v12 - 1)) {
                                    v23_9.rightMargin = (v15 / 2);
                                }
                            } else {
                                v23_9.extraPixels = v15;
                                v23_9.expanded = 1;
                                v23_9.rightMargin = ((- v15) / 2);
                                v30 = 1;
                            }
                        } else {
                            v23_9.extraPixels = v15;
                            v23_9.expanded = 1;
                            if ((v21_3 == 0) && (!v23_9.preventEdgeOffset)) {
                                v23_9.leftMargin = ((- v15) / 2);
                            }
                            v30 = 1;
                        }
                    }
                    v21_3++;
                }
            }
            if (v30 != 0) {
                int v20 = android.view.View$MeasureSpec.makeMeasureSpec((v19 - v18), v17);
                int v21_4 = 0;
                while (v21_4 < v12) {
                    android.view.View v11_3 = this.getChildAt(v21_4);
                    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v23_11 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) v11_3.getLayoutParams());
                    if (v23_11.expanded) {
                        v11_3.measure(android.view.View$MeasureSpec.makeMeasureSpec(((v23_11.cellsUsed * v5) + v23_11.extraPixels), 1073741824), v20);
                    }
                    v21_4++;
                }
            }
            if (v17 != 1073741824) {
                v19 = v25;
            }
            this.setMeasuredDimension(v37_0, v19);
        } else {
            this.setMeasuredDimension(v37_0, 0);
        }
        return;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        if ((p2 == null) || (!(p2 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams))) {
            int v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p2)
    {
        return 0;
    }

    protected bridge synthetic android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()
    {
        return this.generateDefaultLayoutParams();
    }

    protected com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams()
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v0_1 = new com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams(-2, -2);
        v0_1.gravity = 16;
        return v0_1;
    }

    public bridge synthetic android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet p2)
    {
        return this.generateLayoutParams(p2);
    }

    protected bridge synthetic android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        return this.generateLayoutParams(p2);
    }

    public com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet p3)
    {
        return new com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams(this.getContext(), p3);
    }

    protected com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams p3)
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v0_0;
        if (!(p3 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams)) {
            v0_0 = this.generateDefaultLayoutParams();
        } else {
            v0_0 = new com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams(((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) p3));
            if (v0_0.gravity <= 0) {
                v0_0.gravity = 16;
            }
        }
        return v0_0;
    }

    public com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams()
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v0 = this.generateDefaultLayoutParams();
        v0.isOverflowButton = 1;
        return v0;
    }

    public int getWindowAnimations()
    {
        return 0;
    }

    protected boolean hasDividerBeforeChildAt(int p5)
    {
        com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView v1_1 = this.getChildAt((p5 - 1));
        com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView v0_1 = this.getChildAt(p5);
        int v2 = 0;
        if ((p5 < this.getChildCount()) && ((v1_1 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView))) {
            v2 = (0 | ((com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView) v1_1).needsDividerAfter());
        }
        if ((p5 > 0) && ((v0_1 instanceof com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView))) {
            v2 |= ((com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView) v0_1).needsDividerBefore();
        }
        return v2;
    }

    public void initialize(com.actionbarsherlock.internal.view.menu.MenuBuilder p1)
    {
        this.mMenu = p1;
        return;
    }

    public boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        return this.mMenu.performItemAction(p3, 0);
    }

    public boolean isExpandedFormat()
    {
        return this.mFormatItems;
    }

    public boolean isOverflowReserved()
    {
        return this.mReserveOverflow;
    }

    public void onConfigurationChanged(android.content.res.Configuration p3)
    {
        if (com.actionbarsherlock.internal.view.menu.ActionMenuView.IS_FROYO) {
            super.onConfigurationChanged(p3);
        }
        this.mPresenter.updateMenuView(0);
        if ((this.mPresenter != null) && (this.mPresenter.isOverflowMenuShowing())) {
            this.mPresenter.hideOverflowMenu();
            this.mPresenter.showOverflowMenu();
        }
        return;
    }

    public void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.mPresenter.dismissPopupMenus();
        return;
    }

    protected void onDraw(android.graphics.Canvas p2)
    {
        if ((com.actionbarsherlock.internal.view.menu.ActionMenuView.IS_FROYO) || (!this.mFirst)) {
            super.onDraw(p2);
        } else {
            this.mFirst = 0;
            this.requestLayout();
        }
        return;
    }

    protected void onLayout(boolean p30, int p31, int p32, int p33, int p34)
    {
        if (this.mFormatItems) {
            int v6 = this.getChildCount();
            int v14 = ((p32 + p34) / 2);
            int v16 = 0;
            int v15 = 0;
            int v26 = (((p33 - p31) - this.getPaddingRight()) - this.getPaddingLeft());
            int v8 = 0;
            int v10_1 = 0;
            while (v10_1 < v6) {
                android.view.View v24_2 = this.getChildAt(v10_1);
                if (v24_2.getVisibility() != 8) {
                    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v17_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) v24_2.getLayoutParams());
                    if (!v17_1.isOverflowButton) {
                        v26 -= ((v24_2.getMeasuredWidth() + v17_1.leftMargin) + v17_1.rightMargin);
                        v15++;
                    } else {
                        v16 = v24_2.getMeasuredWidth();
                        if (this.hasDividerBeforeChildAt(v10_1)) {
                            v16 += 0;
                        }
                        int v9_2 = v24_2.getMeasuredHeight();
                        int v18 = ((this.getWidth() - this.getPaddingRight()) - v17_1.rightMargin);
                        int v23_2 = (v14 - (v9_2 / 2));
                        v24_2.layout((v18 - v16), v23_2, v18, (v23_2 + v9_2));
                        v26 -= v16;
                        v8 = 1;
                    }
                }
                v10_1++;
            }
            if ((v6 != 1) || (v8 != 0)) {
                int v27_26;
                if (v8 == 0) {
                    v27_26 = 1;
                } else {
                    v27_26 = 0;
                }
                int v27_27;
                int v20 = (v15 - v27_26);
                if (v20 <= 0) {
                    v27_27 = 0;
                } else {
                    v27_27 = (v26 / v20);
                }
                int v21 = Math.max(0, v27_27);
                int v22_1 = this.getPaddingLeft();
                int v10_0 = 0;
                while (v10_0 < v6) {
                    android.view.View v24_0 = this.getChildAt(v10_0);
                    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams v12_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams) v24_0.getLayoutParams());
                    if ((v24_0.getVisibility() != 8) && (!v12_1.isOverflowButton)) {
                        int v22_0 = (v22_1 + v12_1.leftMargin);
                        int v25_0 = v24_0.getMeasuredWidth();
                        int v9_0 = v24_0.getMeasuredHeight();
                        int v23_0 = (v14 - (v9_0 / 2));
                        v24_0.layout(v22_0, v23_0, (v22_0 + v25_0), (v23_0 + v9_0));
                        v22_1 = (v22_0 + ((v12_1.rightMargin + v25_0) + v21));
                    }
                    v10_0++;
                }
            } else {
                android.view.View v24_1 = this.getChildAt(0);
                int v25_1 = v24_1.getMeasuredWidth();
                int v9_1 = v24_1.getMeasuredHeight();
                int v11_0 = (((p33 - p31) / 2) - (v25_1 / 2));
                int v23_1 = (v14 - (v9_1 / 2));
                v24_1.layout(v11_0, v23_1, (v11_0 + v25_1), (v23_1 + v9_1));
            }
        } else {
            super.onLayout(p30, p31, p32, p33, p34);
        }
        return;
    }

    protected void onMeasure(int p7, int p8)
    {
        com.actionbarsherlock.internal.view.menu.MenuBuilder v2_7;
        boolean v0 = this.mFormatItems;
        if (android.view.View$MeasureSpec.getMode(p7) != 1073741824) {
            v2_7 = 0;
        } else {
            v2_7 = 1;
        }
        this.mFormatItems = v2_7;
        if (v0 != this.mFormatItems) {
            this.mFormatItemsWidth = 0;
        }
        int v1 = android.view.View$MeasureSpec.getMode(p7);
        if ((this.mFormatItems) && ((this.mMenu != null) && (v1 != this.mFormatItemsWidth))) {
            this.mFormatItemsWidth = v1;
            this.mMenu.onItemsChanged(1);
        }
        if (!this.mFormatItems) {
            super.onMeasure(p7, p8);
        } else {
            this.onMeasureExactFormat(p7, p8);
        }
        return;
    }

    public void setOverflowReserved(boolean p1)
    {
        this.mReserveOverflow = p1;
        return;
    }

    public void setPresenter(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter p1)
    {
        this.mPresenter = p1;
        return;
    }

    public ListMenuItemView(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public ListMenuItemView(android.content.Context p4, android.util.AttributeSet p5, int p6)
    {
        super(p4, p5);
        super.mContext = p4;
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, com.actionbarsherlock.R$styleable.SherlockMenuView, p6, 0);
        super.mBackground = v0.getDrawable(4);
        super.mTextAppearance = v0.getResourceId(0, -1);
        super.mPreserveIconSpacing = v0.getBoolean(7, 0);
        super.mTextAppearanceContext = p4;
        v0.recycle();
        return;
    }

    private android.view.LayoutInflater getInflater()
    {
        if (this.mInflater == null) {
            this.mInflater = android.view.LayoutInflater.from(this.mContext);
        }
        return this.mInflater;
    }

    private void insertCheckBox()
    {
        this.mCheckBox = ((android.widget.CheckBox) this.getInflater().inflate(com.actionbarsherlock.R$layout.abs__list_menu_item_checkbox, this, 0));
        this.addView(this.mCheckBox);
        return;
    }

    private void insertIconView()
    {
        this.mIconView = ((android.widget.ImageView) this.getInflater().inflate(com.actionbarsherlock.R$layout.abs__list_menu_item_icon, this, 0));
        this.addView(this.mIconView, 0);
        return;
    }

    private void insertRadioButton()
    {
        this.mRadioButton = ((android.widget.RadioButton) this.getInflater().inflate(com.actionbarsherlock.R$layout.abs__list_menu_item_radio, this, 0));
        this.addView(this.mRadioButton);
        return;
    }

    public com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData()
    {
        return this.mItemData;
    }

    public void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl p3, int p4)
    {
        boolean v0_5;
        this.mItemData = p3;
        if (!p3.isVisible()) {
            v0_5 = 8;
        } else {
            v0_5 = 0;
        }
        this.setVisibility(v0_5);
        this.setTitle(p3.getTitleForItemView(this));
        this.setCheckable(p3.isCheckable());
        this.setShortcut(p3.shouldShowShortcut(), p3.getShortcut());
        this.setIcon(p3.getIcon());
        this.setEnabled(p3.isEnabled());
        return;
    }

    protected void onFinishInflate()
    {
        super.onFinishInflate();
        this.setBackgroundDrawable(this.mBackground);
        this.mTitleView = ((android.widget.TextView) this.findViewById(com.actionbarsherlock.R$id.abs__title));
        if (this.mTextAppearance != -1) {
            this.mTitleView.setTextAppearance(this.mTextAppearanceContext, this.mTextAppearance);
        }
        this.mShortcutView = ((android.widget.TextView) this.findViewById(com.actionbarsherlock.R$id.abs__shortcut));
        return;
    }

    protected void onMeasure(int p4, int p5)
    {
        if ((this.mIconView != null) && (this.mPreserveIconSpacing)) {
            android.view.ViewGroup$LayoutParams v1 = this.getLayoutParams();
            android.widget.LinearLayout$LayoutParams v0_1 = ((android.widget.LinearLayout$LayoutParams) this.mIconView.getLayoutParams());
            if ((v1.height > 0) && (v0_1.width <= 0)) {
                v0_1.width = v1.height;
            }
        }
        super.onMeasure(p4, p5);
        return;
    }

    public boolean prefersCondensedTitle()
    {
        return 0;
    }

    public void setCheckable(boolean p6)
    {
        if ((p6) || ((this.mRadioButton != null) || (this.mCheckBox != null))) {
            if (this.mRadioButton == null) {
                this.insertRadioButton();
            }
            if (this.mCheckBox == null) {
                this.insertCheckBox();
            }
            android.widget.RadioButton v2;
            android.widget.CheckBox v0;
            if (!this.mItemData.isExclusiveCheckable()) {
                v0 = this.mCheckBox;
                v2 = this.mRadioButton;
            } else {
                v0 = this.mRadioButton;
                v2 = this.mCheckBox;
            }
            if (!p6) {
                this.mCheckBox.setVisibility(8);
                this.mRadioButton.setVisibility(8);
            } else {
                int v1;
                v0.setChecked(this.mItemData.isChecked());
                if (!p6) {
                    v1 = 8;
                } else {
                    v1 = 0;
                }
                if (v0.getVisibility() != v1) {
                    v0.setVisibility(v1);
                }
                if (v2.getVisibility() != 8) {
                    v2.setVisibility(8);
                }
            }
        }
        return;
    }

    public void setChecked(boolean p3)
    {
        android.widget.CheckBox v0;
        if (!this.mItemData.isExclusiveCheckable()) {
            if (this.mCheckBox == null) {
                this.insertCheckBox();
            }
            v0 = this.mCheckBox;
        } else {
            if (this.mRadioButton == null) {
                this.insertRadioButton();
            }
            v0 = this.mRadioButton;
        }
        v0.setChecked(p3);
        return;
    }

    public void setForceShowIcon(boolean p1)
    {
        this.mForceShowIcon = p1;
        this.mPreserveIconSpacing = p1;
        return;
    }

    public void setIcon(android.graphics.drawable.Drawable p4)
    {
        if ((this.mItemData.shouldShowIcon()) || (this.mForceShowIcon)) {
            int v0 = 1;
        } else {
            v0 = 0;
        }
        if (((v0 != 0) || (this.mPreserveIconSpacing)) && ((this.mIconView != null) || ((p4 != 0) || (this.mPreserveIconSpacing)))) {
            if (this.mIconView == null) {
                this.insertIconView();
            }
            if ((p4 == 0) && (!this.mPreserveIconSpacing)) {
                this.mIconView.setVisibility(8);
            } else {
                if (v0 == 0) {
                    p4 = 0;
                }
                this.mIconView.setImageDrawable(p4);
                if (this.mIconView.getVisibility() != 0) {
                    this.mIconView.setVisibility(0);
                }
            }
        }
        return;
    }

    public void setShortcut(boolean p4, char p5)
    {
        if ((!p4) || (!this.mItemData.shouldShowShortcut())) {
            int v0 = 8;
        } else {
            v0 = 0;
        }
        if (v0 == 0) {
            this.mShortcutView.setText(this.mItemData.getShortcutLabel());
        }
        if (this.mShortcutView.getVisibility() != v0) {
            this.mShortcutView.setVisibility(v0);
        }
        return;
    }

    public void setTitle(CharSequence p3)
    {
        if (p3 == null) {
            if (this.mTitleView.getVisibility() != 8) {
                this.mTitleView.setVisibility(8);
            }
        } else {
            this.mTitleView.setText(p3);
            if (this.mTitleView.getVisibility() != 0) {
                this.mTitleView.setVisibility(0);
            }
        }
        return;
    }

    public boolean showsIcon()
    {
        return this.mForceShowIcon;
    }

    static MenuBuilder()
    {
        int[] v0_1 = new int[6];
        v0_1[0] = 1;
        v0_1[1] = 4;
        v0_1[2] = 5;
        v0_1[3] = 3;
        v0_1[4] = 2;
        com.actionbarsherlock.internal.view.menu.MenuBuilder.sCategoryToOrder = v0_1;
        return;
    }

    public MenuBuilder(android.content.Context p3)
    {
        this.mDefaultShowAsAction = 0;
        this.mPreventDispatchingItemsChanged = 0;
        this.mItemsChangedWhileDispatchPrevented = 0;
        this.mOptionalIconsVisible = 0;
        this.mIsClosing = 0;
        this.mTempShortcutItemList = new java.util.ArrayList();
        this.mPresenters = new java.util.concurrent.CopyOnWriteArrayList();
        this.mContext = p3;
        this.mResources = p3.getResources();
        this.mItems = new java.util.ArrayList();
        this.mVisibleItems = new java.util.ArrayList();
        this.mIsVisibleItemsStale = 1;
        this.mActionItems = new java.util.ArrayList();
        this.mNonActionItems = new java.util.ArrayList();
        this.mIsActionItemsStale = 1;
        this.setShortcutsVisibleInner(1);
        return;
    }

    private com.actionbarsherlock.view.MenuItem addInternal(int p9, int p10, int p11, CharSequence p12)
    {
        int v5 = com.actionbarsherlock.internal.view.menu.MenuBuilder.getOrdering(p11);
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v0_1 = new com.actionbarsherlock.internal.view.menu.MenuItemImpl(this, p9, p10, p11, v5, p12, this.mDefaultShowAsAction);
        if (this.mCurrentMenuInfo != null) {
            v0_1.setMenuInfo(this.mCurrentMenuInfo);
        }
        this.mItems.add(com.actionbarsherlock.internal.view.menu.MenuBuilder.findInsertIndex(this.mItems, v5), v0_1);
        this.onItemsChanged(1);
        return v0_1;
    }

    private void dispatchPresenterUpdate(boolean p5)
    {
        if (!this.mPresenters.isEmpty()) {
            this.stopDispatchingItemsChanged();
            java.util.Iterator v2_3 = this.mPresenters.iterator();
            while (v2_3.hasNext()) {
                ref.WeakReference v1_1 = ((ref.WeakReference) v2_3.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v0_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v1_1.get());
                if (v0_1 != null) {
                    v0_1.updateMenuView(p5);
                } else {
                    this.mPresenters.remove(v1_1);
                }
            }
            this.startDispatchingItemsChanged();
        }
        return;
    }

    private void dispatchRestoreInstanceState(android.os.Bundle p8)
    {
        android.util.SparseArray v3 = p8.getSparseParcelableArray("android:menu:presenters");
        if ((v3 != null) && (!this.mPresenters.isEmpty())) {
            java.util.Iterator v5_1 = this.mPresenters.iterator();
            while (v5_1.hasNext()) {
                ref.WeakReference v4_1 = ((ref.WeakReference) v5_1.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v2_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v4_1.get());
                if (v2_1 != null) {
                    int v0 = v2_1.getId();
                    if (v0 > 0) {
                        android.os.Parcelable v1_1 = ((android.os.Parcelable) v3.get(v0));
                        if (v1_1 != null) {
                            v2_1.onRestoreInstanceState(v1_1);
                        }
                    }
                } else {
                    this.mPresenters.remove(v4_1);
                }
            }
        }
        return;
    }

    private void dispatchSaveInstanceState(android.os.Bundle p8)
    {
        if (!this.mPresenters.isEmpty()) {
            android.util.SparseArray v2_1 = new android.util.SparseArray();
            String v5_4 = this.mPresenters.iterator();
            while (v5_4.hasNext()) {
                ref.WeakReference v3_1 = ((ref.WeakReference) v5_4.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v1_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v3_1.get());
                if (v1_1 != null) {
                    int v0 = v1_1.getId();
                    if (v0 > 0) {
                        android.os.Parcelable v4 = v1_1.onSaveInstanceState();
                        if (v4 != null) {
                            v2_1.put(v0, v4);
                        }
                    }
                } else {
                    this.mPresenters.remove(v3_1);
                }
            }
            p8.putSparseParcelableArray("android:menu:presenters", v2_1);
        }
        return;
    }

    private boolean dispatchSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p6)
    {
        boolean v2;
        if (!this.mPresenters.isEmpty()) {
            v2 = 0;
            java.util.Iterator v3_3 = this.mPresenters.iterator();
            while (v3_3.hasNext()) {
                ref.WeakReference v1_1 = ((ref.WeakReference) v3_3.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v0_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v1_1.get());
                if (v0_1 != null) {
                    if (!v2) {
                        v2 = v0_1.onSubMenuSelected(p6);
                    }
                } else {
                    this.mPresenters.remove(v1_1);
                }
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    private static int findInsertIndex(java.util.ArrayList p3, int p4)
    {
        int v0 = (p3.size() - 1);
        while (v0 >= 0) {
            if (((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p3.get(v0)).getOrdering() > p4) {
                v0--;
            } else {
                int v2_1 = (v0 + 1);
            }
            return v2_1;
        }
        v2_1 = 0;
        return v2_1;
    }

    private static int getOrdering(int p3)
    {
        int v0 = ((-65536 & p3) >> 16);
        if ((v0 >= 0) && (v0 < com.actionbarsherlock.internal.view.menu.MenuBuilder.sCategoryToOrder.length)) {
            return ((com.actionbarsherlock.internal.view.menu.MenuBuilder.sCategoryToOrder[v0] << 16) | (65535 & p3));
        } else {
            throw new IllegalArgumentException("order does not contain a valid category.");
        }
    }

    private void removeItemAtInt(int p2, boolean p3)
    {
        if ((p2 >= 0) && (p2 < this.mItems.size())) {
            this.mItems.remove(p2);
            if (p3) {
                this.onItemsChanged(1);
            }
        }
        return;
    }

    private void setHeaderInternal(int p4, CharSequence p5, int p6, android.graphics.drawable.Drawable p7, android.view.View p8)
    {
        android.content.res.Resources v0 = this.getResources();
        if (p8 == null) {
            if (p4 <= 0) {
                if (p5 != null) {
                    this.mHeaderTitle = p5;
                }
            } else {
                this.mHeaderTitle = v0.getText(p4);
            }
            if (p6 <= 0) {
                if (p7 != null) {
                    this.mHeaderIcon = p7;
                }
            } else {
                this.mHeaderIcon = v0.getDrawable(p6);
            }
            this.mHeaderView = 0;
        } else {
            this.mHeaderView = p8;
            this.mHeaderTitle = 0;
            this.mHeaderIcon = 0;
        }
        this.onItemsChanged(0);
        return;
    }

    private void setShortcutsVisibleInner(boolean p4)
    {
        int v0 = 1;
        if ((!p4) || ((this.mResources.getConfiguration().keyboard == 1) || (!this.mResources.getBoolean(com.actionbarsherlock.R$bool.abs__config_showMenuShortcutsWhenKeyboardPresent)))) {
            v0 = 0;
        }
        this.mShortcutsVisible = v0;
        return;
    }

    public com.actionbarsherlock.view.MenuItem add(int p3)
    {
        return this.addInternal(0, 0, 0, this.mResources.getString(p3));
    }

    public com.actionbarsherlock.view.MenuItem add(int p2, int p3, int p4, int p5)
    {
        return this.addInternal(p2, p3, p4, this.mResources.getString(p5));
    }

    public com.actionbarsherlock.view.MenuItem add(int p2, int p3, int p4, CharSequence p5)
    {
        return this.addInternal(p2, p3, p4, p5);
    }

    public com.actionbarsherlock.view.MenuItem add(CharSequence p2)
    {
        return this.addInternal(0, 0, 0, p2);
    }

    public int addIntentOptions(int p14, int p15, int p16, android.content.ComponentName p17, android.content.Intent[] p18, android.content.Intent p19, int p20, com.actionbarsherlock.view.MenuItem[] p21)
    {
        int v3;
        android.content.pm.PackageManager v7 = this.mContext.getPackageManager();
        java.util.List v6 = v7.queryIntentActivityOptions(p17, p18, p19, 0);
        if (v6 == null) {
            v3 = 0;
        } else {
            v3 = v6.size();
        }
        if ((p20 & 1) == 0) {
            this.removeGroup(p14);
        }
        int v4 = 0;
        while (v4 < v3) {
            int v10_4;
            android.content.pm.ResolveInfo v8_1 = ((android.content.pm.ResolveInfo) v6.get(v4));
            if (v8_1.specificIndex >= 0) {
                v10_4 = p18[v8_1.specificIndex];
            } else {
                v10_4 = p19;
            }
            android.content.Intent v9_1 = new android.content.Intent(v10_4);
            v9_1.setComponent(new android.content.ComponentName(v8_1.activityInfo.applicationInfo.packageName, v8_1.activityInfo.name));
            com.actionbarsherlock.view.MenuItem v5 = this.add(p14, p15, p16, v8_1.loadLabel(v7)).setIcon(v8_1.loadIcon(v7)).setIntent(v9_1);
            if ((p21 != null) && (v8_1.specificIndex >= 0)) {
                p21[v8_1.specificIndex] = v5;
            }
            v4++;
        }
        return v3;
    }

    public void addMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter p3)
    {
        this.mPresenters.add(new ref.WeakReference(p3));
        p3.initForMenu(this.mContext, this);
        this.mIsActionItemsStale = 1;
        return;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p3)
    {
        return this.addSubMenu(0, 0, 0, this.mResources.getString(p3));
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p2, int p3, int p4, int p5)
    {
        return this.addSubMenu(p2, p3, p4, this.mResources.getString(p5));
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p4, int p5, int p6, CharSequence p7)
    {
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v0_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.addInternal(p4, p5, p6, p7));
        com.actionbarsherlock.internal.view.menu.SubMenuBuilder v1_1 = new com.actionbarsherlock.internal.view.menu.SubMenuBuilder(this.mContext, this, v0_1);
        v0_1.setSubMenu(v1_1);
        return v1_1;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(CharSequence p2)
    {
        return this.addSubMenu(0, 0, 0, p2);
    }

    public boolean bindNativeOverflow(android.view.Menu p16, android.view.MenuItem$OnMenuItemClickListener p17, java.util.HashMap p18)
    {
        int v8;
        java.util.ArrayList v5 = this.getNonActionItems();
        if ((v5 != null) && (v5.size() != 0)) {
            v8 = 0;
            p16.clear();
            java.util.Iterator v9_1 = v5.iterator();
            while (v9_1.hasNext()) {
                com.actionbarsherlock.internal.view.menu.MenuItemImpl v4_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v9_1.next());
                if (v4_1.isVisible()) {
                    android.view.MenuItem v1;
                    v8 = 1;
                    if (!v4_1.hasSubMenu()) {
                        v1 = p16.add(v4_1.getGroupId(), v4_1.getItemId(), v4_1.getOrder(), v4_1.getTitle());
                    } else {
                        android.view.SubMenu v2 = p16.addSubMenu(v4_1.getGroupId(), v4_1.getItemId(), v4_1.getOrder(), v4_1.getTitle());
                        int v10_16 = ((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) v4_1.getSubMenu()).getVisibleItems().iterator();
                        while (v10_16.hasNext()) {
                            com.actionbarsherlock.internal.view.menu.MenuItemImpl v6_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v10_16.next());
                            android.view.MenuItem v3 = v2.add(v6_1.getGroupId(), v6_1.getItemId(), v6_1.getOrder(), v6_1.getTitle());
                            v3.setIcon(v6_1.getIcon());
                            v3.setOnMenuItemClickListener(p17);
                            v3.setEnabled(v6_1.isEnabled());
                            v3.setIntent(v6_1.getIntent());
                            v3.setNumericShortcut(v6_1.getNumericShortcut());
                            v3.setAlphabeticShortcut(v6_1.getAlphabeticShortcut());
                            v3.setTitleCondensed(v6_1.getTitleCondensed());
                            v3.setCheckable(v6_1.isCheckable());
                            v3.setChecked(v6_1.isChecked());
                            if (v6_1.isExclusiveCheckable()) {
                                v2.setGroupCheckable(v6_1.getGroupId(), 1, 1);
                            }
                            p18.put(v3, v6_1);
                        }
                        v1 = v2.getItem();
                    }
                    v1.setIcon(v4_1.getIcon());
                    v1.setOnMenuItemClickListener(p17);
                    v1.setEnabled(v4_1.isEnabled());
                    v1.setIntent(v4_1.getIntent());
                    v1.setNumericShortcut(v4_1.getNumericShortcut());
                    v1.setAlphabeticShortcut(v4_1.getAlphabeticShortcut());
                    v1.setTitleCondensed(v4_1.getTitleCondensed());
                    v1.setCheckable(v4_1.isCheckable());
                    v1.setChecked(v4_1.isChecked());
                    if (v4_1.isExclusiveCheckable()) {
                        p16.setGroupCheckable(v4_1.getGroupId(), 1, 1);
                    }
                    p18.put(v1, v4_1);
                }
            }
        } else {
            v8 = 0;
        }
        return v8;
    }

    public void changeMenuMode()
    {
        if (this.mCallback != null) {
            this.mCallback.onMenuModeChange(this);
        }
        return;
    }

    public void clear()
    {
        if (this.mExpandedItem != null) {
            this.collapseItemActionView(this.mExpandedItem);
        }
        this.mItems.clear();
        this.onItemsChanged(1);
        return;
    }

    public void clearAll()
    {
        this.mPreventDispatchingItemsChanged = 1;
        this.clear();
        this.clearHeader();
        this.mPreventDispatchingItemsChanged = 0;
        this.mItemsChangedWhileDispatchPrevented = 0;
        this.onItemsChanged(1);
        return;
    }

    public void clearHeader()
    {
        this.mHeaderIcon = 0;
        this.mHeaderTitle = 0;
        this.mHeaderView = 0;
        this.onItemsChanged(0);
        return;
    }

    public void close()
    {
        this.close(1);
        return;
    }

    final void close(boolean p5)
    {
        if (!this.mIsClosing) {
            this.mIsClosing = 1;
            int v2_4 = this.mPresenters.iterator();
            while (v2_4.hasNext()) {
                ref.WeakReference v1_1 = ((ref.WeakReference) v2_4.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v0_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v1_1.get());
                if (v0_1 != null) {
                    v0_1.onCloseMenu(this, p5);
                } else {
                    this.mPresenters.remove(v1_1);
                }
            }
            this.mIsClosing = 0;
        }
        return;
    }

    public boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl p6)
    {
        if ((!this.mPresenters.isEmpty()) && (this.mExpandedItem == p6)) {
            boolean v0 = 0;
            this.stopDispatchingItemsChanged();
            int v3_1 = this.mPresenters.iterator();
            while (v3_1.hasNext()) {
                ref.WeakReference v2_1 = ((ref.WeakReference) v3_1.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v1_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v2_1.get());
                if (v1_1 != null) {
                    v0 = v1_1.collapseItemActionView(this, p6);
                    if (v0) {
                        break;
                    }
                } else {
                    this.mPresenters.remove(v2_1);
                }
            }
            this.startDispatchingItemsChanged();
            if (v0) {
                this.mExpandedItem = 0;
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.view.MenuItem p3)
    {
        if ((this.mCallback == null) || (!this.mCallback.onMenuItemSelected(p2, p3))) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl p6)
    {
        boolean v0;
        if (!this.mPresenters.isEmpty()) {
            v0 = 0;
            this.stopDispatchingItemsChanged();
            java.util.Iterator v3_3 = this.mPresenters.iterator();
            while (v3_3.hasNext()) {
                ref.WeakReference v2_1 = ((ref.WeakReference) v3_3.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v1_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v2_1.get());
                if (v1_1 != null) {
                    v0 = v1_1.expandItemActionView(this, p6);
                    if (v0) {
                        break;
                    }
                } else {
                    this.mPresenters.remove(v2_1);
                }
            }
            this.startDispatchingItemsChanged();
            if (v0) {
                this.mExpandedItem = p6;
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    public int findGroupIndex(int p2)
    {
        return this.findGroupIndex(p2, 0);
    }

    public int findGroupIndex(int p5, int p6)
    {
        int v2 = this.size();
        if (p6 < 0) {
            p6 = 0;
        }
        int v0 = p6;
        while (v0 < v2) {
            if (((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v0)).getGroupId() != p5) {
                v0++;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    public com.actionbarsherlock.view.MenuItem findItem(int p6)
    {
        int v3 = this.size();
        int v0 = 0;
        while (v0 < v3) {
            com.actionbarsherlock.view.MenuItem v1_0 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v0));
            if (v1_0.getItemId() != p6) {
                if (v1_0.hasSubMenu()) {
                    com.actionbarsherlock.view.MenuItem v2 = v1_0.getSubMenu().findItem(p6);
                    if (v2 != null) {
                        v1_0 = v2;
                        return v1_0;
                    }
                }
                v0++;
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    public int findItemIndex(int p5)
    {
        int v2 = this.size();
        int v0 = 0;
        while (v0 < v2) {
            if (((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v0)).getItemId() != p5) {
                v0++;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    com.actionbarsherlock.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int p13, android.view.KeyEvent p14)
    {
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v8_0 = 0;
        java.util.ArrayList v2 = this.mTempShortcutItemList;
        v2.clear();
        this.findItemsWithShortcutForKey(v2, p13, p14);
        if (!v2.isEmpty()) {
            int v3 = p14.getMetaState();
            android.view.KeyCharacterMap$KeyData v4_1 = new android.view.KeyCharacterMap$KeyData();
            p14.getKeyData(v4_1);
            int v7 = v2.size();
            if (v7 != 1) {
                boolean v5 = this.isQwertyMode();
                int v0 = 0;
                while (v0 < v7) {
                    char v6;
                    com.actionbarsherlock.internal.view.menu.MenuItemImpl v1_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v2.get(v0));
                    if (!v5) {
                        v6 = v1_1.getNumericShortcut();
                    } else {
                        v6 = v1_1.getAlphabeticShortcut();
                    }
                    if (((v6 != v4_1.meta[0]) || ((v3 & 2) != 0)) && (((v6 != v4_1.meta[2]) || ((v3 & 2) == 0)) && ((!v5) || ((v6 != 8) || (p13 != 67))))) {
                        v0++;
                    } else {
                        v8_0 = v1_1;
                        break;
                    }
                }
            } else {
                v8_0 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v2.get(0));
            }
        }
        return v8_0;
    }

    void findItemsWithShortcutForKey(java.util.List p12, int p13, android.view.KeyEvent p14)
    {
        boolean v6 = this.isQwertyMode();
        int v4 = p14.getMetaState();
        android.view.KeyCharacterMap$KeyData v5_1 = new android.view.KeyCharacterMap$KeyData();
        if ((p14.getKeyData(v5_1)) || (p13 == 67)) {
            int v0 = this.mItems.size();
            int v1 = 0;
            while (v1 < v0) {
                com.actionbarsherlock.internal.view.menu.MenuItemImpl v3_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v1));
                if (v3_1.hasSubMenu()) {
                    ((com.actionbarsherlock.internal.view.menu.MenuBuilder) v3_1.getSubMenu()).findItemsWithShortcutForKey(p12, p13, p14);
                }
                char v7;
                if (!v6) {
                    v7 = v3_1.getNumericShortcut();
                } else {
                    v7 = v3_1.getAlphabeticShortcut();
                }
                if ((((v4 & 5) == 0) && ((v7 != 0) && ((v7 == v5_1.meta[0]) || ((v7 == v5_1.meta[2]) || ((v6) && ((v7 == 8) && (p13 == 67))))))) && (v3_1.isEnabled())) {
                    p12.add(v3_1);
                }
                v1++;
            }
        }
        return;
    }

    public void flagActionItems()
    {
        if (this.mIsActionItemsStale) {
            int v0 = 0;
            java.util.ArrayList v7_10 = this.mPresenters.iterator();
            while (v7_10.hasNext()) {
                ref.WeakReference v5_1 = ((ref.WeakReference) v7_10.next());
                com.actionbarsherlock.internal.view.menu.MenuPresenter v4_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v5_1.get());
                if (v4_1 != null) {
                    v0 |= v4_1.flagActionItems();
                } else {
                    this.mPresenters.remove(v5_1);
                }
            }
            if (v0 == 0) {
                this.mActionItems.clear();
                this.mNonActionItems.clear();
                this.mNonActionItems.addAll(this.getVisibleItems());
            } else {
                this.mActionItems.clear();
                this.mNonActionItems.clear();
                java.util.ArrayList v6 = this.getVisibleItems();
                int v3 = v6.size();
                int v1 = 0;
                while (v1 < v3) {
                    com.actionbarsherlock.internal.view.menu.MenuItemImpl v2_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v6.get(v1));
                    if (!v2_1.isActionButton()) {
                        this.mNonActionItems.add(v2_1);
                    } else {
                        this.mActionItems.add(v2_1);
                    }
                    v1++;
                }
            }
            this.mIsActionItemsStale = 0;
        }
        return;
    }

    java.util.ArrayList getActionItems()
    {
        this.flagActionItems();
        return this.mActionItems;
    }

    protected String getActionViewStatesKey()
    {
        return "android:menu:actionviewstates";
    }

    public android.content.Context getContext()
    {
        return this.mContext;
    }

    public com.actionbarsherlock.internal.view.menu.MenuItemImpl getExpandedItem()
    {
        return this.mExpandedItem;
    }

    public android.graphics.drawable.Drawable getHeaderIcon()
    {
        return this.mHeaderIcon;
    }

    public CharSequence getHeaderTitle()
    {
        return this.mHeaderTitle;
    }

    public android.view.View getHeaderView()
    {
        return this.mHeaderView;
    }

    public com.actionbarsherlock.view.MenuItem getItem(int p2)
    {
        return ((com.actionbarsherlock.view.MenuItem) this.mItems.get(p2));
    }

    java.util.ArrayList getNonActionItems()
    {
        this.flagActionItems();
        return this.mNonActionItems;
    }

    boolean getOptionalIconsVisible()
    {
        return this.mOptionalIconsVisible;
    }

    android.content.res.Resources getResources()
    {
        return this.mResources;
    }

    public com.actionbarsherlock.internal.view.menu.MenuBuilder getRootMenu()
    {
        return this;
    }

    java.util.ArrayList getVisibleItems()
    {
        java.util.ArrayList v3_6;
        if (this.mIsVisibleItemsStale) {
            this.mVisibleItems.clear();
            int v2 = this.mItems.size();
            int v0 = 0;
            while (v0 < v2) {
                com.actionbarsherlock.internal.view.menu.MenuItemImpl v1_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v0));
                if (v1_1.isVisible()) {
                    this.mVisibleItems.add(v1_1);
                }
                v0++;
            }
            this.mIsVisibleItemsStale = 0;
            this.mIsActionItemsStale = 1;
            v3_6 = this.mVisibleItems;
        } else {
            v3_6 = this.mVisibleItems;
        }
        return v3_6;
    }

    public boolean hasVisibleItems()
    {
        int v2 = this.size();
        int v0 = 0;
        while (v0 < v2) {
            if (!((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v0)).isVisible()) {
                v0++;
            } else {
                int v3_0 = 1;
            }
            return v3_0;
        }
        v3_0 = 0;
        return v3_0;
    }

    boolean isQwertyMode()
    {
        return this.mQwertyMode;
    }

    public boolean isShortcutKey(int p2, android.view.KeyEvent p3)
    {
        int v0_1;
        if (this.findItemWithShortcutForKey(p2, p3) == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean isShortcutsVisible()
    {
        return this.mShortcutsVisible;
    }

    void onItemActionRequestChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl p2)
    {
        this.mIsActionItemsStale = 1;
        this.onItemsChanged(1);
        return;
    }

    void onItemVisibleChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl p2)
    {
        this.mIsVisibleItemsStale = 1;
        this.onItemsChanged(1);
        return;
    }

    void onItemsChanged(boolean p3)
    {
        if (this.mPreventDispatchingItemsChanged) {
            this.mItemsChangedWhileDispatchPrevented = 1;
        } else {
            if (p3) {
                this.mIsVisibleItemsStale = 1;
                this.mIsActionItemsStale = 1;
            }
            this.dispatchPresenterUpdate(p3);
        }
        return;
    }

    public boolean performIdentifierAction(int p2, int p3)
    {
        return this.performItemAction(this.findItem(p2), p3);
    }

    public boolean performItemAction(com.actionbarsherlock.view.MenuItem p8, int p9)
    {
        if ((((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p8) != null) && (((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p8).isEnabled())) {
            int v0 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p8).invoke();
            if (!((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p8).hasCollapsibleActionView()) {
                if (!p8.hasSubMenu()) {
                    if ((p9 & 1) == 0) {
                        this.close(1);
                    }
                } else {
                    this.close(0);
                    com.actionbarsherlock.internal.view.menu.SubMenuBuilder v3_1 = ((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) p8.getSubMenu());
                    com.actionbarsherlock.view.ActionProvider v2 = p8.getActionProvider();
                    if ((v2 != null) && (v2.hasSubMenu())) {
                        v2.onPrepareSubMenu(v3_1);
                    }
                    v0 |= this.dispatchSubMenuSelected(v3_1);
                    if (v0 == 0) {
                        this.close(1);
                    }
                }
            } else {
                v0 |= ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p8).expandActionView();
                if (v0 != 0) {
                    this.close(1);
                }
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    public boolean performShortcut(int p4, android.view.KeyEvent p5, int p6)
    {
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v1 = this.findItemWithShortcutForKey(p4, p5);
        boolean v0 = 0;
        if (v1 != null) {
            v0 = this.performItemAction(v1, p6);
        }
        if ((p6 & 2) != 0) {
            this.close(1);
        }
        return v0;
    }

    public void removeGroup(int p6)
    {
        int v0 = this.findGroupIndex(p6);
        if (v0 >= 0) {
            int v1 = (this.mItems.size() - v0);
            int v3 = 0;
            while(true) {
                int v2_1 = (v3 + 1);
                if ((v3 >= v1) || (((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v0)).getGroupId() != p6)) {
                    break;
                }
                this.removeItemAtInt(v0, 0);
                v3 = v2_1;
            }
            this.onItemsChanged(1);
        }
        return;
    }

    public void removeItem(int p3)
    {
        this.removeItemAtInt(this.findItemIndex(p3), 1);
        return;
    }

    public void removeItemAt(int p2)
    {
        this.removeItemAtInt(p2, 1);
        return;
    }

    public void removeMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter p5)
    {
        java.util.Iterator v2_1 = this.mPresenters.iterator();
        while (v2_1.hasNext()) {
            ref.WeakReference v1_1 = ((ref.WeakReference) v2_1.next());
            com.actionbarsherlock.internal.view.menu.MenuPresenter v0_1 = ((com.actionbarsherlock.internal.view.menu.MenuPresenter) v1_1.get());
            if ((v0_1 == null) || (v0_1 == p5)) {
                this.mPresenters.remove(v1_1);
            }
        }
        return;
    }

    public void restoreActionViewStates(android.os.Bundle p11)
    {
        if (p11 != null) {
            android.util.SparseArray v7 = p11.getSparseParcelableArray(this.getActionViewStatesKey());
            int v3 = this.size();
            int v1 = 0;
            while (v1 < v3) {
                com.actionbarsherlock.view.MenuItem v2 = this.getItem(v1);
                android.view.View v6 = v2.getActionView();
                if ((v6 != null) && (v6.getId() != -1)) {
                    v6.restoreHierarchyState(v7);
                }
                if (v2.hasSubMenu()) {
                    ((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) v2.getSubMenu()).restoreActionViewStates(p11);
                }
                v1++;
            }
            int v0 = p11.getInt("android:menu:expandedactionview");
            if (v0 > 0) {
                com.actionbarsherlock.view.MenuItem v4 = this.findItem(v0);
                if (v4 != null) {
                    v4.expandActionView();
                }
            }
        }
        return;
    }

    public void restorePresenterStates(android.os.Bundle p1)
    {
        this.dispatchRestoreInstanceState(p1);
        return;
    }

    public void saveActionViewStates(android.os.Bundle p9)
    {
        android.util.SparseArray v5_0 = 0;
        int v2 = this.size();
        int v0 = 0;
        while (v0 < v2) {
            com.actionbarsherlock.view.MenuItem v1 = this.getItem(v0);
            android.view.View v4 = v1.getActionView();
            if ((v4 != null) && (v4.getId() != -1)) {
                if (v5_0 == null) {
                    v5_0 = new android.util.SparseArray();
                }
                v4.saveHierarchyState(v5_0);
                if (v1.isActionViewExpanded()) {
                    p9.putInt("android:menu:expandedactionview", v1.getItemId());
                }
            }
            if (v1.hasSubMenu()) {
                ((com.actionbarsherlock.internal.view.menu.SubMenuBuilder) v1.getSubMenu()).saveActionViewStates(p9);
            }
            v0++;
        }
        if (v5_0 != null) {
            p9.putSparseParcelableArray(this.getActionViewStatesKey(), v5_0);
        }
        return;
    }

    public void savePresenterStates(android.os.Bundle p1)
    {
        this.dispatchSaveInstanceState(p1);
        return;
    }

    public void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    public void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo p1)
    {
        this.mCurrentMenuInfo = p1;
        return;
    }

    public com.actionbarsherlock.internal.view.menu.MenuBuilder setDefaultShowAsAction(int p1)
    {
        this.mDefaultShowAsAction = p1;
        return this;
    }

    void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem p6)
    {
        int v2 = p6.getGroupId();
        int v0 = this.mItems.size();
        int v3 = 0;
        while (v3 < v0) {
            com.actionbarsherlock.internal.view.menu.MenuItemImpl v1_0 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v3));
            if ((v1_0.getGroupId() == v2) && ((v1_0.isExclusiveCheckable()) && (v1_0.isCheckable()))) {
                int v4_4;
                if (v1_0 != p6) {
                    v4_4 = 0;
                } else {
                    v4_4 = 1;
                }
                v1_0.setCheckedInt(v4_4);
            }
            v3++;
        }
        return;
    }

    public void setGroupCheckable(int p5, boolean p6, boolean p7)
    {
        int v0 = this.mItems.size();
        int v1 = 0;
        while (v1 < v0) {
            com.actionbarsherlock.internal.view.menu.MenuItemImpl v2_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v1));
            if (v2_1.getGroupId() == p5) {
                v2_1.setExclusiveCheckable(p7);
                v2_1.setCheckable(p6);
            }
            v1++;
        }
        return;
    }

    public void setGroupEnabled(int p5, boolean p6)
    {
        int v0 = this.mItems.size();
        int v1 = 0;
        while (v1 < v0) {
            com.actionbarsherlock.internal.view.menu.MenuItemImpl v2_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v1));
            if (v2_1.getGroupId() == p5) {
                v2_1.setEnabled(p6);
            }
            v1++;
        }
        return;
    }

    public void setGroupVisible(int p6, boolean p7)
    {
        int v0 = this.mItems.size();
        int v1 = 0;
        int v2 = 0;
        while (v2 < v0) {
            com.actionbarsherlock.internal.view.menu.MenuItemImpl v3_1 = ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) this.mItems.get(v2));
            if ((v3_1.getGroupId() == p6) && (v3_1.setVisibleInt(p7))) {
                v1 = 1;
            }
            v2++;
        }
        if (v1 != 0) {
            this.onItemsChanged(1);
        }
        return;
    }

    protected com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderIconInt(int p7)
    {
        this.setHeaderInternal(0, 0, p7, 0, 0);
        return this;
    }

    protected com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable p7)
    {
        this.setHeaderInternal(0, 0, 0, p7, 0);
        return this;
    }

    protected com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderTitleInt(int p7)
    {
        this.setHeaderInternal(p7, 0, 0, 0, 0);
        return this;
    }

    protected com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderTitleInt(CharSequence p7)
    {
        this.setHeaderInternal(0, p7, 0, 0, 0);
        return this;
    }

    protected com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View p7)
    {
        this.setHeaderInternal(0, 0, 0, 0, p7);
        return this;
    }

    void setOptionalIconsVisible(boolean p1)
    {
        this.mOptionalIconsVisible = p1;
        return;
    }

    public void setQwertyMode(boolean p2)
    {
        this.mQwertyMode = p2;
        this.onItemsChanged(0);
        return;
    }

    public void setShortcutsVisible(boolean p2)
    {
        if (this.mShortcutsVisible != p2) {
            this.setShortcutsVisibleInner(p2);
            this.onItemsChanged(0);
        }
        return;
    }

    public int size()
    {
        return this.mItems.size();
    }

    public void startDispatchingItemsChanged()
    {
        this.mPreventDispatchingItemsChanged = 0;
        if (this.mItemsChangedWhileDispatchPrevented) {
            this.mItemsChangedWhileDispatchPrevented = 0;
            this.onItemsChanged(1);
        }
        return;
    }

    public void stopDispatchingItemsChanged()
    {
        if (!this.mPreventDispatchingItemsChanged) {
            this.mPreventDispatchingItemsChanged = 1;
            this.mItemsChangedWhileDispatchPrevented = 0;
        }
        return;
    }

    MenuItemImpl(com.actionbarsherlock.internal.view.menu.MenuBuilder p3, int p4, int p5, int p6, int p7, CharSequence p8, int p9)
    {
        this.mIconResId = 0;
        this.mFlags = 16;
        this.mShowAsAction = 0;
        this.mIsActionViewExpanded = 0;
        this.mMenu = p3;
        this.mId = p5;
        this.mGroup = p4;
        this.mCategoryOrder = p6;
        this.mOrdering = p7;
        this.mTitle = p8;
        this.mShowAsAction = p9;
        return;
    }

    public void actionFormatChanged()
    {
        this.mMenu.onItemActionRequestChanged(this);
        return;
    }

    public boolean collapseActionView()
    {
        boolean v0_0 = 0;
        if ((this.mShowAsAction & 8) != 0) {
            if (this.mActionView != null) {
                if ((this.mOnActionExpandListener == null) || (this.mOnActionExpandListener.onMenuItemActionCollapse(this))) {
                    v0_0 = this.mMenu.collapseItemActionView(this);
                }
            } else {
                v0_0 = 1;
            }
        }
        return v0_0;
    }

    public boolean expandActionView()
    {
        boolean v0_0 = 0;
        if (((this.mShowAsAction & 8) != 0) && ((this.mActionView != null) && ((this.mOnActionExpandListener == null) || (this.mOnActionExpandListener.onMenuItemActionExpand(this))))) {
            v0_0 = this.mMenu.expandItemActionView(this);
        }
        return v0_0;
    }

    public com.actionbarsherlock.view.ActionProvider getActionProvider()
    {
        return this.mActionProvider;
    }

    public android.view.View getActionView()
    {
        int v0_1;
        if (this.mActionView == null) {
            if (this.mActionProvider == null) {
                v0_1 = 0;
            } else {
                this.mActionView = this.mActionProvider.onCreateActionView();
                v0_1 = this.mActionView;
            }
        } else {
            v0_1 = this.mActionView;
        }
        return v0_1;
    }

    public char getAlphabeticShortcut()
    {
        return this.mShortcutAlphabeticChar;
    }

    Runnable getCallback()
    {
        return this.mItemCallback;
    }

    public int getGroupId()
    {
        return this.mGroup;
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        int v0_1;
        if (this.mIconDrawable == null) {
            if (this.mIconResId == 0) {
                v0_1 = 0;
            } else {
                v0_1 = this.mMenu.getResources().getDrawable(this.mIconResId);
            }
        } else {
            v0_1 = this.mIconDrawable;
        }
        return v0_1;
    }

    public android.content.Intent getIntent()
    {
        return this.mIntent;
    }

    public int getItemId()
    {
        return this.mId;
    }

    public android.view.ContextMenu$ContextMenuInfo getMenuInfo()
    {
        return this.mMenuInfo;
    }

    public char getNumericShortcut()
    {
        return this.mShortcutNumericChar;
    }

    public int getOrder()
    {
        return this.mCategoryOrder;
    }

    public int getOrdering()
    {
        return this.mOrdering;
    }

    char getShortcut()
    {
        char v0_2;
        if (!this.mMenu.isQwertyMode()) {
            v0_2 = this.mShortcutNumericChar;
        } else {
            v0_2 = this.mShortcutAlphabeticChar;
        }
        return v0_2;
    }

    String getShortcutLabel()
    {
        String v2_1;
        char v1 = this.getShortcut();
        if (v1 != 0) {
            StringBuilder v0_1 = new StringBuilder(com.actionbarsherlock.internal.view.menu.MenuItemImpl.sPrependShortcutLabel);
            switch (v1) {
                case 8:
                    v0_1.append(com.actionbarsherlock.internal.view.menu.MenuItemImpl.sDeleteShortcutLabel);
                    break;
                case 10:
                    v0_1.append(com.actionbarsherlock.internal.view.menu.MenuItemImpl.sEnterShortcutLabel);
                    break;
                case 32:
                    v0_1.append(com.actionbarsherlock.internal.view.menu.MenuItemImpl.sSpaceShortcutLabel);
                    break;
                default:
                    v0_1.append(v1);
            }
            v2_1 = v0_1.toString();
        } else {
            v2_1 = "";
        }
        return v2_1;
    }

    public com.actionbarsherlock.view.SubMenu getSubMenu()
    {
        return this.mSubMenu;
    }

    public CharSequence getTitle()
    {
        return this.mTitle;
    }

    public CharSequence getTitleCondensed()
    {
        CharSequence v0_1;
        if (this.mTitleCondensed == null) {
            v0_1 = this.mTitle;
        } else {
            v0_1 = this.mTitleCondensed;
        }
        return v0_1;
    }

    CharSequence getTitleForItemView(com.actionbarsherlock.internal.view.menu.MenuView$ItemView p2)
    {
        if ((p2 == null) || (!p2.prefersCondensedTitle())) {
            CharSequence v0_1 = this.getTitle();
        } else {
            v0_1 = this.getTitleCondensed();
        }
        return v0_1;
    }

    public boolean hasCollapsibleActionView()
    {
        if (((this.mShowAsAction & 8) == 0) || (this.mActionView == null)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean hasSubMenu()
    {
        int v0_1;
        if (this.mSubMenu == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean invoke()
    {
        int v1 = 1;
        if (((this.mClickListener == null) || (!this.mClickListener.onMenuItemClick(this))) && (!this.mMenu.dispatchMenuItemSelected(this.mMenu.getRootMenu(), this))) {
            if (this.mItemCallback == null) {
                if (this.mIntent == null) {
                    if ((this.mActionProvider == null) || (!this.mActionProvider.onPerformDefaultAction())) {
                        v1 = 0;
                    }
                } else {
                    try {
                        this.mMenu.getContext().startActivity(this.mIntent);
                    } catch (android.content.ActivityNotFoundException v0) {
                        android.util.Log.e("MenuItemImpl", "Can\'t find activity to handle intent; ignoring", v0);
                    }
                }
            } else {
                this.mItemCallback.run();
            }
        }
        return v1;
    }

    public boolean isActionButton()
    {
        int v0_2;
        if ((this.mFlags & 32) != 32) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isActionViewExpanded()
    {
        return this.mIsActionViewExpanded;
    }

    public boolean isCheckable()
    {
        int v0 = 1;
        if ((this.mFlags & 1) != 1) {
            v0 = 0;
        }
        return v0;
    }

    public boolean isChecked()
    {
        int v0_2;
        if ((this.mFlags & 2) != 2) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isEnabled()
    {
        int v0_2;
        if ((this.mFlags & 16) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isExclusiveCheckable()
    {
        int v0_2;
        if ((this.mFlags & 4) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isVisible()
    {
        int v0_2;
        if ((this.mFlags & 8) != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean requestsActionButton()
    {
        int v0 = 1;
        if ((this.mShowAsAction & 1) != 1) {
            v0 = 0;
        }
        return v0;
    }

    public boolean requiresActionButton()
    {
        int v0_2;
        if ((this.mShowAsAction & 2) != 2) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public com.actionbarsherlock.view.MenuItem setActionProvider(com.actionbarsherlock.view.ActionProvider p3)
    {
        this.mActionView = 0;
        this.mActionProvider = p3;
        this.mMenu.onItemsChanged(1);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setActionView(int p5)
    {
        android.content.Context v0 = this.mMenu.getContext();
        this.setActionView(android.view.LayoutInflater.from(v0).inflate(p5, new android.widget.LinearLayout(v0), 0));
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setActionView(android.view.View p3)
    {
        this.mActionView = p3;
        this.mActionProvider = 0;
        if ((p3 != null) && ((p3.getId() == -1) && (this.mId > 0))) {
            p3.setId(this.mId);
        }
        this.mMenu.onItemActionRequestChanged(this);
        return this;
    }

    public void setActionViewExpanded(boolean p3)
    {
        this.mIsActionViewExpanded = p3;
        this.mMenu.onItemsChanged(0);
        return;
    }

    public com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char p3)
    {
        if (this.mShortcutAlphabeticChar != p3) {
            this.mShortcutAlphabeticChar = Character.toLowerCase(p3);
            this.mMenu.onItemsChanged(0);
        }
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setCallback(Runnable p1)
    {
        this.mItemCallback = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setCheckable(boolean p5)
    {
        com.actionbarsherlock.internal.view.menu.MenuBuilder v1_2;
        int v0 = this.mFlags;
        if (!p5) {
            v1_2 = 0;
        } else {
            v1_2 = 1;
        }
        this.mFlags = (v1_2 | (this.mFlags & -2));
        if (v0 != this.mFlags) {
            this.mMenu.onItemsChanged(0);
        }
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setChecked(boolean p2)
    {
        if ((this.mFlags & 4) == 0) {
            this.setCheckedInt(p2);
        } else {
            this.mMenu.setExclusiveItemChecked(this);
        }
        return this;
    }

    void setCheckedInt(boolean p5)
    {
        com.actionbarsherlock.internal.view.menu.MenuBuilder v1_2;
        int v0 = this.mFlags;
        if (!p5) {
            v1_2 = 0;
        } else {
            v1_2 = 2;
        }
        this.mFlags = (v1_2 | (this.mFlags & -3));
        if (v0 != this.mFlags) {
            this.mMenu.onItemsChanged(0);
        }
        return;
    }

    public com.actionbarsherlock.view.MenuItem setEnabled(boolean p3)
    {
        if (!p3) {
            this.mFlags = (this.mFlags & -17);
        } else {
            this.mFlags = (this.mFlags | 16);
        }
        this.mMenu.onItemsChanged(0);
        return this;
    }

    public void setExclusiveCheckable(boolean p3)
    {
        int v0_1;
        if (!p3) {
            v0_1 = 0;
        } else {
            v0_1 = 4;
        }
        this.mFlags = (v0_1 | (this.mFlags & -5));
        return;
    }

    public com.actionbarsherlock.view.MenuItem setIcon(int p3)
    {
        this.mIconDrawable = 0;
        this.mIconResId = p3;
        this.mMenu.onItemsChanged(0);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable p3)
    {
        this.mIconResId = 0;
        this.mIconDrawable = p3;
        this.mMenu.onItemsChanged(0);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent p1)
    {
        this.mIntent = p1;
        return this;
    }

    public void setIsActionButton(boolean p2)
    {
        if (!p2) {
            this.mFlags = (this.mFlags & -33);
        } else {
            this.mFlags = (this.mFlags | 32);
        }
        return;
    }

    void setMenuInfo(android.view.ContextMenu$ContextMenuInfo p1)
    {
        this.mMenuInfo = p1;
        return;
    }

    public com.actionbarsherlock.view.MenuItem setNumericShortcut(char p3)
    {
        if (this.mShortcutNumericChar != p3) {
            this.mShortcutNumericChar = p3;
            this.mMenu.onItemsChanged(0);
        }
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setOnActionExpandListener(com.actionbarsherlock.view.MenuItem$OnActionExpandListener p1)
    {
        this.mOnActionExpandListener = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener p1)
    {
        this.mClickListener = p1;
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setShortcut(char p3, char p4)
    {
        this.mShortcutNumericChar = p3;
        this.mShortcutAlphabeticChar = Character.toLowerCase(p4);
        this.mMenu.onItemsChanged(0);
        return this;
    }

    public void setShowAsAction(int p3)
    {
        switch ((p3 & 3)) {
            case 0:
            case 1:
            case 2:
                this.mShowAsAction = p3;
                this.mMenu.onItemActionRequestChanged(this);
                return;
            default:
                throw new IllegalArgumentException("SHOW_AS_ACTION_ALWAYS, SHOW_AS_ACTION_IF_ROOM, and SHOW_AS_ACTION_NEVER are mutually exclusive.");
        }
    }

    public com.actionbarsherlock.view.MenuItem setShowAsActionFlags(int p1)
    {
        this.setShowAsAction(p1);
        return this;
    }

    void setSubMenu(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p2)
    {
        this.mSubMenu = p2;
        p2.setHeaderTitle(this.getTitle());
        return;
    }

    public com.actionbarsherlock.view.MenuItem setTitle(int p2)
    {
        return this.setTitle(this.mMenu.getContext().getString(p2));
    }

    public com.actionbarsherlock.view.MenuItem setTitle(CharSequence p3)
    {
        this.mTitle = p3;
        this.mMenu.onItemsChanged(0);
        if (this.mSubMenu != null) {
            this.mSubMenu.setHeaderTitle(p3);
        }
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setTitleCondensed(CharSequence p3)
    {
        this.mTitleCondensed = p3;
        // Both branches of the condition point to the same code.
        // if (p3 != null) {
            this.mMenu.onItemsChanged(0);
            return this;
        // }
    }

    public com.actionbarsherlock.view.MenuItem setVisible(boolean p2)
    {
        if (this.setVisibleInt(p2)) {
            this.mMenu.onItemVisibleChanged(this);
        }
        return this;
    }

    boolean setVisibleInt(boolean p5)
    {
        int v1_1;
        int v2 = 0;
        int v0 = this.mFlags;
        if (!p5) {
            v1_1 = 8;
        } else {
            v1_1 = 0;
        }
        this.mFlags = (v1_1 | (this.mFlags & -9));
        if (v0 != this.mFlags) {
            v2 = 1;
        }
        return v2;
    }

    public boolean shouldShowIcon()
    {
        return this.mMenu.getOptionalIconsVisible();
    }

    boolean shouldShowShortcut()
    {
        if ((!this.mMenu.isShortcutsVisible()) || (this.getShortcut() == 0)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean showsTextAsAction()
    {
        int v0_2;
        if ((this.mShowAsAction & 4) != 4) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public String toString()
    {
        return this.mTitle.toString();
    }

    MenuItemWrapper$1(com.actionbarsherlock.internal.view.menu.MenuItemWrapper p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onMenuItemActionCollapse(android.view.MenuItem p3)
    {
        int v0_1;
        if (com.actionbarsherlock.internal.view.menu.MenuItemWrapper.access$0(this.this$0) == null) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.view.menu.MenuItemWrapper.access$0(this.this$0).onMenuItemActionCollapse(this.this$0);
        }
        return v0_1;
    }

    public boolean onMenuItemActionExpand(android.view.MenuItem p3)
    {
        int v0_1;
        if (com.actionbarsherlock.internal.view.menu.MenuItemWrapper.access$0(this.this$0) == null) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.internal.view.menu.MenuItemWrapper.access$0(this.this$0).onMenuItemActionExpand(this.this$0);
        }
        return v0_1;
    }

    public MenuItemWrapper(android.view.MenuItem p3)
    {
        this.mSubMenu = 0;
        this.mMenuItemClickListener = 0;
        this.mActionExpandListener = 0;
        this.mNativeActionExpandListener = 0;
        if (p3 != null) {
            this.mNativeItem = p3;
            return;
        } else {
            throw new IllegalStateException("Wrapped menu item cannot be null.");
        }
    }

    static synthetic com.actionbarsherlock.view.MenuItem$OnActionExpandListener access$0(com.actionbarsherlock.internal.view.menu.MenuItemWrapper p1)
    {
        return p1.mActionExpandListener;
    }

    public boolean collapseActionView()
    {
        return this.mNativeItem.collapseActionView();
    }

    public boolean expandActionView()
    {
        return this.mNativeItem.expandActionView();
    }

    public com.actionbarsherlock.view.ActionProvider getActionProvider()
    {
        com.actionbarsherlock.view.ActionProvider v1_2;
        com.actionbarsherlock.internal.view.ActionProviderWrapper v0_0 = this.mNativeItem.getActionProvider();
        if ((v0_0 == null) || (!(v0_0 instanceof com.actionbarsherlock.internal.view.ActionProviderWrapper))) {
            v1_2 = 0;
        } else {
            v1_2 = ((com.actionbarsherlock.internal.view.ActionProviderWrapper) v0_0).unwrap();
        }
        return v1_2;
    }

    public android.view.View getActionView()
    {
        return this.mNativeItem.getActionView();
    }

    public char getAlphabeticShortcut()
    {
        return this.mNativeItem.getAlphabeticShortcut();
    }

    public int getGroupId()
    {
        return this.mNativeItem.getGroupId();
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        return this.mNativeItem.getIcon();
    }

    public android.content.Intent getIntent()
    {
        return this.mNativeItem.getIntent();
    }

    public int getItemId()
    {
        return this.mNativeItem.getItemId();
    }

    public android.view.ContextMenu$ContextMenuInfo getMenuInfo()
    {
        return this.mNativeItem.getMenuInfo();
    }

    public char getNumericShortcut()
    {
        return this.mNativeItem.getNumericShortcut();
    }

    public int getOrder()
    {
        return this.mNativeItem.getOrder();
    }

    public com.actionbarsherlock.view.SubMenu getSubMenu()
    {
        if ((this.hasSubMenu()) && (this.mSubMenu == null)) {
            this.mSubMenu = new com.actionbarsherlock.internal.view.menu.SubMenuWrapper(this.mNativeItem.getSubMenu());
        }
        return this.mSubMenu;
    }

    public CharSequence getTitle()
    {
        return this.mNativeItem.getTitle();
    }

    public CharSequence getTitleCondensed()
    {
        return this.mNativeItem.getTitleCondensed();
    }

    public boolean hasSubMenu()
    {
        return this.mNativeItem.hasSubMenu();
    }

    public boolean isActionViewExpanded()
    {
        return this.mNativeItem.isActionViewExpanded();
    }

    public boolean isCheckable()
    {
        return this.mNativeItem.isCheckable();
    }

    public boolean isChecked()
    {
        return this.mNativeItem.isChecked();
    }

    public boolean isEnabled()
    {
        return this.mNativeItem.isEnabled();
    }

    public boolean isVisible()
    {
        return this.mNativeItem.isVisible();
    }

    public boolean onMenuItemClick(android.view.MenuItem p2)
    {
        int v0_1;
        if (this.mMenuItemClickListener == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mMenuItemClickListener.onMenuItemClick(this);
        }
        return v0_1;
    }

    public com.actionbarsherlock.view.MenuItem setActionProvider(com.actionbarsherlock.view.ActionProvider p3)
    {
        this.mNativeItem.setActionProvider(new com.actionbarsherlock.internal.view.ActionProviderWrapper(p3));
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setActionView(int p2)
    {
        this.mNativeItem.setActionView(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setActionView(android.view.View p2)
    {
        this.mNativeItem.setActionView(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char p2)
    {
        this.mNativeItem.setAlphabeticShortcut(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setCheckable(boolean p2)
    {
        this.mNativeItem.setCheckable(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setChecked(boolean p2)
    {
        this.mNativeItem.setChecked(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setEnabled(boolean p2)
    {
        this.mNativeItem.setEnabled(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIcon(int p2)
    {
        this.mNativeItem.setIcon(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mNativeItem.setIcon(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent p2)
    {
        this.mNativeItem.setIntent(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setNumericShortcut(char p2)
    {
        this.mNativeItem.setNumericShortcut(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setOnActionExpandListener(com.actionbarsherlock.view.MenuItem$OnActionExpandListener p3)
    {
        this.mActionExpandListener = p3;
        if (this.mNativeActionExpandListener == null) {
            this.mNativeActionExpandListener = new com.actionbarsherlock.internal.view.menu.MenuItemWrapper$1(this);
            this.mNativeItem.setOnActionExpandListener(this.mNativeActionExpandListener);
        }
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener p2)
    {
        this.mMenuItemClickListener = p2;
        this.mNativeItem.setOnMenuItemClickListener(this);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setShortcut(char p2, char p3)
    {
        this.mNativeItem.setShortcut(p2, p3);
        return this;
    }

    public void setShowAsAction(int p2)
    {
        this.mNativeItem.setShowAsAction(p2);
        return;
    }

    public com.actionbarsherlock.view.MenuItem setShowAsActionFlags(int p2)
    {
        this.mNativeItem.setShowAsActionFlags(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setTitle(int p2)
    {
        this.mNativeItem.setTitle(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setTitle(CharSequence p2)
    {
        this.mNativeItem.setTitle(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setTitleCondensed(CharSequence p2)
    {
        this.mNativeItem.setTitleCondensed(p2);
        return this;
    }

    public com.actionbarsherlock.view.MenuItem setVisible(boolean p2)
    {
        this.mNativeItem.setVisible(p2);
        return this;
    }

    private MenuPopupHelper$ExpandedIndexObserver(com.actionbarsherlock.internal.view.menu.MenuPopupHelper p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic MenuPopupHelper$ExpandedIndexObserver(com.actionbarsherlock.internal.view.menu.MenuPopupHelper p1, com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver p2)
    {
        this(p1);
        return;
    }

    public void onChanged()
    {
        com.actionbarsherlock.internal.view.menu.MenuPopupHelper.access$3(this.this$0).findExpandedIndex();
        return;
    }

    public MenuPopupHelper$MenuAdapter(com.actionbarsherlock.internal.view.menu.MenuPopupHelper p3, com.actionbarsherlock.internal.view.menu.MenuBuilder p4)
    {
        this.this$0 = p3;
        this.mExpandedIndex = -1;
        this.mAdapterMenu = p4;
        this.registerDataSetObserver(new com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver(p3, 0));
        this.findExpandedIndex();
        return;
    }

    static synthetic com.actionbarsherlock.internal.view.menu.MenuBuilder access$1(com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter p1)
    {
        return p1.mAdapterMenu;
    }

    void findExpandedIndex()
    {
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v1 = com.actionbarsherlock.internal.view.menu.MenuPopupHelper.access$2(this.this$0).getExpandedItem();
        if (v1 == null) {
            this.mExpandedIndex = -1;
        } else {
            java.util.ArrayList v4 = com.actionbarsherlock.internal.view.menu.MenuPopupHelper.access$2(this.this$0).getNonActionItems();
            int v0 = v4.size();
            int v2 = 0;
            while (v2 < v0) {
                if (((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v4.get(v2)) != v1) {
                    v2++;
                } else {
                    this.mExpandedIndex = v2;
                }
            }
        }
        return;
    }

    public int getCount()
    {
        java.util.ArrayList v0;
        if (!com.actionbarsherlock.internal.view.menu.MenuPopupHelper.access$0(this.this$0)) {
            v0 = this.mAdapterMenu.getVisibleItems();
        } else {
            v0 = this.mAdapterMenu.getNonActionItems();
        }
        int v1_3;
        if (this.mExpandedIndex >= 0) {
            v1_3 = (v0.size() - 1);
        } else {
            v1_3 = v0.size();
        }
        return v1_3;
    }

    public com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int p3)
    {
        java.util.ArrayList v0;
        if (!com.actionbarsherlock.internal.view.menu.MenuPopupHelper.access$0(this.this$0)) {
            v0 = this.mAdapterMenu.getVisibleItems();
        } else {
            v0 = this.mAdapterMenu.getNonActionItems();
        }
        if ((this.mExpandedIndex >= 0) && (p3 >= this.mExpandedIndex)) {
            p3++;
        }
        return ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) v0.get(p3));
    }

    public bridge synthetic Object getItem(int p2)
    {
        return this.getItem(p2);
    }

    public long getItemId(int p3)
    {
        return ((long) p3);
    }

    public android.view.View getView(int p5, android.view.View p6, android.view.ViewGroup p7)
    {
        if (p6 == null) {
            p6 = com.actionbarsherlock.internal.view.menu.MenuPopupHelper.access$1(this.this$0).inflate(com.actionbarsherlock.internal.view.menu.MenuPopupHelper.ITEM_LAYOUT, p7, 0);
        }
        if (this.this$0.mForceShowIcon) {
            ((com.actionbarsherlock.internal.view.menu.ListMenuItemView) p6).setForceShowIcon(1);
        }
        ((com.actionbarsherlock.internal.view.menu.MenuView$ItemView) p6).initialize(this.getItem(p5), 0);
        return p6;
    }

    public MenuWrapper(android.view.Menu p2)
    {
        this.mNativeMap = new java.util.WeakHashMap();
        this.mNativeMenu = p2;
        return;
    }

    private com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem p3)
    {
        com.actionbarsherlock.internal.view.menu.MenuItemWrapper v0_1 = new com.actionbarsherlock.internal.view.menu.MenuItemWrapper(p3);
        this.mNativeMap.put(p3, v0_1);
        return v0_1;
    }

    private com.actionbarsherlock.view.SubMenu addInternal(android.view.SubMenu p5)
    {
        com.actionbarsherlock.internal.view.menu.SubMenuWrapper v2_1 = new com.actionbarsherlock.internal.view.menu.SubMenuWrapper(p5);
        this.mNativeMap.put(p5.getItem(), v2_1.getItem());
        return v2_1;
    }

    public com.actionbarsherlock.view.MenuItem add(int p2)
    {
        return this.addInternal(this.mNativeMenu.add(p2));
    }

    public com.actionbarsherlock.view.MenuItem add(int p2, int p3, int p4, int p5)
    {
        return this.addInternal(this.mNativeMenu.add(p2, p3, p4, p5));
    }

    public com.actionbarsherlock.view.MenuItem add(int p2, int p3, int p4, CharSequence p5)
    {
        return this.addInternal(this.mNativeMenu.add(p2, p3, p4, p5));
    }

    public com.actionbarsherlock.view.MenuItem add(CharSequence p2)
    {
        return this.addInternal(this.mNativeMenu.add(p2));
    }

    public int addIntentOptions(int p14, int p15, int p16, android.content.ComponentName p17, android.content.Intent[] p18, android.content.Intent p19, int p20, com.actionbarsherlock.view.MenuItem[] p21)
    {
        android.view.MenuItem[] v9 = new android.view.MenuItem[p21.length];
        int v12 = this.mNativeMenu.addIntentOptions(p14, p15, p16, p17, p18, p19, p20, v9);
        int v10 = 0;
        int v11 = p21.length;
        while (v10 < v11) {
            p21[v10] = new com.actionbarsherlock.internal.view.menu.MenuItemWrapper(v9[v10]);
            v10++;
        }
        return v12;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p2)
    {
        return this.addInternal(this.mNativeMenu.addSubMenu(p2));
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p2, int p3, int p4, int p5)
    {
        return this.addInternal(this.mNativeMenu.addSubMenu(p2, p3, p4, p5));
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(int p2, int p3, int p4, CharSequence p5)
    {
        return this.addInternal(this.mNativeMenu.addSubMenu(p2, p3, p4, p5));
    }

    public com.actionbarsherlock.view.SubMenu addSubMenu(CharSequence p2)
    {
        return this.addInternal(this.mNativeMenu.addSubMenu(p2));
    }

    public void clear()
    {
        this.mNativeMap.clear();
        this.mNativeMenu.clear();
        return;
    }

    public void close()
    {
        this.mNativeMenu.close();
        return;
    }

    public com.actionbarsherlock.view.MenuItem findItem(int p3)
    {
        return this.findItem(this.mNativeMenu.findItem(p3));
    }

    public com.actionbarsherlock.view.MenuItem findItem(android.view.MenuItem p3)
    {
        com.actionbarsherlock.view.MenuItem v0_1;
        if (p3 != null) {
            v0_1 = ((com.actionbarsherlock.view.MenuItem) this.mNativeMap.get(p3));
            if (v0_1 == null) {
                v0_1 = this.addInternal(p3);
            }
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public com.actionbarsherlock.view.MenuItem getItem(int p3)
    {
        return this.findItem(this.mNativeMenu.getItem(p3));
    }

    public boolean hasVisibleItems()
    {
        return this.mNativeMenu.hasVisibleItems();
    }

    public boolean isShortcutKey(int p2, android.view.KeyEvent p3)
    {
        return this.mNativeMenu.isShortcutKey(p2, p3);
    }

    public boolean performIdentifierAction(int p2, int p3)
    {
        return this.mNativeMenu.performIdentifierAction(p2, p3);
    }

    public boolean performShortcut(int p2, android.view.KeyEvent p3, int p4)
    {
        return this.mNativeMenu.performShortcut(p2, p3, p4);
    }

    public void removeGroup(int p2)
    {
        this.mNativeMenu.removeGroup(p2);
        return;
    }

    public void removeItem(int p2)
    {
        this.mNativeMenu.removeItem(p2);
        return;
    }

    public void setGroupCheckable(int p2, boolean p3, boolean p4)
    {
        this.mNativeMenu.setGroupCheckable(p2, p3, p4);
        return;
    }

    public void setGroupEnabled(int p2, boolean p3)
    {
        this.mNativeMenu.setGroupEnabled(p2, p3);
        return;
    }

    public void setGroupVisible(int p2, boolean p3)
    {
        this.mNativeMenu.setGroupVisible(p2, p3);
        return;
    }

    public void setQwertyMode(boolean p2)
    {
        this.mNativeMenu.setQwertyMode(p2);
        return;
    }

    public int size()
    {
        return this.mNativeMenu.size();
    }

    public android.view.Menu unwrap()
    {
        return this.mNativeMenu;
    }

    public abstract void clearHeader();

    public abstract com.actionbarsherlock.view.MenuItem getItem();

    public abstract com.actionbarsherlock.view.SubMenu setHeaderIcon();

    public abstract com.actionbarsherlock.view.SubMenu setHeaderIcon();

    public abstract com.actionbarsherlock.view.SubMenu setHeaderTitle();

    public abstract com.actionbarsherlock.view.SubMenu setHeaderTitle();

    public abstract com.actionbarsherlock.view.SubMenu setHeaderView();

    public abstract com.actionbarsherlock.view.SubMenu setIcon();

    public abstract com.actionbarsherlock.view.SubMenu setIcon();

    public SubMenuBuilder(android.content.Context p1, com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.internal.view.menu.MenuItemImpl p3)
    {
        super(p1);
        super.mParentMenu = p2;
        super.mItem = p3;
        return;
    }

    public boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl p2)
    {
        return this.mParentMenu.collapseItemActionView(p2);
    }

    boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder p2, com.actionbarsherlock.view.MenuItem p3)
    {
        if ((super.dispatchMenuItemSelected(p2, p3)) || (this.mParentMenu.dispatchMenuItemSelected(p2, p3))) {
            int v0_3 = 1;
        } else {
            v0_3 = 0;
        }
        return v0_3;
    }

    public boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl p2)
    {
        return this.mParentMenu.expandItemActionView(p2);
    }

    public String getActionViewStatesKey()
    {
        int v0;
        if (this.mItem == null) {
            v0 = 0;
        } else {
            v0 = this.mItem.getItemId();
        }
        String v1_4;
        if (v0 != 0) {
            v1_4 = new StringBuilder(String.valueOf(super.getActionViewStatesKey())).append(":").append(v0).toString();
        } else {
            v1_4 = 0;
        }
        return v1_4;
    }

    public com.actionbarsherlock.view.MenuItem getItem()
    {
        return this.mItem;
    }

    public com.actionbarsherlock.view.Menu getParentMenu()
    {
        return this.mParentMenu;
    }

    public com.actionbarsherlock.internal.view.menu.MenuBuilder getRootMenu()
    {
        return this.mParentMenu;
    }

    public boolean isQwertyMode()
    {
        return this.mParentMenu.isQwertyMode();
    }

    public boolean isShortcutsVisible()
    {
        return this.mParentMenu.isShortcutsVisible();
    }

    public void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback p2)
    {
        this.mParentMenu.setCallback(p2);
        return;
    }

    public com.actionbarsherlock.view.SubMenu setHeaderIcon(int p2)
    {
        return ((com.actionbarsherlock.view.SubMenu) super.setHeaderIconInt(p2));
    }

    public com.actionbarsherlock.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable p2)
    {
        return ((com.actionbarsherlock.view.SubMenu) super.setHeaderIconInt(p2));
    }

    public com.actionbarsherlock.view.SubMenu setHeaderTitle(int p2)
    {
        return ((com.actionbarsherlock.view.SubMenu) super.setHeaderTitleInt(p2));
    }

    public com.actionbarsherlock.view.SubMenu setHeaderTitle(CharSequence p2)
    {
        return ((com.actionbarsherlock.view.SubMenu) super.setHeaderTitleInt(p2));
    }

    public com.actionbarsherlock.view.SubMenu setHeaderView(android.view.View p2)
    {
        return ((com.actionbarsherlock.view.SubMenu) super.setHeaderViewInt(p2));
    }

    public com.actionbarsherlock.view.SubMenu setIcon(int p2)
    {
        this.mItem.setIcon(p2);
        return this;
    }

    public com.actionbarsherlock.view.SubMenu setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mItem.setIcon(p2);
        return this;
    }

    public void setQwertyMode(boolean p2)
    {
        this.mParentMenu.setQwertyMode(p2);
        return;
    }

    public void setShortcutsVisible(boolean p2)
    {
        this.mParentMenu.setShortcutsVisible(p2);
        return;
    }

    public SubMenuWrapper(android.view.SubMenu p2)
    {
        super(p2);
        super.mItem = 0;
        super.mNativeSubMenu = p2;
        return;
    }

    public void clearHeader()
    {
        this.mNativeSubMenu.clearHeader();
        return;
    }

    public com.actionbarsherlock.view.MenuItem getItem()
    {
        if (this.mItem == null) {
            this.mItem = new com.actionbarsherlock.internal.view.menu.MenuItemWrapper(this.mNativeSubMenu.getItem());
        }
        return this.mItem;
    }

    public com.actionbarsherlock.view.SubMenu setHeaderIcon(int p2)
    {
        this.mNativeSubMenu.setHeaderIcon(p2);
        return this;
    }

    public com.actionbarsherlock.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable p2)
    {
        this.mNativeSubMenu.setHeaderIcon(p2);
        return this;
    }

    public com.actionbarsherlock.view.SubMenu setHeaderTitle(int p2)
    {
        this.mNativeSubMenu.setHeaderTitle(p2);
        return this;
    }

    public com.actionbarsherlock.view.SubMenu setHeaderTitle(CharSequence p2)
    {
        this.mNativeSubMenu.setHeaderTitle(p2);
        return this;
    }

    public com.actionbarsherlock.view.SubMenu setHeaderView(android.view.View p2)
    {
        this.mNativeSubMenu.setHeaderView(p2);
        return this;
    }

    public com.actionbarsherlock.view.SubMenu setIcon(int p2)
    {
        this.mNativeSubMenu.setIcon(p2);
        return this;
    }

    public com.actionbarsherlock.view.SubMenu setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mNativeSubMenu.setIcon(p2);
        return this;
    }

    AbsActionBarView$1(com.actionbarsherlock.internal.widget.AbsActionBarView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.showOverflowMenu();
        return;
    }

    protected AbsActionBarView$VisibilityAnimListener(com.actionbarsherlock.internal.widget.AbsActionBarView p2)
    {
        this.this$0 = p2;
        this.mCanceled = 0;
        return;
    }

    public void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p2)
    {
        this.mCanceled = 1;
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p3)
    {
        if (!this.mCanceled) {
            this.this$0.mVisibilityAnim = 0;
            this.this$0.setVisibility(this.mFinalVisibility);
            if ((this.this$0.mSplitView != null) && (this.this$0.mMenuView != null)) {
                this.this$0.mMenuView.setVisibility(this.mFinalVisibility);
            }
        }
        return;
    }

    public void onAnimationRepeat(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p3)
    {
        this.this$0.setVisibility(0);
        this.this$0.mVisibilityAnim = p3;
        this.mCanceled = 0;
        return;
    }

    public com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(int p1)
    {
        this.mFinalVisibility = p1;
        return this;
    }

    static AbsActionBarView()
    {
        com.actionbarsherlock.internal.widget.AbsActionBarView.sAlphaInterpolator = new android.view.animation.DecelerateInterpolator();
        return;
    }

    public AbsActionBarView(android.content.Context p2)
    {
        super(p2);
        super.mVisAnimListener = new com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener(super);
        super.mContext = p2;
        return;
    }

    public AbsActionBarView(android.content.Context p2, android.util.AttributeSet p3)
    {
        super(p2, p3);
        super.mVisAnimListener = new com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener(super);
        super.mContext = p2;
        return;
    }

    public AbsActionBarView(android.content.Context p2, android.util.AttributeSet p3, int p4)
    {
        super(p2, p3, p4);
        super.mVisAnimListener = new com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener(super);
        super.mContext = p2;
        return;
    }

    public void animateToVisibility(int p12)
    {
        if (this.mVisibilityAnim != null) {
            this.mVisibilityAnim.cancel();
        }
        if (p12 != 0) {
            String v4_0 = new float[1];
            v4_0[0] = 0;
            com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_0 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(this, "alpha", v4_0);
            v0_0.setDuration(200);
            v0_0.setInterpolator(com.actionbarsherlock.internal.widget.AbsActionBarView.sAlphaInterpolator);
            if ((this.mSplitView == null) || (this.mMenuView == null)) {
                v0_0.addListener(this.mVisAnimListener.withFinalVisibility(p12));
                v0_0.start();
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet v1_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet();
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v3_6 = this.mMenuView;
                float[] v5_1 = new float[1];
                v5_1[0] = 0;
                com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_0 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v3_6, "alpha", v5_1);
                v2_0.setDuration(200);
                v1_1.addListener(this.mVisAnimListener.withFinalVisibility(p12));
                v1_1.play(v0_0).with(v2_0);
                v1_1.start();
            }
        } else {
            if (this.getVisibility() != 0) {
                this.setAlpha(0);
                if ((this.mSplitView != null) && (this.mMenuView != null)) {
                    this.mMenuView.setAlpha(0);
                }
            }
            String v4_2 = new float[1];
            v4_2[0] = 1065353216;
            com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_1 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(this, "alpha", v4_2);
            v0_1.setDuration(200);
            v0_1.setInterpolator(com.actionbarsherlock.internal.widget.AbsActionBarView.sAlphaInterpolator);
            if ((this.mSplitView == null) || (this.mMenuView == null)) {
                v0_1.addListener(this.mVisAnimListener.withFinalVisibility(p12));
                v0_1.start();
            } else {
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet v1_3 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet();
                com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v3_22 = this.mMenuView;
                float[] v5_2 = new float[1];
                v5_2[0] = 1065353216;
                com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2_1 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v3_22, "alpha", v5_2);
                v2_1.setDuration(200);
                v1_3.addListener(this.mVisAnimListener.withFinalVisibility(p12));
                v1_3.play(v0_1).with(v2_1);
                v1_3.start();
            }
        }
        return;
    }

    public void dismissPopupMenus()
    {
        if (this.mActionMenuPresenter != null) {
            this.mActionMenuPresenter.dismissPopupMenus();
        }
        return;
    }

    public int getAnimatedVisibility()
    {
        int v0_1;
        if (this.mVisibilityAnim == null) {
            v0_1 = this.getVisibility();
        } else {
            v0_1 = this.mVisAnimListener.mFinalVisibility;
        }
        return v0_1;
    }

    public int getContentHeight()
    {
        return this.mContentHeight;
    }

    public boolean hideOverflowMenu()
    {
        int v0_1;
        if (this.mActionMenuPresenter == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mActionMenuPresenter.hideOverflowMenu();
        }
        return v0_1;
    }

    public boolean isOverflowMenuShowing()
    {
        int v0_1;
        if (this.mActionMenuPresenter == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mActionMenuPresenter.isOverflowMenuShowing();
        }
        return v0_1;
    }

    public boolean isOverflowReserved()
    {
        if ((this.mActionMenuPresenter == null) || (!this.mActionMenuPresenter.isOverflowReserved())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    protected int measureChildView(android.view.View p2, int p3, int p4, int p5)
    {
        p2.measure(android.view.View$MeasureSpec.makeMeasureSpec(p3, -2147483648), p4);
        return Math.max(0, ((p3 - p2.getMeasuredWidth()) - p5));
    }

    public void onConfigurationChanged(android.content.res.Configuration p7)
    {
        if (android.os.Build$VERSION.SDK_INT < 8) {
            if (this.mMenuView != null) {
                this.mMenuView.onConfigurationChanged(p7);
            }
        } else {
            super.onConfigurationChanged(p7);
        }
        android.content.res.TypedArray v0 = this.getContext().obtainStyledAttributes(0, com.actionbarsherlock.R$styleable.SherlockActionBar, com.actionbarsherlock.R$attr.actionBarStyle, 0);
        this.setContentHeight(v0.getLayoutDimension(4, 0));
        v0.recycle();
        if (this.mSplitWhenNarrow) {
            this.setSplitActionBar(com.actionbarsherlock.internal.ResourcesCompat.getResources_getBoolean(this.getContext(), com.actionbarsherlock.R$bool.abs__split_action_bar_is_narrow));
        }
        if (this.mActionMenuPresenter != null) {
            this.mActionMenuPresenter.onConfigurationChanged(p7);
        }
        return;
    }

    protected int positionChild(android.view.View p6, int p7, int p8, int p9)
    {
        int v2 = p6.getMeasuredWidth();
        int v0 = p6.getMeasuredHeight();
        int v1 = (p8 + ((p9 - v0) / 2));
        p6.layout(p7, v1, (p7 + v2), (v1 + v0));
        return v2;
    }

    protected int positionChildInverse(android.view.View p6, int p7, int p8, int p9)
    {
        int v2 = p6.getMeasuredWidth();
        int v0 = p6.getMeasuredHeight();
        int v1 = (p8 + ((p9 - v0) / 2));
        p6.layout((p7 - v2), v1, p7, (v1 + v0));
        return v2;
    }

    public void postShowOverflowMenu()
    {
        this.post(new com.actionbarsherlock.internal.widget.AbsActionBarView$1(this));
        return;
    }

    public void setContentHeight(int p1)
    {
        this.mContentHeight = p1;
        this.requestLayout();
        return;
    }

    public void setSplitActionBar(boolean p1)
    {
        this.mSplitActionBar = p1;
        return;
    }

    public void setSplitView(com.actionbarsherlock.internal.widget.ActionBarContainer p1)
    {
        this.mSplitView = p1;
        return;
    }

    public void setSplitWhenNarrow(boolean p1)
    {
        this.mSplitWhenNarrow = p1;
        return;
    }

    public void setVisibility(int p2)
    {
        if (this.mVisibilityAnim != null) {
            this.mVisibilityAnim.end();
        }
        super.setVisibility(p2);
        return;
    }

    public boolean showOverflowMenu()
    {
        int v0_1;
        if (this.mActionMenuPresenter == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mActionMenuPresenter.showOverflowMenu();
        }
        return v0_1;
    }

    public ActionBarContainer(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public ActionBarContainer(android.content.Context p6, android.util.AttributeSet p7)
    {
        int v1 = 1;
        super(p6, p7);
        super.setBackgroundDrawable(0);
        android.content.res.TypedArray v0 = p6.obtainStyledAttributes(p7, com.actionbarsherlock.R$styleable.SherlockActionBar);
        super.mBackground = v0.getDrawable(2);
        super.mStackedBackground = v0.getDrawable(12);
        if (super.getId() == com.actionbarsherlock.R$id.abs__split_action_bar) {
            super.mIsSplit = 1;
            super.mSplitBackground = v0.getDrawable(3);
        }
        v0.recycle();
        if (!super.mIsSplit) {
            if ((super.mBackground != null) || (super.mStackedBackground != null)) {
                v1 = 0;
            }
        } else {
            if (super.mSplitBackground != null) {
                v1 = 0;
            }
        }
        super.setWillNotDraw(v1);
        return;
    }

    public android.view.View getTabContainer()
    {
        return this.mTabContainer;
    }

    public void onDraw(android.graphics.Canvas p2)
    {
        if ((this.getWidth() != 0) && (this.getHeight() != 0)) {
            if (!this.mIsSplit) {
                if (this.mBackground != null) {
                    this.mBackground.draw(p2);
                }
                if ((this.mStackedBackground != null) && (this.mIsStacked)) {
                    this.mStackedBackground.draw(p2);
                }
            } else {
                if (this.mSplitBackground != null) {
                    this.mSplitBackground.draw(p2);
                }
            }
        }
        return;
    }

    public void onFinishInflate()
    {
        super.onFinishInflate();
        this.mActionBarView = ((com.actionbarsherlock.internal.widget.ActionBarView) this.findViewById(com.actionbarsherlock.R$id.abs__action_bar));
        return;
    }

    public boolean onHoverEvent(android.view.MotionEvent p2)
    {
        super.onHoverEvent(p2);
        return 1;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent p2)
    {
        if ((this.mIsTransitioning) || (super.onInterceptTouchEvent(p2))) {
            int v0_2 = 1;
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public void onLayout(boolean p14, int p15, int p16, int p17, int p18)
    {
        int v4;
        this = super.onLayout(p14, p15, p16, p17, p18);
        if ((this.mTabContainer == null) || (this.mTabContainer.getVisibility() == 8)) {
            v4 = 0;
        } else {
            v4 = 1;
        }
        if ((this.mTabContainer != null) && (this.mTabContainer.getVisibility() != 8)) {
            int v2 = this.getMeasuredHeight();
            int v7 = this.mTabContainer.getMeasuredHeight();
            if ((this.mActionBarView.getDisplayOptions() & 2) != 0) {
                this.mTabContainer.layout(p15, (v2 - v7), p17, v2);
            } else {
                int v3 = this.getChildCount();
                int v5 = 0;
                while (v5 < v3) {
                    android.view.View v1 = this.getChildAt(v5);
                    if ((v1 != this.mTabContainer) && (!this.mActionBarView.isCollapsed())) {
                        v1.offsetTopAndBottom(v7);
                    }
                    v5++;
                }
                this.mTabContainer.layout(p15, 0, p17, v7);
            }
        }
        int v6 = 0;
        if (!this.mIsSplit) {
            if (this.mBackground != null) {
                this.mBackground.setBounds(this.mActionBarView.getLeft(), this.mActionBarView.getTop(), this.mActionBarView.getRight(), this.mActionBarView.getBottom());
                v6 = 1;
            }
            if ((v4 == 0) || (this.mStackedBackground == null)) {
                android.graphics.drawable.Drawable v8_19 = 0;
            } else {
                v8_19 = 1;
            }
            this.mIsStacked = v8_19;
            if (v8_19 != null) {
                this.mStackedBackground.setBounds(this.mTabContainer.getLeft(), this.mTabContainer.getTop(), this.mTabContainer.getRight(), this.mTabContainer.getBottom());
                v6 = 1;
            }
        } else {
            if (this.mSplitBackground != null) {
                this.mSplitBackground.setBounds(0, 0, this.getMeasuredWidth(), this.getMeasuredHeight());
                v6 = 1;
            }
        }
        if (v6 != 0) {
            this.invalidate();
        }
        return;
    }

    public void onMeasure(int p7, int p8)
    {
        super.onMeasure(p7, p8);
        if (this.mActionBarView != null) {
            int v0;
            android.widget.FrameLayout$LayoutParams v1_1 = ((android.widget.FrameLayout$LayoutParams) this.mActionBarView.getLayoutParams());
            if (!this.mActionBarView.isCollapsed()) {
                v0 = ((this.mActionBarView.getMeasuredHeight() + v1_1.topMargin) + v1_1.bottomMargin);
            } else {
                v0 = 0;
            }
            if ((this.mTabContainer != null) && ((this.mTabContainer.getVisibility() != 8) && (android.view.View$MeasureSpec.getMode(p8) == -2147483648))) {
                this.setMeasuredDimension(this.getMeasuredWidth(), Math.min((this.mTabContainer.getMeasuredHeight() + v0), android.view.View$MeasureSpec.getSize(p8)));
            }
        }
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p2)
    {
        super.onTouchEvent(p2);
        return 1;
    }

    public void setPrimaryBackground(android.graphics.drawable.Drawable p1)
    {
        this.mBackground = p1;
        this.invalidate();
        return;
    }

    public void setSplitBackground(android.graphics.drawable.Drawable p1)
    {
        this.mSplitBackground = p1;
        this.invalidate();
        return;
    }

    public void setStackedBackground(android.graphics.drawable.Drawable p1)
    {
        this.mStackedBackground = p1;
        this.invalidate();
        return;
    }

    public void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p3)
    {
        if (this.mTabContainer != null) {
            this.removeView(this.mTabContainer);
        }
        this.mTabContainer = p3;
        if (p3 != null) {
            this.addView(p3);
            android.view.ViewGroup$LayoutParams v0 = p3.getLayoutParams();
            v0.width = -1;
            v0.height = -2;
            p3.setAllowCollapse(0);
        }
        return;
    }

    public void setTransitioning(boolean p2)
    {
        int v0;
        this.mIsTransitioning = p2;
        if (!p2) {
            v0 = 262144;
        } else {
            v0 = 393216;
        }
        this.setDescendantFocusability(v0);
        return;
    }

    ActionBarContextView$1(com.actionbarsherlock.internal.widget.ActionBarContextView p1, com.actionbarsherlock.view.ActionMode p2)
    {
        this.this$0 = p1;
        this.val$mode = p2;
        return;
    }

    public void onClick(android.view.View p2)
    {
        this.val$mode.finish();
        return;
    }

    public ActionBarContextView(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public ActionBarContextView(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, com.actionbarsherlock.R$attr.actionModeStyle);
        return;
    }

    public ActionBarContextView(android.content.Context p4, android.util.AttributeSet p5, int p6)
    {
        super(p4, p5, p6);
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, com.actionbarsherlock.R$styleable.SherlockActionMode, p6, 0);
        super.setBackgroundDrawable(v0.getDrawable(2));
        super.mTitleStyleRes = v0.getResourceId(0, 0);
        super.mSubtitleStyleRes = v0.getResourceId(1, 0);
        super.mContentHeight = v0.getLayoutDimension(4, 0);
        super.mSplitBackground = v0.getDrawable(3);
        v0.recycle();
        return;
    }

    private void finishAnimation()
    {
        com.actionbarsherlock.internal.nineoldandroids.animation.Animator v0 = this.mCurrentAnimation;
        if (v0 != null) {
            this.mCurrentAnimation = 0;
            v0.end();
        }
        return;
    }

    private void initTitle()
    {
        int v6 = 8;
        if (this.mTitleLayout == null) {
            android.view.LayoutInflater.from(this.getContext()).inflate(com.actionbarsherlock.R$layout.abs__action_bar_title_item, this);
            this.mTitleLayout = ((android.widget.LinearLayout) this.getChildAt((this.getChildCount() - 1)));
            this.mTitleView = ((android.widget.TextView) this.mTitleLayout.findViewById(com.actionbarsherlock.R$id.abs__action_bar_title));
            this.mSubtitleView = ((android.widget.TextView) this.mTitleLayout.findViewById(com.actionbarsherlock.R$id.abs__action_bar_subtitle));
            if (this.mTitleStyleRes != 0) {
                this.mTitleView.setTextAppearance(this.mContext, this.mTitleStyleRes);
            }
            if (this.mSubtitleStyleRes != 0) {
                this.mSubtitleView.setTextAppearance(this.mContext, this.mSubtitleStyleRes);
            }
        }
        int v1;
        this.mTitleView.setText(this.mTitle);
        this.mSubtitleView.setText(this.mSubtitle);
        if (!android.text.TextUtils.isEmpty(this.mTitle)) {
            v1 = 1;
        } else {
            v1 = 0;
        }
        int v0;
        if (!android.text.TextUtils.isEmpty(this.mSubtitle)) {
            v0 = 1;
        } else {
            v0 = 0;
        }
        android.widget.LinearLayout v3_22;
        if (v0 == 0) {
            v3_22 = 8;
        } else {
            v3_22 = 0;
        }
        this.mSubtitleView.setVisibility(v3_22);
        if ((v1 != 0) || (v0 != 0)) {
            v6 = 0;
        }
        this.mTitleLayout.setVisibility(v6);
        if (this.mTitleLayout.getParent() == null) {
            this.addView(this.mTitleLayout);
        }
        return;
    }

    private com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()
    {
        this.mClose.setTranslationX(((float) ((- this.mClose.getWidth()) - ((android.view.ViewGroup$MarginLayoutParams) this.mClose.getLayoutParams()).leftMargin)));
        long v8_3 = this.mClose;
        float[] v10_1 = new float[1];
        v10_1[0] = 0;
        com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v8_3, "translationX", v10_1);
        v2.setDuration(200);
        v2.addListener(this);
        v2.setInterpolator(new android.view.animation.DecelerateInterpolator());
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet v7_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet();
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v1 = v7_1.play(v2);
        if (this.mMenuView != null) {
            int v4 = this.mMenuView.getChildCount();
            if (v4 > 0) {
                int v5 = (v4 - 1);
                int v6 = 0;
                while (v5 >= 0) {
                    com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy v3 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(this.mMenuView.getChildAt(v5));
                    v3.setScaleY(0);
                    float[] v9_3 = new float[2];
                    v9_3 = {0, 1065353216};
                    com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v3, "scaleY", v9_3);
                    v0.setDuration(100);
                    v0.setStartDelay(((long) (v6 * 70)));
                    v1.with(v0);
                    v5--;
                    v6++;
                }
            }
        }
        return v7_1;
    }

    private com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()
    {
        float[] v8_0 = this.mClose;
        float[] v10 = new float[1];
        v10[0] = ((float) ((- this.mClose.getWidth()) - ((android.view.ViewGroup$MarginLayoutParams) this.mClose.getLayoutParams()).leftMargin));
        com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v2 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v8_0, "translationX", v10);
        v2.setDuration(200);
        v2.addListener(this);
        v2.setInterpolator(new android.view.animation.DecelerateInterpolator());
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet v6_1 = new com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet();
        com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder v1 = v6_1.play(v2);
        if ((this.mMenuView != null) && (this.mMenuView.getChildCount() > 0)) {
            int v5 = 0;
            while (v5 < 0) {
                com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy v3 = com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy.wrap(this.mMenuView.getChildAt(v5));
                v3.setScaleY(0);
                float[] v8_1 = new float[1];
                v8_1[0] = 0;
                com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(v3, "scaleY", v8_1);
                v0.setDuration(100);
                v0.setStartDelay(((long) (v5 * 70)));
                v1.with(v0);
                v5++;
            }
        }
        return v6_1;
    }

    public void closeMode()
    {
        if (this.mAnimationMode != 2) {
            if (this.mClose != null) {
                this.finishAnimation();
                this.mAnimationMode = 2;
                this.mCurrentAnimation = this.makeOutAnimation();
                this.mCurrentAnimation.start();
            } else {
                this.killMode();
            }
        }
        return;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        return new android.view.ViewGroup$MarginLayoutParams(-1, -2);
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet p3)
    {
        return new android.view.ViewGroup$MarginLayoutParams(this.getContext(), p3);
    }

    public CharSequence getSubtitle()
    {
        return this.mSubtitle;
    }

    public CharSequence getTitle()
    {
        return this.mTitle;
    }

    public boolean hideOverflowMenu()
    {
        int v0_1;
        if (this.mActionMenuPresenter == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mActionMenuPresenter.hideOverflowMenu();
        }
        return v0_1;
    }

    public void initForMode(com.actionbarsherlock.view.ActionMode p9)
    {
        if (this.mClose != null) {
            if (this.mClose.getParent() == null) {
                this.addView(this.mClose);
            }
        } else {
            this.mClose = ((com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout) android.view.LayoutInflater.from(this.mContext).inflate(com.actionbarsherlock.R$layout.abs__action_mode_close_item, this, 0));
            this.addView(this.mClose);
        }
        this.mClose.findViewById(com.actionbarsherlock.R$id.abs__action_mode_close_button).setOnClickListener(new com.actionbarsherlock.internal.widget.ActionBarContextView$1(this, p9));
        com.actionbarsherlock.internal.view.menu.MenuBuilder v3_1 = ((com.actionbarsherlock.internal.view.menu.MenuBuilder) p9.getMenu());
        if (this.mActionMenuPresenter != null) {
            this.mActionMenuPresenter.dismissPopupMenus();
        }
        this.mActionMenuPresenter = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter(this.mContext);
        this.mActionMenuPresenter.setReserveOverflow(1);
        android.view.ViewGroup$LayoutParams v2_1 = new android.view.ViewGroup$LayoutParams(-2, -1);
        if (this.mSplitActionBar) {
            this.mActionMenuPresenter.setWidthLimit(this.getContext().getResources().getDisplayMetrics().widthPixels, 1);
            this.mActionMenuPresenter.setItemLimit(2147483647);
            v2_1.width = -1;
            v2_1.height = this.mContentHeight;
            v3_1.addMenuPresenter(this.mActionMenuPresenter);
            this.mMenuView = ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mActionMenuPresenter.getMenuView(this));
            this.mMenuView.setBackgroundDrawable(this.mSplitBackground);
            this.mSplitView.addView(this.mMenuView, v2_1);
        } else {
            v3_1.addMenuPresenter(this.mActionMenuPresenter);
            this.mMenuView = ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mActionMenuPresenter.getMenuView(this));
            this.mMenuView.setBackgroundDrawable(0);
            this.addView(this.mMenuView, v2_1);
        }
        this.mAnimateInOnLayout = 1;
        return;
    }

    public boolean isOverflowMenuShowing()
    {
        int v0_1;
        if (this.mActionMenuPresenter == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mActionMenuPresenter.isOverflowMenuShowing();
        }
        return v0_1;
    }

    public void killMode()
    {
        this.finishAnimation();
        this.removeAllViews();
        if (this.mSplitView != null) {
            this.mSplitView.removeView(this.mMenuView);
        }
        this.mCustomView = 0;
        this.mMenuView = 0;
        this.mAnimateInOnLayout = 0;
        return;
    }

    public void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p3)
    {
        if (this.mAnimationMode == 2) {
            this.killMode();
        }
        this.mAnimationMode = 0;
        return;
    }

    public void onAnimationRepeat(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        if (this.mActionMenuPresenter != null) {
            this.mActionMenuPresenter.hideOverflowMenu();
            this.mActionMenuPresenter.hideSubMenus();
        }
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent p3)
    {
        if (p3.getEventType() == 32) {
            p3.setClassName(this.getClass().getName());
            p3.setPackageName(this.getContext().getPackageName());
            p3.setContentDescription(this.mTitle);
        }
        return;
    }

    protected void onLayout(boolean p7, int p8, int p9, int p10, int p11)
    {
        int v2_0 = this.getPaddingLeft();
        int v3 = this.getPaddingTop();
        int v0 = (((p11 - p9) - this.getPaddingTop()) - this.getPaddingBottom());
        if ((this.mClose != null) && (this.mClose.getVisibility() != 8)) {
            android.view.ViewGroup$MarginLayoutParams v1_1 = ((android.view.ViewGroup$MarginLayoutParams) this.mClose.getLayoutParams());
            int v2_1 = (v2_0 + v1_1.leftMargin);
            v2_0 = ((v2_1 + this.positionChild(this.mClose, v2_1, v3, v0)) + v1_1.rightMargin);
            if (this.mAnimateInOnLayout) {
                this.mAnimationMode = 1;
                this.mCurrentAnimation = this.makeInAnimation();
                this.mCurrentAnimation.start();
                this.mAnimateInOnLayout = 0;
            }
        }
        if ((this.mTitleLayout != null) && (this.mCustomView == null)) {
            v2_0 += this.positionChild(this.mTitleLayout, v2_0, v3, v0);
        }
        if (this.mCustomView != null) {
            this.positionChild(this.mCustomView, v2_0, v3, v0);
        }
        int v4_21 = (p10 - p8);
        int v5_1 = this.getPaddingRight();
        if (this.mMenuView != null) {
            this.positionChildInverse(this.mMenuView, (v4_21 - v5_1), v3, v0);
        }
        return;
    }

    protected void onMeasure(int p25, int p26)
    {
        if (android.view.View$MeasureSpec.getMode(p25) == 1073741824) {
            if (android.view.View$MeasureSpec.getMode(p26) != 0) {
                int v15;
                int v5 = android.view.View$MeasureSpec.getSize(p25);
                if (this.mContentHeight <= 0) {
                    v15 = android.view.View$MeasureSpec.getSize(p26);
                } else {
                    v15 = this.mContentHeight;
                }
                int v19 = (this.getPaddingTop() + this.getPaddingBottom());
                int v3_0 = ((v5 - this.getPaddingLeft()) - this.getPaddingRight());
                int v11 = (v15 - v19);
                int v4 = android.view.View$MeasureSpec.makeMeasureSpec(v11, -2147483648);
                if (this.mClose != null) {
                    android.view.ViewGroup$LayoutParams v14_2 = ((android.view.ViewGroup$MarginLayoutParams) this.mClose.getLayoutParams());
                    v3_0 = (this.measureChildView(this.mClose, v3_0, v4, 0) - (v14_2.leftMargin + v14_2.rightMargin));
                }
                if ((this.mMenuView != null) && (this.mMenuView.getParent() == this)) {
                    v3_0 = this.measureChildView(this.mMenuView, v3_0, v4, 0);
                }
                if ((this.mTitleLayout != null) && (this.mCustomView == null)) {
                    v3_0 = this.measureChildView(this.mTitleLayout, v3_0, v4, 0);
                }
                if (this.mCustomView != null) {
                    int v10;
                    android.view.ViewGroup$LayoutParams v14_0 = this.mCustomView.getLayoutParams();
                    if (v14_0.width == -2) {
                        v10 = -2147483648;
                    } else {
                        v10 = 1073741824;
                    }
                    int v9;
                    if (v14_0.width < 0) {
                        v9 = v3_0;
                    } else {
                        v9 = Math.min(v14_0.width, v3_0);
                    }
                    int v8;
                    if (v14_0.height == -2) {
                        v8 = -2147483648;
                    } else {
                        v8 = 1073741824;
                    }
                    int v7;
                    if (v14_0.height < 0) {
                        v7 = v11;
                    } else {
                        v7 = Math.min(v14_0.height, v11);
                    }
                    this.mCustomView.measure(android.view.View$MeasureSpec.makeMeasureSpec(v9, v10), android.view.View$MeasureSpec.makeMeasureSpec(v7, v8));
                }
                if (this.mContentHeight > 0) {
                    this.setMeasuredDimension(v5, v15);
                } else {
                    int v16 = 0;
                    int v6 = this.getChildCount();
                    int v13 = 0;
                    while (v13 < v6) {
                        int v17 = (this.getChildAt(v13).getMeasuredHeight() + v19);
                        if (v17 > v16) {
                            v16 = v17;
                        }
                        v13++;
                    }
                    this.setMeasuredDimension(v5, v16);
                }
                return;
            } else {
                throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" can only be used ").append("with android:layout_height=\"wrap_content\"").toString());
            }
        } else {
            throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" can only be used ").append("with android:layout_width=\"match_parent\" (or fill_parent)").toString());
        }
    }

    public void setContentHeight(int p1)
    {
        this.mContentHeight = p1;
        return;
    }

    public void setCustomView(android.view.View p2)
    {
        if (this.mCustomView != null) {
            this.removeView(this.mCustomView);
        }
        this.mCustomView = p2;
        if (this.mTitleLayout != null) {
            this.removeView(this.mTitleLayout);
            this.mTitleLayout = 0;
        }
        if (p2 != null) {
            this.addView(p2);
        }
        this.requestLayout();
        return;
    }

    public void setSplitActionBar(boolean p7)
    {
        if (this.mSplitActionBar != p7) {
            if (this.mActionMenuPresenter != null) {
                android.view.ViewGroup$LayoutParams v0_1 = new android.view.ViewGroup$LayoutParams(-2, -1);
                if (p7) {
                    this.mActionMenuPresenter.setWidthLimit(this.getContext().getResources().getDisplayMetrics().widthPixels, 1);
                    this.mActionMenuPresenter.setItemLimit(2147483647);
                    v0_1.width = -1;
                    v0_1.height = this.mContentHeight;
                    this.mMenuView = ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mActionMenuPresenter.getMenuView(this));
                    this.mMenuView.setBackgroundDrawable(this.mSplitBackground);
                    android.view.ViewGroup v1_1 = ((android.view.ViewGroup) this.mMenuView.getParent());
                    if (v1_1 != null) {
                        v1_1.removeView(this.mMenuView);
                    }
                    this.mSplitView.addView(this.mMenuView, v0_1);
                } else {
                    this.mMenuView = ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mActionMenuPresenter.getMenuView(this));
                    this.mMenuView.setBackgroundDrawable(0);
                    android.view.ViewGroup v1_3 = ((android.view.ViewGroup) this.mMenuView.getParent());
                    if (v1_3 != null) {
                        v1_3.removeView(this.mMenuView);
                    }
                    this.addView(this.mMenuView, v0_1);
                }
            }
            super.setSplitActionBar(p7);
        }
        return;
    }

    public void setSubtitle(CharSequence p1)
    {
        this.mSubtitle = p1;
        this.initTitle();
        return;
    }

    public void setTitle(CharSequence p1)
    {
        this.mTitle = p1;
        this.initTitle();
        return;
    }

    public boolean shouldDelayChildPressedState()
    {
        return 0;
    }

    public boolean showOverflowMenu()
    {
        int v0_1;
        if (this.mActionMenuPresenter == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mActionMenuPresenter.showOverflowMenu();
        }
        return v0_1;
    }

    public abstract void onItemSelected();

    public abstract void onNothingSelected();

    ActionBarView$1(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemSelected(com.actionbarsherlock.internal.widget.IcsAdapterView p2, android.view.View p3, int p4, long p5)
    {
        if (com.actionbarsherlock.internal.widget.ActionBarView.access$0(this.this$0) != null) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$0(this.this$0).onNavigationItemSelected(p4, p5);
        }
        return;
    }

    public void onNothingSelected(com.actionbarsherlock.internal.widget.IcsAdapterView p1)
    {
        return;
    }

    ActionBarView$2(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v0 = com.actionbarsherlock.internal.widget.ActionBarView.access$1(this.this$0).mCurrentExpandedItem;
        if (v0 != null) {
            v0.collapseActionView();
        }
        return;
    }

    ActionBarView$3(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p4)
    {
        this.this$0.mWindowCallback.onMenuItemSelected(0, com.actionbarsherlock.internal.widget.ActionBarView.access$2(this.this$0));
        return;
    }

    private ActionBarView$ExpandedActionViewMenuPresenter(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ActionBarView$ExpandedActionViewMenuPresenter(com.actionbarsherlock.internal.widget.ActionBarView p1, com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter p2)
    {
        this(p1);
        return;
    }

    public boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder p6, com.actionbarsherlock.internal.view.menu.MenuItemImpl p7)
    {
        if ((this.this$0.mExpandedActionView instanceof com.actionbarsherlock.view.CollapsibleActionView)) {
            ((com.actionbarsherlock.view.CollapsibleActionView) this.this$0.mExpandedActionView).onActionViewCollapsed();
        }
        this.this$0.removeView(this.this$0.mExpandedActionView);
        this.this$0.removeView(com.actionbarsherlock.internal.widget.ActionBarView.access$3(this.this$0));
        this.this$0.mExpandedActionView = 0;
        if ((com.actionbarsherlock.internal.widget.ActionBarView.access$10(this.this$0) & 2) != 0) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$5(this.this$0).setVisibility(0);
        }
        if ((com.actionbarsherlock.internal.widget.ActionBarView.access$10(this.this$0) & 8) != 0) {
            if (com.actionbarsherlock.internal.widget.ActionBarView.access$6(this.this$0) != null) {
                com.actionbarsherlock.internal.widget.ActionBarView.access$6(this.this$0).setVisibility(0);
            } else {
                com.actionbarsherlock.internal.widget.ActionBarView.access$11(this.this$0);
            }
        }
        if ((com.actionbarsherlock.internal.widget.ActionBarView.access$7(this.this$0) != null) && (com.actionbarsherlock.internal.widget.ActionBarView.access$12(this.this$0) == 2)) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$7(this.this$0).setVisibility(0);
        }
        if ((com.actionbarsherlock.internal.widget.ActionBarView.access$8(this.this$0) != null) && (com.actionbarsherlock.internal.widget.ActionBarView.access$12(this.this$0) == 1)) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$8(this.this$0).setVisibility(0);
        }
        if ((com.actionbarsherlock.internal.widget.ActionBarView.access$9(this.this$0) != null) && ((com.actionbarsherlock.internal.widget.ActionBarView.access$10(this.this$0) & 16) != 0)) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$9(this.this$0).setVisibility(0);
        }
        com.actionbarsherlock.internal.widget.ActionBarView.access$3(this.this$0).setIcon(0);
        this.mCurrentExpandedItem = 0;
        this.this$0.requestLayout();
        p7.setActionViewExpanded(0);
        return 1;
    }

    public boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder p5, com.actionbarsherlock.internal.view.menu.MenuItemImpl p6)
    {
        this.this$0.mExpandedActionView = p6.getActionView();
        com.actionbarsherlock.internal.widget.ActionBarView.access$3(this.this$0).setIcon(com.actionbarsherlock.internal.widget.ActionBarView.access$4(this.this$0).getConstantState().newDrawable());
        this.mCurrentExpandedItem = p6;
        if (this.this$0.mExpandedActionView.getParent() != this.this$0) {
            this.this$0.addView(this.this$0.mExpandedActionView);
        }
        if (com.actionbarsherlock.internal.widget.ActionBarView.access$3(this.this$0).getParent() != this.this$0) {
            this.this$0.addView(com.actionbarsherlock.internal.widget.ActionBarView.access$3(this.this$0));
        }
        com.actionbarsherlock.internal.widget.ActionBarView.access$5(this.this$0).setVisibility(8);
        if (com.actionbarsherlock.internal.widget.ActionBarView.access$6(this.this$0) != null) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$6(this.this$0).setVisibility(8);
        }
        if (com.actionbarsherlock.internal.widget.ActionBarView.access$7(this.this$0) != null) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$7(this.this$0).setVisibility(8);
        }
        if (com.actionbarsherlock.internal.widget.ActionBarView.access$8(this.this$0) != null) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$8(this.this$0).setVisibility(8);
        }
        if (com.actionbarsherlock.internal.widget.ActionBarView.access$9(this.this$0) != null) {
            com.actionbarsherlock.internal.widget.ActionBarView.access$9(this.this$0).setVisibility(8);
        }
        this.this$0.requestLayout();
        p6.setActionViewExpanded(1);
        if ((this.this$0.mExpandedActionView instanceof com.actionbarsherlock.view.CollapsibleActionView)) {
            ((com.actionbarsherlock.view.CollapsibleActionView) this.this$0.mExpandedActionView).onActionViewExpanded();
        }
        return 1;
    }

    public boolean flagActionItems()
    {
        return 0;
    }

    public int getId()
    {
        return 0;
    }

    public com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup p2)
    {
        return 0;
    }

    public void initForMenu(android.content.Context p3, com.actionbarsherlock.internal.view.menu.MenuBuilder p4)
    {
        if ((this.mMenu != null) && (this.mCurrentExpandedItem != null)) {
            this.mMenu.collapseItemActionView(this.mCurrentExpandedItem);
        }
        this.mMenu = p4;
        return;
    }

    public void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder p1, boolean p2)
    {
        return;
    }

    public void onRestoreInstanceState(android.os.Parcelable p1)
    {
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        return 0;
    }

    public boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder p2)
    {
        return 0;
    }

    public void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback p1)
    {
        return;
    }

    public void updateMenuView(boolean p7)
    {
        if (this.mCurrentExpandedItem != null) {
            int v1 = 0;
            if (this.mMenu != null) {
                int v0 = this.mMenu.size();
                int v2 = 0;
                while (v2 < v0) {
                    if (this.mMenu.getItem(v2) != this.mCurrentExpandedItem) {
                        v2++;
                    } else {
                        v1 = 1;
                        break;
                    }
                }
            }
            if (v1 == 0) {
                this.collapseItemActionView(this.mMenu, this.mCurrentExpandedItem);
            }
        }
        return;
    }

    public ActionBarView$HomeView(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public ActionBarView$HomeView(android.content.Context p1, android.util.AttributeSet p2)
    {
        super(p1, p2);
        return;
    }

    public boolean dispatchHoverEvent(android.view.MotionEvent p2)
    {
        return this.onHoverEvent(p2);
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p2)
    {
        this.onPopulateAccessibilityEvent(p2);
        return 1;
    }

    public int getLeftOffset()
    {
        int v0_2;
        if (this.mUpView.getVisibility() != 8) {
            v0_2 = 0;
        } else {
            v0_2 = this.mUpWidth;
        }
        return v0_2;
    }

    protected void onFinishInflate()
    {
        this.mUpView = this.findViewById(com.actionbarsherlock.R$id.abs__up);
        this.mIconView = ((android.widget.ImageView) this.findViewById(com.actionbarsherlock.R$id.abs__home));
        return;
    }

    protected void onLayout(boolean p16, int p17, int p18, int p19, int p20)
    {
        int v11 = ((p20 - p18) / 2);
        int v8 = 0;
        if (this.mUpView.getVisibility() != 8) {
            android.widget.FrameLayout$LayoutParams v7_1 = ((android.widget.FrameLayout$LayoutParams) this.mUpView.getLayoutParams());
            int v6 = this.mUpView.getMeasuredHeight();
            int v10 = this.mUpView.getMeasuredWidth();
            int v9 = (v11 - (v6 / 2));
            this.mUpView.layout(0, v9, v10, (v9 + v6));
            v8 = ((v7_1.leftMargin + v10) + v7_1.rightMargin);
            p17 += v8;
        }
        android.widget.FrameLayout$LayoutParams v3_1 = ((android.widget.FrameLayout$LayoutParams) this.mIconView.getLayoutParams());
        int v1 = this.mIconView.getMeasuredHeight();
        int v5 = this.mIconView.getMeasuredWidth();
        int v2 = (v8 + Math.max(v3_1.leftMargin, (((p19 - p17) / 2) - (v5 / 2))));
        int v4 = Math.max(v3_1.topMargin, (v11 - (v1 / 2)));
        this.mIconView.layout(v2, v4, (v2 + v5), (v4 + v1));
        return;
    }

    protected void onMeasure(int p14, int p15)
    {
        int v3_1;
        this.measureChildWithMargins(this.mUpView, p14, 0, p15, 0);
        android.widget.FrameLayout$LayoutParams v10_0 = ((android.widget.FrameLayout$LayoutParams) this.mUpView.getLayoutParams());
        this.mUpWidth = ((v10_0.leftMargin + this.mUpView.getMeasuredWidth()) + v10_0.rightMargin);
        if (this.mUpView.getVisibility() != 8) {
            v3_1 = this.mUpWidth;
        } else {
            v3_1 = 0;
        }
        int v6_0 = ((v10_0.topMargin + this.mUpView.getMeasuredHeight()) + v10_0.bottomMargin);
        this.measureChildWithMargins(this.mIconView, p14, v3_1, p15, 0);
        android.widget.FrameLayout$LayoutParams v9_1 = ((android.widget.FrameLayout$LayoutParams) this.mIconView.getLayoutParams());
        int v3_2 = (v3_1 + ((v9_1.leftMargin + this.mIconView.getMeasuredWidth()) + v9_1.rightMargin));
        int v6_1 = Math.max(v6_0, ((v9_1.topMargin + this.mIconView.getMeasuredHeight()) + v9_1.bottomMargin));
        int v11 = android.view.View$MeasureSpec.getMode(p14);
        int v7 = android.view.View$MeasureSpec.getMode(p15);
        int v12 = android.view.View$MeasureSpec.getSize(p14);
        int v8 = android.view.View$MeasureSpec.getSize(p15);
        switch (v11) {
            case -2147483648:
                v3_2 = Math.min(v3_2, v12);
                break;
            case 1073741824:
                v3_2 = v12;
                break;
        }
        switch (v7) {
            case -2147483648:
                v6_1 = Math.min(v6_1, v8);
                break;
            case 1073741824:
                v6_1 = v8;
                break;
        }
        this.setMeasuredDimension(v3_2, v6_1);
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p4)
    {
        if (android.os.Build$VERSION.SDK_INT >= 14) {
            super.onPopulateAccessibilityEvent(p4);
        }
        CharSequence v0 = this.getContentDescription();
        if (!android.text.TextUtils.isEmpty(v0)) {
            p4.getText().add(v0);
        }
        return;
    }

    public void setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mIconView.setImageDrawable(p2);
        return;
    }

    public void setUp(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 8;
        } else {
            v0 = 0;
        }
        this.mUpView.setVisibility(v0);
        return;
    }

    ActionBarView$SavedState$1()
    {
        return;
    }

    public com.actionbarsherlock.internal.widget.ActionBarView$SavedState createFromParcel(android.os.Parcel p3)
    {
        return new com.actionbarsherlock.internal.widget.ActionBarView$SavedState(p3, 0);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public com.actionbarsherlock.internal.widget.ActionBarView$SavedState[] newArray(int p2)
    {
        com.actionbarsherlock.internal.widget.ActionBarView$SavedState[] v0 = new com.actionbarsherlock.internal.widget.ActionBarView$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static ActionBarView$SavedState()
    {
        com.actionbarsherlock.internal.widget.ActionBarView$SavedState.CREATOR = new com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1();
        return;
    }

    private ActionBarView$SavedState(android.os.Parcel p2)
    {
        int v0_2;
        super(p2);
        super.expandedMenuItemId = p2.readInt();
        if (p2.readInt() == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        super.isOverflowOpen = v0_2;
        return;
    }

    synthetic ActionBarView$SavedState(android.os.Parcel p1, com.actionbarsherlock.internal.widget.ActionBarView$SavedState p2)
    {
        this(p1);
        return;
    }

    ActionBarView$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        int v0_2;
        super.writeToParcel(p2, p3);
        p2.writeInt(this.expandedMenuItemId);
        if (!this.isOverflowOpen) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        p2.writeInt(v0_2);
        return;
    }

    public ActionBarView(android.content.Context p18, android.util.AttributeSet p19)
    {
        com.actionbarsherlock.internal.widget.ActionBarView v17_1 = super(p18, p19);
        v17_1.mDisplayOptions = -1;
        v17_1.mNavItemSelectedListener = new com.actionbarsherlock.internal.widget.ActionBarView$1(v17_1);
        v17_1.mExpandedActionViewUpListener = new com.actionbarsherlock.internal.widget.ActionBarView$2(v17_1);
        v17_1.mUpClickListener = new com.actionbarsherlock.internal.widget.ActionBarView$3(v17_1);
        v17_1.setBackgroundResource(0);
        android.content.res.TypedArray v9 = p18.obtainStyledAttributes(p19, com.actionbarsherlock.R$styleable.SherlockActionBar, com.actionbarsherlock.R$attr.actionBarStyle, 0);
        android.content.pm.ApplicationInfo v10 = p18.getApplicationInfo();
        android.content.pm.PackageManager v15 = p18.getPackageManager();
        v17_1.mNavigationMode = v9.getInt(6, 0);
        v17_1.mTitle = v9.getText(8);
        v17_1.mSubtitle = v9.getText(9);
        v17_1.mLogo = v9.getDrawable(11);
        if (v17_1.mLogo == null) {
            if (android.os.Build$VERSION.SDK_INT >= 11) {
                if ((p18 instanceof android.app.Activity)) {
                    try {
                        v17_1.mLogo = v15.getActivityLogo(((android.app.Activity) p18).getComponentName());
                    } catch (android.content.pm.PackageManager$NameNotFoundException v12_1) {
                        android.util.Log.e("ActionBarView", "Activity component name not found!", v12_1);
                    }
                }
                if (v17_1.mLogo == null) {
                    v17_1.mLogo = v10.loadLogo(v15);
                }
            } else {
                if ((p18 instanceof android.app.Activity)) {
                    int v16 = com.actionbarsherlock.internal.widget.ActionBarView.loadLogoFromManifest(((android.app.Activity) p18));
                    if (v16 != 0) {
                        v17_1.mLogo = p18.getResources().getDrawable(v16);
                    }
                }
            }
        }
        v17_1.mIcon = v9.getDrawable(10);
        if (v17_1.mIcon == null) {
            if ((p18 instanceof android.app.Activity)) {
                try {
                    v17_1.mIcon = v15.getActivityIcon(((android.app.Activity) p18).getComponentName());
                } catch (android.content.pm.PackageManager$NameNotFoundException v12_0) {
                    android.util.Log.e("ActionBarView", "Activity component name not found!", v12_0);
                }
            }
            if (v17_1.mIcon == null) {
                v17_1.mIcon = v10.loadIcon(v15);
            }
        }
        android.view.LayoutInflater v14 = android.view.LayoutInflater.from(p18);
        int v13 = v9.getResourceId(14, com.actionbarsherlock.R$layout.abs__action_bar_home);
        v17_1.mHomeLayout = ((com.actionbarsherlock.internal.widget.ActionBarView$HomeView) v14.inflate(v13, v17_1, 0));
        v17_1.mExpandedHomeLayout = ((com.actionbarsherlock.internal.widget.ActionBarView$HomeView) v14.inflate(v13, v17_1, 0));
        v17_1.mExpandedHomeLayout.setUp(1);
        v17_1.mExpandedHomeLayout.setOnClickListener(v17_1.mExpandedActionViewUpListener);
        v17_1.mExpandedHomeLayout.setContentDescription(v17_1.getResources().getText(com.actionbarsherlock.R$string.abs__action_bar_up_description));
        v17_1.mTitleStyleRes = v9.getResourceId(0, 0);
        v17_1.mSubtitleStyleRes = v9.getResourceId(1, 0);
        v17_1.mProgressStyle = v9.getResourceId(15, 0);
        v17_1.mIndeterminateProgressStyle = v9.getResourceId(16, 0);
        v17_1.mProgressBarPadding = v9.getDimensionPixelOffset(17, 0);
        v17_1.mItemPadding = v9.getDimensionPixelOffset(18, 0);
        v17_1.setDisplayOptions(v9.getInt(7, 0));
        int v11 = v9.getResourceId(13, 0);
        if (v11 != 0) {
            v17_1.mCustomNavView = v14.inflate(v11, v17_1, 0);
            v17_1.mNavigationMode = 0;
            v17_1.setDisplayOptions((v17_1.mDisplayOptions | 16));
        }
        v17_1.mContentHeight = v9.getLayoutDimension(4, 0);
        v9.recycle();
        v17_1.mLogoNavItem = new com.actionbarsherlock.internal.view.menu.ActionMenuItem(p18, 0, 16908332, 0, 0, v17_1.mTitle);
        v17_1.mHomeLayout.setOnClickListener(v17_1.mUpClickListener);
        v17_1.mHomeLayout.setClickable(1);
        v17_1.mHomeLayout.setFocusable(1);
        return;
    }

    static synthetic com.actionbarsherlock.app.ActionBar$OnNavigationListener access$0(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mCallback;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter access$1(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mExpandedMenuPresenter;
    }

    static synthetic int access$10(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mDisplayOptions;
    }

    static synthetic void access$11(com.actionbarsherlock.internal.widget.ActionBarView p0)
    {
        p0.initTitle();
        return;
    }

    static synthetic int access$12(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mNavigationMode;
    }

    static synthetic com.actionbarsherlock.internal.view.menu.ActionMenuItem access$2(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mLogoNavItem;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$3(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mExpandedHomeLayout;
    }

    static synthetic android.graphics.drawable.Drawable access$4(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mIcon;
    }

    static synthetic com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$5(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mHomeLayout;
    }

    static synthetic android.widget.LinearLayout access$6(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mTitleLayout;
    }

    static synthetic com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$7(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mTabScrollView;
    }

    static synthetic com.actionbarsherlock.internal.widget.IcsSpinner access$8(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mSpinner;
    }

    static synthetic android.view.View access$9(com.actionbarsherlock.internal.widget.ActionBarView p1)
    {
        return p1.mCustomNavView;
    }

    private void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder p5)
    {
        if (p5 == null) {
            this.mActionMenuPresenter.initForMenu(this.mContext, 0);
            this.mExpandedMenuPresenter.initForMenu(this.mContext, 0);
            this.mActionMenuPresenter.updateMenuView(1);
            this.mExpandedMenuPresenter.updateMenuView(1);
        } else {
            p5.addMenuPresenter(this.mActionMenuPresenter);
            p5.addMenuPresenter(this.mExpandedMenuPresenter);
        }
        return;
    }

    private void initTitle()
    {
        int v4 = 1;
        if (this.mTitleLayout == null) {
            this.mTitleLayout = ((android.widget.LinearLayout) android.view.LayoutInflater.from(this.getContext()).inflate(com.actionbarsherlock.R$layout.abs__action_bar_title_item, this, 0));
            this.mTitleView = ((android.widget.TextView) this.mTitleLayout.findViewById(com.actionbarsherlock.R$id.abs__action_bar_title));
            this.mSubtitleView = ((android.widget.TextView) this.mTitleLayout.findViewById(com.actionbarsherlock.R$id.abs__action_bar_subtitle));
            this.mTitleUpView = this.mTitleLayout.findViewById(com.actionbarsherlock.R$id.abs__up);
            this.mTitleLayout.setOnClickListener(this.mUpClickListener);
            if (this.mTitleStyleRes != 0) {
                this.mTitleView.setTextAppearance(this.mContext, this.mTitleStyleRes);
            }
            if (this.mTitle != null) {
                this.mTitleView.setText(this.mTitle);
            }
            if (this.mSubtitleStyleRes != 0) {
                this.mSubtitleView.setTextAppearance(this.mContext, this.mSubtitleStyleRes);
            }
            if (this.mSubtitle != null) {
                this.mSubtitleView.setText(this.mSubtitle);
                this.mSubtitleView.setVisibility(0);
            }
            int v0;
            if ((this.mDisplayOptions & 4) == 0) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            int v2;
            if ((this.mDisplayOptions & 2) == 0) {
                v2 = 0;
            } else {
                v2 = 1;
            }
            android.widget.LinearLayout v3_26;
            if (v2 != 0) {
                v3_26 = 8;
            } else {
                if (v0 == 0) {
                    v3_26 = 4;
                } else {
                    v3_26 = 0;
                }
            }
            this.mTitleUpView.setVisibility(v3_26);
            if ((v0 == 0) || (v2 != 0)) {
                v4 = 0;
            }
            this.mTitleLayout.setEnabled(v4);
        }
        this.addView(this.mTitleLayout);
        if ((this.mExpandedActionView != null) || ((android.text.TextUtils.isEmpty(this.mTitle)) && (android.text.TextUtils.isEmpty(this.mSubtitle)))) {
            this.mTitleLayout.setVisibility(8);
        }
        return;
    }

    private static int loadLogoFromManifest(android.app.Activity p15)
    {
        int v8 = 0;
        try {
            String v11 = p15.getClass().getName();
            String v10 = p15.getApplicationInfo().packageName;
            android.content.res.XmlResourceParser v12 = p15.createPackageContext(v10, 0).getAssets().openXmlResourceParser("AndroidManifest.xml");
            int v5 = v12.getEventType();
        } catch (Exception v4) {
            v4.printStackTrace();
            return v8;
        }
        while (v5 != 1) {
            if (v5 == 2) {
                String v9 = v12.getName();
                if (!"application".equals(v9)) {
                    if ("activity".equals(v9)) {
                        Integer v0 = 0;
                        String v1 = 0;
                        int v7 = 0;
                        int v6_0 = (v12.getAttributeCount() - 1);
                        while (v6_0 >= 0) {
                            String v3 = v12.getAttributeName(v6_0);
                            if (!"logo".equals(v3)) {
                                if ("name".equals(v3)) {
                                    v1 = com.actionbarsherlock.internal.ActionBarSherlockCompat.cleanActivityName(v10, v12.getAttributeValue(v6_0));
                                    if (!v11.equals(v1)) {
                                        break;
                                    }
                                    v7 = 1;
                                }
                            } else {
                                v0 = Integer.valueOf(v12.getAttributeResourceValue(v6_0, 0));
                            }
                            if ((v0 != null) && (v1 != null)) {
                                v8 = v0.intValue();
                            }
                            v6_0--;
                        }
                        if (v7 != 0) {
                            break;
                        }
                    }
                } else {
                    int v6_1 = (v12.getAttributeCount() - 1);
                    while (v6_1 >= 0) {
                        if (!"logo".equals(v12.getAttributeName(v6_1))) {
                            v6_1--;
                        } else {
                            v8 = v12.getAttributeResourceValue(v6_1, 0);
                            break;
                        }
                    }
                }
            }
            v5 = v12.nextToken();
        }
        return v8;
    }

    private void setTitleImpl(CharSequence p4)
    {
        int v1_0 = 0;
        this.mTitle = p4;
        if (this.mTitleView != null) {
            int v0;
            this.mTitleView.setText(p4);
            if ((this.mExpandedActionView != null) || (((this.mDisplayOptions & 8) == 0) || ((android.text.TextUtils.isEmpty(this.mTitle)) && (android.text.TextUtils.isEmpty(this.mSubtitle))))) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            if (v0 == 0) {
                v1_0 = 8;
            }
            this.mTitleLayout.setVisibility(v1_0);
        }
        if (this.mLogoNavItem != null) {
            this.mLogoNavItem.setTitle(p4);
        }
        return;
    }

    public void collapseActionView()
    {
        com.actionbarsherlock.internal.view.menu.MenuItemImpl v0;
        if (this.mExpandedMenuPresenter != null) {
            v0 = this.mExpandedMenuPresenter.mCurrentExpandedItem;
        } else {
            v0 = 0;
        }
        if (v0 != null) {
            v0.collapseActionView();
        }
        return;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        return new com.actionbarsherlock.app.ActionBar$LayoutParams(19);
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet p3)
    {
        return new com.actionbarsherlock.app.ActionBar$LayoutParams(this.getContext(), p3);
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams p1)
    {
        if (p1 == null) {
            p1 = this.generateDefaultLayoutParams();
        }
        return p1;
    }

    public android.view.View getCustomNavigationView()
    {
        return this.mCustomNavView;
    }

    public int getDisplayOptions()
    {
        return this.mDisplayOptions;
    }

    public android.widget.SpinnerAdapter getDropdownAdapter()
    {
        return this.mSpinnerAdapter;
    }

    public int getDropdownSelectedPosition()
    {
        return this.mSpinner.getSelectedItemPosition();
    }

    public int getNavigationMode()
    {
        return this.mNavigationMode;
    }

    public CharSequence getSubtitle()
    {
        return this.mSubtitle;
    }

    public CharSequence getTitle()
    {
        return this.mTitle;
    }

    public boolean hasEmbeddedTabs()
    {
        return this.mIncludeTabs;
    }

    public boolean hasExpandedActionView()
    {
        if ((this.mExpandedMenuPresenter == null) || (this.mExpandedMenuPresenter.mCurrentExpandedItem == null)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public void initIndeterminateProgress()
    {
        this.mIndeterminateProgressView = new com.actionbarsherlock.internal.widget.IcsProgressBar(this.mContext, 0, 0, this.mIndeterminateProgressStyle);
        this.mIndeterminateProgressView.setId(com.actionbarsherlock.R$id.abs__progress_circular);
        this.addView(this.mIndeterminateProgressView);
        return;
    }

    public void initProgress()
    {
        this.mProgressView = new com.actionbarsherlock.internal.widget.IcsProgressBar(this.mContext, 0, 0, this.mProgressStyle);
        this.mProgressView.setId(com.actionbarsherlock.R$id.abs__progress_horizontal);
        this.mProgressView.setMax(10000);
        this.addView(this.mProgressView);
        return;
    }

    public boolean isCollapsed()
    {
        return this.mIsCollapsed;
    }

    public boolean isSplitActionBar()
    {
        return this.mSplitActionBar;
    }

    public void onConfigurationChanged(android.content.res.Configuration p4)
    {
        super.onConfigurationChanged(p4);
        this.mTitleView = 0;
        this.mSubtitleView = 0;
        this.mTitleUpView = 0;
        if ((this.mTitleLayout != null) && (this.mTitleLayout.getParent() == this)) {
            this.removeView(this.mTitleLayout);
        }
        this.mTitleLayout = 0;
        if ((this.mDisplayOptions & 8) != 0) {
            this.initTitle();
        }
        if ((this.mTabScrollView != null) && (this.mIncludeTabs)) {
            android.view.ViewGroup$LayoutParams v0 = this.mTabScrollView.getLayoutParams();
            if (v0 != null) {
                v0.width = -2;
                v0.height = -1;
            }
            this.mTabScrollView.setAllowCollapse(1);
        }
        return;
    }

    public void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        if (this.mActionMenuPresenter != null) {
            this.mActionMenuPresenter.hideOverflowMenu();
            this.mActionMenuPresenter.hideSubMenus();
        }
        return;
    }

    protected void onFinishInflate()
    {
        super.onFinishInflate();
        this.addView(this.mHomeLayout);
        if ((this.mCustomNavView != null) && ((this.mDisplayOptions & 16) != 0)) {
            android.view.ViewGroup v0_0 = this.mCustomNavView.getParent();
            if (v0_0 != this) {
                if ((v0_0 instanceof android.view.ViewGroup)) {
                    ((android.view.ViewGroup) v0_0).removeView(this.mCustomNavView);
                }
                this.addView(this.mCustomNavView);
            }
        }
        return;
    }

    protected void onLayout(boolean p33, int p34, int p35, int p36, int p37)
    {
        int v23 = this.getPaddingLeft();
        int v25 = this.getPaddingTop();
        int v7 = (((p37 - p35) - this.getPaddingTop()) - this.getPaddingBottom());
        if (v7 > 0) {
            com.actionbarsherlock.internal.widget.ActionBarView$HomeView v13;
            if (this.mExpandedActionView == null) {
                v13 = this.mHomeLayout;
            } else {
                v13 = this.mExpandedHomeLayout;
            }
            if (v13.getVisibility() != 8) {
                int v14 = v13.getLeftOffset();
                v23 += (this.positionChild(v13, (v23 + v14), v25, v7) + v14);
            }
            if (this.mExpandedActionView == null) {
                if ((this.mTitleLayout == null) || ((this.mTitleLayout.getVisibility() == 8) || ((this.mDisplayOptions & 8) == 0))) {
                    int v20 = 0;
                } else {
                    v20 = 1;
                }
                if (v20 != 0) {
                    v23 += this.positionChild(this.mTitleLayout, v23, v25, v7);
                }
                switch (this.mNavigationMode) {
                    case 0:
                    default:
                        break;
                    case 1:
                        if (this.mListNavLayout != null) {
                            if (v20 != 0) {
                                v23 += this.mItemPadding;
                            }
                            v23 += (this.positionChild(this.mListNavLayout, v23, v25, v7) + this.mItemPadding);
                        }
                        break;
                    case 2:
                        if (this.mTabScrollView != null) {
                            if (v20 != 0) {
                                v23 += this.mItemPadding;
                            }
                            v23 += (this.positionChild(this.mTabScrollView, v23, v25, v7) + this.mItemPadding);
                        }
                        break;
                }
            }
            int v16 = ((p36 - p34) - this.getPaddingRight());
            if ((this.mMenuView != null) && (this.mMenuView.getParent() == this)) {
                this.positionChildInverse(this.mMenuView, v16, v25, v7);
                v16 -= this.mMenuView.getMeasuredWidth();
            }
            if ((this.mIndeterminateProgressView != null) && (this.mIndeterminateProgressView.getVisibility() != 8)) {
                this.positionChildInverse(this.mIndeterminateProgressView, v16, v25, v7);
                v16 -= this.mIndeterminateProgressView.getMeasuredWidth();
            }
            android.view.View v8 = 0;
            if (this.mExpandedActionView == null) {
                if (((this.mDisplayOptions & 16) != 0) && (this.mCustomNavView != null)) {
                    v8 = this.mCustomNavView;
                }
            } else {
                v8 = this.mExpandedActionView;
            }
            if (v8 != null) {
                int v4;
                com.actionbarsherlock.app.ActionBar$LayoutParams v15_0 = v8.getLayoutParams();
                if (!(v15_0 instanceof com.actionbarsherlock.app.ActionBar$LayoutParams)) {
                    v4 = 0;
                } else {
                    v4 = ((com.actionbarsherlock.app.ActionBar$LayoutParams) v15_0);
                }
                int v10;
                if (v4 == 0) {
                    v10 = 19;
                } else {
                    v10 = v4.gravity;
                }
                int v17 = v8.getMeasuredWidth();
                int v21 = 0;
                int v5 = 0;
                if (v4 != 0) {
                    v23 += v4.leftMargin;
                    v16 -= v4.rightMargin;
                    v21 = v4.topMargin;
                    v5 = v4.bottomMargin;
                }
                int v12 = (v10 & 7);
                if (v12 != 1) {
                    if (v10 == -1) {
                        v12 = 3;
                    }
                } else {
                    int v6 = (((this.getRight() - this.getLeft()) - v17) / 2);
                    if (v6 >= v23) {
                        if ((v6 + v17) > v16) {
                            v12 = 5;
                        }
                    } else {
                        v12 = 3;
                    }
                }
                int v24 = 0;
                switch (v12) {
                    case 1:
                        v24 = (((this.getRight() - this.getLeft()) - v17) / 2);
                    case 2:
                    case 4:
                    default:
                        break;
                    case 3:
                        v24 = v23;
                    case 2:
                    case 4:
                        break;
                    case 5:
                        v24 = (v16 - v17);
                        break;
                }
                int v22 = (v10 & 112);
                if (v10 == -1) {
                    v22 = 16;
                }
                int v26 = 0;
                switch (v22) {
                    case 16:
                        v26 = (((((this.getBottom() - this.getTop()) - this.getPaddingBottom()) - this.getPaddingTop()) - v8.getMeasuredHeight()) / 2);
                        break;
                    case 48:
                        v26 = (this.getPaddingTop() + v21);
                        break;
                    case 80:
                        v26 = (((this.getHeight() - this.getPaddingBottom()) - v8.getMeasuredHeight()) - v5);
                        break;
                }
                v8.layout(v24, v26, (v24 + v8.getMeasuredWidth()), (v8.getMeasuredHeight() + v26));
            }
            if (this.mProgressView != null) {
                this.mProgressView.bringToFront();
                int v11 = (this.mProgressView.getMeasuredHeight() / 2);
                this.mProgressView.layout(this.mProgressBarPadding, (- v11), (this.mProgressBarPadding + this.mProgressView.getMeasuredWidth()), v11);
            }
        }
        return;
    }

    protected void onMeasure(int p45, int p46)
    {
        int v7 = this.getChildCount();
        if (!this.mIsCollapsable) {
            this.mIsCollapsed = 0;
            if (android.view.View$MeasureSpec.getMode(p45) == 1073741824) {
                if (android.view.View$MeasureSpec.getMode(p46) == -2147483648) {
                    int v27;
                    int v9 = android.view.View$MeasureSpec.getSize(p45);
                    if (this.mContentHeight <= 0) {
                        v27 = android.view.View$MeasureSpec.getSize(p46);
                    } else {
                        v27 = this.mContentHeight;
                    }
                    com.actionbarsherlock.internal.widget.ActionBarView$HomeView v18;
                    int v37 = (this.getPaddingTop() + this.getPaddingBottom());
                    int v30 = this.getPaddingLeft();
                    int v31 = this.getPaddingRight();
                    int v15 = (v27 - v37);
                    int v8 = android.view.View$MeasureSpec.makeMeasureSpec(v15, -2147483648);
                    int v5_0 = ((v9 - v30) - v31);
                    int v24_0 = (v5_0 / 2);
                    int v32 = v24_0;
                    if (this.mExpandedActionView == null) {
                        v18 = this.mHomeLayout;
                    } else {
                        v18 = this.mExpandedHomeLayout;
                    }
                    if (v18.getVisibility() != 8) {
                        int v20;
                        android.view.ViewGroup$LayoutParams v26_1 = v18.getLayoutParams();
                        if (v26_1.width >= 0) {
                            v20 = android.view.View$MeasureSpec.makeMeasureSpec(v26_1.width, 1073741824);
                        } else {
                            v20 = android.view.View$MeasureSpec.makeMeasureSpec(v5_0, -2147483648);
                        }
                        v18.measure(v20, android.view.View$MeasureSpec.makeMeasureSpec(v15, 1073741824));
                        int v19 = (v18.getMeasuredWidth() + v18.getLeftOffset());
                        v5_0 = Math.max(0, (v5_0 - v19));
                        v24_0 = Math.max(0, (v5_0 - v19));
                    }
                    if ((this.mMenuView != null) && (this.mMenuView.getParent() == this)) {
                        v5_0 = this.measureChildView(this.mMenuView, v5_0, v8, 0);
                        v32 = Math.max(0, (v32 - this.mMenuView.getMeasuredWidth()));
                    }
                    if ((this.mIndeterminateProgressView != null) && (this.mIndeterminateProgressView.getVisibility() != 8)) {
                        v5_0 = this.measureChildView(this.mIndeterminateProgressView, v5_0, v8, 0);
                        v32 = Math.max(0, (v32 - this.mIndeterminateProgressView.getMeasuredWidth()));
                    }
                    if ((this.mTitleLayout == null) || ((this.mTitleLayout.getVisibility() == 8) || ((this.mDisplayOptions & 8) == 0))) {
                        int v33 = 0;
                    } else {
                        v33 = 1;
                    }
                    if (this.mExpandedActionView == null) {
                        switch (this.mNavigationMode) {
                            case 1:
                                if (this.mListNavLayout != null) {
                                    int v23_1;
                                    if (v33 == 0) {
                                        v23_1 = this.mItemPadding;
                                    } else {
                                        v23_1 = (this.mItemPadding * 2);
                                    }
                                    int v5_2 = Math.max(0, (v5_0 - v23_1));
                                    int v24_2 = Math.max(0, (v24_0 - v23_1));
                                    this.mListNavLayout.measure(android.view.View$MeasureSpec.makeMeasureSpec(v5_2, -2147483648), android.view.View$MeasureSpec.makeMeasureSpec(v15, 1073741824));
                                    int v25 = this.mListNavLayout.getMeasuredWidth();
                                    v5_0 = Math.max(0, (v5_2 - v25));
                                    v24_0 = Math.max(0, (v24_2 - v25));
                                }
                                break;
                            case 2:
                                if (this.mTabScrollView != null) {
                                    int v23_0;
                                    if (v33 == 0) {
                                        v23_0 = this.mItemPadding;
                                    } else {
                                        v23_0 = (this.mItemPadding * 2);
                                    }
                                    int v5_1 = Math.max(0, (v5_0 - v23_0));
                                    int v24_1 = Math.max(0, (v24_0 - v23_0));
                                    this.mTabScrollView.measure(android.view.View$MeasureSpec.makeMeasureSpec(v5_1, -2147483648), android.view.View$MeasureSpec.makeMeasureSpec(v15, 1073741824));
                                    int v34 = this.mTabScrollView.getMeasuredWidth();
                                    v5_0 = Math.max(0, (v5_1 - v34));
                                    v24_0 = Math.max(0, (v24_1 - v34));
                                }
                                break;
                        }
                    }
                    android.view.View v14 = 0;
                    if (this.mExpandedActionView == null) {
                        if (((this.mDisplayOptions & 16) != 0) && (this.mCustomNavView != null)) {
                            v14 = this.mCustomNavView;
                        }
                    } else {
                        v14 = this.mExpandedActionView;
                    }
                    if (v14 != null) {
                        int v4;
                        android.view.ViewGroup$LayoutParams v26_0 = this.generateLayoutParams(v14.getLayoutParams());
                        if (!(v26_0 instanceof com.actionbarsherlock.app.ActionBar$LayoutParams)) {
                            v4 = 0;
                        } else {
                            v4 = ((com.actionbarsherlock.app.ActionBar$LayoutParams) v26_0);
                        }
                        int v21 = 0;
                        int v36 = 0;
                        if (v4 != 0) {
                            v21 = (v4.leftMargin + v4.rightMargin);
                            v36 = (v4.topMargin + v4.bottomMargin);
                        }
                        int v11;
                        if (this.mContentHeight > 0) {
                            if (v26_0.height == -2) {
                                v11 = -2147483648;
                            } else {
                                v11 = 1073741824;
                            }
                        } else {
                            v11 = -2147483648;
                        }
                        if (v26_0.height >= 0) {
                            v15 = Math.min(v26_0.height, v15);
                        }
                        int v13;
                        int v10 = Math.max(0, (v15 - v36));
                        if (v26_0.width == -2) {
                            v13 = -2147483648;
                        } else {
                            v13 = 1073741824;
                        }
                        int v40_60;
                        if (v26_0.width < 0) {
                            v40_60 = v5_0;
                        } else {
                            v40_60 = Math.min(v26_0.width, v5_0);
                        }
                        int v40_65;
                        int v12 = Math.max(0, (v40_60 - v21));
                        if (v4 == 0) {
                            v40_65 = 19;
                        } else {
                            v40_65 = v4.gravity;
                        }
                        if (((v40_65 & 7) == 1) && (v26_0.width == -1)) {
                            v12 = (Math.min(v24_0, v32) * 2);
                        }
                        v14.measure(android.view.View$MeasureSpec.makeMeasureSpec(v12, v13), android.view.View$MeasureSpec.makeMeasureSpec(v10, v11));
                        v5_0 -= (v14.getMeasuredWidth() + v21);
                    }
                    if ((this.mExpandedActionView == null) && (v33 != 0)) {
                        this.measureChildView(this.mTitleLayout, v5_0, android.view.View$MeasureSpec.makeMeasureSpec(this.mContentHeight, 1073741824), 0);
                        Math.max(0, (v24_0 - this.mTitleLayout.getMeasuredWidth()));
                    }
                    if (this.mContentHeight > 0) {
                        this.setMeasuredDimension(v9, v27);
                    } else {
                        int v28 = 0;
                        int v22_1 = 0;
                        while (v22_1 < v7) {
                            int v29 = (this.getChildAt(v22_1).getMeasuredHeight() + v37);
                            if (v29 > v28) {
                                v28 = v29;
                            }
                            v22_1++;
                        }
                        this.setMeasuredDimension(v9, v28);
                    }
                    if (this.mContextView != null) {
                        this.mContextView.setContentHeight(this.getMeasuredHeight());
                    }
                    if ((this.mProgressView != null) && (this.mProgressView.getVisibility() != 8)) {
                        this.mProgressView.measure(android.view.View$MeasureSpec.makeMeasureSpec((v9 - (this.mProgressBarPadding * 2)), 1073741824), android.view.View$MeasureSpec.makeMeasureSpec(this.getMeasuredHeight(), -2147483648));
                    }
                } else {
                    throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" can only be used ").append("with android:layout_height=\"wrap_content\"").toString());
                }
            } else {
                throw new IllegalStateException(new StringBuilder(String.valueOf(this.getClass().getSimpleName())).append(" can only be used ").append("with android:layout_width=\"match_parent\" (or fill_parent)").toString());
            }
        } else {
            int v38 = 0;
            int v22_0 = 0;
            while (v22_0 < v7) {
                android.view.View v6 = this.getChildAt(v22_0);
                if ((v6.getVisibility() != 8) && ((v6 != this.mMenuView) || (this.mMenuView.getChildCount() != 0))) {
                    v38++;
                }
                v22_0++;
            }
            if (v38 != 0) {
            } else {
                this.setMeasuredDimension(0, 0);
                this.mIsCollapsed = 1;
            }
        }
        return;
    }

    public void onRestoreInstanceState(android.os.Parcelable p5)
    {
        super.onRestoreInstanceState(((com.actionbarsherlock.internal.widget.ActionBarView$SavedState) p5).getSuperState());
        if ((((com.actionbarsherlock.internal.widget.ActionBarView$SavedState) p5).expandedMenuItemId != 0) && ((this.mExpandedMenuPresenter != null) && (this.mOptionsMenu != null))) {
            com.actionbarsherlock.view.MenuItem v0 = this.mOptionsMenu.findItem(((com.actionbarsherlock.internal.widget.ActionBarView$SavedState) p5).expandedMenuItemId);
            if (v0 != null) {
                v0.expandActionView();
            }
        }
        if (((com.actionbarsherlock.internal.widget.ActionBarView$SavedState) p5).isOverflowOpen) {
            this.postShowOverflowMenu();
        }
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        com.actionbarsherlock.internal.widget.ActionBarView$SavedState v0_1 = new com.actionbarsherlock.internal.widget.ActionBarView$SavedState(super.onSaveInstanceState());
        if ((this.mExpandedMenuPresenter != null) && (this.mExpandedMenuPresenter.mCurrentExpandedItem != null)) {
            v0_1.expandedMenuItemId = this.mExpandedMenuPresenter.mCurrentExpandedItem.getItemId();
        }
        v0_1.isOverflowOpen = this.isOverflowMenuShowing();
        return v0_1;
    }

    public void setCallback(com.actionbarsherlock.app.ActionBar$OnNavigationListener p1)
    {
        this.mCallback = p1;
        return;
    }

    public void setCollapsable(boolean p1)
    {
        this.mIsCollapsable = p1;
        return;
    }

    public void setContextView(com.actionbarsherlock.internal.widget.ActionBarContextView p1)
    {
        this.mContextView = p1;
        return;
    }

    public void setCustomNavigationView(android.view.View p3)
    {
        int v0;
        if ((this.mDisplayOptions & 16) == 0) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if ((this.mCustomNavView != null) && (v0 != 0)) {
            this.removeView(this.mCustomNavView);
        }
        this.mCustomNavView = p3;
        if ((this.mCustomNavView != null) && (v0 != 0)) {
            this.addView(this.mCustomNavView);
        }
        return;
    }

    public void setDisplayOptions(int p12)
    {
        int v7_0 = 8;
        int v0 = -1;
        android.view.View v8_1 = 1;
        if (this.mDisplayOptions != -1) {
            v0 = (p12 ^ this.mDisplayOptions);
        }
        this.mDisplayOptions = p12;
        if ((v0 & 31) == 0) {
            this.invalidate();
        } else {
            int v4;
            if ((p12 & 2) == 0) {
                v4 = 0;
            } else {
                v4 = 1;
            }
            if ((v4 == 0) || (this.mExpandedActionView != null)) {
                com.actionbarsherlock.internal.widget.ActionBarView$HomeView v5 = 8;
            } else {
                v5 = 0;
            }
            this.mHomeLayout.setVisibility(v5);
            if ((v0 & 4) != 0) {
                com.actionbarsherlock.internal.widget.ActionBarView$HomeView v3;
                if ((p12 & 4) == 0) {
                    v3 = 0;
                } else {
                    v3 = 1;
                }
                this.mHomeLayout.setUp(v3);
                if (v3 != null) {
                    this.setHomeButtonEnabled(1);
                }
            }
            if ((v0 & 1) != 0) {
                if ((this.mLogo == null) || ((p12 & 1) == 0)) {
                    int v2 = 0;
                } else {
                    v2 = 1;
                }
                android.view.View v9_10;
                if (v2 == 0) {
                    v9_10 = this.mIcon;
                } else {
                    v9_10 = this.mLogo;
                }
                this.mHomeLayout.setIcon(v9_10);
            }
            if ((v0 & 8) != 0) {
                if ((p12 & 8) == 0) {
                    this.removeView(this.mTitleLayout);
                } else {
                    this.initTitle();
                }
            }
            if ((this.mTitleLayout != null) && ((v0 & 6) != 0)) {
                android.view.View v1;
                if ((this.mDisplayOptions & 4) == 0) {
                    v1 = 0;
                } else {
                    v1 = 1;
                }
                if (v4 == 0) {
                    if (v1 == null) {
                        v7_0 = 4;
                    } else {
                        v7_0 = 0;
                    }
                }
                this.mTitleUpView.setVisibility(v7_0);
                if ((v4 != 0) || (v1 == null)) {
                    v8_1 = 0;
                }
                this.mTitleLayout.setEnabled(v8_1);
            }
            if (((v0 & 16) != 0) && (this.mCustomNavView != null)) {
                if ((p12 & 16) == 0) {
                    this.removeView(this.mCustomNavView);
                } else {
                    this.addView(this.mCustomNavView);
                }
            }
            this.requestLayout();
        }
        if (this.mHomeLayout.isEnabled()) {
            if ((p12 & 4) == 0) {
                this.mHomeLayout.setContentDescription(this.mContext.getResources().getText(com.actionbarsherlock.R$string.abs__action_bar_home_description));
            } else {
                this.mHomeLayout.setContentDescription(this.mContext.getResources().getText(com.actionbarsherlock.R$string.abs__action_bar_up_description));
            }
        } else {
            this.mHomeLayout.setContentDescription(0);
        }
        return;
    }

    public void setDropdownAdapter(android.widget.SpinnerAdapter p2)
    {
        this.mSpinnerAdapter = p2;
        if (this.mSpinner != null) {
            this.mSpinner.setAdapter(p2);
        }
        return;
    }

    public void setDropdownSelectedPosition(int p2)
    {
        this.mSpinner.setSelection(p2);
        return;
    }

    public void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p5)
    {
        if (this.mTabScrollView != null) {
            this.removeView(this.mTabScrollView);
        }
        int v1_8;
        this.mTabScrollView = p5;
        if (p5 == null) {
            v1_8 = 0;
        } else {
            v1_8 = 1;
        }
        this.mIncludeTabs = v1_8;
        if ((this.mIncludeTabs) && (this.mNavigationMode == 2)) {
            this.addView(this.mTabScrollView);
            android.view.ViewGroup$LayoutParams v0 = this.mTabScrollView.getLayoutParams();
            v0.width = -2;
            v0.height = -1;
            p5.setAllowCollapse(1);
        }
        return;
    }

    public void setHomeButtonEnabled(boolean p4)
    {
        this.mHomeLayout.setEnabled(p4);
        this.mHomeLayout.setFocusable(p4);
        if (p4) {
            if ((this.mDisplayOptions & 4) == 0) {
                this.mHomeLayout.setContentDescription(this.mContext.getResources().getText(com.actionbarsherlock.R$string.abs__action_bar_home_description));
            } else {
                this.mHomeLayout.setContentDescription(this.mContext.getResources().getText(com.actionbarsherlock.R$string.abs__action_bar_up_description));
            }
        } else {
            this.mHomeLayout.setContentDescription(0);
        }
        return;
    }

    public void setIcon(int p2)
    {
        this.setIcon(this.mContext.getResources().getDrawable(p2));
        return;
    }

    public void setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mIcon = p2;
        if ((p2 != null) && (((this.mDisplayOptions & 1) == 0) || (this.mLogo == null))) {
            this.mHomeLayout.setIcon(p2);
        }
        return;
    }

    public void setLogo(int p2)
    {
        this.setLogo(this.mContext.getResources().getDrawable(p2));
        return;
    }

    public void setLogo(android.graphics.drawable.Drawable p2)
    {
        this.mLogo = p2;
        if ((p2 != null) && ((this.mDisplayOptions & 1) != 0)) {
            this.mHomeLayout.setIcon(p2);
        }
        return;
    }

    public void setMenu(com.actionbarsherlock.view.Menu p9, com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback p10)
    {
        if (p9 != this.mOptionsMenu) {
            if (this.mOptionsMenu != null) {
                this.mOptionsMenu.removeMenuPresenter(this.mActionMenuPresenter);
                this.mOptionsMenu.removeMenuPresenter(this.mExpandedMenuPresenter);
            }
            this.mOptionsMenu = ((com.actionbarsherlock.internal.view.menu.MenuBuilder) p9);
            if (this.mMenuView != null) {
                android.view.ViewGroup v3_1 = ((android.view.ViewGroup) this.mMenuView.getParent());
                if (v3_1 != null) {
                    v3_1.removeView(this.mMenuView);
                }
            }
            if (this.mActionMenuPresenter == null) {
                this.mActionMenuPresenter = new com.actionbarsherlock.internal.view.menu.ActionMenuPresenter(this.mContext);
                this.mActionMenuPresenter.setCallback(p10);
                this.mActionMenuPresenter.setId(com.actionbarsherlock.R$id.abs__action_menu_presenter);
                this.mExpandedMenuPresenter = new com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter(this, 0);
            }
            com.actionbarsherlock.internal.view.menu.ActionMenuView v2_1;
            android.view.ViewGroup$LayoutParams v1_1 = new android.view.ViewGroup$LayoutParams(-2, -1);
            if (this.mSplitActionBar) {
                this.mActionMenuPresenter.setExpandedActionViewsExclusive(0);
                this.mActionMenuPresenter.setWidthLimit(this.getContext().getResources().getDisplayMetrics().widthPixels, 1);
                this.mActionMenuPresenter.setItemLimit(2147483647);
                v1_1.width = -1;
                this.configPresenters(((com.actionbarsherlock.internal.view.menu.MenuBuilder) p9));
                v2_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mActionMenuPresenter.getMenuView(this));
                if (this.mSplitView == null) {
                    v2_1.setLayoutParams(v1_1);
                } else {
                    android.view.ViewGroup v3_3 = ((android.view.ViewGroup) v2_1.getParent());
                    if ((v3_3 != null) && (v3_3 != this.mSplitView)) {
                        v3_3.removeView(v2_1);
                    }
                    v2_1.setVisibility(this.getAnimatedVisibility());
                    this.mSplitView.addView(v2_1, v1_1);
                }
            } else {
                this.mActionMenuPresenter.setExpandedActionViewsExclusive(com.actionbarsherlock.internal.ResourcesCompat.getResources_getBoolean(this.getContext(), com.actionbarsherlock.R$bool.abs__action_bar_expanded_action_views_exclusive));
                this.configPresenters(((com.actionbarsherlock.internal.view.menu.MenuBuilder) p9));
                v2_1 = ((com.actionbarsherlock.internal.view.menu.ActionMenuView) this.mActionMenuPresenter.getMenuView(this));
                android.view.ViewGroup v3_5 = ((android.view.ViewGroup) v2_1.getParent());
                if ((v3_5 != null) && (v3_5 != this)) {
                    v3_5.removeView(v2_1);
                }
                this.addView(v2_1, v1_1);
            }
            this.mMenuView = v2_1;
        }
        return;
    }

    public void setNavigationMode(int p7)
    {
        int v0 = this.mNavigationMode;
        if (p7 != v0) {
            switch (v0) {
                case 1:
                    if (this.mListNavLayout == null) {
                    } else {
                        this.removeView(this.mListNavLayout);
                    }
                    break;
                case 2:
                    if ((this.mTabScrollView == null) || (!this.mIncludeTabs)) {
                    } else {
                        this.removeView(this.mTabScrollView);
                    }
                    break;
            }
            switch (p7) {
                case 1:
                    if (this.mSpinner == null) {
                        this.mSpinner = new com.actionbarsherlock.internal.widget.IcsSpinner(this.mContext, 0, com.actionbarsherlock.R$attr.actionDropDownStyle);
                        this.mListNavLayout = ((com.actionbarsherlock.internal.widget.IcsLinearLayout) android.view.LayoutInflater.from(this.mContext).inflate(com.actionbarsherlock.R$layout.abs__action_bar_tab_bar_view, 0));
                        android.widget.LinearLayout$LayoutParams v1_1 = new android.widget.LinearLayout$LayoutParams(-2, -1);
                        v1_1.gravity = 17;
                        this.mListNavLayout.addView(this.mSpinner, v1_1);
                    }
                    if (this.mSpinner.getAdapter() != this.mSpinnerAdapter) {
                        this.mSpinner.setAdapter(this.mSpinnerAdapter);
                    }
                    this.mSpinner.setOnItemSelectedListener(this.mNavItemSelectedListener);
                    this.addView(this.mListNavLayout);
                    break;
                case 2:
                    if ((this.mTabScrollView == null) || (!this.mIncludeTabs)) {
                    } else {
                        this.addView(this.mTabScrollView);
                    }
                    break;
            }
            this.mNavigationMode = p7;
            this.requestLayout();
        }
        return;
    }

    public void setSplitActionBar(boolean p4)
    {
        if (this.mSplitActionBar != p4) {
            if (this.mMenuView != null) {
                android.view.ViewGroup v0_1 = ((android.view.ViewGroup) this.mMenuView.getParent());
                if (v0_1 != null) {
                    v0_1.removeView(this.mMenuView);
                }
                if (!p4) {
                    this.addView(this.mMenuView);
                } else {
                    if (this.mSplitView != null) {
                        this.mSplitView.addView(this.mMenuView);
                    }
                }
            }
            if (this.mSplitView != null) {
                com.actionbarsherlock.internal.widget.ActionBarContainer v1_6;
                if (!p4) {
                    v1_6 = 8;
                } else {
                    v1_6 = 0;
                }
                this.mSplitView.setVisibility(v1_6);
            }
            super.setSplitActionBar(p4);
        }
        return;
    }

    public void setSubtitle(CharSequence p6)
    {
        int v2 = 0;
        this.mSubtitle = p6;
        if (this.mSubtitleView != null) {
            boolean v1_0;
            this.mSubtitleView.setText(p6);
            if (p6 == null) {
                v1_0 = 8;
            } else {
                v1_0 = 0;
            }
            int v0;
            this.mSubtitleView.setVisibility(v1_0);
            if ((this.mExpandedActionView != null) || (((this.mDisplayOptions & 8) == 0) || ((android.text.TextUtils.isEmpty(this.mTitle)) && (android.text.TextUtils.isEmpty(this.mSubtitle))))) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            if (v0 == 0) {
                v2 = 8;
            }
            this.mTitleLayout.setVisibility(v2);
        }
        return;
    }

    public void setTitle(CharSequence p2)
    {
        this.mUserTitle = 1;
        this.setTitleImpl(p2);
        return;
    }

    public void setWindowCallback(com.actionbarsherlock.view.Window$Callback p1)
    {
        this.mWindowCallback = p1;
        return;
    }

    public void setWindowTitle(CharSequence p2)
    {
        if (!this.mUserTitle) {
            this.setTitleImpl(p2);
        }
        return;
    }

    public boolean shouldDelayChildPressedState()
    {
        return 0;
    }

    static CapitalizingButton()
    {
        int[] v0_3;
        if (android.os.Build$VERSION.SDK_INT >= 14) {
            v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        int[] v0_0;
        com.actionbarsherlock.internal.widget.CapitalizingButton.SANS_ICE_CREAM = v0_3;
        if (android.os.Build$VERSION.SDK_INT < 9) {
            v0_0 = 0;
        } else {
            v0_0 = 1;
        }
        com.actionbarsherlock.internal.widget.CapitalizingButton.IS_GINGERBREAD = v0_0;
        int[] v0_1 = new int[1];
        v0_1[0] = 16843660;
        com.actionbarsherlock.internal.widget.CapitalizingButton.R_styleable_Button = v0_1;
        return;
    }

    public CapitalizingButton(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, com.actionbarsherlock.internal.widget.CapitalizingButton.R_styleable_Button);
        super.mAllCaps = v0.getBoolean(0, 1);
        v0.recycle();
        return;
    }

    public void setTextCompat(CharSequence p3)
    {
        if ((!com.actionbarsherlock.internal.widget.CapitalizingButton.SANS_ICE_CREAM) || ((!this.mAllCaps) || (p3 == null))) {
            this.setText(p3);
        } else {
            if (!com.actionbarsherlock.internal.widget.CapitalizingButton.IS_GINGERBREAD) {
                this.setText(p3.toString().toUpperCase());
            } else {
                this.setText(p3.toString().toUpperCase(java.util.Locale.ROOT));
            }
        }
        return;
    }

    static CapitalizingTextView()
    {
        int[] v0_3;
        if (android.os.Build$VERSION.SDK_INT >= 14) {
            v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        int[] v0_0;
        com.actionbarsherlock.internal.widget.CapitalizingTextView.SANS_ICE_CREAM = v0_3;
        if (android.os.Build$VERSION.SDK_INT < 9) {
            v0_0 = 0;
        } else {
            v0_0 = 1;
        }
        com.actionbarsherlock.internal.widget.CapitalizingTextView.IS_GINGERBREAD = v0_0;
        int[] v0_1 = new int[1];
        v0_1[0] = 16843660;
        com.actionbarsherlock.internal.widget.CapitalizingTextView.R_styleable_TextView = v0_1;
        return;
    }

    public CapitalizingTextView(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public CapitalizingTextView(android.content.Context p4, android.util.AttributeSet p5, int p6)
    {
        super(p4, p5, p6);
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, com.actionbarsherlock.internal.widget.CapitalizingTextView.R_styleable_TextView, p6, 0);
        super.mAllCaps = v0.getBoolean(0, 1);
        v0.recycle();
        return;
    }

    public void setTextCompat(CharSequence p3)
    {
        if ((!com.actionbarsherlock.internal.widget.CapitalizingTextView.SANS_ICE_CREAM) || ((!this.mAllCaps) || (p3 == null))) {
            this.setText(p3);
        } else {
            if (!com.actionbarsherlock.internal.widget.CapitalizingTextView.IS_GINGERBREAD) {
                this.setText(p3.toString().toUpperCase());
            } else {
                this.setText(p3.toString().toUpperCase(java.util.Locale.ROOT));
            }
        }
        return;
    }

    public FakeDialogPhoneWindow(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        super.mMinWidthMajor = new android.util.TypedValue();
        super.mMinWidthMinor = new android.util.TypedValue();
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, com.actionbarsherlock.R$styleable.SherlockTheme);
        v0.getValue(34, super.mMinWidthMajor);
        v0.getValue(35, super.mMinWidthMinor);
        v0.recycle();
        return;
    }

    protected void onMeasure(int p10, int p11)
    {
        int v0;
        android.util.DisplayMetrics v2 = this.getContext().getResources().getDisplayMetrics();
        if (v2.widthPixels >= v2.heightPixels) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        android.util.TypedValue v4;
        super.onMeasure(p10, p11);
        int v5 = this.getMeasuredWidth();
        int v1 = 0;
        int v10_1 = android.view.View$MeasureSpec.makeMeasureSpec(v5, 1073741824);
        if (v0 == 0) {
            v4 = this.mMinWidthMajor;
        } else {
            v4 = this.mMinWidthMinor;
        }
        if (v4.type != 0) {
            int v3;
            if (v4.type != 5) {
                if (v4.type != 6) {
                    v3 = 0;
                } else {
                    v3 = ((int) v4.getFraction(((float) v2.widthPixels), ((float) v2.widthPixels)));
                }
            } else {
                v3 = ((int) v4.getDimension(v2));
            }
            if (v5 < v3) {
                v10_1 = android.view.View$MeasureSpec.makeMeasureSpec(v3, 1073741824);
                v1 = 1;
            }
        }
        if (v1 != 0) {
            super.onMeasure(v10_1, p11);
        }
        return;
    }

    IcsAbsSpinner$RecycleBin(com.actionbarsherlock.internal.widget.IcsAbsSpinner p2)
    {
        this.this$0 = p2;
        this.mScrapHeap = new android.util.SparseArray();
        return;
    }

    void clear()
    {
        android.util.SparseArray v2 = this.mScrapHeap;
        int v0 = v2.size();
        int v1 = 0;
        while (v1 < v0) {
            android.view.View v3_1 = ((android.view.View) v2.valueAt(v1));
            if (v3_1 != null) {
                com.actionbarsherlock.internal.widget.IcsAbsSpinner.access$2(this.this$0, v3_1, 1);
            }
            v1++;
        }
        v2.clear();
        return;
    }

    android.view.View get(int p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mScrapHeap.get(p3));
        if (v0_1 != null) {
            this.mScrapHeap.delete(p3);
        }
        return v0_1;
    }

    public void put(int p2, android.view.View p3)
    {
        this.mScrapHeap.put(p2, p3);
        return;
    }

    IcsAbsSpinner$SavedState$1()
    {
        return;
    }

    public com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState createFromParcel(android.os.Parcel p3)
    {
        return new com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState(p3, 0);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState[] newArray(int p2)
    {
        com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState[] v0 = new com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static IcsAbsSpinner$SavedState()
    {
        com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState.CREATOR = new com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1();
        return;
    }

    private IcsAbsSpinner$SavedState(android.os.Parcel p3)
    {
        super(p3);
        super.selectedId = p3.readLong();
        super.position = p3.readInt();
        return;
    }

    synthetic IcsAbsSpinner$SavedState(android.os.Parcel p1, com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState p2)
    {
        this(p1);
        return;
    }

    IcsAbsSpinner$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public String toString()
    {
        return new StringBuilder("AbsSpinner.SavedState{").append(Integer.toHexString(System.identityHashCode(this))).append(" selectedId=").append(this.selectedId).append(" position=").append(this.position).append("}").toString();
    }

    public void writeToParcel(android.os.Parcel p3, int p4)
    {
        super.writeToParcel(p3, p4);
        p3.writeLong(this.selectedId);
        p3.writeInt(this.position);
        return;
    }

    public IcsAdapterView(android.content.Context p5)
    {
        super(p5);
        super.mFirstPosition = 0;
        super.mSyncRowId = -0.0;
        super.mNeedSync = 0;
        super.mInLayout = 0;
        super.mNextSelectedPosition = -1;
        super.mNextSelectedRowId = -0.0;
        super.mSelectedPosition = -1;
        super.mSelectedRowId = -0.0;
        super.mOldSelectedPosition = -1;
        super.mOldSelectedRowId = -0.0;
        super.mBlockLayoutRequests = 0;
        return;
    }

    public IcsAdapterView(android.content.Context p5, android.util.AttributeSet p6)
    {
        super(p5, p6);
        super.mFirstPosition = 0;
        super.mSyncRowId = -0.0;
        super.mNeedSync = 0;
        super.mInLayout = 0;
        super.mNextSelectedPosition = -1;
        super.mNextSelectedRowId = -0.0;
        super.mSelectedPosition = -1;
        super.mSelectedRowId = -0.0;
        super.mOldSelectedPosition = -1;
        super.mOldSelectedRowId = -0.0;
        super.mBlockLayoutRequests = 0;
        return;
    }

    public IcsAdapterView(android.content.Context p5, android.util.AttributeSet p6, int p7)
    {
        super(p5, p6, p7);
        super.mFirstPosition = 0;
        super.mSyncRowId = -0.0;
        super.mNeedSync = 0;
        super.mInLayout = 0;
        super.mNextSelectedPosition = -1;
        super.mNextSelectedRowId = -0.0;
        super.mSelectedPosition = -1;
        super.mSelectedRowId = -0.0;
        super.mOldSelectedPosition = -1;
        super.mOldSelectedRowId = -0.0;
        super.mBlockLayoutRequests = 0;
        return;
    }

    static synthetic void access$0(com.actionbarsherlock.internal.widget.IcsAdapterView p0, android.os.Parcelable p1)
    {
        p0.onRestoreInstanceState(p1);
        return;
    }

    static synthetic android.os.Parcelable access$1(com.actionbarsherlock.internal.widget.IcsAdapterView p1)
    {
        return p1.onSaveInstanceState();
    }

    static synthetic void access$2(com.actionbarsherlock.internal.widget.IcsAdapterView p0)
    {
        p0.fireOnSelected();
        return;
    }

    private void fireOnSelected()
    {
        if (this.mOnItemSelectedListener != null) {
            int v3 = this.getSelectedItemPosition();
            if (v3 < 0) {
                this.mOnItemSelectedListener.onNothingSelected(this);
            } else {
                this.mOnItemSelectedListener.onItemSelected(this, this.getSelectedView(), v3, this.getAdapter().getItemId(v3));
            }
        }
        return;
    }

    private boolean isScrollableForAccessibility()
    {
        int v2 = 0;
        android.widget.Adapter v0 = this.getAdapter();
        if (v0 != null) {
            int v1 = v0.getCount();
            if ((v1 > 0) && ((this.getFirstVisiblePosition() > 0) || (this.getLastVisiblePosition() < (v1 - 1)))) {
                v2 = 1;
            }
        }
        return v2;
    }

    private void updateEmptyStatus(boolean p7)
    {
        if (this.isInFilterMode()) {
            p7 = 0;
        }
        if (p7 == 0) {
            if (this.mEmptyView != null) {
                this.mEmptyView.setVisibility(8);
            }
            this.setVisibility(0);
        } else {
            if (this.mEmptyView == null) {
                this.setVisibility(0);
            } else {
                this.mEmptyView.setVisibility(0);
                this.setVisibility(8);
            }
            if (this.mDataChanged) {
                this.onLayout(0, this.getLeft(), this.getTop(), this.getRight(), this.getBottom());
            }
        }
        return;
    }

    public void addView(android.view.View p3)
    {
        throw new UnsupportedOperationException("addView(View) is not supported in AdapterView");
    }

    public void addView(android.view.View p3, int p4)
    {
        throw new UnsupportedOperationException("addView(View, int) is not supported in AdapterView");
    }

    public void addView(android.view.View p3, int p4, android.view.ViewGroup$LayoutParams p5)
    {
        throw new UnsupportedOperationException("addView(View, int, LayoutParams) is not supported in AdapterView");
    }

    public void addView(android.view.View p3, android.view.ViewGroup$LayoutParams p4)
    {
        throw new UnsupportedOperationException("addView(View, LayoutParams) is not supported in AdapterView");
    }

    protected boolean canAnimate()
    {
        if ((!super.canAnimate()) || (this.mItemCount <= 0)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    void checkFocus()
    {
        int v1;
        int v5 = 0;
        android.widget.Adapter v0 = this.getAdapter();
        if ((v0 == null) || (v0.getCount() == 0)) {
            v1 = 1;
        } else {
            v1 = 0;
        }
        if ((v1 == 0) || (this.isInFilterMode())) {
            int v2 = 1;
        } else {
            v2 = 0;
        }
        if ((v2 == 0) || (!this.mDesiredFocusableInTouchModeState)) {
            boolean v3_2 = 0;
        } else {
            v3_2 = 1;
        }
        boolean v3_4;
        super.setFocusableInTouchMode(v3_2);
        if ((v2 == 0) || (!this.mDesiredFocusableState)) {
            v3_4 = 0;
        } else {
            v3_4 = 1;
        }
        super.setFocusable(v3_4);
        if (this.mEmptyView != null) {
            if ((v0 == null) || (v0.isEmpty())) {
                v5 = 1;
            }
            this.updateEmptyStatus(v5);
        }
        return;
    }

    void checkSelectionChanged()
    {
        if ((this.mSelectedPosition != this.mOldSelectedPosition) || (this.mSelectedRowId != this.mOldSelectedRowId)) {
            this.selectionChanged();
            this.mOldSelectedPosition = this.mSelectedPosition;
            this.mOldSelectedRowId = this.mSelectedRowId;
        }
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p3)
    {
        int v1_0;
        android.view.View v0 = this.getSelectedView();
        if ((v0 == null) || ((v0.getVisibility() != 0) || (!v0.dispatchPopulateAccessibilityEvent(p3)))) {
            v1_0 = 0;
        } else {
            v1_0 = 1;
        }
        return v1_0;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray p1)
    {
        this.dispatchThawSelfOnly(p1);
        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray p1)
    {
        this.dispatchFreezeSelfOnly(p1);
        return;
    }

    int findSyncPosition()
    {
        int v14_1;
        int v2 = this.mItemCount;
        if (v2 != 0) {
            long v8 = this.mSyncRowId;
            if (v8 != -0.0) {
                v14_1 = Math.min((v2 - 1), Math.max(0, this.mSyncPosition));
                long v3 = (android.os.SystemClock.uptimeMillis() + 100);
                int v5 = v14_1;
                int v10 = v14_1;
                int v11 = 0;
                android.widget.Adapter v1 = this.getAdapter();
                if (v1 == null) {
                    v14_1 = -1;
                    return v14_1;
                }
                while (android.os.SystemClock.uptimeMillis() <= v3) {
                    if (v1.getItemId(v14_1) == v8) {
                        return v14_1;
                    } else {
                        int v7;
                        if (v10 != (v2 - 1)) {
                            v7 = 0;
                        } else {
                            v7 = 1;
                        }
                        int v6;
                        if (v5 != 0) {
                            v6 = 0;
                        } else {
                            v6 = 1;
                        }
                        if ((v7 != 0) && (v6 != 0)) {
                            break;
                        }
                        if ((v6 == 0) && ((v11 == 0) || (v7 != 0))) {
                            if ((v7 != 0) || ((v11 == 0) && (v6 == 0))) {
                                v5--;
                                v14_1 = v5;
                                v11 = 1;
                            }
                        } else {
                            v10++;
                            v14_1 = v10;
                            v11 = 0;
                        }
                        return v14_1;
                    }
                }
                v14_1 = -1;
            } else {
                v14_1 = -1;
            }
        } else {
            v14_1 = -1;
        }
        return v14_1;
    }

    public abstract android.widget.Adapter getAdapter();

    public int getCount()
    {
        return this.mItemCount;
    }

    public android.view.View getEmptyView()
    {
        return this.mEmptyView;
    }

    public int getFirstVisiblePosition()
    {
        return this.mFirstPosition;
    }

    public Object getItemAtPosition(int p3)
    {
        Object v1;
        android.widget.Adapter v0 = this.getAdapter();
        if ((v0 != null) && (p3 >= 0)) {
            v1 = v0.getItem(p3);
        } else {
            v1 = 0;
        }
        return v1;
    }

    public long getItemIdAtPosition(int p4)
    {
        long v1;
        android.widget.Adapter v0 = this.getAdapter();
        if ((v0 != null) && (p4 >= 0)) {
            v1 = v0.getItemId(p4);
        } else {
            v1 = -0.0;
        }
        return v1;
    }

    public int getLastVisiblePosition()
    {
        return ((this.mFirstPosition + this.getChildCount()) - 1);
    }

    public final android.widget.AdapterView$OnItemClickListener getOnItemClickListener()
    {
        return this.mOnItemClickListener;
    }

    public final com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemLongClickListener getOnItemLongClickListener()
    {
        return this.mOnItemLongClickListener;
    }

    public final com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener getOnItemSelectedListener()
    {
        return this.mOnItemSelectedListener;
    }

    public int getPositionForView(android.view.View p8)
    {
        int v5_0 = -1;
        android.view.View v3 = p8;
        try {
            while(true) {
                android.view.View v4_1 = ((android.view.View) v3.getParent());
                v3 = v4_1;
            }
            int v0 = this.getChildCount();
            int v2 = 0;
            while (v2 < v0) {
                if (!this.getChildAt(v2).equals(v3)) {
                    v2++;
                } else {
                    v5_0 = (this.mFirstPosition + v2);
                    break;
                }
            }
            return v5_0;
        } catch (ClassCastException v1) {
            return v5_0;
        }
        if (!v4_1.equals(this)) {
        }
    }

    public Object getSelectedItem()
    {
        Object v2_0;
        android.widget.Adapter v0 = this.getAdapter();
        int v1 = this.getSelectedItemPosition();
        if ((v0 == null) || ((v0.getCount() <= 0) || (v1 < 0))) {
            v2_0 = 0;
        } else {
            v2_0 = v0.getItem(v1);
        }
        return v2_0;
    }

    public long getSelectedItemId()
    {
        return this.mNextSelectedRowId;
    }

    public int getSelectedItemPosition()
    {
        return this.mNextSelectedPosition;
    }

    public abstract android.view.View getSelectedView();

    void handleDataChanged()
    {
        int v0 = this.mItemCount;
        int v1 = 0;
        if (v0 > 0) {
            if (this.mNeedSync) {
                this.mNeedSync = 0;
                int v2_0 = this.findSyncPosition();
                if ((v2_0 >= 0) && (this.lookForSelectablePosition(v2_0, 1) == v2_0)) {
                    this.setNextSelectedPositionInt(v2_0);
                    v1 = 1;
                }
            }
            if (v1 == 0) {
                int v2_1 = this.getSelectedItemPosition();
                if (v2_1 >= v0) {
                    v2_1 = (v0 - 1);
                }
                if (v2_1 < 0) {
                    v2_1 = 0;
                }
                int v3_1 = this.lookForSelectablePosition(v2_1, 1);
                if (v3_1 < 0) {
                    v3_1 = this.lookForSelectablePosition(v2_1, 0);
                }
                if (v3_1 >= 0) {
                    this.setNextSelectedPositionInt(v3_1);
                    this.checkSelectionChanged();
                    v1 = 1;
                }
            }
        }
        if (v1 == 0) {
            this.mSelectedPosition = -1;
            this.mSelectedRowId = -0.0;
            this.mNextSelectedPosition = -1;
            this.mNextSelectedRowId = -0.0;
            this.mNeedSync = 0;
            this.checkSelectionChanged();
        }
        return;
    }

    boolean isInFilterMode()
    {
        return 0;
    }

    int lookForSelectablePosition(int p1, boolean p2)
    {
        return p1;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.removeCallbacks(this.mSelectionNotifier);
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent p3)
    {
        super.onInitializeAccessibilityEvent(p3);
        p3.setScrollable(this.isScrollableForAccessibility());
        android.view.View v0 = this.getSelectedView();
        if (v0 != null) {
            p3.setEnabled(v0.isEnabled());
        }
        p3.setCurrentItemIndex(this.getSelectedItemPosition());
        p3.setFromIndex(this.getFirstVisiblePosition());
        p3.setToIndex(this.getLastVisiblePosition());
        p3.setItemCount(this.getCount());
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo p3)
    {
        super.onInitializeAccessibilityNodeInfo(p3);
        p3.setScrollable(this.isScrollableForAccessibility());
        android.view.View v0 = this.getSelectedView();
        if (v0 != null) {
            p3.setEnabled(v0.isEnabled());
        }
        return;
    }

    protected void onLayout(boolean p2, int p3, int p4, int p5, int p6)
    {
        this.mLayoutHeight = this.getHeight();
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        int v1_1;
        if (!super.onRequestSendAccessibilityEvent(p3, p4)) {
            v1_1 = 0;
        } else {
            android.view.accessibility.AccessibilityEvent v0 = android.view.accessibility.AccessibilityEvent.obtain();
            this.onInitializeAccessibilityEvent(v0);
            p3.dispatchPopulateAccessibilityEvent(v0);
            p4.appendRecord(v0);
            v1_1 = 1;
        }
        return v1_1;
    }

    public boolean performItemClick(android.view.View p8, int p9, long p10)
    {
        int v0_0 = 0;
        if (this.mOnItemClickListener != null) {
            this.playSoundEffect(0);
            if (p8 != null) {
                p8.sendAccessibilityEvent(1);
            }
            this.mOnItemClickListener.onItemClick(0, p8, p9, p10);
            v0_0 = 1;
        }
        return v0_0;
    }

    void rememberSyncState()
    {
        if (this.getChildCount() > 0) {
            this.mNeedSync = 1;
            this.mSyncHeight = ((long) this.mLayoutHeight);
            if (this.mSelectedPosition < 0) {
                android.view.View v1_0 = this.getChildAt(0);
                android.widget.Adapter v0 = this.getAdapter();
                if ((this.mFirstPosition < 0) || (this.mFirstPosition >= v0.getCount())) {
                    this.mSyncRowId = -1;
                } else {
                    this.mSyncRowId = v0.getItemId(this.mFirstPosition);
                }
                this.mSyncPosition = this.mFirstPosition;
                if (v1_0 != null) {
                    this.mSpecificTop = v1_0.getTop();
                }
                this.mSyncMode = 1;
            } else {
                android.view.View v1_1 = this.getChildAt((this.mSelectedPosition - this.mFirstPosition));
                this.mSyncRowId = this.mNextSelectedRowId;
                this.mSyncPosition = this.mNextSelectedPosition;
                if (v1_1 != null) {
                    this.mSpecificTop = v1_1.getTop();
                }
                this.mSyncMode = 0;
            }
        }
        return;
    }

    public void removeAllViews()
    {
        throw new UnsupportedOperationException("removeAllViews() is not supported in AdapterView");
    }

    public void removeView(android.view.View p3)
    {
        throw new UnsupportedOperationException("removeView(View) is not supported in AdapterView");
    }

    public void removeViewAt(int p3)
    {
        throw new UnsupportedOperationException("removeViewAt(int) is not supported in AdapterView");
    }

    void selectionChanged()
    {
        if (this.mOnItemSelectedListener != null) {
            if ((!this.mInLayout) && (!this.mBlockLayoutRequests)) {
                this.fireOnSelected();
            } else {
                if (this.mSelectionNotifier == null) {
                    this.mSelectionNotifier = new com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier(this, 0);
                }
                this.post(this.mSelectionNotifier);
            }
        }
        if ((this.mSelectedPosition != -1) && ((this.isShown()) && (!this.isInTouchMode()))) {
            this.sendAccessibilityEvent(4);
        }
        return;
    }

    public abstract void setAdapter();

    public void setEmptyView(android.view.View p4)
    {
        int v1;
        this.mEmptyView = p4;
        android.widget.Adapter v0 = this.getAdapter();
        if ((v0 == null) || (v0.isEmpty())) {
            v1 = 1;
        } else {
            v1 = 0;
        }
        this.updateEmptyStatus(v1);
        return;
    }

    public void setFocusable(boolean p6)
    {
        int v1;
        int v3 = 1;
        android.widget.Adapter v0 = this.getAdapter();
        if ((v0 == null) || (v0.getCount() == 0)) {
            v1 = 1;
        } else {
            v1 = 0;
        }
        this.mDesiredFocusableState = p6;
        if (!p6) {
            this.mDesiredFocusableInTouchModeState = 0;
        }
        if ((!p6) || ((v1 != 0) && (!this.isInFilterMode()))) {
            v3 = 0;
        }
        super.setFocusable(v3);
        return;
    }

    public void setFocusableInTouchMode(boolean p6)
    {
        int v1;
        int v3 = 1;
        android.widget.Adapter v0 = this.getAdapter();
        if ((v0 == null) || (v0.getCount() == 0)) {
            v1 = 1;
        } else {
            v1 = 0;
        }
        this.mDesiredFocusableInTouchModeState = p6;
        if (p6) {
            this.mDesiredFocusableState = 1;
        }
        if ((!p6) || ((v1 != 0) && (!this.isInFilterMode()))) {
            v3 = 0;
        }
        super.setFocusableInTouchMode(v3);
        return;
    }

    void setNextSelectedPositionInt(int p3)
    {
        this.mNextSelectedPosition = p3;
        this.mNextSelectedRowId = this.getItemIdAtPosition(p3);
        if ((this.mNeedSync) && ((this.mSyncMode == 0) && (p3 >= 0))) {
            this.mSyncPosition = p3;
            this.mSyncRowId = this.mNextSelectedRowId;
        }
        return;
    }

    public void setOnClickListener(android.view.View$OnClickListener p3)
    {
        throw new RuntimeException("Don\'t call setOnClickListener for an AdapterView. You probably want setOnItemClickListener instead");
    }

    public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener p1)
    {
        this.mOnItemClickListener = p1;
        return;
    }

    public void setOnItemLongClickListener(com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemLongClickListener p2)
    {
        if (!this.isLongClickable()) {
            this.setLongClickable(1);
        }
        this.mOnItemLongClickListener = p2;
        return;
    }

    public void setOnItemSelectedListener(com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener p1)
    {
        this.mOnItemSelectedListener = p1;
        return;
    }

    void setSelectedPositionInt(int p3)
    {
        this.mSelectedPosition = p3;
        this.mSelectedRowId = this.getItemIdAtPosition(p3);
        return;
    }

    public abstract void setSelection();

    static IcsAbsSpinner()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        com.actionbarsherlock.internal.widget.IcsAbsSpinner.IS_HONEYCOMB = v0_1;
        return;
    }

    public IcsAbsSpinner(android.content.Context p2)
    {
        super(p2);
        super.mSelectionLeftPadding = 0;
        super.mSelectionTopPadding = 0;
        super.mSelectionRightPadding = 0;
        super.mSelectionBottomPadding = 0;
        super.mSpinnerPadding = new android.graphics.Rect();
        super.mRecycler = new com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin(super);
        super.initAbsSpinner();
        return;
    }

    public IcsAbsSpinner(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public IcsAbsSpinner(android.content.Context p2, android.util.AttributeSet p3, int p4)
    {
        super(p2, p3, p4);
        super.mSelectionLeftPadding = 0;
        super.mSelectionTopPadding = 0;
        super.mSelectionRightPadding = 0;
        super.mSelectionBottomPadding = 0;
        super.mSpinnerPadding = new android.graphics.Rect();
        super.mRecycler = new com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin(super);
        super.initAbsSpinner();
        return;
    }

    static synthetic void access$2(com.actionbarsherlock.internal.widget.IcsAbsSpinner p0, android.view.View p1, boolean p2)
    {
        p0.removeDetachedView(p1, p2);
        return;
    }

    private void initAbsSpinner()
    {
        this.setFocusable(1);
        this.setWillNotDraw(0);
        return;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        return new android.view.ViewGroup$LayoutParams(-1, -2);
    }

    public bridge synthetic android.widget.Adapter getAdapter()
    {
        return this.getAdapter();
    }

    public android.widget.SpinnerAdapter getAdapter()
    {
        return this.mAdapter;
    }

    int getChildHeight(android.view.View p2)
    {
        return p2.getMeasuredHeight();
    }

    int getChildWidth(android.view.View p2)
    {
        return p2.getMeasuredWidth();
    }

    public int getCount()
    {
        return this.mItemCount;
    }

    public android.view.View getSelectedView()
    {
        if ((this.mItemCount <= 0) || (this.mSelectedPosition < 0)) {
            android.view.View v0_2 = 0;
        } else {
            v0_2 = this.getChildAt((this.mSelectedPosition - this.mFirstPosition));
        }
        return v0_2;
    }

    abstract void layout();

    protected void onMeasure(int p18, int p19)
    {
        int v13 = android.view.View$MeasureSpec.getMode(p18);
        int v5 = this.getPaddingLeft();
        int v7 = this.getPaddingTop();
        int v6 = this.getPaddingRight();
        int v4 = this.getPaddingBottom();
        if (v5 <= this.mSelectionLeftPadding) {
            v5 = this.mSelectionLeftPadding;
        }
        this.mSpinnerPadding.left = v5;
        if (v7 <= this.mSelectionTopPadding) {
            v7 = this.mSelectionTopPadding;
        }
        this.mSpinnerPadding.top = v7;
        if (v6 <= this.mSelectionRightPadding) {
            v6 = this.mSelectionRightPadding;
        }
        this.mSpinnerPadding.right = v6;
        if (v4 <= this.mSelectionBottomPadding) {
            v4 = this.mSelectionBottomPadding;
        }
        this.mSpinnerPadding.bottom = v4;
        if (this.mDataChanged) {
            this.handleDataChanged();
        }
        int v9_0 = 0;
        int v10_0 = 0;
        int v8 = 1;
        int v11 = this.getSelectedItemPosition();
        if ((v11 >= 0) && ((this.mAdapter != null) && (v11 < this.mAdapter.getCount()))) {
            android.view.View v12 = this.mRecycler.get(v11);
            if (v12 == null) {
                v12 = this.mAdapter.getView(v11, 0, this);
            }
            if (v12 != null) {
                this.mRecycler.put(v11, v12);
            }
            if (v12 != null) {
                if (v12.getLayoutParams() == null) {
                    this.mBlockLayoutRequests = 1;
                    v12.setLayoutParams(this.generateDefaultLayoutParams());
                    this.mBlockLayoutRequests = 0;
                }
                this.measureChild(v12, p18, p19);
                v9_0 = ((this.getChildHeight(v12) + this.mSpinnerPadding.top) + this.mSpinnerPadding.bottom);
                v10_0 = ((this.getChildWidth(v12) + this.mSpinnerPadding.left) + this.mSpinnerPadding.right);
                v8 = 0;
            }
        }
        if (v8 != 0) {
            v9_0 = (this.mSpinnerPadding.top + this.mSpinnerPadding.bottom);
            if (v13 == 0) {
                v10_0 = (this.mSpinnerPadding.left + this.mSpinnerPadding.right);
            }
        }
        int v14;
        int v3;
        int v9_1 = Math.max(v9_0, this.getSuggestedMinimumHeight());
        int v10_1 = Math.max(v10_0, this.getSuggestedMinimumWidth());
        if (!com.actionbarsherlock.internal.widget.IcsAbsSpinner.IS_HONEYCOMB) {
            v3 = com.actionbarsherlock.internal.widget.IcsAbsSpinner.resolveSize(v9_1, p19);
            v14 = com.actionbarsherlock.internal.widget.IcsAbsSpinner.resolveSize(v10_1, p18);
        } else {
            v3 = com.actionbarsherlock.internal.widget.IcsAbsSpinner.resolveSizeAndState(v9_1, p19, 0);
            v14 = com.actionbarsherlock.internal.widget.IcsAbsSpinner.resolveSizeAndState(v10_1, p18, 0);
        }
        this.setMeasuredDimension(v14, v3);
        this.mHeightMeasureSpec = p19;
        this.mWidthMeasureSpec = p18;
        return;
    }

    public void onRestoreInstanceState(android.os.Parcelable p7)
    {
        super.onRestoreInstanceState(((com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState) p7).getSuperState());
        if (((com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState) p7).selectedId >= 0) {
            this.mDataChanged = 1;
            this.mNeedSync = 1;
            this.mSyncRowId = ((com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState) p7).selectedId;
            this.mSyncPosition = ((com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState) p7).position;
            this.mSyncMode = 0;
            this.requestLayout();
        }
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState v0_1 = new com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState(super.onSaveInstanceState());
        v0_1.selectedId = this.getSelectedItemId();
        if (v0_1.selectedId < 0) {
            v0_1.position = -1;
        } else {
            v0_1.position = this.getSelectedItemPosition();
        }
        return v0_1;
    }

    public int pointToPosition(int p6, int p7)
    {
        android.graphics.Rect v2 = this.mTouchFrame;
        if (v2 == null) {
            this.mTouchFrame = new android.graphics.Rect();
            v2 = this.mTouchFrame;
        }
        int v3 = (this.getChildCount() - 1);
        while (v3 >= 0) {
            android.view.View v0 = this.getChildAt(v3);
            if (v0.getVisibility() == 0) {
                v0.getHitRect(v2);
                if (v2.contains(p6, p7)) {
                    int v4_4 = (this.mFirstPosition + v3);
                    return v4_4;
                }
            }
            v3--;
        }
        v4_4 = -1;
        return v4_4;
    }

    void recycleAllViews()
    {
        int v0 = this.getChildCount();
        int v1 = 0;
        while (v1 < v0) {
            this.mRecycler.put((this.mFirstPosition + v1), this.getChildAt(v1));
            v1++;
        }
        return;
    }

    public void requestLayout()
    {
        if (!this.mBlockLayoutRequests) {
            super.requestLayout();
        }
        return;
    }

    void resetList()
    {
        this.mDataChanged = 0;
        this.mNeedSync = 0;
        this.removeAllViewsInLayout();
        this.mOldSelectedPosition = -1;
        this.mOldSelectedRowId = -0.0;
        this.setSelectedPositionInt(-1);
        this.setNextSelectedPositionInt(-1);
        this.invalidate();
        return;
    }

    public bridge synthetic void setAdapter(android.widget.Adapter p1)
    {
        this.setAdapter(((android.widget.SpinnerAdapter) p1));
        return;
    }

    public void setAdapter(android.widget.SpinnerAdapter p4)
    {
        int v0 = -1;
        if (this.mAdapter != null) {
            this.mAdapter.unregisterDataSetObserver(this.mDataSetObserver);
            this.resetList();
        }
        this.mAdapter = p4;
        this.mOldSelectedPosition = -1;
        this.mOldSelectedRowId = -0.0;
        if (this.mAdapter == null) {
            this.checkFocus();
            this.resetList();
            this.checkSelectionChanged();
        } else {
            this.mOldItemCount = this.mItemCount;
            this.mItemCount = this.mAdapter.getCount();
            this.checkFocus();
            this.mDataSetObserver = new com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver(this);
            this.mAdapter.registerDataSetObserver(this.mDataSetObserver);
            if (this.mItemCount > 0) {
                v0 = 0;
            }
            this.setSelectedPositionInt(v0);
            this.setNextSelectedPositionInt(v0);
            if (this.mItemCount == 0) {
                this.checkSelectionChanged();
            }
        }
        this.requestLayout();
        return;
    }

    public void setSelection(int p1)
    {
        this.setNextSelectedPositionInt(p1);
        this.requestLayout();
        this.invalidate();
        return;
    }

    public void setSelection(int p4, boolean p5)
    {
        if ((!p5) || ((this.mFirstPosition > p4) || (p4 > ((this.mFirstPosition + this.getChildCount()) - 1)))) {
            int v0 = 0;
        } else {
            v0 = 1;
        }
        this.setSelectionInt(p4, v0);
        return;
    }

    void setSelectionInt(int p3, boolean p4)
    {
        if (p3 != this.mOldSelectedPosition) {
            this.mBlockLayoutRequests = 1;
            int v0 = (p3 - this.mSelectedPosition);
            this.setNextSelectedPositionInt(p3);
            this.layout(v0, p4);
            this.mBlockLayoutRequests = 0;
        }
        return;
    }

    public IcsAdapterView$AdapterContextMenuInfo(android.view.View p1, int p2, long p3)
    {
        this.targetView = p1;
        this.position = p2;
        this.id = p3;
        return;
    }

    IcsAdapterView$AdapterDataSetObserver(com.actionbarsherlock.internal.widget.IcsAdapterView p2)
    {
        this.this$0 = p2;
        this.mInstanceState = 0;
        return;
    }

    public void clearSavedState()
    {
        this.mInstanceState = 0;
        return;
    }

    public void onChanged()
    {
        this.this$0.mDataChanged = 1;
        this.this$0.mOldItemCount = this.this$0.mItemCount;
        this.this$0.mItemCount = this.this$0.getAdapter().getCount();
        if ((!this.this$0.getAdapter().hasStableIds()) || ((this.mInstanceState == null) || ((this.this$0.mOldItemCount != 0) || (this.this$0.mItemCount <= 0)))) {
            this.this$0.rememberSyncState();
        } else {
            com.actionbarsherlock.internal.widget.IcsAdapterView.access$0(this.this$0, this.mInstanceState);
            this.mInstanceState = 0;
        }
        this.this$0.checkFocus();
        this.this$0.requestLayout();
        return;
    }

    public void onInvalidated()
    {
        this.this$0.mDataChanged = 1;
        if (this.this$0.getAdapter().hasStableIds()) {
            this.mInstanceState = com.actionbarsherlock.internal.widget.IcsAdapterView.access$1(this.this$0);
        }
        this.this$0.mOldItemCount = this.this$0.mItemCount;
        this.this$0.mItemCount = 0;
        this.this$0.mSelectedPosition = -1;
        this.this$0.mSelectedRowId = -0.0;
        this.this$0.mNextSelectedPosition = -1;
        this.this$0.mNextSelectedRowId = -0.0;
        this.this$0.mNeedSync = 0;
        this.this$0.checkFocus();
        this.this$0.requestLayout();
        return;
    }

    public abstract boolean onItemLongClick();

    private IcsAdapterView$SelectionNotifier(com.actionbarsherlock.internal.widget.IcsAdapterView p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic IcsAdapterView$SelectionNotifier(com.actionbarsherlock.internal.widget.IcsAdapterView p1, com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier p2)
    {
        this(p1);
        return;
    }

    public void run()
    {
        if (!this.this$0.mDataChanged) {
            com.actionbarsherlock.internal.widget.IcsAdapterView.access$2(this.this$0);
        } else {
            if (this.this$0.getAdapter() != null) {
                this.this$0.post(this);
            }
        }
        return;
    }

    IcsListPopupWindow$1(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemSelected(android.widget.AdapterView p3, android.view.View p4, int p5, long p6)
    {
        if (p5 != -1) {
            com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView v0 = com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$0(this.this$0);
            if (v0 != null) {
                com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView.access$0(v0, 0);
            }
        }
        return;
    }

    public void onNothingSelected(android.widget.AdapterView p1)
    {
        return;
    }

    public IcsListPopupWindow$DropDownListView(android.content.Context p3, boolean p4)
    {
        super(p3, 0, com.actionbarsherlock.R$attr.dropDownListViewStyle);
        super.mHijackFocus = p4;
        super.setCacheColorHint(0);
        return;
    }

    static synthetic void access$0(com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView p0, boolean p1)
    {
        p0.mListSelectionHidden = p1;
        return;
    }

    public boolean hasFocus()
    {
        if ((this.mHijackFocus) || (super.hasFocus())) {
            int v0_2 = 1;
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean hasWindowFocus()
    {
        if ((this.mHijackFocus) || (super.hasWindowFocus())) {
            int v0_2 = 1;
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isFocused()
    {
        if ((this.mHijackFocus) || (super.isFocused())) {
            int v0_2 = 1;
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isInTouchMode()
    {
        if (((this.mHijackFocus) && (this.mListSelectionHidden)) || (super.isInTouchMode())) {
            int v0_3 = 1;
        } else {
            v0_3 = 0;
        }
        return v0_3;
    }

    private IcsListPopupWindow$ListSelectorHider(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic IcsListPopupWindow$ListSelectorHider(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1, com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider p2)
    {
        this(p1);
        return;
    }

    public void run()
    {
        this.this$0.clearListSelection();
        return;
    }

    private IcsListPopupWindow$PopupDataSetObserver(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic IcsListPopupWindow$PopupDataSetObserver(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1, com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver p2)
    {
        this(p1);
        return;
    }

    public void onChanged()
    {
        if (this.this$0.isShowing()) {
            this.this$0.show();
        }
        return;
    }

    public void onInvalidated()
    {
        this.this$0.dismiss();
        return;
    }

    private IcsListPopupWindow$PopupScrollListener(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic IcsListPopupWindow$PopupScrollListener(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1, com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener p2)
    {
        this(p1);
        return;
    }

    public void onScroll(android.widget.AbsListView p1, int p2, int p3, int p4)
    {
        return;
    }

    public void onScrollStateChanged(android.widget.AbsListView p3, int p4)
    {
        if ((p4 == 1) && ((!com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$5(this.this$0)) && (com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$2(this.this$0).getContentView() != null))) {
            com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$3(this.this$0).removeCallbacks(com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$4(this.this$0));
            com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$4(this.this$0).run();
        }
        return;
    }

    private IcsListPopupWindow$PopupTouchInterceptor(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic IcsListPopupWindow$PopupTouchInterceptor(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1, com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor p2)
    {
        this(p1);
        return;
    }

    public boolean onTouch(android.view.View p8, android.view.MotionEvent p9)
    {
        int v0 = p9.getAction();
        int v1 = ((int) p9.getX());
        int v2 = ((int) p9.getY());
        if ((v0 != 0) || ((com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$2(this.this$0) == null) || ((!com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$2(this.this$0).isShowing()) || ((v1 < 0) || ((v1 >= com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$2(this.this$0).getWidth()) || ((v2 < 0) || (v2 >= com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$2(this.this$0).getHeight()))))))) {
            if (v0 == 1) {
                com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$3(this.this$0).removeCallbacks(com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$4(this.this$0));
            }
        } else {
            com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$3(this.this$0).postDelayed(com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$4(this.this$0), 250);
        }
        return 0;
    }

    private IcsListPopupWindow$ResizePopupRunnable(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic IcsListPopupWindow$ResizePopupRunnable(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1, com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable p2)
    {
        this(p1);
        return;
    }

    public void run()
    {
        if ((com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$0(this.this$0) != null) && ((com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$0(this.this$0).getCount() > com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$0(this.this$0).getChildCount()) && (com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$0(this.this$0).getChildCount() <= com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$1(this.this$0)))) {
            com.actionbarsherlock.internal.widget.IcsListPopupWindow.access$2(this.this$0).setInputMethodMode(2);
            this.this$0.show();
        }
        return;
    }

    public IcsListPopupWindow(android.content.Context p3)
    {
        this(p3, 0, com.actionbarsherlock.R$attr.listPopupWindowStyle);
        return;
    }

    public IcsListPopupWindow(android.content.Context p3, android.util.AttributeSet p4, int p5)
    {
        this.mDropDownHeight = -2;
        this.mDropDownWidth = -2;
        this.mListItemExpandMaximum = 2147483647;
        this.mPromptPosition = 0;
        this.mResizePopupRunnable = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable(this, 0);
        this.mTouchInterceptor = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor(this, 0);
        this.mScrollListener = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener(this, 0);
        this.mHideSelector = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider(this, 0);
        this.mHandler = new android.os.Handler();
        this.mTempRect = new android.graphics.Rect();
        this.mContext = p3;
        this.mPopup = new android.widget.PopupWindow(p3, p4, p5);
        this.mPopup.setInputMethodMode(1);
        return;
    }

    public IcsListPopupWindow(android.content.Context p4, android.util.AttributeSet p5, int p6, int p7)
    {
        this.mDropDownHeight = -2;
        this.mDropDownWidth = -2;
        this.mListItemExpandMaximum = 2147483647;
        this.mPromptPosition = 0;
        this.mResizePopupRunnable = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable(this, 0);
        this.mTouchInterceptor = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor(this, 0);
        this.mScrollListener = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener(this, 0);
        this.mHideSelector = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider(this, 0);
        this.mHandler = new android.os.Handler();
        this.mTempRect = new android.graphics.Rect();
        this.mContext = p4;
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            this.mPopup = new android.widget.PopupWindow(p4, p5, p6, p7);
        } else {
            this.mPopup = new android.widget.PopupWindow(new android.view.ContextThemeWrapper(p4, p7), p5, p6);
        }
        this.mPopup.setInputMethodMode(1);
        return;
    }

    static synthetic com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView access$0(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        return p1.mDropDownList;
    }

    static synthetic int access$1(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        return p1.mListItemExpandMaximum;
    }

    static synthetic android.widget.PopupWindow access$2(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        return p1.mPopup;
    }

    static synthetic android.os.Handler access$3(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        return p1.mHandler;
    }

    static synthetic com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable access$4(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        return p1.mResizePopupRunnable;
    }

    static synthetic boolean access$5(com.actionbarsherlock.internal.widget.IcsListPopupWindow p1)
    {
        return p1.isInputMethodNotNeeded();
    }

    private int buildDropDown()
    {
        int v17 = 0;
        if (this.mDropDownList != null) {
            this.mPopup.getContentView();
            android.view.View v19 = this.mPromptView;
            if (v19 != null) {
                android.widget.LinearLayout$LayoutParams v12_3 = ((android.widget.LinearLayout$LayoutParams) v19.getLayoutParams());
                v17 = ((v19.getMeasuredHeight() + v12_3.topMargin) + v12_3.bottomMargin);
            }
        } else {
            int v1_22;
            android.content.Context v8 = this.mContext;
            if (!this.mModal) {
                v1_22 = 1;
            } else {
                v1_22 = 0;
            }
            this.mDropDownList = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView(v8, v1_22);
            if (this.mDropDownListHighlight != null) {
                this.mDropDownList.setSelector(this.mDropDownListHighlight);
            }
            this.mDropDownList.setAdapter(this.mAdapter);
            this.mDropDownList.setOnItemClickListener(this.mItemClickListener);
            this.mDropDownList.setFocusable(1);
            this.mDropDownList.setFocusableInTouchMode(1);
            this.mDropDownList.setOnItemSelectedListener(new com.actionbarsherlock.internal.widget.IcsListPopupWindow$1(this));
            this.mDropDownList.setOnScrollListener(this.mScrollListener);
            if (this.mItemSelectedListener != null) {
                this.mDropDownList.setOnItemSelectedListener(this.mItemSelectedListener);
            }
            android.widget.LinearLayout v9_0 = this.mDropDownList;
            android.view.View v13 = this.mPromptView;
            if (v13 != null) {
                android.widget.LinearLayout v11_1 = new android.widget.LinearLayout(v8);
                v11_1.setOrientation(1);
                android.widget.LinearLayout$LayoutParams v12_5 = new android.widget.LinearLayout$LayoutParams(-1, 0, 1065353216);
                switch (this.mPromptPosition) {
                    case 0:
                        v11_1.addView(v13);
                        v11_1.addView(v9_0, v12_5);
                        break;
                    case 1:
                        v11_1.addView(v9_0, v12_5);
                        v11_1.addView(v13);
                        break;
                }
                v13.measure(android.view.View$MeasureSpec.makeMeasureSpec(this.mDropDownWidth, -2147483648), 0);
                android.widget.LinearLayout$LayoutParams v12_1 = ((android.widget.LinearLayout$LayoutParams) v13.getLayoutParams());
                v17 = ((v13.getMeasuredHeight() + v12_1.topMargin) + v12_1.bottomMargin);
                v9_0 = v11_1;
            }
            this.mPopup.setContentView(v9_0);
        }
        int v18 = 0;
        android.graphics.drawable.Drawable v7 = this.mPopup.getBackground();
        if (v7 != null) {
            v7.getPadding(this.mTempRect);
            v18 = (this.mTempRect.top + this.mTempRect.bottom);
            if (!this.mDropDownVerticalOffsetSet) {
                this.mDropDownVerticalOffset = (- this.mTempRect.top);
            }
        }
        int v14;
        if (this.mPopup.getInputMethodMode() != 2) {
            v14 = 0;
        } else {
            v14 = 1;
        }
        int v1_18;
        int v16 = this.getMaxAvailableHeight(this.mDropDownAnchorView, this.mDropDownVerticalOffset, v14);
        if (this.mDropDownHeight != -1) {
            int v15 = this.measureHeightOfChildren(0, 0, -1, (v16 - v17), -1);
            if (v15 > 0) {
                v17 += v18;
            }
            v1_18 = (v15 + v17);
        } else {
            v1_18 = (v16 + v18);
        }
        return v1_18;
    }

    private int getMaxAvailableHeight(android.view.View p11, int p12, boolean p13)
    {
        android.graphics.Rect v2_1 = new android.graphics.Rect();
        p11.getWindowVisibleDisplayFrame(v2_1);
        int[] v0 = new int[2];
        p11.getLocationOnScreen(v0);
        int v1 = v2_1.bottom;
        if (p13) {
            v1 = p11.getContext().getResources().getDisplayMetrics().heightPixels;
        }
        int v6 = Math.max(((v1 - (v0[1] + p11.getHeight())) - p12), ((v0[1] - v2_1.top) + p12));
        if (this.mPopup.getBackground() != null) {
            this.mPopup.getBackground().getPadding(this.mTempRect);
            v6 -= (this.mTempRect.top + this.mTempRect.bottom);
        }
        return v6;
    }

    private boolean isInputMethodNotNeeded()
    {
        int v0_2;
        if (this.mPopup.getInputMethodMode() != 2) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    private int measureHeightOfChildren(int p10, int p11, int p12, int p13, int p14)
    {
        int v4;
        android.widget.ListAdapter v0 = this.mAdapter;
        if (v0 != null) {
            int v2;
            int v5 = (this.mDropDownList.getListPaddingTop() + this.mDropDownList.getListPaddingBottom());
            if ((this.mDropDownList.getDividerHeight() <= 0) || (this.mDropDownList.getDivider() == null)) {
                v2 = 0;
            } else {
                v2 = this.mDropDownList.getDividerHeight();
            }
            v4 = 0;
            if (p12 == -1) {
                p12 = (v0.getCount() - 1);
            }
            int v3 = p11;
            while (v3 <= p12) {
                android.view.View v1 = this.mAdapter.getView(v3, 0, this.mDropDownList);
                if (this.mDropDownList.getCacheColorHint() != 0) {
                    v1.setDrawingCacheBackgroundColor(this.mDropDownList.getCacheColorHint());
                }
                this.measureScrapChild(v1, v3, p10);
                if (v3 > 0) {
                    v5 += v2;
                }
                v5 += v1.getMeasuredHeight();
                if (v5 < p13) {
                    if ((p14 >= 0) && (v3 >= p14)) {
                        v4 = v5;
                    }
                    v3++;
                } else {
                    if ((p14 < 0) || ((v3 <= p14) || ((v4 <= 0) || (v5 == p13)))) {
                        v4 = p13;
                    }
                }
            }
            v4 = v5;
        } else {
            v4 = (this.mDropDownList.getListPaddingTop() + this.mDropDownList.getListPaddingBottom());
        }
        return v4;
    }

    private void measureScrapChild(android.view.View p8, int p9, int p10)
    {
        android.widget.AbsListView$LayoutParams v3_1 = ((android.widget.AbsListView$LayoutParams) p8.getLayoutParams());
        if (v3_1 == null) {
            v3_1 = new android.widget.AbsListView$LayoutParams(-1, -2, 0);
            p8.setLayoutParams(v3_1);
        }
        int v0;
        int v1 = android.view.ViewGroup.getChildMeasureSpec(p10, (this.mDropDownList.getPaddingLeft() + this.mDropDownList.getPaddingRight()), v3_1.width);
        int v2 = v3_1.height;
        if (v2 <= 0) {
            v0 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
        } else {
            v0 = android.view.View$MeasureSpec.makeMeasureSpec(v2, 1073741824);
        }
        p8.measure(v1, v0);
        return;
    }

    public void clearListSelection()
    {
        com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView v0 = this.mDropDownList;
        if (v0 != null) {
            com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView.access$0(v0, 1);
            v0.requestLayout();
        }
        return;
    }

    public void dismiss()
    {
        this.mPopup.dismiss();
        if (this.mPromptView != null) {
            android.view.ViewParent v1 = this.mPromptView.getParent();
            if ((v1 instanceof android.view.ViewGroup)) {
                ((android.view.ViewGroup) v1).removeView(this.mPromptView);
            }
        }
        this.mPopup.setContentView(0);
        this.mDropDownList = 0;
        this.mHandler.removeCallbacks(this.mResizePopupRunnable);
        return;
    }

    public android.widget.ListView getListView()
    {
        return this.mDropDownList;
    }

    public boolean isShowing()
    {
        return this.mPopup.isShowing();
    }

    public void setAdapter(android.widget.ListAdapter p3)
    {
        if (this.mObserver != null) {
            if (this.mAdapter != null) {
                this.mAdapter.unregisterDataSetObserver(this.mObserver);
            }
        } else {
            this.mObserver = new com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver(this, 0);
        }
        this.mAdapter = p3;
        if (this.mAdapter != null) {
            p3.registerDataSetObserver(this.mObserver);
        }
        if (this.mDropDownList != null) {
            this.mDropDownList.setAdapter(this.mAdapter);
        }
        return;
    }

    public void setAnchorView(android.view.View p1)
    {
        this.mDropDownAnchorView = p1;
        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mPopup.setBackgroundDrawable(p2);
        return;
    }

    public void setContentWidth(int p4)
    {
        android.graphics.drawable.Drawable v0 = this.mPopup.getBackground();
        if (v0 == null) {
            this.mDropDownWidth = p4;
        } else {
            v0.getPadding(this.mTempRect);
            this.mDropDownWidth = ((this.mTempRect.left + this.mTempRect.right) + p4);
        }
        return;
    }

    public void setHorizontalOffset(int p1)
    {
        this.mDropDownHorizontalOffset = p1;
        return;
    }

    public void setInputMethodMode(int p2)
    {
        this.mPopup.setInputMethodMode(p2);
        return;
    }

    public void setModal(boolean p2)
    {
        this.mModal = 1;
        this.mPopup.setFocusable(p2);
        return;
    }

    public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener p2)
    {
        this.mPopup.setOnDismissListener(p2);
        return;
    }

    public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener p1)
    {
        this.mItemClickListener = p1;
        return;
    }

    public void setPromptPosition(int p1)
    {
        this.mPromptPosition = p1;
        return;
    }

    public void setVerticalOffset(int p2)
    {
        this.mDropDownVerticalOffset = p2;
        this.mDropDownVerticalOffsetSet = 1;
        return;
    }

    public void show()
    {
        com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider v1_0 = 0;
        android.os.Handler v0_0 = -1;
        int v6 = this.buildDropDown();
        int v4_0 = 0;
        int v5_0 = 0;
        boolean v7 = this.isInputMethodNotNeeded();
        if (!this.mPopup.isShowing()) {
            if (this.mDropDownWidth != -1) {
                if (this.mDropDownWidth != -2) {
                    this.mPopup.setWidth(this.mDropDownWidth);
                } else {
                    this.mPopup.setWidth(this.mDropDownAnchorView.getWidth());
                }
            } else {
                v4_0 = -1;
            }
            if (this.mDropDownHeight != -1) {
                if (this.mDropDownHeight != -2) {
                    this.mPopup.setHeight(this.mDropDownHeight);
                } else {
                    this.mPopup.setHeight(v6);
                }
            } else {
                v5_0 = -1;
            }
            this.mPopup.setWindowLayoutMode(v4_0, v5_0);
            this.mPopup.setOutsideTouchable(1);
            this.mPopup.setTouchInterceptor(this.mTouchInterceptor);
            this.mPopup.showAsDropDown(this.mDropDownAnchorView, this.mDropDownHorizontalOffset, this.mDropDownVerticalOffset);
            this.mDropDownList.setSelection(-1);
            if ((!this.mModal) || (this.mDropDownList.isInTouchMode())) {
                this.clearListSelection();
            }
            if (!this.mModal) {
                this.mHandler.post(this.mHideSelector);
            }
        } else {
            int v4_1;
            if (this.mDropDownWidth != -1) {
                if (this.mDropDownWidth != -2) {
                    v4_1 = this.mDropDownWidth;
                } else {
                    v4_1 = this.mDropDownAnchorView.getWidth();
                }
            } else {
                v4_1 = -1;
            }
            int v5_1;
            if (this.mDropDownHeight != -1) {
                if (this.mDropDownHeight != -2) {
                    v5_1 = this.mDropDownHeight;
                } else {
                    v5_1 = v6;
                }
            } else {
                if (!v7) {
                    v5_1 = -1;
                } else {
                    v5_1 = v6;
                }
                if (!v7) {
                    if (this.mDropDownWidth == -1) {
                        v1_0 = -1;
                    }
                    this.mPopup.setWindowLayoutMode(v1_0, -1);
                } else {
                    if (this.mDropDownWidth != -1) {
                        v0_0 = 0;
                    }
                    this.mPopup.setWindowLayoutMode(v0_0, 0);
                }
            }
            this.mPopup.setOutsideTouchable(1);
            this.mPopup.update(this.mDropDownAnchorView, this.mDropDownHorizontalOffset, this.mDropDownVerticalOffset, v4_1, v5_1);
        }
        return;
    }

    private IcsProgressBar$AccessibilityEventSender(com.actionbarsherlock.internal.widget.IcsProgressBar p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic IcsProgressBar$AccessibilityEventSender(com.actionbarsherlock.internal.widget.IcsProgressBar p1, com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender p2)
    {
        this(p1);
        return;
    }

    public void run()
    {
        this.this$0.sendAccessibilityEvent(4);
        return;
    }

    IcsProgressBar$RefreshProgressRunnable(com.actionbarsherlock.internal.widget.IcsProgressBar p1, int p2, int p3, boolean p4)
    {
        this.this$0 = p1;
        this.mId = p2;
        this.mProgress = p3;
        this.mFromUser = p4;
        return;
    }

    public void run()
    {
        com.actionbarsherlock.internal.widget.IcsProgressBar.access$0(this.this$0, this.mId, this.mProgress, this.mFromUser, 1);
        com.actionbarsherlock.internal.widget.IcsProgressBar.access$1(this.this$0, this);
        return;
    }

    public void setup(int p1, int p2, boolean p3)
    {
        this.mId = p1;
        this.mProgress = p2;
        this.mFromUser = p3;
        return;
    }

    IcsProgressBar$SavedState$1()
    {
        return;
    }

    public com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState createFromParcel(android.os.Parcel p3)
    {
        return new com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState(p3, 0);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState[] newArray(int p2)
    {
        com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState[] v0 = new com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }

    static IcsProgressBar$SavedState()
    {
        com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState.CREATOR = new com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1();
        return;
    }

    private IcsProgressBar$SavedState(android.os.Parcel p2)
    {
        super(p2);
        super.progress = p2.readInt();
        super.secondaryProgress = p2.readInt();
        return;
    }

    synthetic IcsProgressBar$SavedState(android.os.Parcel p1, com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState p2)
    {
        this(p1);
        return;
    }

    IcsProgressBar$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        super.writeToParcel(p2, p3);
        p2.writeInt(this.progress);
        p2.writeInt(this.secondaryProgress);
        return;
    }

    static IcsProgressBar()
    {
        int[] v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        com.actionbarsherlock.internal.widget.IcsProgressBar.IS_HONEYCOMB = v0_1;
        int[] v0_3 = new int[15];
        v0_3 = {16843039, 16843040, 16843062, 16843063, 16843064, 16843065, 16843066, 16843067, 16843068, 16843069, 16843070, 16843071, 16843072, 16843073, 16843546};
        com.actionbarsherlock.internal.widget.IcsProgressBar.ProgressBar = v0_3;
        return;
    }

    public IcsProgressBar(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public IcsProgressBar(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 16842871);
        return;
    }

    public IcsProgressBar(android.content.Context p2, android.util.AttributeSet p3, int p4)
    {
        this(p2, p3, p4, 0);
        return;
    }

    public IcsProgressBar(android.content.Context p8, android.util.AttributeSet p9, int p10, int p11)
    {
        android.view.accessibility.AccessibilityManager v3_0 = 0;
        super(p8, p9, p10);
        super.mUiThreadId = Thread.currentThread().getId();
        super.initProgressBar();
        android.content.res.TypedArray v0 = p8.obtainStyledAttributes(p9, com.actionbarsherlock.internal.widget.IcsProgressBar.ProgressBar, p10, p11);
        super.mNoInvalidate = 1;
        android.graphics.drawable.Drawable v1_0 = v0.getDrawable(8);
        if (v1_0 != null) {
            super.setProgressDrawable(super.tileify(v1_0, 0));
        }
        super.mDuration = v0.getInt(9, super.mDuration);
        super.mMinWidth = v0.getDimensionPixelSize(11, super.mMinWidth);
        super.mMaxWidth = v0.getDimensionPixelSize(0, super.mMaxWidth);
        super.mMinHeight = v0.getDimensionPixelSize(12, super.mMinHeight);
        super.mMaxHeight = v0.getDimensionPixelSize(1, super.mMaxHeight);
        super.mBehavior = v0.getInt(10, super.mBehavior);
        int v2 = v0.getResourceId(13, 17432587);
        if (v2 > 0) {
            super.setInterpolator(p8, v2);
        }
        super.setMax(v0.getInt(2, super.mMax));
        super.setProgress(v0.getInt(3, super.mProgress));
        super.setSecondaryProgress(v0.getInt(4, super.mSecondaryProgress));
        android.graphics.drawable.Drawable v1_2 = v0.getDrawable(7);
        if (v1_2 != null) {
            super.setIndeterminateDrawable(super.tileifyIndeterminate(v1_2));
        }
        super.mOnlyIndeterminate = v0.getBoolean(6, super.mOnlyIndeterminate);
        super.mNoInvalidate = 0;
        if ((super.mOnlyIndeterminate) || (v0.getBoolean(5, super.mIndeterminate))) {
            v3_0 = 1;
        }
        super.setIndeterminate(v3_0);
        super.mAnimationResolution = v0.getInteger(14, 200);
        v0.recycle();
        super.mAccessibilityManager = ((android.view.accessibility.AccessibilityManager) p8.getSystemService("accessibility"));
        return;
    }

    static synthetic void access$0(com.actionbarsherlock.internal.widget.IcsProgressBar p0, int p1, int p2, boolean p3, boolean p4)
    {
        p0.doRefreshProgress(p1, p2, p3, p4);
        return;
    }

    static synthetic void access$1(com.actionbarsherlock.internal.widget.IcsProgressBar p0, com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable p1)
    {
        p0.mRefreshProgressRunnable = p1;
        return;
    }

    private declared_synchronized void doRefreshProgress(int p8, int p9, boolean p10, boolean p11)
    {
        try {
            int v4;
            if (this.mMax <= 0) {
                v4 = 0;
            } else {
                v4 = (((float) p9) / ((float) this.mMax));
            }
        } catch (int v5_6) {
            throw v5_6;
        }
        android.graphics.drawable.Drawable v1 = this.mCurrentDrawable;
        if (v1 == null) {
            this.invalidate();
        } else {
            android.graphics.drawable.Drawable v3 = 0;
            if ((v1 instanceof android.graphics.drawable.LayerDrawable)) {
                v3 = ((android.graphics.drawable.LayerDrawable) v1).findDrawableByLayerId(p8);
            }
            if (v3 == null) {
                v3 = v1;
            }
            v3.setLevel(((int) (1176256512 * v4)));
        }
        if ((p11) && (p8 == 16908301)) {
            this.onProgressRefresh(v4, p10);
        }
        return;
    }

    private void initProgressBar()
    {
        this.mMax = 100;
        this.mProgress = 0;
        this.mSecondaryProgress = 0;
        this.mIndeterminate = 0;
        this.mOnlyIndeterminate = 0;
        this.mDuration = 4000;
        this.mBehavior = 1;
        this.mMinWidth = 24;
        this.mMaxWidth = 48;
        this.mMinHeight = 24;
        this.mMaxHeight = 48;
        return;
    }

    private declared_synchronized void refreshProgress(int p6, int p7, boolean p8)
    {
        try {
            if (this.mUiThreadId != Thread.currentThread().getId()) {
                com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable v0_0;
                if (this.mRefreshProgressRunnable == null) {
                    v0_0 = new com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable(this, p6, p7, p8);
                } else {
                    v0_0 = this.mRefreshProgressRunnable;
                    this.mRefreshProgressRunnable = 0;
                    v0_0.setup(p6, p7, p8);
                }
                this.post(v0_0);
            } else {
                this.doRefreshProgress(p6, p7, p8, 1);
            }
        } catch (int v1_3) {
            throw v1_3;
        }
        return;
    }

    private void scheduleAccessibilityEventSender()
    {
        if (this.mAccessibilityEventSender != null) {
            this.removeCallbacks(this.mAccessibilityEventSender);
        } else {
            this.mAccessibilityEventSender = new com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender(this, 0);
        }
        this.postDelayed(this.mAccessibilityEventSender, 200);
        return;
    }

    private android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable p13, boolean p14)
    {
        android.graphics.drawable.ClipDrawable v5_0;
        if (!(p13 instanceof android.graphics.drawable.LayerDrawable)) {
            if (!(p13 instanceof android.graphics.drawable.BitmapDrawable)) {
                v5_0 = p13;
            } else {
                android.graphics.Bitmap v8 = ((android.graphics.drawable.BitmapDrawable) p13).getBitmap();
                if (this.mSampleTile == null) {
                    this.mSampleTile = v8;
                }
                android.graphics.drawable.ClipDrawable v7_1 = new android.graphics.drawable.ShapeDrawable(this.getDrawableShape());
                v7_1.getPaint().setShader(new android.graphics.BitmapShader(v8, android.graphics.Shader$TileMode.REPEAT, android.graphics.Shader$TileMode.CLAMP));
                if (p14) {
                    v7_1 = new android.graphics.drawable.ClipDrawable(v7_1, 3, 1);
                }
                v5_0 = v7_1;
            }
        } else {
            int v0 = ((android.graphics.drawable.LayerDrawable) p13).getNumberOfLayers();
            android.graphics.drawable.Drawable[] v6 = new android.graphics.drawable.Drawable[v0];
            int v3_0 = 0;
            while (v3_0 < v0) {
                android.graphics.drawable.Drawable v9_9;
                int v4 = ((android.graphics.drawable.LayerDrawable) p13).getId(v3_0);
                int v11_2 = ((android.graphics.drawable.LayerDrawable) p13).getDrawable(v3_0);
                if ((v4 == 16908301) || (v4 == 16908303)) {
                    v9_9 = 1;
                } else {
                    v9_9 = 0;
                }
                v6[v3_0] = this.tileify(v11_2, v9_9);
                v3_0++;
            }
            v5_0 = new android.graphics.drawable.LayerDrawable(v6);
            int v3_1 = 0;
            while (v3_1 < v0) {
                v5_0.setId(v3_1, ((android.graphics.drawable.LayerDrawable) p13).getId(v3_1));
                v3_1++;
            }
        }
        return v5_0;
    }

    private android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable p9)
    {
        if ((p9 instanceof android.graphics.drawable.AnimationDrawable)) {
            int v0 = ((android.graphics.drawable.AnimationDrawable) p9).getNumberOfFrames();
            android.graphics.drawable.AnimationDrawable v4_1 = new android.graphics.drawable.AnimationDrawable();
            v4_1.setOneShot(((android.graphics.drawable.AnimationDrawable) p9).isOneShot());
            int v3 = 0;
            while (v3 < v0) {
                android.graphics.drawable.Drawable v2 = this.tileify(((android.graphics.drawable.AnimationDrawable) p9).getFrame(v3), 1);
                v2.setLevel(10000);
                v4_1.addFrame(v2, ((android.graphics.drawable.AnimationDrawable) p9).getDuration(v3));
                v3++;
            }
            v4_1.setLevel(10000);
            p9 = v4_1;
        }
        return p9;
    }

    private void updateDrawableBounds(int p17, int p18)
    {
        int v8 = ((p17 - this.getPaddingRight()) - this.getPaddingLeft());
        int v1 = ((p18 - this.getPaddingBottom()) - this.getPaddingTop());
        int v9 = 0;
        int v7 = 0;
        if (this.mIndeterminateDrawable != null) {
            if ((this.mOnlyIndeterminate) && (!(this.mIndeterminateDrawable instanceof android.graphics.drawable.AnimationDrawable))) {
                float v4 = (((float) this.mIndeterminateDrawable.getIntrinsicWidth()) / ((float) this.mIndeterminateDrawable.getIntrinsicHeight()));
                float v2 = (((float) p17) / ((float) p18));
                if (v4 != v2) {
                    if (v2 <= v4) {
                        int v3 = ((int) (((float) p17) * (1065353216 / v4)));
                        v9 = ((p18 - v3) / 2);
                        v1 = (v9 + v3);
                    } else {
                        int v10 = ((int) (((float) p18) * v4));
                        v7 = ((p17 - v10) / 2);
                        v8 = (v7 + v10);
                    }
                }
            }
            this.mIndeterminateDrawable.setBounds(0, 0, (v8 - v7), (v1 - v9));
            this.mIndeterminateRealLeft = v7;
            this.mIndeterminateRealTop = v9;
        }
        if (this.mProgressDrawable != null) {
            this.mProgressDrawable.setBounds(0, 0, v8, v1);
        }
        return;
    }

    private void updateDrawableState()
    {
        int[] v0 = this.getDrawableState();
        if ((this.mProgressDrawable != null) && (this.mProgressDrawable.isStateful())) {
            this.mProgressDrawable.setState(v0);
        }
        if ((this.mIndeterminateDrawable != null) && (this.mIndeterminateDrawable.isStateful())) {
            this.mIndeterminateDrawable.setState(v0);
        }
        return;
    }

    protected void drawableStateChanged()
    {
        super.drawableStateChanged();
        this.updateDrawableState();
        return;
    }

    android.graphics.drawable.Drawable getCurrentDrawable()
    {
        return this.mCurrentDrawable;
    }

    android.graphics.drawable.shapes.Shape getDrawableShape()
    {
        float[] v0 = new float[8];
        v0 = {1084227584, 1084227584, 1084227584, 1084227584, 1084227584, 1084227584, 1084227584, 1084227584};
        return new android.graphics.drawable.shapes.RoundRectShape(v0, 0, 0);
    }

    public android.graphics.drawable.Drawable getIndeterminateDrawable()
    {
        return this.mIndeterminateDrawable;
    }

    public android.view.animation.Interpolator getInterpolator()
    {
        return this.mInterpolator;
    }

    public declared_synchronized int getMax()
    {
        try {
            return this.mMax;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public declared_synchronized int getProgress()
    {
        try {
            int v0_1;
            if (!this.mIndeterminate) {
                v0_1 = this.mProgress;
            } else {
                v0_1 = 0;
            }
        } catch (int v0_2) {
            throw v0_2;
        }
        return v0_1;
    }

    public android.graphics.drawable.Drawable getProgressDrawable()
    {
        return this.mProgressDrawable;
    }

    public declared_synchronized int getSecondaryProgress()
    {
        try {
            int v0_1;
            if (!this.mIndeterminate) {
                v0_1 = this.mSecondaryProgress;
            } else {
                v0_1 = 0;
            }
        } catch (int v0_2) {
            throw v0_2;
        }
        return v0_1;
    }

    public final declared_synchronized void incrementProgressBy(int p2)
    {
        try {
            this.setProgress((this.mProgress + p2));
            return;
        } catch (Throwable v0_2) {
            throw v0_2;
        }
    }

    public final declared_synchronized void incrementSecondaryProgressBy(int p2)
    {
        try {
            this.setSecondaryProgress((this.mSecondaryProgress + p2));
            return;
        } catch (Throwable v0_2) {
            throw v0_2;
        }
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable p8)
    {
        if (!this.mInDrawing) {
            if (!this.verifyDrawable(p8)) {
                super.invalidateDrawable(p8);
            } else {
                android.graphics.Rect v0 = p8.getBounds();
                int v1 = (this.getScrollX() + this.getPaddingLeft());
                int v2 = (this.getScrollY() + this.getPaddingTop());
                this.invalidate((v0.left + v1), (v0.top + v2), (v0.right + v1), (v0.bottom + v2));
            }
        }
        return;
    }

    public declared_synchronized boolean isIndeterminate()
    {
        try {
            return this.mIndeterminate;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public void jumpDrawablesToCurrentState()
    {
        super.jumpDrawablesToCurrentState();
        if (this.mProgressDrawable != null) {
            this.mProgressDrawable.jumpToCurrentState();
        }
        if (this.mIndeterminateDrawable != null) {
            this.mIndeterminateDrawable.jumpToCurrentState();
        }
        return;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        if (this.mIndeterminate) {
            this.startAnimation();
        }
        return;
    }

    protected void onDetachedFromWindow()
    {
        if (this.mIndeterminate) {
            this.stopAnimation();
        }
        if (this.mRefreshProgressRunnable != null) {
            this.removeCallbacks(this.mRefreshProgressRunnable);
        }
        if (this.mAccessibilityEventSender != null) {
            this.removeCallbacks(this.mAccessibilityEventSender);
        }
        super.onDetachedFromWindow();
        return;
    }

    protected declared_synchronized void onDraw(android.graphics.Canvas p9)
    {
        try {
            super.onDraw(p9);
            android.graphics.drawable.Animatable v0_0 = this.mCurrentDrawable;
        } catch (long v4_19) {
            throw v4_19;
        }
        if (v0_0 != null) {
            p9.save();
            p9.translate(((float) (this.getPaddingLeft() + this.mIndeterminateRealLeft)), ((float) (this.getPaddingTop() + this.mIndeterminateRealTop)));
            long v2 = this.getDrawingTime();
            if (this.mAnimation != null) {
                this.mAnimation.getTransformation(v2, this.mTransformation);
                float v1 = this.mTransformation.getAlpha();
                try {
                    this.mInDrawing = 1;
                    v0_0.setLevel(((int) (1176256512 * v1)));
                } catch (long v4_8) {
                    this.mInDrawing = 0;
                    throw v4_8;
                }
                this.mInDrawing = 0;
                if ((android.os.SystemClock.uptimeMillis() - this.mLastDrawTime) >= ((long) this.mAnimationResolution)) {
                    this.mLastDrawTime = android.os.SystemClock.uptimeMillis();
                    this.postInvalidateDelayed(((long) this.mAnimationResolution));
                }
            }
            v0_0.draw(p9);
            p9.restore();
            if ((this.mShouldStartAnimationDrawable) && ((v0_0 instanceof android.graphics.drawable.Animatable))) {
                ((android.graphics.drawable.Animatable) v0_0).start();
                this.mShouldStartAnimationDrawable = 0;
            }
        }
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent p2)
    {
        super.onInitializeAccessibilityEvent(p2);
        p2.setItemCount(this.mMax);
        p2.setCurrentItemIndex(this.mProgress);
        return;
    }

    protected declared_synchronized void onMeasure(int p7, int p8)
    {
        try {
            android.graphics.drawable.Drawable v0 = this.mCurrentDrawable;
            int v2_0 = 0;
            int v1_0 = 0;
        } catch (int v3_10) {
            throw v3_10;
        }
        if (v0 != null) {
            v2_0 = Math.max(this.mMinWidth, Math.min(this.mMaxWidth, v0.getIntrinsicWidth()));
            v1_0 = Math.max(this.mMinHeight, Math.min(this.mMaxHeight, v0.getIntrinsicHeight()));
        }
        this.updateDrawableState();
        int v2_1 = (v2_0 + (this.getPaddingLeft() + this.getPaddingRight()));
        int v1_1 = (v1_0 + (this.getPaddingTop() + this.getPaddingBottom()));
        if (!com.actionbarsherlock.internal.widget.IcsProgressBar.IS_HONEYCOMB) {
            this.setMeasuredDimension(android.view.View.resolveSize(v2_1, p7), android.view.View.resolveSize(v1_1, p8));
        } else {
            this.setMeasuredDimension(android.view.View.resolveSizeAndState(v2_1, p7, 0), android.view.View.resolveSizeAndState(v1_1, p8, 0));
        }
        return;
    }

    void onProgressRefresh(float p2, boolean p3)
    {
        if (this.mAccessibilityManager.isEnabled()) {
            this.scheduleAccessibilityEventSender();
        }
        return;
    }

    public void onRestoreInstanceState(android.os.Parcelable p3)
    {
        super.onRestoreInstanceState(((com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState) p3).getSuperState());
        this.setProgress(((com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState) p3).progress);
        this.setSecondaryProgress(((com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState) p3).secondaryProgress);
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState v0_1 = new com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState(super.onSaveInstanceState());
        v0_1.progress = this.mProgress;
        v0_1.secondaryProgress = this.mSecondaryProgress;
        return v0_1;
    }

    protected void onSizeChanged(int p1, int p2, int p3, int p4)
    {
        this.updateDrawableBounds(p1, p2);
        return;
    }

    protected void onVisibilityChanged(android.view.View p2, int p3)
    {
        super.onVisibilityChanged(p2, p3);
        if (this.mIndeterminate) {
            if ((p3 != 8) && (p3 != 4)) {
                this.startAnimation();
            } else {
                this.stopAnimation();
            }
        }
        return;
    }

    public void postInvalidate()
    {
        if (!this.mNoInvalidate) {
            super.postInvalidate();
        }
        return;
    }

    public declared_synchronized void setIndeterminate(boolean p2)
    {
        try {
            if (((!this.mOnlyIndeterminate) || (!this.mIndeterminate)) && (p2 != this.mIndeterminate)) {
                this.mIndeterminate = p2;
                if (!p2) {
                    this.mCurrentDrawable = this.mProgressDrawable;
                    this.stopAnimation();
                } else {
                    this.mCurrentDrawable = this.mIndeterminateDrawable;
                    this.startAnimation();
                }
            }
        } catch (android.graphics.drawable.Drawable v0_2) {
            throw v0_2;
        }
        return;
    }

    public void setIndeterminateDrawable(android.graphics.drawable.Drawable p2)
    {
        if (p2 != null) {
            p2.setCallback(this);
        }
        this.mIndeterminateDrawable = p2;
        if (this.mIndeterminate) {
            this.mCurrentDrawable = p2;
            this.postInvalidate();
        }
        return;
    }

    public void setInterpolator(android.content.Context p2, int p3)
    {
        this.setInterpolator(android.view.animation.AnimationUtils.loadInterpolator(p2, p3));
        return;
    }

    public void setInterpolator(android.view.animation.Interpolator p1)
    {
        this.mInterpolator = p1;
        return;
    }

    public declared_synchronized void setMax(int p4)
    {
        if (p4 < 0) {
            p4 = 0;
        }
        try {
            if (p4 != this.mMax) {
                this.mMax = p4;
                this.postInvalidate();
                if (this.mProgress > p4) {
                    this.mProgress = p4;
                }
                this.refreshProgress(16908301, this.mProgress, 0);
            }
        } catch (int v0_0) {
            throw v0_0;
        }
        return;
    }

    public declared_synchronized void setProgress(int p2)
    {
        try {
            this.setProgress(p2, 0);
            return;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    declared_synchronized void setProgress(int p3, boolean p4)
    {
        try {
            if (!this.mIndeterminate) {
                if (p3 < 0) {
                    p3 = 0;
                }
                if (p3 > this.mMax) {
                    p3 = this.mMax;
                }
                if (p3 != this.mProgress) {
                    this.mProgress = p3;
                    this.refreshProgress(16908301, this.mProgress, p4);
                }
            }
        } catch (int v0_4) {
            throw v0_4;
        }
        return;
    }

    public void setProgressDrawable(android.graphics.drawable.Drawable p6)
    {
        if ((this.mProgressDrawable == null) || (p6 == this.mProgressDrawable)) {
            int v1 = 0;
        } else {
            this.mProgressDrawable.setCallback(0);
            v1 = 1;
        }
        if (p6 != null) {
            p6.setCallback(this);
            int v0 = p6.getMinimumHeight();
            if (this.mMaxHeight < v0) {
                this.mMaxHeight = v0;
                this.requestLayout();
            }
        }
        this.mProgressDrawable = p6;
        if (!this.mIndeterminate) {
            this.mCurrentDrawable = p6;
            this.postInvalidate();
        }
        if (v1 != 0) {
            this.updateDrawableBounds(this.getWidth(), this.getHeight());
            this.updateDrawableState();
            this.doRefreshProgress(16908301, this.mProgress, 0, 0);
            this.doRefreshProgress(16908303, this.mSecondaryProgress, 0, 0);
        }
        return;
    }

    public declared_synchronized void setSecondaryProgress(int p4)
    {
        try {
            if (!this.mIndeterminate) {
                if (p4 < 0) {
                    p4 = 0;
                }
                if (p4 > this.mMax) {
                    p4 = this.mMax;
                }
                if (p4 != this.mSecondaryProgress) {
                    this.mSecondaryProgress = p4;
                    this.refreshProgress(16908303, this.mSecondaryProgress, 0);
                }
            }
        } catch (int v0_4) {
            throw v0_4;
        }
        return;
    }

    public void setVisibility(int p2)
    {
        if (this.getVisibility() != p2) {
            super.setVisibility(p2);
            if (this.mIndeterminate) {
                if ((p2 != 8) && (p2 != 4)) {
                    this.startAnimation();
                } else {
                    this.stopAnimation();
                }
            }
        }
        return;
    }

    void startAnimation()
    {
        if (this.getVisibility() == 0) {
            if (!(this.mIndeterminateDrawable instanceof android.graphics.drawable.Animatable)) {
                if (this.mInterpolator == null) {
                    this.mInterpolator = new android.view.animation.LinearInterpolator();
                }
                this.mTransformation = new android.view.animation.Transformation();
                this.mAnimation = new android.view.animation.AlphaAnimation(0, 1065353216);
                this.mAnimation.setRepeatMode(this.mBehavior);
                this.mAnimation.setRepeatCount(-1);
                this.mAnimation.setDuration(((long) this.mDuration));
                this.mAnimation.setInterpolator(this.mInterpolator);
                this.mAnimation.setStartTime(-1);
            } else {
                this.mShouldStartAnimationDrawable = 1;
                this.mAnimation = 0;
            }
            this.postInvalidate();
        }
        return;
    }

    void stopAnimation()
    {
        this.mAnimation = 0;
        this.mTransformation = 0;
        if ((this.mIndeterminateDrawable instanceof android.graphics.drawable.Animatable)) {
            ((android.graphics.drawable.Animatable) this.mIndeterminateDrawable).stop();
            this.mShouldStartAnimationDrawable = 0;
        }
        this.postInvalidate();
        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable p2)
    {
        if ((p2 == this.mProgressDrawable) || ((p2 == this.mIndeterminateDrawable) || (super.verifyDrawable(p2)))) {
            int v0_3 = 1;
        } else {
            v0_3 = 0;
        }
        return v0_3;
    }

    public IcsSpinner$DropDownAdapter(android.widget.SpinnerAdapter p2)
    {
        this.mAdapter = p2;
        if ((p2 instanceof android.widget.ListAdapter)) {
            this.mListAdapter = ((android.widget.ListAdapter) p2);
        }
        return;
    }

    public boolean areAllItemsEnabled()
    {
        int v1;
        android.widget.ListAdapter v0 = this.mListAdapter;
        if (v0 == null) {
            v1 = 1;
        } else {
            v1 = v0.areAllItemsEnabled();
        }
        return v1;
    }

    public int getCount()
    {
        int v0_2;
        if (this.mAdapter != null) {
            v0_2 = this.mAdapter.getCount();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public android.view.View getDropDownView(int p2, android.view.View p3, android.view.ViewGroup p4)
    {
        android.view.View v0_2;
        if (this.mAdapter != null) {
            v0_2 = this.mAdapter.getDropDownView(p2, p3, p4);
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public Object getItem(int p2)
    {
        Object v0_2;
        if (this.mAdapter != null) {
            v0_2 = this.mAdapter.getItem(p2);
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public long getItemId(int p3)
    {
        long v0_2;
        if (this.mAdapter != null) {
            v0_2 = this.mAdapter.getItemId(p3);
        } else {
            v0_2 = -1;
        }
        return v0_2;
    }

    public int getItemViewType(int p2)
    {
        return 0;
    }

    public android.view.View getView(int p2, android.view.View p3, android.view.ViewGroup p4)
    {
        return this.getDropDownView(p2, p3, p4);
    }

    public int getViewTypeCount()
    {
        return 1;
    }

    public boolean hasStableIds()
    {
        if ((this.mAdapter == null) || (!this.mAdapter.hasStableIds())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean isEmpty()
    {
        int v0_1;
        if (this.getCount() != 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean isEnabled(int p3)
    {
        int v1;
        android.widget.ListAdapter v0 = this.mListAdapter;
        if (v0 == null) {
            v1 = 1;
        } else {
            v1 = v0.isEnabled(p3);
        }
        return v1;
    }

    public void registerDataSetObserver(android.database.DataSetObserver p2)
    {
        if (this.mAdapter != null) {
            this.mAdapter.registerDataSetObserver(p2);
        }
        return;
    }

    public void unregisterDataSetObserver(android.database.DataSetObserver p2)
    {
        if (this.mAdapter != null) {
            this.mAdapter.unregisterDataSetObserver(p2);
        }
        return;
    }

    IcsSpinner$DropdownPopup$1(com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup p1)
    {
        this.this$1 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p2, android.view.View p3, int p4, long p5)
    {
        com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup.access$0(this.this$1).setSelection(p4);
        this.this$1.dismiss();
        return;
    }

    public abstract void dismiss();

    public abstract CharSequence getHintText();

    public abstract boolean isShowing();

    public abstract void setAdapter();

    public abstract void setPromptText();

    public abstract void show();

    public IcsSpinner$DropdownPopup(com.actionbarsherlock.internal.widget.IcsSpinner p3, android.content.Context p4, android.util.AttributeSet p5, int p6)
    {
        this.this$0 = p3;
        super(p4, p5, 0, p6);
        super.setAnchorView(p3);
        super.setModal(1);
        super.setPromptPosition(0);
        super.setOnItemClickListener(new com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup$1(super));
        return;
    }

    static synthetic com.actionbarsherlock.internal.widget.IcsSpinner access$0(com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup p1)
    {
        return p1.this$0;
    }

    public CharSequence getHintText()
    {
        return this.mHintText;
    }

    public void setAdapter(android.widget.ListAdapter p1)
    {
        super.setAdapter(p1);
        this.mAdapter = p1;
        return;
    }

    public void setPromptText(CharSequence p1)
    {
        this.mHintText = p1;
        return;
    }

    public void show()
    {
        int v2 = this.this$0.getPaddingLeft();
        if (this.this$0.mDropDownWidth != -2) {
            if (this.this$0.mDropDownWidth != -1) {
                this.setContentWidth(this.this$0.mDropDownWidth);
            } else {
                this.setContentWidth(((this.this$0.getWidth() - v2) - this.this$0.getPaddingRight()));
            }
        } else {
            this.setContentWidth(Math.max(this.this$0.measureContentWidth(((android.widget.SpinnerAdapter) this.mAdapter), this.this$0.getBackground()), ((this.this$0.getWidth() - v2) - this.this$0.getPaddingRight())));
        }
        android.graphics.drawable.Drawable v0 = this.this$0.getBackground();
        int v1 = 0;
        if (v0 != null) {
            v0.getPadding(com.actionbarsherlock.internal.widget.IcsSpinner.access$0(this.this$0));
            v1 = (- com.actionbarsherlock.internal.widget.IcsSpinner.access$0(this.this$0).left);
        }
        this.setHorizontalOffset((v1 + v2));
        this.setInputMethodMode(2);
        super.show();
        this.getListView().setChoiceMode(1);
        this.this$0.setSelection(this.this$0.getSelectedItemPosition());
        return;
    }

    public IcsSpinner(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, com.actionbarsherlock.R$attr.actionDropDownStyle);
        return;
    }

    public IcsSpinner(android.content.Context p8, android.util.AttributeSet p9, int p10)
    {
        super(p8, p9, p10);
        super.mTempRect = new android.graphics.Rect();
        android.content.res.TypedArray v0 = p8.obtainStyledAttributes(p9, com.actionbarsherlock.R$styleable.SherlockSpinner, p10, 0);
        com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup v2_1 = new com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup(super, p8, p9, p10);
        super.mDropDownWidth = v0.getLayoutDimension(4, -2);
        v2_1.setBackgroundDrawable(v0.getDrawable(2));
        int v3 = v0.getDimensionPixelOffset(6, 0);
        if (v3 != 0) {
            v2_1.setVerticalOffset(v3);
        }
        int v1 = v0.getDimensionPixelOffset(5, 0);
        if (v1 != 0) {
            v2_1.setHorizontalOffset(v1);
        }
        super.mPopup = v2_1;
        super.mGravity = v0.getInt(0, 17);
        super.mPopup.setPromptText(v0.getString(3));
        super.mDisableChildrenWhenDisabled = 1;
        v0.recycle();
        if (super.mTempAdapter != null) {
            super.mPopup.setAdapter(super.mTempAdapter);
            super.mTempAdapter = 0;
        }
        return;
    }

    static synthetic android.graphics.Rect access$0(com.actionbarsherlock.internal.widget.IcsSpinner p1)
    {
        return p1.mTempRect;
    }

    private android.view.View makeAndAddView(int p5)
    {
        android.view.View v1;
        if (this.mDataChanged) {
            android.view.View v0_1 = this.mAdapter.getView(p5, 0, this);
            this.setUpChild(v0_1);
            v1 = v0_1;
        } else {
            android.view.View v0_0 = this.mRecycler.get(p5);
            if (v0_0 == null) {
            } else {
                this.setUpChild(v0_0);
                v1 = v0_0;
            }
        }
        return v1;
    }

    private void setUpChild(android.view.View p12)
    {
        android.view.ViewGroup$LayoutParams v6 = p12.getLayoutParams();
        if (v6 == null) {
            v6 = this.generateDefaultLayoutParams();
        }
        this.addViewInLayout(p12, 0, v6);
        p12.setSelected(this.hasFocus());
        if (this.mDisableChildrenWhenDisabled) {
            p12.setEnabled(this.isEnabled());
        }
        p12.measure(android.view.ViewGroup.getChildMeasureSpec(this.mWidthMeasureSpec, (this.mSpinnerPadding.left + this.mSpinnerPadding.right), v6.width), android.view.ViewGroup.getChildMeasureSpec(this.mHeightMeasureSpec, (this.mSpinnerPadding.top + this.mSpinnerPadding.bottom), v6.height));
        int v4 = (this.mSpinnerPadding.top + ((((this.getMeasuredHeight() - this.mSpinnerPadding.bottom) - this.mSpinnerPadding.top) - p12.getMeasuredHeight()) / 2));
        p12.layout(0, v4, (0 + p12.getMeasuredWidth()), (v4 + p12.getMeasuredHeight()));
        return;
    }

    public int getBaseline()
    {
        int v2_0 = -1;
        android.view.View v0 = 0;
        if (this.getChildCount() <= 0) {
            if ((this.mAdapter != null) && (this.mAdapter.getCount() > 0)) {
                v0 = this.makeAndAddView(0);
                this.mRecycler.put(0, v0);
                this.removeAllViewsInLayout();
            }
        } else {
            v0 = this.getChildAt(0);
        }
        if (v0 != null) {
            int v1 = v0.getBaseline();
            if (v1 >= 0) {
                v2_0 = (v0.getTop() + v1);
            }
        }
        return v2_0;
    }

    public CharSequence getPrompt()
    {
        return this.mPopup.getHintText();
    }

    void layout(int p9, boolean p10)
    {
        int v0 = this.mSpinnerPadding.left;
        int v1 = (((this.getRight() - this.getLeft()) - this.mSpinnerPadding.left) - this.mSpinnerPadding.right);
        if (this.mDataChanged) {
            this.handleDataChanged();
        }
        if (this.mItemCount != 0) {
            if (this.mNextSelectedPosition >= 0) {
                this.setSelectedPositionInt(this.mNextSelectedPosition);
            }
            this.recycleAllViews();
            this.removeAllViewsInLayout();
            this.mFirstPosition = this.mSelectedPosition;
            android.view.View v2 = this.makeAndAddView(this.mSelectedPosition);
            int v4 = v2.getMeasuredWidth();
            int v3 = v0;
            switch ((this.mGravity & 7)) {
                case 1:
                    v3 = (((v1 / 2) + v0) - (v4 / 2));
                    break;
                case 5:
                    v3 = ((v0 + v1) - v4);
                    break;
            }
            v2.offsetLeftAndRight(v3);
            this.mRecycler.clear();
            this.invalidate();
            this.checkSelectionChanged();
            this.mDataChanged = 0;
            this.mNeedSync = 0;
            this.setNextSelectedPositionInt(this.mSelectedPosition);
        } else {
            this.resetList();
        }
        return;
    }

    int measureContentWidth(android.widget.SpinnerAdapter p14, android.graphics.drawable.Drawable p15)
    {
        int v8;
        if (p14 != null) {
            v8 = 0;
            android.view.View v5 = 0;
            int v4 = 0;
            int v9 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
            int v2 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
            int v7_0 = Math.max(0, this.getSelectedItemPosition());
            int v1 = Math.min(p14.getCount(), (v7_0 + 15));
            int v3 = Math.max(0, (v7_0 - (15 - (v1 - v7_0))));
            while (v3 < v1) {
                int v6 = p14.getItemViewType(v3);
                if (v6 != v4) {
                    v4 = v6;
                    v5 = 0;
                }
                v5 = p14.getView(v3, v5, this);
                if (v5.getLayoutParams() == null) {
                    v5.setLayoutParams(new android.view.ViewGroup$LayoutParams(-2, -2));
                }
                v5.measure(v9, v2);
                v8 = Math.max(v8, v5.getMeasuredWidth());
                v3++;
            }
            if (p15 != null) {
                p15.getPadding(this.mTempRect);
                v8 += (this.mTempRect.left + this.mTempRect.right);
            }
        } else {
            v8 = 0;
        }
        return v8;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        this.setSelection(p2);
        p1.dismiss();
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        if ((this.mPopup != null) && (this.mPopup.isShowing())) {
            this.mPopup.dismiss();
        }
        return;
    }

    protected void onLayout(boolean p3, int p4, int p5, int p6, int p7)
    {
        this = super.onLayout(p3, p4, p5, p6, p7);
        this.mInLayout = 1;
        this.layout(0, 0);
        this.mInLayout = 0;
        return;
    }

    protected void onMeasure(int p4, int p5)
    {
        super.onMeasure(p4, p5);
        if ((this.mPopup != null) && (android.view.View$MeasureSpec.getMode(p4) == -2147483648)) {
            this.setMeasuredDimension(Math.min(Math.max(this.getMeasuredWidth(), this.measureContentWidth(this.getAdapter(), this.getBackground())), android.view.View$MeasureSpec.getSize(p4)), this.getMeasuredHeight());
        }
        return;
    }

    public boolean performClick()
    {
        int v0 = super.performClick();
        if (v0 == 0) {
            v0 = 1;
            if (!this.mPopup.isShowing()) {
                this.mPopup.show();
            }
        }
        return v0;
    }

    public void setAdapter(android.widget.SpinnerAdapter p3)
    {
        super.setAdapter(p3);
        if (this.mPopup == null) {
            this.mTempAdapter = new com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter(p3);
        } else {
            this.mPopup.setAdapter(new com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter(p3));
        }
        return;
    }

    public void setEnabled(boolean p4)
    {
        super.setEnabled(p4);
        if (this.mDisableChildrenWhenDisabled) {
            int v0 = this.getChildCount();
            int v1 = 0;
            while (v1 < v0) {
                this.getChildAt(v1).setEnabled(p4);
                v1++;
            }
        }
        return;
    }

    public void setGravity(int p2)
    {
        if (this.mGravity != p2) {
            if ((p2 & 7) == 0) {
                p2 |= 3;
            }
            this.mGravity = p2;
            this.requestLayout();
        }
        return;
    }

    public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener p3)
    {
        throw new RuntimeException("setOnItemClickListener cannot be used with a spinner.");
    }

    public void setPrompt(CharSequence p2)
    {
        this.mPopup.setPromptText(p2);
        return;
    }

    public void setPromptId(int p2)
    {
        this.setPrompt(this.getContext().getText(p2));
        return;
    }

    private IcsView()
    {
        return;
    }

    public static int getMeasuredStateInt(android.view.View p2)
    {
        return ((p2.getMeasuredWidth() & -16777216) | ((p2.getMeasuredHeight() >> 16) & -256));
    }

    ScrollingTabContainerView$1(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p1, android.view.View p2)
    {
        this.this$0 = p1;
        this.val$tabView = p2;
        return;
    }

    public void run()
    {
        this.this$0.smoothScrollTo((this.val$tabView.getLeft() - ((this.this$0.getWidth() - this.val$tabView.getWidth()) / 2)), 0);
        this.this$0.mTabSelector = 0;
        return;
    }

    private ScrollingTabContainerView$TabAdapter(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ScrollingTabContainerView$TabAdapter(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p1, com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter p2)
    {
        this(p1);
        return;
    }

    public int getCount()
    {
        return com.actionbarsherlock.internal.widget.ScrollingTabContainerView.access$0(this.this$0).getChildCount();
    }

    public Object getItem(int p2)
    {
        return ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView) com.actionbarsherlock.internal.widget.ScrollingTabContainerView.access$0(this.this$0).getChildAt(p2)).getTab();
    }

    public long getItemId(int p3)
    {
        return ((long) p3);
    }

    public android.view.View getView(int p4, android.view.View p5, android.view.ViewGroup p6)
    {
        if (p5 != null) {
            ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView) p5).bindTab(((com.actionbarsherlock.app.ActionBar$Tab) this.getItem(p4)));
        } else {
            p5 = com.actionbarsherlock.internal.widget.ScrollingTabContainerView.access$1(this.this$0, ((com.actionbarsherlock.app.ActionBar$Tab) this.getItem(p4)), 1);
        }
        return p5;
    }

    private ScrollingTabContainerView$TabClickListener(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ScrollingTabContainerView$TabClickListener(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p1, com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener p2)
    {
        this(p1);
        return;
    }

    public void onClick(android.view.View p6)
    {
        ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView) p6).getTab().select();
        int v2 = com.actionbarsherlock.internal.widget.ScrollingTabContainerView.access$0(this.this$0).getChildCount();
        int v1 = 0;
        while (v1 < v2) {
            int v4_2;
            android.view.View v0 = com.actionbarsherlock.internal.widget.ScrollingTabContainerView.access$0(this.this$0).getChildAt(v1);
            if (v0 != p6) {
                v4_2 = 0;
            } else {
                v4_2 = 1;
            }
            v0.setSelected(v4_2);
            v1++;
        }
        return;
    }

    public ScrollingTabContainerView$TabView(android.content.Context p1, android.util.AttributeSet p2)
    {
        super(p1, p2);
        return;
    }

    public void bindTab(com.actionbarsherlock.app.ActionBar$Tab p1)
    {
        this.mTab = p1;
        this.update();
        return;
    }

    public com.actionbarsherlock.app.ActionBar$Tab getTab()
    {
        return this.mTab;
    }

    public void init(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p2, com.actionbarsherlock.app.ActionBar$Tab p3, boolean p4)
    {
        this.mParent = p2;
        this.mTab = p3;
        if (p4) {
            this.setGravity(19);
        }
        this.update();
        return;
    }

    public void onMeasure(int p3, int p4)
    {
        super.onMeasure(p3, p4);
        if ((this.mParent.mMaxTabWidth > 0) && (this.getMeasuredWidth() > this.mParent.mMaxTabWidth)) {
            super.onMeasure(android.view.View$MeasureSpec.makeMeasureSpec(this.mParent.mMaxTabWidth, 1073741824), p4);
        }
        return;
    }

    public void update()
    {
        com.actionbarsherlock.app.ActionBar$Tab v5 = this.mTab;
        android.view.View v0 = v5.getCustomView();
        if (v0 == null) {
            if (this.mCustomView != null) {
                this.removeView(this.mCustomView);
                this.mCustomView = 0;
            }
            android.graphics.drawable.Drawable v2 = v5.getIcon();
            CharSequence v6 = v5.getText();
            if (v2 == null) {
                if (this.mIconView != null) {
                    this.mIconView.setVisibility(8);
                    this.mIconView.setImageDrawable(0);
                }
            } else {
                if (this.mIconView == null) {
                    android.widget.ImageView v3_1 = new android.widget.ImageView(this.getContext());
                    android.widget.LinearLayout$LayoutParams v4_1 = new android.widget.LinearLayout$LayoutParams(-2, -2);
                    v4_1.gravity = 16;
                    v3_1.setLayoutParams(v4_1);
                    this.addView(v3_1, 0);
                    this.mIconView = v3_1;
                }
                this.mIconView.setImageDrawable(v2);
                this.mIconView.setVisibility(0);
            }
            if (v6 == null) {
                if (this.mTextView != null) {
                    this.mTextView.setVisibility(8);
                    this.mTextView.setText(0);
                }
            } else {
                if (this.mTextView == null) {
                    com.actionbarsherlock.internal.widget.CapitalizingTextView v7_1 = new com.actionbarsherlock.internal.widget.CapitalizingTextView(this.getContext(), 0, com.actionbarsherlock.R$attr.actionBarTabTextStyle);
                    v7_1.setEllipsize(android.text.TextUtils$TruncateAt.END);
                    android.widget.LinearLayout$LayoutParams v4_3 = new android.widget.LinearLayout$LayoutParams(-2, -2);
                    v4_3.gravity = 16;
                    v7_1.setLayoutParams(v4_3);
                    this.addView(v7_1);
                    this.mTextView = v7_1;
                }
                this.mTextView.setTextCompat(v6);
                this.mTextView.setVisibility(0);
            }
            if (this.mIconView != null) {
                this.mIconView.setContentDescription(v5.getContentDescription());
            }
        } else {
            android.view.ViewGroup v1_0 = v0.getParent();
            if (v1_0 != this) {
                if (v1_0 != null) {
                    ((android.view.ViewGroup) v1_0).removeView(v0);
                }
                this.addView(v0);
            }
            this.mCustomView = v0;
            if (this.mTextView != null) {
                this.mTextView.setVisibility(8);
            }
            if (this.mIconView != null) {
                this.mIconView.setVisibility(8);
                this.mIconView.setImageDrawable(0);
            }
        }
        return;
    }

    protected ScrollingTabContainerView$VisibilityAnimListener(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p2)
    {
        this.this$0 = p2;
        this.mCanceled = 0;
        return;
    }

    public void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p2)
    {
        this.mCanceled = 1;
        return;
    }

    public void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p3)
    {
        if (!this.mCanceled) {
            this.this$0.mVisibilityAnim = 0;
            this.this$0.setVisibility(this.mFinalVisibility);
        }
        return;
    }

    public void onAnimationRepeat(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p1)
    {
        return;
    }

    public void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator p3)
    {
        this.this$0.setVisibility(0);
        this.this$0.mVisibilityAnim = p3;
        this.mCanceled = 0;
        return;
    }

    public com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener withFinalVisibility(int p1)
    {
        this.mFinalVisibility = p1;
        return this;
    }

    static ScrollingTabContainerView()
    {
        com.actionbarsherlock.internal.widget.ScrollingTabContainerView.sAlphaInterpolator = new android.view.animation.DecelerateInterpolator();
        return;
    }

    public ScrollingTabContainerView(android.content.Context p7)
    {
        super(p7);
        super.mVisAnimListener = new com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener(super);
        super.setHorizontalScrollBarEnabled(0);
        android.content.res.TypedArray v0 = super.getContext().obtainStyledAttributes(0, com.actionbarsherlock.R$styleable.SherlockActionBar, com.actionbarsherlock.R$attr.actionBarStyle, 0);
        super.setContentHeight(v0.getLayoutDimension(4, 0));
        v0.recycle();
        super.mInflater = android.view.LayoutInflater.from(p7);
        super.mTabLayout = super.createTabLayout();
        super.addView(super.mTabLayout, new android.view.ViewGroup$LayoutParams(-2, -1));
        return;
    }

    static synthetic com.actionbarsherlock.internal.widget.IcsLinearLayout access$0(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p1)
    {
        return p1.mTabLayout;
    }

    static synthetic com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView access$1(com.actionbarsherlock.internal.widget.ScrollingTabContainerView p1, com.actionbarsherlock.app.ActionBar$Tab p2, boolean p3)
    {
        return p1.createTabView(p2, p3);
    }

    private com.actionbarsherlock.internal.widget.IcsSpinner createSpinner()
    {
        com.actionbarsherlock.internal.widget.IcsSpinner v0_1 = new com.actionbarsherlock.internal.widget.IcsSpinner(this.getContext(), 0, com.actionbarsherlock.R$attr.actionDropDownStyle);
        v0_1.setLayoutParams(new android.widget.LinearLayout$LayoutParams(-2, -1));
        v0_1.setOnItemSelectedListener(this);
        return v0_1;
    }

    private com.actionbarsherlock.internal.widget.IcsLinearLayout createTabLayout()
    {
        com.actionbarsherlock.internal.widget.IcsLinearLayout v0_1 = ((com.actionbarsherlock.internal.widget.IcsLinearLayout) android.view.LayoutInflater.from(this.getContext()).inflate(com.actionbarsherlock.R$layout.abs__action_bar_tab_bar_view, 0));
        v0_1.setLayoutParams(new android.widget.LinearLayout$LayoutParams(-2, -1));
        return v0_1;
    }

    private com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab p5, boolean p6)
    {
        com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView v0_1 = ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView) this.mInflater.inflate(com.actionbarsherlock.R$layout.abs__action_bar_tab, 0));
        v0_1.init(this, p5, p6);
        if (!p6) {
            v0_1.setFocusable(1);
            if (this.mTabClickListener == null) {
                this.mTabClickListener = new com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener(this, 0);
            }
            v0_1.setOnClickListener(this.mTabClickListener);
        } else {
            v0_1.setBackgroundDrawable(0);
            v0_1.setLayoutParams(new android.widget.AbsListView$LayoutParams(-1, this.mContentHeight));
        }
        return v0_1;
    }

    private boolean isCollapsed()
    {
        if ((this.mTabSpinner == null) || (this.mTabSpinner.getParent() != this)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    private void performCollapse()
    {
        if (!this.isCollapsed()) {
            if (this.mTabSpinner == null) {
                this.mTabSpinner = this.createSpinner();
            }
            this.removeView(this.mTabLayout);
            this.addView(this.mTabSpinner, new android.view.ViewGroup$LayoutParams(-2, -1));
            if (this.mTabSpinner.getAdapter() == null) {
                this.mTabSpinner.setAdapter(new com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter(this, 0));
            }
            if (this.mTabSelector != null) {
                this.removeCallbacks(this.mTabSelector);
                this.mTabSelector = 0;
            }
            this.mTabSpinner.setSelection(this.mSelectedTabIndex);
        }
        return;
    }

    private boolean performExpand()
    {
        if (this.isCollapsed()) {
            this.removeView(this.mTabSpinner);
            this.addView(this.mTabLayout, new android.view.ViewGroup$LayoutParams(-2, -1));
            this.setTabSelected(this.mTabSpinner.getSelectedItemPosition());
        }
        return 0;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p7, int p8, boolean p9)
    {
        com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView v0 = this.createTabView(p7, 0);
        this.mTabLayout.addView(v0, p8, new android.widget.LinearLayout$LayoutParams(0, -1, 1065353216));
        if (this.mTabSpinner != null) {
            ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter) this.mTabSpinner.getAdapter()).notifyDataSetChanged();
        }
        if (p9) {
            v0.setSelected(1);
        }
        if (this.mAllowCollapse) {
            this.requestLayout();
        }
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p7, boolean p8)
    {
        com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView v0 = this.createTabView(p7, 0);
        this.mTabLayout.addView(v0, new android.widget.LinearLayout$LayoutParams(0, -1, 1065353216));
        if (this.mTabSpinner != null) {
            ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter) this.mTabSpinner.getAdapter()).notifyDataSetChanged();
        }
        if (p8) {
            v0.setSelected(1);
        }
        if (this.mAllowCollapse) {
            this.requestLayout();
        }
        return;
    }

    public void animateToTab(int p3)
    {
        android.view.View v0 = this.mTabLayout.getChildAt(p3);
        if (this.mTabSelector != null) {
            this.removeCallbacks(this.mTabSelector);
        }
        this.mTabSelector = new com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1(this, v0);
        this.post(this.mTabSelector);
        return;
    }

    public void animateToVisibility(int p8)
    {
        if (this.mVisibilityAnim != null) {
            this.mVisibilityAnim.cancel();
        }
        if (p8 != 0) {
            float[] v2_1 = new float[1];
            v2_1[0] = 0;
            com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_0 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(this, "alpha", v2_1);
            v0_0.setDuration(200);
            v0_0.setInterpolator(com.actionbarsherlock.internal.widget.ScrollingTabContainerView.sAlphaInterpolator);
            v0_0.addListener(this.mVisAnimListener.withFinalVisibility(p8));
            v0_0.start();
        } else {
            if (this.getVisibility() != 0) {
                this.setAlpha(0);
            }
            float[] v2_2 = new float[1];
            v2_2[0] = 1065353216;
            com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator v0_1 = com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofFloat(this, "alpha", v2_2);
            v0_1.setDuration(200);
            v0_1.setInterpolator(com.actionbarsherlock.internal.widget.ScrollingTabContainerView.sAlphaInterpolator);
            v0_1.addListener(this.mVisAnimListener.withFinalVisibility(p8));
            v0_1.start();
        }
        return;
    }

    public void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        if (this.mTabSelector != null) {
            this.post(this.mTabSelector);
        }
        return;
    }

    protected void onConfigurationChanged(android.content.res.Configuration p7)
    {
        super.onConfigurationChanged(p7);
        android.content.res.TypedArray v0 = this.getContext().obtainStyledAttributes(0, com.actionbarsherlock.R$styleable.SherlockActionBar, com.actionbarsherlock.R$attr.actionBarStyle, 0);
        this.setContentHeight(v0.getLayoutDimension(4, 0));
        v0.recycle();
        return;
    }

    public void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        if (this.mTabSelector != null) {
            this.removeCallbacks(this.mTabSelector);
        }
        return;
    }

    public void onItemSelected(com.actionbarsherlock.internal.widget.IcsAdapterView p3, android.view.View p4, int p5, long p6)
    {
        ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView) p4).getTab().select();
        return;
    }

    public void onMeasure(int p12, int p13)
    {
        int v2;
        int v5 = android.view.View$MeasureSpec.getMode(p12);
        if (v5 != 1073741824) {
            v2 = 0;
        } else {
            v2 = 1;
        }
        this.setFillViewport(v2);
        int v1 = this.mTabLayout.getChildCount();
        if ((v1 <= 1) || ((v5 != 1073741824) && (v5 != -2147483648))) {
            this.mMaxTabWidth = -1;
        } else {
            if (v1 <= 2) {
                this.mMaxTabWidth = (android.view.View$MeasureSpec.getSize(p12) / 2);
            } else {
                this.mMaxTabWidth = ((int) (((float) android.view.View$MeasureSpec.getSize(p12)) * 1053609165));
            }
        }
        int v0;
        p13 = android.view.View$MeasureSpec.makeMeasureSpec(this.mContentHeight, 1073741824);
        if ((v2 != 0) || (!this.mAllowCollapse)) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if (v0 == 0) {
            this.performExpand();
        } else {
            this.mTabLayout.measure(0, p13);
            if (this.mTabLayout.getMeasuredWidth() <= android.view.View$MeasureSpec.getSize(p12)) {
                this.performExpand();
            } else {
                this.performCollapse();
            }
        }
        int v4 = this.getMeasuredWidth();
        super.onMeasure(p12, p13);
        int v3 = this.getMeasuredWidth();
        if ((v2 != 0) && (v4 != v3)) {
            this.setTabSelected(this.mSelectedTabIndex);
        }
        return;
    }

    public void onNothingSelected(com.actionbarsherlock.internal.widget.IcsAdapterView p1)
    {
        return;
    }

    public void removeAllTabs()
    {
        this.mTabLayout.removeAllViews();
        if (this.mTabSpinner != null) {
            ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter) this.mTabSpinner.getAdapter()).notifyDataSetChanged();
        }
        if (this.mAllowCollapse) {
            this.requestLayout();
        }
        return;
    }

    public void removeTabAt(int p2)
    {
        this.mTabLayout.removeViewAt(p2);
        if (this.mTabSpinner != null) {
            ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter) this.mTabSpinner.getAdapter()).notifyDataSetChanged();
        }
        if (this.mAllowCollapse) {
            this.requestLayout();
        }
        return;
    }

    public void setAllowCollapse(boolean p1)
    {
        this.mAllowCollapse = p1;
        return;
    }

    public void setContentHeight(int p1)
    {
        this.mContentHeight = p1;
        this.requestLayout();
        return;
    }

    public void setTabSelected(int p6)
    {
        this.mSelectedTabIndex = p6;
        int v3 = this.mTabLayout.getChildCount();
        int v1 = 0;
        while (v1 < v3) {
            int v2;
            android.view.View vtmp2 = this.mTabLayout.getChildAt(v1);
            if (v1 != p6) {
                v2 = 0;
            } else {
                v2 = 1;
            }
            vtmp2.setSelected(v2);
            if (v2 != 0) {
                this.animateToTab(p6);
            }
            v1++;
        }
        return;
    }

    public void updateTab(int p2)
    {
        ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView) this.mTabLayout.getChildAt(p2)).update();
        if (this.mTabSpinner != null) {
            ((com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter) this.mTabSpinner.getAdapter()).notifyDataSetChanged();
        }
        if (this.mAllowCollapse) {
            this.requestLayout();
        }
        return;
    }

    public ActionProvider(android.content.Context p1)
    {
        return;
    }

    public boolean hasSubMenu()
    {
        return 0;
    }

    public abstract android.view.View onCreateActionView();

    public boolean onPerformDefaultAction()
    {
        return 0;
    }

    public void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu p1)
    {
        return;
    }

    public void setSubUiVisibilityListener(com.actionbarsherlock.view.ActionProvider$SubUiVisibilityListener p1)
    {
        this.mSubUiVisibilityListener = p1;
        return;
    }

    public void subUiVisibilityChanged(boolean p2)
    {
        if (this.mSubUiVisibilityListener != null) {
            this.mSubUiVisibilityListener.onSubUiVisibilityChanged(p2);
        }
        return;
    }

    public abstract void onActionViewCollapsed();

    public abstract void onActionViewExpanded();

    public abstract boolean onMenuItemClick();

    static MenuInflater$InflatedOnMenuItemClickListener()
    {
        Class[] v0_1 = new Class[1];
        v0_1[0] = com.actionbarsherlock.view.MenuItem;
        com.actionbarsherlock.view.MenuInflater$InflatedOnMenuItemClickListener.PARAM_TYPES = v0_1;
        return;
    }

    public MenuInflater$InflatedOnMenuItemClickListener(android.content.Context p6, String p7)
    {
        this.mContext = p6;
        Class v0 = p6.getClass();
        try {
            this.mMethod = v0.getMethod(p7, com.actionbarsherlock.view.MenuInflater$InflatedOnMenuItemClickListener.PARAM_TYPES);
            return;
        } catch (Exception v1) {
            android.view.InflateException v2_1 = new android.view.InflateException(new StringBuilder("Couldn\'t resolve menu item onClick handler ").append(p7).append(" in class ").append(v0.getName()).toString());
            v2_1.initCause(v1);
            throw v2_1;
        }
    }

    public boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem p7)
    {
        boolean v1_0 = 1;
        try {
            if (this.mMethod.getReturnType() != Boolean.TYPE) {
                reflect.Method v2_3 = this.mMethod;
                android.content.Context v3_3 = this.mContext;
                Object[] v4_2 = new Object[1];
                v4_2[0] = p7;
                v2_3.invoke(v3_3, v4_2);
            } else {
                boolean v1_1 = this.mMethod;
                reflect.Method v2_1 = this.mContext;
                android.content.Context v3_1 = new Object[1];
                v3_1[0] = p7;
                v1_0 = ((Boolean) v1_1.invoke(v2_1, v3_1)).booleanValue();
            }
        } catch (Exception v0) {
            throw new RuntimeException(v0);
        }
        return v1_0;
    }

    public MenuInflater$MenuState(com.actionbarsherlock.view.MenuInflater p1, com.actionbarsherlock.view.Menu p2)
    {
        this.this$0 = p1;
        this.menu = p2;
        this.resetGroup();
        return;
    }

    static synthetic com.actionbarsherlock.view.ActionProvider access$0(com.actionbarsherlock.view.MenuInflater$MenuState p1)
    {
        return p1.itemActionProvider;
    }

    private char getShortcut(String p2)
    {
        char v0 = 0;
        if (p2 != null) {
            v0 = p2.charAt(0);
        }
        return v0;
    }

    private Object newInstance(String p7, Class[] p8, Object[] p9)
    {
        try {
            int v3_1 = com.actionbarsherlock.view.MenuInflater.access$0(this.this$0).getClassLoader().loadClass(p7).getConstructor(p8).newInstance(p9);
        } catch (Exception v2) {
            android.util.Log.w("MenuInflater", new StringBuilder("Cannot instantiate class: ").append(p7).toString(), v2);
            v3_1 = 0;
        }
        return v3_1;
    }

    private void setItem(com.actionbarsherlock.view.MenuItem p8)
    {
        com.actionbarsherlock.view.ActionProvider v3_2;
        com.actionbarsherlock.view.MenuItem vtmp3 = p8.setChecked(this.itemChecked).setVisible(this.itemVisible).setEnabled(this.itemEnabled);
        if (this.itemCheckable < 1) {
            v3_2 = 0;
        } else {
            v3_2 = 1;
        }
        vtmp3.setCheckable(v3_2).setTitleCondensed(this.itemTitleCondensed).setIcon(this.itemIconResId).setAlphabeticShortcut(this.itemAlphabeticShortcut).setNumericShortcut(this.itemNumericShortcut);
        if (this.itemShowAsAction >= 0) {
            p8.setShowAsAction(this.itemShowAsAction);
        }
        if (this.itemListenerMethodName != null) {
            if (!com.actionbarsherlock.view.MenuInflater.access$0(this.this$0).isRestricted()) {
                p8.setOnMenuItemClickListener(new com.actionbarsherlock.view.MenuInflater$InflatedOnMenuItemClickListener(com.actionbarsherlock.view.MenuInflater.access$0(this.this$0), this.itemListenerMethodName));
            } else {
                throw new IllegalStateException("The android:onClick attribute cannot be used within a restricted context");
            }
        }
        if (this.itemCheckable >= 2) {
            if (!(p8 instanceof com.actionbarsherlock.internal.view.menu.MenuItemImpl)) {
                this.menu.setGroupCheckable(this.groupId, 1, 1);
            } else {
                ((com.actionbarsherlock.internal.view.menu.MenuItemImpl) p8).setExclusiveCheckable(1);
            }
        }
        int v1 = 0;
        if (this.itemActionViewClassName != null) {
            p8.setActionView(((android.view.View) this.newInstance(this.itemActionViewClassName, com.actionbarsherlock.view.MenuInflater.access$3(), com.actionbarsherlock.view.MenuInflater.access$4(this.this$0))));
            v1 = 1;
        }
        if (this.itemActionViewLayout > 0) {
            if (v1 != 0) {
                android.util.Log.w("MenuInflater", "Ignoring attribute \'itemActionViewLayout\'. Action view already specified.");
            } else {
                p8.setActionView(this.itemActionViewLayout);
            }
        }
        if (this.itemActionProvider != null) {
            p8.setActionProvider(this.itemActionProvider);
        }
        return;
    }

    public void addItem()
    {
        this.itemAdded = 1;
        this.setItem(this.menu.add(this.groupId, this.itemId, this.itemCategoryOrder, this.itemTitle));
        return;
    }

    public com.actionbarsherlock.view.SubMenu addSubMenuItem()
    {
        this.itemAdded = 1;
        com.actionbarsherlock.view.SubMenu v0 = this.menu.addSubMenu(this.groupId, this.itemId, this.itemCategoryOrder, this.itemTitle);
        this.setItem(v0.getItem());
        return v0;
    }

    public boolean hasAddedItem()
    {
        return this.itemAdded;
    }

    public void readGroup(android.util.AttributeSet p6)
    {
        android.content.res.TypedArray v0 = com.actionbarsherlock.view.MenuInflater.access$0(this.this$0).obtainStyledAttributes(p6, com.actionbarsherlock.R$styleable.SherlockMenuGroup);
        this.groupId = v0.getResourceId(1, 0);
        this.groupCategory = v0.getInt(3, 0);
        this.groupOrder = v0.getInt(4, 0);
        this.groupCheckable = v0.getInt(5, 0);
        this.groupVisible = v0.getBoolean(2, 1);
        this.groupEnabled = v0.getBoolean(0, 1);
        v0.recycle();
        return;
    }

    public void readItem(android.util.AttributeSet p11)
    {
        android.content.res.TypedArray v0 = com.actionbarsherlock.view.MenuInflater.access$0(this.this$0).obtainStyledAttributes(p11, com.actionbarsherlock.R$styleable.SherlockMenuItem);
        this.itemId = v0.getResourceId(2, 0);
        this.itemCategoryOrder = ((-65536 & v0.getInt(5, this.groupCategory)) | (65535 & v0.getInt(6, this.groupOrder)));
        this.itemTitle = v0.getText(7);
        this.itemTitleCondensed = v0.getText(8);
        this.itemIconResId = v0.getResourceId(0, 0);
        this.itemAlphabeticShortcut = this.getShortcut(v0.getString(9));
        this.itemNumericShortcut = this.getShortcut(v0.getString(10));
        if (!v0.hasValue(11)) {
            this.itemCheckable = this.groupCheckable;
        } else {
            com.actionbarsherlock.view.ActionProvider v5_30;
            if (!v0.getBoolean(11, 0)) {
                v5_30 = 0;
            } else {
                v5_30 = 1;
            }
            this.itemCheckable = v5_30;
        }
        com.actionbarsherlock.view.ActionProvider v5_39;
        this.itemChecked = v0.getBoolean(3, 0);
        this.itemVisible = v0.getBoolean(4, this.groupVisible);
        this.itemEnabled = v0.getBoolean(1, this.groupEnabled);
        android.util.TypedValue v4_1 = new android.util.TypedValue();
        v0.getValue(13, v4_1);
        if (v4_1.type != 17) {
            v5_39 = -1;
        } else {
            v5_39 = v4_1.data;
        }
        int v2;
        this.itemShowAsAction = v5_39;
        this.itemListenerMethodName = v0.getString(12);
        this.itemActionViewLayout = v0.getResourceId(14, 0);
        this.itemActionViewClassName = v0.getString(15);
        this.itemActionProviderClassName = v0.getString(16);
        if (this.itemActionProviderClassName == null) {
            v2 = 0;
        } else {
            v2 = 1;
        }
        if ((v2 == 0) || ((this.itemActionViewLayout != 0) || (this.itemActionViewClassName != null))) {
            if (v2 != 0) {
                android.util.Log.w("MenuInflater", "Ignoring attribute \'actionProviderClass\'. Action view already specified.");
            }
            this.itemActionProvider = 0;
        } else {
            this.itemActionProvider = ((com.actionbarsherlock.view.ActionProvider) this.newInstance(this.itemActionProviderClassName, com.actionbarsherlock.view.MenuInflater.access$1(), com.actionbarsherlock.view.MenuInflater.access$2(this.this$0)));
        }
        v0.recycle();
        this.itemAdded = 0;
        return;
    }

    public void resetGroup()
    {
        this.groupId = 0;
        this.groupCategory = 0;
        this.groupOrder = 0;
        this.groupCheckable = 0;
        this.groupVisible = 1;
        this.groupEnabled = 1;
        return;
    }

    static MenuInflater()
    {
        Class[] v0_1 = new Class[1];
        v0_1[0] = android.content.Context;
        com.actionbarsherlock.view.MenuInflater.ACTION_VIEW_CONSTRUCTOR_SIGNATURE = v0_1;
        com.actionbarsherlock.view.MenuInflater.ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE = com.actionbarsherlock.view.MenuInflater.ACTION_VIEW_CONSTRUCTOR_SIGNATURE;
        return;
    }

    public MenuInflater(android.content.Context p3)
    {
        this.mContext = p3;
        Object[] v0_1 = new Object[1];
        v0_1[0] = p3;
        this.mActionViewConstructorArguments = v0_1;
        this.mActionProviderConstructorArguments = this.mActionViewConstructorArguments;
        return;
    }

    static synthetic android.content.Context access$0(com.actionbarsherlock.view.MenuInflater p1)
    {
        return p1.mContext;
    }

    static synthetic Class[] access$1()
    {
        return com.actionbarsherlock.view.MenuInflater.ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE;
    }

    static synthetic Object[] access$2(com.actionbarsherlock.view.MenuInflater p1)
    {
        return p1.mActionProviderConstructorArguments;
    }

    static synthetic Class[] access$3()
    {
        return com.actionbarsherlock.view.MenuInflater.ACTION_VIEW_CONSTRUCTOR_SIGNATURE;
    }

    static synthetic Object[] access$4(com.actionbarsherlock.view.MenuInflater p1)
    {
        return p1.mActionViewConstructorArguments;
    }

    private void parseMenu(org.xmlpull.v1.XmlPullParser p11, android.util.AttributeSet p12, com.actionbarsherlock.view.Menu p13)
    {
        com.actionbarsherlock.view.MenuInflater$MenuState v2_1 = new com.actionbarsherlock.view.MenuInflater$MenuState(this, p13);
        int v0 = p11.getEventType();
        int v1 = 0;
        String v6 = 0;
        while (v0 != 2) {
            v0 = p11.next();
            if (v0 == 1) {
            }
            int v3 = 0;
            while (v3 == 0) {
                switch (v0) {
                    case 1:
                        throw new RuntimeException("Unexpected end of document");
                        break;
                    case 2:
                        if (v1 != 0) {
                        } else {
                            String v5_2 = p11.getName();
                            if (!v5_2.equals("group")) {
                                if (!v5_2.equals("item")) {
                                    if (!v5_2.equals("menu")) {
                                        v1 = 1;
                                        v6 = v5_2;
                                    } else {
                                        this.parseMenu(p11, p12, v2_1.addSubMenuItem());
                                    }
                                } else {
                                    v2_1.readItem(p12);
                                }
                            } else {
                                v2_1.readGroup(p12);
                            }
                        }
                        break;
                    case 3:
                        String v5_1 = p11.getName();
                        if ((v1 == 0) || (!v5_1.equals(v6))) {
                            if (!v5_1.equals("group")) {
                                if (!v5_1.equals("item")) {
                                    if (!v5_1.equals("menu")) {
                                    } else {
                                        v3 = 1;
                                    }
                                } else {
                                    if (v2_1.hasAddedItem()) {
                                    } else {
                                        if ((com.actionbarsherlock.view.MenuInflater$MenuState.access$0(v2_1) == null) || (!com.actionbarsherlock.view.MenuInflater$MenuState.access$0(v2_1).hasSubMenu())) {
                                            v2_1.addItem();
                                        } else {
                                            v2_1.addSubMenuItem();
                                        }
                                    }
                                }
                            } else {
                                v2_1.resetGroup();
                            }
                        } else {
                            v1 = 0;
                            v6 = 0;
                        }
                        break;
                }
                v0 = p11.next();
            }
            return;
        }
        String v5_0 = p11.getName();
        if (!v5_0.equals("menu")) {
            throw new RuntimeException(new StringBuilder("Expecting menu, got ").append(v5_0).toString());
        } else {
            v0 = p11.next();
        }
    }

    public void inflate(int p6, com.actionbarsherlock.view.Menu p7)
    {
        try {
            android.content.res.XmlResourceParser v2 = this.mContext.getResources().getLayout(p6);
            this.parseMenu(v2, android.util.Xml.asAttributeSet(v2), p7);
        } catch (java.io.IOException v1_1) {
            throw new android.view.InflateException("Error inflating menu XML", v1_1);
        } catch (java.io.IOException v1_0) {
            throw new android.view.InflateException("Error inflating menu XML", v1_0);
        } catch (android.view.InflateException v3_5) {
            if (v2 != null) {
                v2.close();
            }
            throw v3_5;
        }
        if (v2 != null) {
            v2.close();
        }
        return;
    }

    public abstract boolean onMenuItemActionCollapse();

    public abstract boolean onMenuItemActionExpand();

    private Window(android.content.Context p1)
    {
        super(p1);
        return;
    }

    public abstract void setActivityChooserModel();

    public ActivityChooserModel$ActivityResolveInfo(com.actionbarsherlock.widget.ActivityChooserModel p1, android.content.pm.ResolveInfo p2)
    {
        this.this$0 = p1;
        this.resolveInfo = p2;
        return;
    }

    public int compareTo(com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo p3)
    {
        return (Float.floatToIntBits(p3.weight) - Float.floatToIntBits(this.weight));
    }

    public bridge synthetic int compareTo(Object p2)
    {
        return this.compareTo(((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) p2));
    }

    public boolean equals(Object p6)
    {
        int v1 = 1;
        if (this != p6) {
            if (p6 != null) {
                if (this.getClass() == p6.getClass()) {
                    if (Float.floatToIntBits(this.weight) != Float.floatToIntBits(((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) p6).weight)) {
                        v1 = 0;
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    public int hashCode()
    {
        return (Float.floatToIntBits(this.weight) + 31);
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder();
        v0_1.append("[");
        v0_1.append("resolveInfo:").append(this.resolveInfo.toString());
        v0_1.append("; weight:").append(new java.math.BigDecimal(((double) this.weight)));
        v0_1.append("]");
        return v0_1.toString();
    }

    public abstract void sort();

    private ActivityChooserModel$DefaultSorter(com.actionbarsherlock.widget.ActivityChooserModel p2)
    {
        this.this$0 = p2;
        this.mPackageNameToActivityMap = new java.util.HashMap();
        return;
    }

    synthetic ActivityChooserModel$DefaultSorter(com.actionbarsherlock.widget.ActivityChooserModel p1, com.actionbarsherlock.widget.ActivityChooserModel$DefaultSorter p2)
    {
        this(p1);
        return;
    }

    public void sort(android.content.Intent p11, java.util.List p12, java.util.List p13)
    {
        java.util.Map v7 = this.mPackageNameToActivityMap;
        v7.clear();
        int v1 = p12.size();
        int v3_0 = 0;
        while (v3_0 < v1) {
            com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo v0_3 = ((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) p12.get(v3_0));
            v0_3.weight = 0;
            v7.put(v0_3.resolveInfo.activityInfo.packageName, v0_3);
            v3_0++;
        }
        float v5 = 1065353216;
        int v3_1 = (p13.size() - 1);
        while (v3_1 >= 0) {
            com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord v2_1 = ((com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) p13.get(v3_1));
            com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo v0_1 = ((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) v7.get(v2_1.activity.getPackageName()));
            if (v0_1 != null) {
                v0_1.weight = (v0_1.weight + (v2_1.weight * v5));
                v5 *= 1064514355;
            }
            v3_1--;
        }
        java.util.Collections.sort(p12);
        return;
    }

    public ActivityChooserModel$HistoricalRecord(android.content.ComponentName p1, long p2, float p4)
    {
        this.activity = p1;
        this.time = p2;
        this.weight = p4;
        return;
    }

    public ActivityChooserModel$HistoricalRecord(String p2, long p3, float p5)
    {
        this(android.content.ComponentName.unflattenFromString(p2), p3, p5);
        return;
    }

    public boolean equals(Object p8)
    {
        int v1 = 1;
        if (this != p8) {
            if (p8 != null) {
                if (this.getClass() == p8.getClass()) {
                    if (this.activity != null) {
                        if (!this.activity.equals(((com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) p8).activity)) {
                            v1 = 0;
                            return v1;
                        }
                    } else {
                        if (((com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) p8).activity != null) {
                            v1 = 0;
                            return v1;
                        }
                    }
                    if (this.time == ((com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) p8).time) {
                        if (Float.floatToIntBits(this.weight) != Float.floatToIntBits(((com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) p8).weight)) {
                            v1 = 0;
                        }
                    } else {
                        v1 = 0;
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    public int hashCode()
    {
        int v2_3;
        int v1 = 1;
        if (this.activity != null) {
            v2_3 = this.activity.hashCode();
        } else {
            v2_3 = 0;
        }
        return (((((v2_3 + 31) * 31) + ((int) (this.time ^ (this.time >> 32)))) * 31) + Float.floatToIntBits(this.weight));
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder();
        v0_1.append("[");
        v0_1.append("; activity:").append(this.activity);
        v0_1.append("; time:").append(this.time);
        v0_1.append("; weight:").append(new java.math.BigDecimal(((double) this.weight)));
        v0_1.append("]");
        return v0_1.toString();
    }

    ActivityChooserModel$HistoryLoader$1(com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader p1)
    {
        this.this$1 = p1;
        return;
    }

    public void run()
    {
        com.actionbarsherlock.widget.ActivityChooserModel.access$6(com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader.access$1(this.this$1));
        com.actionbarsherlock.widget.ActivityChooserModel.access$7(com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader.access$1(this.this$1));
        return;
    }

    private ActivityChooserModel$HistoryLoader(com.actionbarsherlock.widget.ActivityChooserModel p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ActivityChooserModel$HistoryLoader(com.actionbarsherlock.widget.ActivityChooserModel p1, com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader p2)
    {
        this(p1);
        return;
    }

    static synthetic com.actionbarsherlock.widget.ActivityChooserModel access$1(com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader p1)
    {
        return p1.this$0;
    }

    public void run()
    {
        try {
            java.io.FileInputStream v4 = com.actionbarsherlock.widget.ActivityChooserModel.access$0(this.this$0).openFileInput(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0));
            try {
                org.xmlpull.v1.XmlPullParser v12 = android.util.Xml.newPullParser();
                v12.setInput(v4, 0);
                int v17_0 = 0;
            } catch (org.xmlpull.v1.XmlPullParserException v20) {
                android.util.Log.e(com.actionbarsherlock.widget.ActivityChooserModel.access$8(), new StringBuilder("Error reading historical recrod file: ").append(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0)).toString(), v20);
                if (v4 == null) {
                    return;
                } else {
                    try {
                        v4.close();
                    } catch (java.io.IOException v21) {
                    }
                    return;
                }
            } catch (java.io.IOException v10) {
                android.util.Log.e(com.actionbarsherlock.widget.ActivityChooserModel.access$8(), new StringBuilder("Error reading historical recrod file: ").append(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0)).toString(), v10);
                if (v4 == null) {
                    return;
                } else {
                    try {
                        v4.close();
                    } catch (java.io.IOException v21) {
                    }
                    return;
                }
            } catch (java.io.IOException v21_11) {
                if (v4 != null) {
                    try {
                        v4.close();
                    } catch (String v22) {
                    }
                }
                throw v21_11;
            }
            while ((v17_0 != 1) && (v17_0 != 2)) {
                v17_0 = v12.next();
            }
            if ("historical-records".equals(v12.getName())) {
                java.util.ArrayList v14_1 = new java.util.ArrayList();
                while(true) {
                    int v17_1 = v12.next();
                    if (v17_1 != 1) {
                        if ((v17_1 != 3) && (v17_1 != 4)) {
                            if (!"historical-record".equals(v12.getName())) {
                                break;
                            }
                            v14_1.add(new com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord(v12.getAttributeValue(0, "activity"), Long.parseLong(v12.getAttributeValue(0, "time")), Float.parseFloat(v12.getAttributeValue(0, "weight"))));
                        }
                    } else {
                        com.actionbarsherlock.widget.ActivityChooserModel.access$2(this.this$0);
                        java.util.LinkedHashSet v18 = new java.util.LinkedHashSet;
                        v18(v14_1);
                        java.util.List v7 = com.actionbarsherlock.widget.ActivityChooserModel.access$3(this.this$0);
                        int v9 = (v7.size() - 1);
                        while (v9 >= 0) {
                            v18.add(((com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) v7.get(v9)));
                            v9--;
                        }
                        if (v7.size() != v18.size()) {
                            v7.clear();
                            v7.addAll(v18);
                            com.actionbarsherlock.widget.ActivityChooserModel.access$4(this.this$0, 1);
                            com.actionbarsherlock.widget.ActivityChooserModel.access$5(this.this$0).post(new com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1(this));
                            if (v4 == null) {
                                return;
                            } else {
                                try {
                                    v4.close();
                                } catch (java.io.IOException v21) {
                                }
                                return;
                            }
                        } else {
                            if (v4 == null) {
                                return;
                            } else {
                                try {
                                    v4.close();
                                } catch (java.io.IOException v21) {
                                }
                                return;
                            }
                        }
                    }
                }
                throw new org.xmlpull.v1.XmlPullParserException("Share records file not well-formed.");
            } else {
                throw new org.xmlpull.v1.XmlPullParserException("Share records file does not start with historical-records tag.");
            }
        } catch (java.io.FileNotFoundException v5) {
            return;
        }
    }

    private ActivityChooserModel$HistoryPersister(com.actionbarsherlock.widget.ActivityChooserModel p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ActivityChooserModel$HistoryPersister(com.actionbarsherlock.widget.ActivityChooserModel p1, com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister p2)
    {
        this(p1);
        return;
    }

    public void run()
    {
        java.util.ArrayList v8 = 0;
        com.actionbarsherlock.widget.ActivityChooserModel.access$2(this.this$0);
        try {
            java.util.ArrayList v9_1 = new java.util.ArrayList(com.actionbarsherlock.widget.ActivityChooserModel.access$3(this.this$0));
            try {
                try {
                    java.io.FileOutputStream v1 = com.actionbarsherlock.widget.ActivityChooserModel.access$0(this.this$0).openFileOutput(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0), 0);
                    org.xmlpull.v1.XmlSerializer v10 = android.util.Xml.newSerializer();
                    try {
                        v10.setOutput(v1, 0);
                        v10.startDocument("UTF-8", Boolean.valueOf(1));
                        v10.startTag(0, "historical-records");
                        int v7 = v9_1.size();
                        int v2 = 0;
                    } catch (IllegalArgumentException v3) {
                        android.util.Log.e(com.actionbarsherlock.widget.ActivityChooserModel.access$8(), new StringBuilder("Error writing historical recrod file: ").append(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0)).toString(), v3);
                        if (v1 == null) {
                            return;
                        } else {
                            try {
                                v1.close();
                            } catch (java.io.IOException v11) {
                            }
                            return;
                        }
                    } catch (IllegalStateException v5) {
                        android.util.Log.e(com.actionbarsherlock.widget.ActivityChooserModel.access$8(), new StringBuilder("Error writing historical recrod file: ").append(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0)).toString(), v5);
                        if (v1 == null) {
                            return;
                        } else {
                            try {
                                v1.close();
                            } catch (java.io.IOException v11) {
                            }
                            return;
                        }
                    } catch (java.io.IOException v4) {
                        android.util.Log.e(com.actionbarsherlock.widget.ActivityChooserModel.access$8(), new StringBuilder("Error writing historical recrod file: ").append(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0)).toString(), v4);
                        if (v1 == null) {
                            return;
                        } else {
                            try {
                                v1.close();
                            } catch (java.io.IOException v11) {
                            }
                            return;
                        }
                    } catch (java.io.IOException v11_3) {
                        if (v1 != null) {
                            try {
                                v1.close();
                            } catch (String v12) {
                            }
                        }
                        throw v11_3;
                    }
                    while (v2 < v7) {
                        com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord v6_1 = ((com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) v9_1.remove(0));
                        v10.startTag(0, "historical-record");
                        v10.attribute(0, "activity", v6_1.activity.flattenToString());
                        v10.attribute(0, "time", String.valueOf(v6_1.time));
                        v10.attribute(0, "weight", String.valueOf(v6_1.weight));
                        v10.endTag(0, "historical-record");
                        v2++;
                    }
                    v10.endTag(0, "historical-records");
                    v10.endDocument();
                    if (v1 == null) {
                        return;
                    } else {
                        try {
                            v1.close();
                        } catch (java.io.IOException v11) {
                        }
                        return;
                    }
                } catch (java.io.FileNotFoundException v0) {
                    android.util.Log.e(com.actionbarsherlock.widget.ActivityChooserModel.access$8(), new StringBuilder("Error writing historical recrod file: ").append(com.actionbarsherlock.widget.ActivityChooserModel.access$1(this.this$0)).toString(), v0);
                    return;
                }
            } catch (java.io.IOException v11_0) {
                throw v11_0;
            }
        } catch (java.io.IOException v11_0) {
        }
    }

    public abstract boolean onChooseActivity();

    ActivityChooserModel$SerialExecutor$1(com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor p1, Runnable p2)
    {
        this.this$1 = p1;
        this.val$r = p2;
        return;
    }

    public void run()
    {
        try {
            this.val$r.run();
            this.this$1.scheduleNext();
            return;
        } catch (Throwable v0_2) {
            this.this$1.scheduleNext();
            throw v0_2;
        }
    }

    private ActivityChooserModel$SerialExecutor()
    {
        this.mTasks = new java.util.LinkedList();
        return;
    }

    synthetic ActivityChooserModel$SerialExecutor(com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor p1)
    {
        return;
    }

    public declared_synchronized void execute(Runnable p3)
    {
        try {
            this.mTasks.offer(new com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor$1(this, p3));
        } catch (Throwable v0_2) {
            throw v0_2;
        }
        if (this.mActive == null) {
            this.scheduleNext();
        }
        return;
    }

    protected declared_synchronized void scheduleNext()
    {
        try {
            Runnable v0_2 = ((Runnable) this.mTasks.poll());
            this.mActive = v0_2;
        } catch (Runnable v0_4) {
            throw v0_4;
        }
        if (v0_2 != null) {
            this.mActive.run();
        }
        return;
    }

    static ActivityChooserModel()
    {
        com.actionbarsherlock.widget.ActivityChooserModel.LOG_TAG = com.actionbarsherlock.widget.ActivityChooserModel.getSimpleName();
        com.actionbarsherlock.widget.ActivityChooserModel.sRegistryLock = new Object();
        com.actionbarsherlock.widget.ActivityChooserModel.sDataModelRegistry = new java.util.HashMap();
        com.actionbarsherlock.widget.ActivityChooserModel.SERIAL_EXECUTOR = new com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor(0);
        return;
    }

    private ActivityChooserModel(android.content.Context p4, String p5)
    {
        this.mInstanceLock = new Object();
        this.mActivites = new java.util.ArrayList();
        this.mHistoricalRecords = new java.util.ArrayList();
        this.mActivitySorter = new com.actionbarsherlock.widget.ActivityChooserModel$DefaultSorter(this, 0);
        this.mHistoryMaxSize = 50;
        this.mCanReadHistoricalData = 1;
        this.mReadShareHistoryCalled = 0;
        this.mHistoricalRecordsChanged = 1;
        this.mHandler = new android.os.Handler();
        this.mContext = p4.getApplicationContext();
        if ((android.text.TextUtils.isEmpty(p5)) || (p5.endsWith(".xml"))) {
            this.mHistoryFileName = p5;
        } else {
            this.mHistoryFileName = new StringBuilder(String.valueOf(p5)).append(".xml").toString();
        }
        return;
    }

    static synthetic android.content.Context access$0(com.actionbarsherlock.widget.ActivityChooserModel p1)
    {
        return p1.mContext;
    }

    static synthetic String access$1(com.actionbarsherlock.widget.ActivityChooserModel p1)
    {
        return p1.mHistoryFileName;
    }

    static synthetic Object access$2(com.actionbarsherlock.widget.ActivityChooserModel p1)
    {
        return p1.mInstanceLock;
    }

    static synthetic java.util.List access$3(com.actionbarsherlock.widget.ActivityChooserModel p1)
    {
        return p1.mHistoricalRecords;
    }

    static synthetic void access$4(com.actionbarsherlock.widget.ActivityChooserModel p0, boolean p1)
    {
        p0.mHistoricalRecordsChanged = p1;
        return;
    }

    static synthetic android.os.Handler access$5(com.actionbarsherlock.widget.ActivityChooserModel p1)
    {
        return p1.mHandler;
    }

    static synthetic void access$6(com.actionbarsherlock.widget.ActivityChooserModel p0)
    {
        p0.pruneExcessiveHistoricalRecordsLocked();
        return;
    }

    static synthetic void access$7(com.actionbarsherlock.widget.ActivityChooserModel p0)
    {
        p0.sortActivities();
        return;
    }

    static synthetic String access$8()
    {
        return com.actionbarsherlock.widget.ActivityChooserModel.LOG_TAG;
    }

    private boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord p4)
    {
        try {
            boolean v0 = this.mHistoricalRecords.add(p4);
        } catch (int v1_1) {
            throw v1_1;
        }
        if (v0) {
            this.mHistoricalRecordsChanged = 1;
            this.pruneExcessiveHistoricalRecordsLocked();
            this.persistHistoricalData();
            this.sortActivities();
        }
        return v0;
    }

    public static com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context p3, String p4)
    {
        try {
            void v0_2 = ((com.actionbarsherlock.widget.ActivityChooserModel) com.actionbarsherlock.widget.ActivityChooserModel.sDataModelRegistry.get(p4));
        } catch (java.util.Map v1_1) {
            throw v1_1;
        }
        if (v0_2 == 0) {
            v0_2 = new com.actionbarsherlock.widget.ActivityChooserModel(p3, p4);
            com.actionbarsherlock.widget.ActivityChooserModel.sDataModelRegistry.put(p4, v0_2);
        }
        return v0_2.readHistoricalData();
    }

    private void loadActivitiesLocked()
    {
        this.mActivites.clear();
        if (this.mIntent == null) {
            this.notifyChanged();
        } else {
            java.util.List v3 = this.mContext.getPackageManager().queryIntentActivities(this.mIntent, 0);
            int v2 = v3.size();
            int v0 = 0;
            while (v0 < v2) {
                this.mActivites.add(new com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo(this, ((android.content.pm.ResolveInfo) v3.get(v0))));
                v0++;
            }
            this.sortActivities();
        }
        return;
    }

    private void persistHistoricalData()
    {
        try {
            if (this.mReadShareHistoryCalled) {
                if (this.mHistoricalRecordsChanged) {
                    this.mHistoricalRecordsChanged = 0;
                    this.mCanReadHistoricalData = 1;
                    if (!android.text.TextUtils.isEmpty(this.mHistoryFileName)) {
                        com.actionbarsherlock.widget.ActivityChooserModel.SERIAL_EXECUTOR.execute(new com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister(this, 0));
                    }
                } else {
                }
                return;
            } else {
                throw new IllegalStateException("No preceding call to #readHistoricalData");
            }
        } catch (com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor v0_5) {
            throw v0_5;
        }
    }

    private void pruneExcessiveHistoricalRecordsLocked()
    {
        java.util.List v0 = this.mHistoricalRecords;
        int v2 = (v0.size() - this.mHistoryMaxSize);
        if (v2 > 0) {
            this.mHistoricalRecordsChanged = 1;
            int v1 = 0;
            while (v1 < v2) {
                v0.remove(0);
                v1++;
            }
        }
        return;
    }

    private void readHistoricalData()
    {
        try {
            if ((this.mCanReadHistoricalData) && (this.mHistoricalRecordsChanged)) {
                this.mCanReadHistoricalData = 0;
                this.mReadShareHistoryCalled = 1;
                if (!android.text.TextUtils.isEmpty(this.mHistoryFileName)) {
                    com.actionbarsherlock.widget.ActivityChooserModel.SERIAL_EXECUTOR.execute(new com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader(this, 0));
                }
            } else {
            }
        } catch (com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor v0_3) {
            throw v0_3;
        }
        return;
    }

    private void sortActivities()
    {
        try {
            if ((this.mActivitySorter != null) && (!this.mActivites.isEmpty())) {
                this.mActivitySorter.sort(this.mIntent, this.mActivites, java.util.Collections.unmodifiableList(this.mHistoricalRecords));
                this.notifyChanged();
            }
        } catch (com.actionbarsherlock.widget.ActivityChooserModel$ActivitySorter v0_1) {
            throw v0_1;
        }
        return;
    }

    public android.content.Intent chooseActivity(int p10)
    {
        com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo v2_1 = ((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) this.mActivites.get(p10));
        android.content.ComponentName v3_0 = new android.content.ComponentName(v2_1.resolveInfo.activityInfo.packageName, v2_1.resolveInfo.activityInfo.name);
        int v0_1 = new android.content.Intent(this.mIntent);
        v0_1.setComponent(v3_0);
        if ((this.mActivityChoserModelPolicy == null) || (!this.mActivityChoserModelPolicy.onChooseActivity(this, new android.content.Intent(v0_1)))) {
            this.addHisoricalRecord(new com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord(v3_0, System.currentTimeMillis(), 1065353216));
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public android.content.pm.ResolveInfo getActivity(int p3)
    {
        try {
            return ((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) this.mActivites.get(p3)).resolveInfo;
        } catch (Throwable v0_4) {
            throw v0_4;
        }
    }

    public int getActivityCount()
    {
        try {
            return this.mActivites.size();
        } catch (Throwable v0_2) {
            throw v0_2;
        }
    }

    public int getActivityIndex(android.content.pm.ResolveInfo p6)
    {
        java.util.List v0 = this.mActivites;
        int v1 = v0.size();
        int v3 = 0;
        while (v3 < v1) {
            if (((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) v0.get(v3)).resolveInfo != p6) {
                v3++;
            }
            return v3;
        }
        v3 = -1;
        return v3;
    }

    public android.content.pm.ResolveInfo getDefaultActivity()
    {
        try {
            int v0_2;
            if (this.mActivites.isEmpty()) {
                v0_2 = 0;
            } else {
                v0_2 = ((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) this.mActivites.get(0)).resolveInfo;
            }
        } catch (int v0_3) {
            throw v0_3;
        }
        return v0_2;
    }

    public int getHistoryMaxSize()
    {
        try {
            return this.mHistoryMaxSize;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public int getHistorySize()
    {
        try {
            return this.mHistoricalRecords.size();
        } catch (Throwable v0_2) {
            throw v0_2;
        }
    }

    public android.content.Intent getIntent()
    {
        try {
            return this.mIntent;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public void setActivitySorter(com.actionbarsherlock.widget.ActivityChooserModel$ActivitySorter p3)
    {
        try {
            if (this.mActivitySorter != p3) {
                this.mActivitySorter = p3;
                this.sortActivities();
            } else {
            }
        } catch (Throwable v0_1) {
            throw v0_1;
        }
        return;
    }

    public void setDefaultActivity(int p8)
    {
        int v4;
        com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo v2_1 = ((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) this.mActivites.get(p8));
        com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo v3_1 = ((com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo) this.mActivites.get(0));
        if (v3_1 == null) {
            v4 = 1065353216;
        } else {
            v4 = ((v3_1.weight - v2_1.weight) + 1084227584);
        }
        this.addHisoricalRecord(new com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord(new android.content.ComponentName(v2_1.resolveInfo.activityInfo.packageName, v2_1.resolveInfo.activityInfo.name), System.currentTimeMillis(), v4));
        return;
    }

    public void setHistoryMaxSize(int p3)
    {
        try {
            if (this.mHistoryMaxSize != p3) {
                this.mHistoryMaxSize = p3;
                this.pruneExcessiveHistoricalRecordsLocked();
                this.sortActivities();
            } else {
            }
        } catch (Throwable v0_1) {
            throw v0_1;
        }
        return;
    }

    public void setIntent(android.content.Intent p3)
    {
        try {
            if (this.mIntent != p3) {
                this.mIntent = p3;
                this.loadActivitiesLocked();
            } else {
            }
        } catch (Throwable v0_1) {
            throw v0_1;
        }
        return;
    }

    public void setOnChooseActivityListener(com.actionbarsherlock.widget.ActivityChooserModel$OnChooseActivityListener p1)
    {
        this.mActivityChoserModelPolicy = p1;
        return;
    }

    ActivityChooserView$1(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onChanged()
    {
        super.onChanged();
        com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).notifyDataSetChanged();
        return;
    }

    public void onInvalidated()
    {
        super.onInvalidated();
        com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).notifyDataSetInvalidated();
        return;
    }

    ActivityChooserView$2(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onGlobalLayout()
    {
        if (this.this$0.isShowingPopup()) {
            if (this.this$0.isShown()) {
                com.actionbarsherlock.widget.ActivityChooserView.access$1(this.this$0).show();
                if (this.this$0.mProvider != null) {
                    this.this$0.mProvider.subUiVisibilityChanged(1);
                }
            } else {
                com.actionbarsherlock.widget.ActivityChooserView.access$1(this.this$0).dismiss();
            }
        }
        return;
    }

    ActivityChooserView$3(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onChanged()
    {
        super.onChanged();
        com.actionbarsherlock.widget.ActivityChooserView.access$12(this.this$0);
        return;
    }

    private ActivityChooserView$ActivityChooserViewAdapter(com.actionbarsherlock.widget.ActivityChooserView p2)
    {
        this.this$0 = p2;
        this.mMaxActivityCount = 4;
        return;
    }

    synthetic ActivityChooserView$ActivityChooserViewAdapter(com.actionbarsherlock.widget.ActivityChooserView p1, com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter p2)
    {
        this(p1);
        return;
    }

    public int getActivityCount()
    {
        return this.mDataModel.getActivityCount();
    }

    public int getCount()
    {
        int v0 = this.mDataModel.getActivityCount();
        if ((!this.mShowDefaultActivity) && (this.mDataModel.getDefaultActivity() != null)) {
            v0--;
        }
        int v1 = Math.min(v0, this.mMaxActivityCount);
        if (this.mShowFooterView) {
            v1++;
        }
        return v1;
    }

    public com.actionbarsherlock.widget.ActivityChooserModel getDataModel()
    {
        return this.mDataModel;
    }

    public android.content.pm.ResolveInfo getDefaultActivity()
    {
        return this.mDataModel.getDefaultActivity();
    }

    public int getHistorySize()
    {
        return this.mDataModel.getHistorySize();
    }

    public Object getItem(int p3)
    {
        android.content.pm.ResolveInfo v1_1;
        switch (this.getItemViewType(p3)) {
            case 0:
                if ((!this.mShowDefaultActivity) && (this.mDataModel.getDefaultActivity() != null)) {
                    p3++;
                }
                v1_1 = this.mDataModel.getActivity(p3);
                break;
            case 1:
                v1_1 = 0;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return v1_1;
    }

    public long getItemId(int p3)
    {
        return ((long) p3);
    }

    public int getItemViewType(int p2)
    {
        if ((!this.mShowFooterView) || (p2 != (this.getCount() - 1))) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public int getMaxActivityCount()
    {
        return this.mMaxActivityCount;
    }

    public boolean getShowDefaultActivity()
    {
        return this.mShowDefaultActivity;
    }

    public android.view.View getView(int p11, android.view.View p12, android.view.ViewGroup p13)
    {
        android.view.View v1;
        switch (this.getItemViewType(p11)) {
            case 0:
                if ((p12 == null) || (p12.getId() != com.actionbarsherlock.R$id.abs__list_item)) {
                    p12 = android.view.LayoutInflater.from(this.this$0.getContext()).inflate(com.actionbarsherlock.R$layout.abs__activity_chooser_view_list_item, p13, 0);
                }
                android.content.pm.PackageManager v4 = com.actionbarsherlock.widget.ActivityChooserView.access$4(this.this$0).getPackageManager();
                android.content.pm.ResolveInfo v0_1 = ((android.content.pm.ResolveInfo) this.getItem(p11));
                ((android.widget.ImageView) p12.findViewById(com.actionbarsherlock.R$id.abs__icon)).setImageDrawable(v0_1.loadIcon(v4));
                ((android.widget.TextView) p12.findViewById(com.actionbarsherlock.R$id.abs__title)).setText(v0_1.loadLabel(v4));
                if (com.actionbarsherlock.widget.ActivityChooserView.access$11()) {
                    if ((!this.mShowDefaultActivity) || ((p11 != 0) || (!this.mHighlightDefaultActivity))) {
                        com.actionbarsherlock.widget.ActivityChooserView$SetActivated.invoke(p12, 0);
                    } else {
                        com.actionbarsherlock.widget.ActivityChooserView$SetActivated.invoke(p12, 1);
                    }
                }
                v1 = p12;
                break;
            case 1:
                if ((p12 == null) || (p12.getId() != 1)) {
                    p12 = android.view.LayoutInflater.from(this.this$0.getContext()).inflate(com.actionbarsherlock.R$layout.abs__activity_chooser_view_list_item, p13, 0);
                    p12.setId(1);
                    ((android.widget.TextView) p12.findViewById(com.actionbarsherlock.R$id.abs__title)).setText(com.actionbarsherlock.widget.ActivityChooserView.access$4(this.this$0).getString(com.actionbarsherlock.R$string.abs__activity_chooser_view_see_all));
                }
                v1 = p12;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return v1;
    }

    public int getViewTypeCount()
    {
        return 3;
    }

    public int measureContentWidth()
    {
        int v5 = this.mMaxActivityCount;
        this.mMaxActivityCount = 2147483647;
        int v0 = 0;
        android.view.View v4 = 0;
        int v6 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
        int v2 = android.view.View$MeasureSpec.makeMeasureSpec(0, 0);
        int v1 = this.getCount();
        int v3 = 0;
        while (v3 < v1) {
            v4 = this.getView(v3, v4, 0);
            v4.measure(v6, v2);
            v0 = Math.max(v0, v4.getMeasuredWidth());
            v3++;
        }
        this.mMaxActivityCount = v5;
        return v0;
    }

    public void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel p3)
    {
        com.actionbarsherlock.widget.ActivityChooserModel v0 = com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getDataModel();
        if ((v0 != null) && (this.this$0.isShown())) {
            v0.unregisterObserver(com.actionbarsherlock.widget.ActivityChooserView.access$10(this.this$0));
        }
        this.mDataModel = p3;
        if ((p3 != null) && (this.this$0.isShown())) {
            p3.registerObserver(com.actionbarsherlock.widget.ActivityChooserView.access$10(this.this$0));
        }
        this.notifyDataSetChanged();
        return;
    }

    public void setMaxActivityCount(int p2)
    {
        if (this.mMaxActivityCount != p2) {
            this.mMaxActivityCount = p2;
            this.notifyDataSetChanged();
        }
        return;
    }

    public void setShowDefaultActivity(boolean p2, boolean p3)
    {
        if ((this.mShowDefaultActivity != p2) || (this.mHighlightDefaultActivity != p3)) {
            this.mShowDefaultActivity = p2;
            this.mHighlightDefaultActivity = p3;
            this.notifyDataSetChanged();
        }
        return;
    }

    public void setShowFooterView(boolean p2)
    {
        if (this.mShowFooterView != p2) {
            this.mShowFooterView = p2;
            this.notifyDataSetChanged();
        }
        return;
    }

    private ActivityChooserView$Callbacks(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ActivityChooserView$Callbacks(com.actionbarsherlock.widget.ActivityChooserView p1, com.actionbarsherlock.widget.ActivityChooserView$Callbacks p2)
    {
        this(p1);
        return;
    }

    private void notifyOnDismissListener()
    {
        if (com.actionbarsherlock.widget.ActivityChooserView.access$9(this.this$0) != null) {
            com.actionbarsherlock.widget.ActivityChooserView.access$9(this.this$0).onDismiss();
        }
        return;
    }

    public void onClick(android.view.View p6)
    {
        if (p6 != com.actionbarsherlock.widget.ActivityChooserView.access$5(this.this$0)) {
            if (p6 != com.actionbarsherlock.widget.ActivityChooserView.access$6(this.this$0)) {
                throw new IllegalArgumentException();
            } else {
                com.actionbarsherlock.widget.ActivityChooserView.access$7(this.this$0, 0);
                com.actionbarsherlock.widget.ActivityChooserView.access$2(this.this$0, com.actionbarsherlock.widget.ActivityChooserView.access$8(this.this$0));
            }
        } else {
            this.this$0.dismissPopup();
            android.content.Intent v2 = com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getDataModel().chooseActivity(com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getDataModel().getActivityIndex(com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getDefaultActivity()));
            if (v2 != null) {
                com.actionbarsherlock.widget.ActivityChooserView.access$4(this.this$0).startActivity(v2);
            }
        }
        return;
    }

    public void onDismiss()
    {
        this.notifyOnDismissListener();
        if (this.this$0.mProvider != null) {
            this.this$0.mProvider.subUiVisibilityChanged(0);
        }
        return;
    }

    public void onItemClick(android.widget.AdapterView p6, android.view.View p7, int p8, long p9)
    {
        switch (((com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter) p6.getAdapter()).getItemViewType(p8)) {
            case 0:
                this.this$0.dismissPopup();
                if (!com.actionbarsherlock.widget.ActivityChooserView.access$3(this.this$0)) {
                    if (!com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getShowDefaultActivity()) {
                        p8++;
                    }
                    android.content.Intent v2 = com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getDataModel().chooseActivity(p8);
                    if (v2 == null) {
                    } else {
                        com.actionbarsherlock.widget.ActivityChooserView.access$4(this.this$0).startActivity(v2);
                    }
                } else {
                    if (p8 <= 0) {
                    } else {
                        com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getDataModel().setDefaultActivity(p8);
                    }
                }
                break;
            case 1:
                com.actionbarsherlock.widget.ActivityChooserView.access$2(this.this$0, 2147483647);
                break;
            default:
                throw new IllegalArgumentException();
        }
        return;
    }

    public boolean onLongClick(android.view.View p4)
    {
        if (p4 != com.actionbarsherlock.widget.ActivityChooserView.access$5(this.this$0)) {
            throw new IllegalArgumentException();
        } else {
            if (com.actionbarsherlock.widget.ActivityChooserView.access$0(this.this$0).getCount() > 0) {
                com.actionbarsherlock.widget.ActivityChooserView.access$7(this.this$0, 1);
                com.actionbarsherlock.widget.ActivityChooserView.access$2(this.this$0, com.actionbarsherlock.widget.ActivityChooserView.access$8(this.this$0));
            }
            return 1;
        }
    }

    private ActivityChooserView$SetActivated()
    {
        return;
    }

    public static void invoke(android.view.View p0, boolean p1)
    {
        p0.setActivated(p1);
        return;
    }

    static ActivityChooserView()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        com.actionbarsherlock.widget.ActivityChooserView.IS_HONEYCOMB = v0_1;
        return;
    }

    public ActivityChooserView(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public ActivityChooserView(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public ActivityChooserView(android.content.Context p10, android.util.AttributeSet p11, int p12)
    {
        super(p10, p11, p12);
        super.mModelDataSetOberver = new com.actionbarsherlock.widget.ActivityChooserView$1(super);
        super.mOnGlobalLayoutListener = new com.actionbarsherlock.widget.ActivityChooserView$2(super);
        super.mInitialActivityCount = 4;
        super.mContext = p10;
        android.content.res.TypedArray v0 = p10.obtainStyledAttributes(p11, com.actionbarsherlock.R$styleable.SherlockActivityChooserView, p12, 0);
        super.mInitialActivityCount = v0.getInt(1, 4);
        android.graphics.drawable.Drawable v1 = v0.getDrawable(2);
        v0.recycle();
        android.view.LayoutInflater.from(super.mContext).inflate(com.actionbarsherlock.R$layout.abs__activity_chooser_view, super, 1);
        super.mCallbacks = new com.actionbarsherlock.widget.ActivityChooserView$Callbacks(super, 0);
        super.mActivityChooserContent = ((com.actionbarsherlock.internal.widget.IcsLinearLayout) super.findViewById(com.actionbarsherlock.R$id.abs__activity_chooser_view_content));
        super.mActivityChooserContentBackground = super.mActivityChooserContent.getBackground();
        super.mDefaultActivityButton = ((android.widget.FrameLayout) super.findViewById(com.actionbarsherlock.R$id.abs__default_activity_button));
        super.mDefaultActivityButton.setOnClickListener(super.mCallbacks);
        super.mDefaultActivityButton.setOnLongClickListener(super.mCallbacks);
        super.mDefaultActivityButtonImage = ((android.widget.ImageView) super.mDefaultActivityButton.findViewById(com.actionbarsherlock.R$id.abs__image));
        super.mExpandActivityOverflowButton = ((android.widget.FrameLayout) super.findViewById(com.actionbarsherlock.R$id.abs__expand_activities_button));
        super.mExpandActivityOverflowButton.setOnClickListener(super.mCallbacks);
        super.mExpandActivityOverflowButtonImage = ((android.widget.ImageView) super.mExpandActivityOverflowButton.findViewById(com.actionbarsherlock.R$id.abs__image));
        super.mExpandActivityOverflowButtonImage.setImageDrawable(v1);
        super.mAdapter = new com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter(super, 0);
        super.mAdapter.registerDataSetObserver(new com.actionbarsherlock.widget.ActivityChooserView$3(super));
        android.content.res.Resources v3 = p10.getResources();
        super.mListPopupMaxWidth = Math.max((v3.getDisplayMetrics().widthPixels / 2), v3.getDimensionPixelSize(com.actionbarsherlock.R$dimen.abs__config_prefDialogWidth));
        return;
    }

    static synthetic com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$0(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mAdapter;
    }

    static synthetic com.actionbarsherlock.internal.widget.IcsListPopupWindow access$1(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.getListPopupWindow();
    }

    static synthetic android.database.DataSetObserver access$10(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mModelDataSetOberver;
    }

    static synthetic boolean access$11()
    {
        return com.actionbarsherlock.widget.ActivityChooserView.IS_HONEYCOMB;
    }

    static synthetic void access$12(com.actionbarsherlock.widget.ActivityChooserView p0)
    {
        p0.updateAppearance();
        return;
    }

    static synthetic void access$2(com.actionbarsherlock.widget.ActivityChooserView p0, int p1)
    {
        p0.showPopupUnchecked(p1);
        return;
    }

    static synthetic boolean access$3(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mIsSelectingDefaultActivity;
    }

    static synthetic android.content.Context access$4(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mContext;
    }

    static synthetic android.widget.FrameLayout access$5(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mDefaultActivityButton;
    }

    static synthetic android.widget.FrameLayout access$6(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mExpandActivityOverflowButton;
    }

    static synthetic void access$7(com.actionbarsherlock.widget.ActivityChooserView p0, boolean p1)
    {
        p0.mIsSelectingDefaultActivity = p1;
        return;
    }

    static synthetic int access$8(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mInitialActivityCount;
    }

    static synthetic android.widget.PopupWindow$OnDismissListener access$9(com.actionbarsherlock.widget.ActivityChooserView p1)
    {
        return p1.mOnDismissListener;
    }

    private com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()
    {
        if (this.mListPopupWindow == null) {
            this.mListPopupWindow = new com.actionbarsherlock.internal.widget.IcsListPopupWindow(this.getContext());
            this.mListPopupWindow.setAdapter(this.mAdapter);
            this.mListPopupWindow.setAnchorView(this);
            this.mListPopupWindow.setModal(1);
            this.mListPopupWindow.setOnItemClickListener(this.mCallbacks);
            this.mListPopupWindow.setOnDismissListener(this.mCallbacks);
        }
        return this.mListPopupWindow;
    }

    private void showPopupUnchecked(int p10)
    {
        if (this.mAdapter.getDataModel() != null) {
            String v2;
            this.getViewTreeObserver().addOnGlobalLayoutListener(this.mOnGlobalLayoutListener);
            if (this.mDefaultActivityButton.getVisibility() != 0) {
                v2 = 0;
            } else {
                v2 = 1;
            }
            String v3;
            int vtmp4 = this.mAdapter.getActivityCount();
            if (v2 == null) {
                v3 = 0;
            } else {
                v3 = 1;
            }
            if ((p10 == 2147483647) || (vtmp4 <= (p10 + v3))) {
                this.mAdapter.setShowFooterView(0);
                this.mAdapter.setMaxActivityCount(p10);
            } else {
                this.mAdapter.setShowFooterView(1);
                this.mAdapter.setMaxActivityCount((p10 - 1));
            }
            com.actionbarsherlock.internal.widget.IcsListPopupWindow v4 = this.getListPopupWindow();
            if (!v4.isShowing()) {
                if ((!this.mIsSelectingDefaultActivity) && (v2 != null)) {
                    this.mAdapter.setShowDefaultActivity(0, 0);
                } else {
                    this.mAdapter.setShowDefaultActivity(1, v2);
                }
                v4.setContentWidth(Math.min(this.mAdapter.measureContentWidth(), this.mListPopupMaxWidth));
                v4.show();
                if (this.mProvider != null) {
                    this.mProvider.subUiVisibilityChanged(1);
                }
                v4.getListView().setContentDescription(this.mContext.getString(com.actionbarsherlock.R$string.abs__activitychooserview_choose_application));
            }
            return;
        } else {
            throw new IllegalStateException("No data model. Did you call #setDataModel?");
        }
    }

    private void updateAppearance()
    {
        if (this.mAdapter.getCount() <= 0) {
            this.mExpandActivityOverflowButton.setEnabled(0);
        } else {
            this.mExpandActivityOverflowButton.setEnabled(1);
        }
        int v1 = this.mAdapter.getActivityCount();
        int vtmp3 = this.mAdapter.getHistorySize();
        if ((v1 <= 0) || (vtmp3 <= 0)) {
            this.mDefaultActivityButton.setVisibility(8);
        } else {
            this.mDefaultActivityButton.setVisibility(0);
            android.content.pm.ResolveInfo v0 = this.mAdapter.getDefaultActivity();
            android.content.pm.PackageManager v5 = this.mContext.getPackageManager();
            this.mDefaultActivityButtonImage.setImageDrawable(v0.loadIcon(v5));
            if (this.mDefaultActionButtonContentDescription != 0) {
                com.actionbarsherlock.internal.widget.IcsLinearLayout v6_9 = this.mContext;
                int v7_2 = this.mDefaultActionButtonContentDescription;
                Object[] v8_1 = new Object[1];
                v8_1[0] = v0.loadLabel(v5);
                this.mDefaultActivityButton.setContentDescription(v6_9.getString(v7_2, v8_1));
            }
        }
        if (this.mDefaultActivityButton.getVisibility() != 0) {
            this.mActivityChooserContent.setBackgroundDrawable(0);
        } else {
            this.mActivityChooserContent.setBackgroundDrawable(this.mActivityChooserContentBackground);
        }
        return;
    }

    public boolean dismissPopup()
    {
        if (this.isShowingPopup()) {
            this.getListPopupWindow().dismiss();
            android.view.ViewTreeObserver v0 = this.getViewTreeObserver();
            if (v0.isAlive()) {
                v0.removeGlobalOnLayoutListener(this.mOnGlobalLayoutListener);
            }
        }
        return 1;
    }

    public com.actionbarsherlock.widget.ActivityChooserModel getDataModel()
    {
        return this.mAdapter.getDataModel();
    }

    public boolean isShowingPopup()
    {
        return this.getListPopupWindow().isShowing();
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        com.actionbarsherlock.widget.ActivityChooserModel v0 = this.mAdapter.getDataModel();
        if (v0 != null) {
            v0.registerObserver(this.mModelDataSetOberver);
        }
        this.mIsAttachedToWindow = 1;
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        com.actionbarsherlock.widget.ActivityChooserModel v0 = this.mAdapter.getDataModel();
        if (v0 != null) {
            v0.unregisterObserver(this.mModelDataSetOberver);
        }
        android.view.ViewTreeObserver v1 = this.getViewTreeObserver();
        if (v1.isAlive()) {
            v1.removeGlobalOnLayoutListener(this.mOnGlobalLayoutListener);
        }
        this.mIsAttachedToWindow = 0;
        return;
    }

    protected void onLayout(boolean p5, int p6, int p7, int p8, int p9)
    {
        this.mActivityChooserContent.layout(0, 0, (p8 - p6), (p9 - p7));
        if (!this.getListPopupWindow().isShowing()) {
            this.dismissPopup();
        } else {
            this.showPopupUnchecked(this.mAdapter.getMaxActivityCount());
        }
        return;
    }

    protected void onMeasure(int p4, int p5)
    {
        com.actionbarsherlock.internal.widget.IcsLinearLayout v0 = this.mActivityChooserContent;
        if (this.mDefaultActivityButton.getVisibility() != 0) {
            p5 = android.view.View$MeasureSpec.makeMeasureSpec(android.view.View$MeasureSpec.getSize(p5), 1073741824);
        }
        this.measureChild(v0, p4, p5);
        this.setMeasuredDimension(v0.getMeasuredWidth(), v0.getMeasuredHeight());
        return;
    }

    public void setActivityChooserModel(com.actionbarsherlock.widget.ActivityChooserModel p2)
    {
        this.mAdapter.setDataModel(p2);
        if (this.isShowingPopup()) {
            this.dismissPopup();
            this.showPopup();
        }
        return;
    }

    public void setDefaultActionButtonContentDescription(int p1)
    {
        this.mDefaultActionButtonContentDescription = p1;
        return;
    }

    public void setExpandActivityOverflowButtonContentDescription(int p3)
    {
        this.mExpandActivityOverflowButtonImage.setContentDescription(this.mContext.getString(p3));
        return;
    }

    public void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mExpandActivityOverflowButtonImage.setImageDrawable(p2);
        return;
    }

    public void setInitialActivityCount(int p1)
    {
        this.mInitialActivityCount = p1;
        return;
    }

    public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener p1)
    {
        this.mOnDismissListener = p1;
        return;
    }

    public void setProvider(com.actionbarsherlock.view.ActionProvider p1)
    {
        this.mProvider = p1;
        return;
    }

    public boolean showPopup()
    {
        int v0_0 = 0;
        if ((!this.isShowingPopup()) && (this.mIsAttachedToWindow)) {
            this.mIsSelectingDefaultActivity = 0;
            this.showPopupUnchecked(this.mInitialActivityCount);
            v0_0 = 1;
        }
        return v0_0;
    }

    public abstract boolean onShareTargetSelected();

    private ShareActionProvider$ShareAcitivityChooserModelPolicy(com.actionbarsherlock.widget.ShareActionProvider p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ShareActionProvider$ShareAcitivityChooserModelPolicy(com.actionbarsherlock.widget.ShareActionProvider p1, com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy p2)
    {
        this(p1);
        return;
    }

    public boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel p3, android.content.Intent p4)
    {
        int v0_1;
        if (com.actionbarsherlock.widget.ShareActionProvider.access$2(this.this$0) == null) {
            v0_1 = 0;
        } else {
            v0_1 = com.actionbarsherlock.widget.ShareActionProvider.access$2(this.this$0).onShareTargetSelected(this.this$0, p4);
        }
        return v0_1;
    }

    private ShareActionProvider$ShareMenuItemOnMenuItemClickListener(com.actionbarsherlock.widget.ShareActionProvider p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ShareActionProvider$ShareMenuItemOnMenuItemClickListener(com.actionbarsherlock.widget.ShareActionProvider p1, com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener p2)
    {
        this(p1);
        return;
    }

    public boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem p6)
    {
        android.content.Intent v2 = com.actionbarsherlock.widget.ActivityChooserModel.get(com.actionbarsherlock.widget.ShareActionProvider.access$0(this.this$0), com.actionbarsherlock.widget.ShareActionProvider.access$1(this.this$0)).chooseActivity(p6.getItemId());
        if (v2 != null) {
            com.actionbarsherlock.widget.ShareActionProvider.access$0(this.this$0).startActivity(v2);
        }
        return 1;
    }

    public ShareActionProvider(android.content.Context p3)
    {
        super(p3);
        super.mMaxShownActivityCount = 4;
        super.mOnMenuItemClickListener = new com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener(super, 0);
        super.mShareHistoryFileName = "share_history.xml";
        super.mContext = p3;
        return;
    }

    static synthetic android.content.Context access$0(com.actionbarsherlock.widget.ShareActionProvider p1)
    {
        return p1.mContext;
    }

    static synthetic String access$1(com.actionbarsherlock.widget.ShareActionProvider p1)
    {
        return p1.mShareHistoryFileName;
    }

    static synthetic com.actionbarsherlock.widget.ShareActionProvider$OnShareTargetSelectedListener access$2(com.actionbarsherlock.widget.ShareActionProvider p1)
    {
        return p1.mOnShareTargetSelectedListener;
    }

    private void setActivityChooserPolicyIfNeeded()
    {
        if (this.mOnShareTargetSelectedListener != null) {
            if (this.mOnChooseActivityListener == null) {
                this.mOnChooseActivityListener = new com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy(this, 0);
            }
            com.actionbarsherlock.widget.ActivityChooserModel.get(this.mContext, this.mShareHistoryFileName).setOnChooseActivityListener(this.mOnChooseActivityListener);
        }
        return;
    }

    public boolean hasSubMenu()
    {
        return 1;
    }

    public android.view.View onCreateActionView()
    {
        com.actionbarsherlock.widget.ActivityChooserModel v1 = com.actionbarsherlock.widget.ActivityChooserModel.get(this.mContext, this.mShareHistoryFileName);
        com.actionbarsherlock.widget.ActivityChooserView v0_1 = new com.actionbarsherlock.widget.ActivityChooserView(this.mContext);
        v0_1.setActivityChooserModel(v1);
        android.util.TypedValue v3_1 = new android.util.TypedValue();
        this.mContext.getTheme().resolveAttribute(com.actionbarsherlock.R$attr.actionModeShareDrawable, v3_1, 1);
        v0_1.setExpandActivityOverflowButtonDrawable(this.mContext.getResources().getDrawable(v3_1.resourceId));
        v0_1.setProvider(this);
        v0_1.setDefaultActionButtonContentDescription(com.actionbarsherlock.R$string.abs__shareactionprovider_share_with_application);
        v0_1.setExpandActivityOverflowButtonContentDescription(com.actionbarsherlock.R$string.abs__shareactionprovider_share_with);
        return v0_1;
    }

    public void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu p11)
    {
        p11.clear();
        com.actionbarsherlock.widget.ActivityChooserModel v2 = com.actionbarsherlock.widget.ActivityChooserModel.get(this.mContext, this.mShareHistoryFileName);
        android.content.pm.PackageManager v6 = this.mContext.getPackageManager();
        int v3 = v2.getActivityCount();
        int v1 = Math.min(v3, this.mMaxShownActivityCount);
        int v5_0 = 0;
        while (v5_0 < v1) {
            android.content.pm.ResolveInfo v0_0 = v2.getActivity(v5_0);
            p11.add(0, v5_0, v5_0, v0_0.loadLabel(v6)).setIcon(v0_0.loadIcon(v6)).setOnMenuItemClickListener(this.mOnMenuItemClickListener);
            v5_0++;
        }
        if (v1 < v3) {
            com.actionbarsherlock.view.SubMenu v4 = p11.addSubMenu(0, v1, v1, this.mContext.getString(com.actionbarsherlock.R$string.abs__activity_chooser_view_see_all));
            int v5_1 = 0;
            while (v5_1 < v3) {
                android.content.pm.ResolveInfo v0_1 = v2.getActivity(v5_1);
                v4.add(0, v5_1, v5_1, v0_1.loadLabel(v6)).setIcon(v0_1.loadIcon(v6)).setOnMenuItemClickListener(this.mOnMenuItemClickListener);
                v5_1++;
            }
        }
        return;
    }

    public void setOnShareTargetSelectedListener(com.actionbarsherlock.widget.ShareActionProvider$OnShareTargetSelectedListener p1)
    {
        this.mOnShareTargetSelectedListener = p1;
        this.setActivityChooserPolicyIfNeeded();
        return;
    }

    public void setShareHistoryFileName(String p1)
    {
        this.mShareHistoryFileName = p1;
        this.setActivityChooserPolicyIfNeeded();
        return;
    }

    public void setShareIntent(android.content.Intent p4)
    {
        com.actionbarsherlock.widget.ActivityChooserModel.get(this.mContext, this.mShareHistoryFileName).setIntent(p4);
        return;
    }

    public BuildConfig()
    {
        return;
    }

    public R$array()
    {
        return;
    }

    public R$attr()
    {
        return;
    }

    public R$bool()
    {
        return;
    }

    public R$color()
    {
        return;
    }

    public R$dimen()
    {
        return;
    }

    public R$drawable()
    {
        return;
    }

    public R$id()
    {
        return;
    }

    public R$integer()
    {
        return;
    }

    public R$layout()
    {
        return;
    }

    public R$menu()
    {
        return;
    }

    public R$string()
    {
        return;
    }

    public R$style()
    {
        return;
    }

    static R$styleable()
    {
        int[] v0_6 = new int[19];
        v0_6 = {2130771968, 2130771969, 2130771970, 2130771971, 2130771972, 2130771973, 2130772026, 2130772027, 2130772028, 2130772029, 2130772030, 2130772031, 2130772032, 2130772033, 2130772034, 2130772035, 2130772036, 2130772037, 2130772038};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockActionBar = v0_6;
        int[] v0_15 = new int[1];
        v0_15[0] = 16843071;
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockActionMenuItemView = v0_15;
        int[] v0_2 = new int[5];
        v0_2 = {2130771968, 2130771969, 2130771970, 2130771971, 2130771972};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockActionMode = v0_2;
        int[] v0_4 = new int[3];
        v0_4 = {16842964, 2130772047, 2130772048};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockActivityChooserView = v0_4;
        int[] v0_7 = new int[6];
        v0_7 = {16842766, 16842960, 16843156, 16843230, 16843231, 16843232};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockMenuGroup = v0_7;
        int[] v0_9 = new int[17];
        v0_9 = {16842754, 16842766, 16842960, 16843014, 16843156, 16843230, 16843231, 16843233, 16843234, 16843235, 16843236, 16843237, 16843375, 16843481, 16843515, 16843516, 16843657};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockMenuItem = v0_9;
        int[] v0_10 = new int[8];
        v0_10 = {2130772039, 2130772040, 2130772041, 2130772042, 2130772043, 2130772044, 2130772045, 2130772046};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockMenuView = v0_10;
        int[] v0_11 = new int[8];
        v0_11 = {16842927, 16843125, 16843126, 16843131, 16843362, 16843436, 16843437, 16843773};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockSpinner = v0_11;
        int[] v0_13 = new int[53];
        v0_13 = {16842839, 2130771974, 2130771975, 2130771976, 2130771977, 2130771978, 2130771979, 2130771980, 2130771981, 2130771982, 2130771983, 2130771984, 2130771985, 2130771986, 2130771987, 2130771988, 2130771989, 2130771990, 2130771991, 2130771992, 2130771993, 2130771994, 2130771995, 2130771996, 2130771997, 2130771998, 2130771999, 2130772000, 2130772001, 2130772002, 2130772003, 2130772004, 2130772005, 2130772006, 2130772007, 2130772008, 2130772009, 2130772010, 2130772011, 2130772012, 2130772013, 2130772014, 2130772015, 2130772016, 2130772017, 2130772018, 2130772019, 2130772020, 2130772021, 2130772022, 2130772023, 2130772024, 2130772025};
        org.owasp.goatdroid.fourgoats.R$styleable.SherlockTheme = v0_13;
        return;
    }

    public R$styleable()
    {
        return;
    }

    public R()
    {
        return;
    }

    public BaseActivity()
    {
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.getSupportActionBar().setIcon(2130837628);
        if ((!(this instanceof org.owasp.goatdroid.fourgoats.activities.Home)) && (!(this instanceof org.owasp.goatdroid.fourgoats.activities.AdminHome))) {
            if (android.os.Build$VERSION.SDK_INT < 14) {
                this.getSupportActionBar().setHomeButtonEnabled(1);
                this.getSupportActionBar().setDisplayHomeAsUpEnabled(1);
            } else {
                this.getActionBar().setHomeButtonEnabled(1);
                this.getActionBar().setDisplayHomeAsUpEnabled(1);
            }
        }
        return;
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p3)
    {
        this.getSupportMenuInflater().inflate(2131492865, p3);
        this.context = this.getApplicationContext();
        return super.onCreateOptionsMenu(p3);
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p13)
    {
        int v3 = p13.getItemId();
        if (v3 != 16908332) {
            if (v3 != 2130968680) {
                if (v3 != 2130968681) {
                    if (v3 != 2130968683) {
                        if (v3 == 2130968682) {
                            this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.About));
                        }
                    } else {
                        org.owasp.goatdroid.fourgoats.base.BaseActivity$LogOutAsyncTask v6_1 = new org.owasp.goatdroid.fourgoats.base.BaseActivity$LogOutAsyncTask(this);
                        Class v8_4 = new Void[2];
                        v8_4[0] = 0;
                        v8_4[1] = 0;
                        v6_1.execute(v8_4);
                    }
                } else {
                    android.content.Intent v4_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.ViewProfile);
                    android.os.Bundle v1_1 = new android.os.Bundle();
                    org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v5_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.context);
                    String v7 = v5_1.getUserName();
                    v5_1.close();
                    v1_1.putString("userName", v7);
                    v4_1.putExtras(v1_1);
                    this.startActivity(v4_1);
                }
            } else {
                this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Preferences));
            }
        } else {
            this.finish();
        }
        return 1;
    }

    public About()
    {
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.setContentView(2130903040);
        return;
    }

    private AddVenue$AddVenueAsyncTask(org.owasp.goatdroid.fourgoats.activities.AddVenue p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic AddVenue$AddVenueAsyncTask(org.owasp.goatdroid.fourgoats.activities.AddVenue p1, org.owasp.goatdroid.fourgoats.activities.AddVenue$AddVenueAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p14)
    {
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v10_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        org.owasp.goatdroid.fourgoats.db.CheckinDBHelper v7_1 = new org.owasp.goatdroid.fourgoats.db.CheckinDBHelper(this.this$0.context);
        org.owasp.goatdroid.fourgoats.rest.addvenue.AddVenueRequest v0_0 = new org.owasp.goatdroid.fourgoats.rest.addvenue.AddVenueRequest(this.this$0.context);
        java.util.HashMap v6_1 = new java.util.HashMap();
        try {
            String v1 = v10_1.getSessionToken();
        } catch (String v2_12) {
            v10_1.close();
            v7_1.close();
            throw v2_12;
        } catch (Exception v11) {
            v6_1.put("errors", v11.getMessage());
            v10_1.close();
            v7_1.close();
            return v6_1;
        }
        if (!v1.equals("")) {
            v6_1 = v0_0.doAddVenue(v1, this.this$0.venueNameText.getText().toString(), this.this$0.venueWebsiteText.getText().toString(), this.this$0.bundle.getString("latitude"), this.this$0.bundle.getString("longitude"));
            if (((String) v6_1.get("success")).equals("true")) {
                java.util.HashMap v8 = new org.owasp.goatdroid.fourgoats.rest.checkin.CheckinRequest(this.this$0.context).doCheckin(v1, this.this$0.bundle.getString("latitude"), this.this$0.bundle.getString("longitude"));
                if (!((String) v8.get("success")).equals("true")) {
                    v6_1.put("success", "false");
                    v6_1.put("errors", ((String) v8.get("errors")));
                } else {
                    v8.put("latitude", this.this$0.bundle.getString("latitude"));
                    v8.put("longitude", this.this$0.bundle.getString("longitude"));
                    v7_1.insertCheckin(v8);
                    this.this$0.bundle.putString("checkinID", ((String) v8.get("checkinID")));
                    this.this$0.bundle.putString("dateTime", ((String) v8.get("dateTime")));
                }
            }
        } else {
            v6_1.put("errors", "Invalid session");
        }
        v10_1.close();
        v7_1.close();
        return v6_1;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    protected void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            if (!((String) p4.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p4.get("errors")), 1);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                this.this$0.launchLogin();
            }
        } else {
            this.this$0.bundle.putString("venueName", this.this$0.venueNameText.getText().toString());
            this.this$0.bundle.putString("venueWebsite", this.this$0.venueWebsiteText.getText().toString());
            this.this$0.launchViewCheckin();
        }
        return;
    }

    public AddVenue()
    {
        return;
    }

    public void addVenue(android.view.View p6)
    {
        if (this.allFieldsCompleted(this.venueNameText.getText().toString(), this.venueWebsiteText.getText().toString())) {
            org.owasp.goatdroid.fourgoats.activities.AddVenue$AddVenueAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.AddVenue$AddVenueAsyncTask(this, 0);
            Void[] v1_2 = new Void[2];
            v1_2[0] = 0;
            v1_2[1] = 0;
            v0_1.execute(v1_2);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "All fields are required", 1);
        }
        return;
    }

    public boolean allFieldsCompleted(String p2, String p3)
    {
        if ((p2.equals("")) || (p3.equals(""))) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public void launchAddVenue()
    {
        android.content.Intent v0_1 = new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.AddVenue);
        v0_1.putExtras(this.bundle);
        this.startActivity(v0_1);
        return;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void launchViewCheckin()
    {
        android.content.Intent v0_1 = new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.ViewCheckin);
        v0_1.putExtras(this.bundle);
        this.startActivity(v0_1);
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.setContentView(2130903061);
        this.context = this.getApplicationContext();
        this.bundle = this.getIntent().getExtras();
        this.venueNameText = ((android.widget.EditText) this.findViewById(2130968621));
        this.venueWebsiteText = ((android.widget.EditText) this.findViewById(2130968622));
        return;
    }

    public AdminHome()
    {
        return;
    }

    public void launchCheckins(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Checkins));
        return;
    }

    public void launchFriends(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Friends));
        return;
    }

    public void launchManageUsers(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminOptions));
        return;
    }

    public void launchRewards(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Rewards));
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.getSupportActionBar().setTitle("Home");
        this.getSupportActionBar().setDisplayHomeAsUpEnabled(0);
        this.setContentView(2130903062);
        this.startService(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.services.LocationService));
        return;
    }

    public BaseTabsViewPagerActivity()
    {
        return;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903096);
        this.mViewPager = ((android.support.v4.view.ViewPager) this.findViewById(2130968677));
        this.getSupportActionBar().setNavigationMode(2);
        this.mTabsAdapter = new org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter(this, this.mViewPager);
        this.getSupportActionBar().setIcon(2130837628);
        if (android.os.Build$VERSION.SDK_INT < 14) {
            this.getSupportActionBar().setHomeButtonEnabled(1);
            this.getSupportActionBar().setDisplayHomeAsUpEnabled(1);
        } else {
            this.getActionBar().setHomeButtonEnabled(1);
            this.getActionBar().setDisplayHomeAsUpEnabled(1);
        }
        return;
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p3)
    {
        this.getSupportMenuInflater().inflate(2131492865, p3);
        this.context = this.getApplicationContext();
        return super.onCreateOptionsMenu(p3);
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p15)
    {
        int v5 = p15.getItemId();
        if (v5 != 16908332) {
            if (v5 != 2130968680) {
                if (v5 != 2130968681) {
                    if (v5 != 2130968683) {
                        if (v5 == 2130968682) {
                            this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.About));
                        }
                    } else {
                        org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$LogOutAsyncTask v8_1 = new org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$LogOutAsyncTask(this);
                        Class v10_4 = new Void[2];
                        v10_4[0] = 0;
                        v10_4[1] = 0;
                        v8_1.execute(v10_4);
                    }
                } else {
                    android.content.Intent v6_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.ViewProfile);
                    android.os.Bundle v1_1 = new android.os.Bundle();
                    org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v7_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.context);
                    String v9 = v7_1.getUserName();
                    v7_1.close();
                    v1_1.putString("userName", v9);
                    v6_1.putExtras(v1_1);
                    this.startActivity(v6_1);
                }
            } else {
                this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Preferences));
            }
        } else {
            org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v3_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.context);
            try {
                android.content.Intent v2_1;
                if (!v3_1.getIsAdmin()) {
                    v2_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Home);
                } else {
                    v2_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminHome);
                }
            } catch (Class v10_14) {
                v3_1.close();
                throw v10_14;
            }
            v3_1.close();
            this.startActivity(v2_1);
        }
        return 1;
    }

    public AdminOptions()
    {
        return;
    }

    public void onCreate(android.os.Bundle p6)
    {
        super.onCreate(p6);
        com.actionbarsherlock.app.ActionBar v0 = this.getSupportActionBar();
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296326), org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords, 0);
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296327), org.owasp.goatdroid.fourgoats.fragments.DeleteUsers, 0);
        return;
    }

    public Checkins()
    {
        return;
    }

    public void onCreate(android.os.Bundle p6)
    {
        super.onCreate(p6);
        com.actionbarsherlock.app.ActionBar v0 = this.getSupportActionBar();
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296286), org.owasp.goatdroid.fourgoats.fragments.DoCheckin, 0);
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296272), org.owasp.goatdroid.fourgoats.fragments.HistoryFragment, 0);
        return;
    }

    public BaseUnauthenticatedActivity()
    {
        return;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p3)
    {
        super.onCreate(p3);
        this.getSupportActionBar().setIcon(2130837628);
        return;
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p3)
    {
        this.getSupportMenuInflater().inflate(2131492864, p3);
        this.context = this.getApplicationContext();
        return 1;
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.DestinationInfo));
        return 1;
    }

    public DestinationInfo()
    {
        return;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903070);
        this.context = this.getApplicationContext();
        java.util.HashMap v0 = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfoMap(this.context);
        java.util.HashMap v1 = org.owasp.goatdroid.fourgoats.misc.Utils.getProxyMap(this.context);
        this.hostEditText = ((android.widget.EditText) this.findViewById(2130968634));
        this.portEditText = ((android.widget.EditText) this.findViewById(2130968635));
        this.proxyHostEditText = ((android.widget.EditText) this.findViewById(2130968636));
        this.proxyPortEditText = ((android.widget.EditText) this.findViewById(2130968637));
        this.hostEditText.setText(((CharSequence) v0.get("host")));
        this.portEditText.setText(((CharSequence) v0.get("port")));
        this.proxyHostEditText.setText(((CharSequence) v1.get("proxyHost")));
        this.proxyPortEditText.setText(((CharSequence) v1.get("proxyPort")));
        return;
    }

    public void saveDestinationInfo(android.view.View p6)
    {
        if ((!this.hostEditText.getText().toString().equals("")) && (!this.portEditText.getText().toString().equals(""))) {
            org.owasp.goatdroid.fourgoats.misc.Utils.writeDestinationInfo(this.context, this.hostEditText.getText().toString(), this.portEditText.getText().toString());
            org.owasp.goatdroid.fourgoats.misc.Utils.writeProxyInfo(this.context, this.proxyHostEditText.getText().toString(), this.proxyPortEditText.getText().toString());
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "Now you are ready to use the app!", 1);
            this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Login));
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "All fields are required", 1);
        }
        return;
    }

    private DoAdminDeleteUser$DeleteUserAsyncTask(org.owasp.goatdroid.fourgoats.activities.DoAdminDeleteUser p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic DoAdminDeleteUser$DeleteUserAsyncTask(org.owasp.goatdroid.fourgoats.activities.DoAdminDeleteUser p1, org.owasp.goatdroid.fourgoats.activities.DoAdminDeleteUser$DeleteUserAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        java.util.HashMap v2_1 = new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest v1_1 = new org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest(this.this$0.context);
        try {
            String v3 = v4_1.getSessionToken();
        } catch (String v5_10) {
            v4_1.close();
            throw v5_10;
        } catch (Exception v0) {
            v2_1.put("errors", v0.getMessage());
            v2_1.put("success", "false");
            v4_1.close();
            return v2_1;
        }
        if (!v3.equals("")) {
            v2_1 = v1_1.deleteUser(v3, this.this$0.bundle.getString("userName"));
        } else {
            v2_1.put("errors", "Invalid session");
            v2_1.put("success", "false");
        }
        v4_1.close();
        return v2_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            if (!((String) p4.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p4.get("errors")), 1);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                this.this$0.launchLogin();
            }
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Account was successfully deleted", 1);
            this.this$0.launchAdminHome();
        }
        return;
    }

    public DoAdminDeleteUser()
    {
        return;
    }

    public void doDeleteUser(android.view.View p5)
    {
        org.owasp.goatdroid.fourgoats.activities.DoAdminDeleteUser$DeleteUserAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.DoAdminDeleteUser$DeleteUserAsyncTask(this, 0);
        Void[] v1_1 = new Void[2];
        v1_1[0] = 0;
        v1_1[1] = 0;
        v0_1.execute(v1_1);
        return;
    }

    public void launchAdminHome()
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminHome));
        return;
    }

    public void launchAdminHome(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminHome));
        return;
    }

    public void launchHome()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.AdminHome));
        return;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.setContentView(2130903073);
        this.context = this.getApplicationContext();
        this.bundle = this.getIntent().getExtras();
        this.userNameTextView = ((android.widget.TextView) this.findViewById(2130968640));
        this.userNameTextView.setText(this.bundle.getString("userName"));
        return;
    }

    private DoAdminPasswordReset$ResetPasswordAsyncTask(org.owasp.goatdroid.fourgoats.activities.DoAdminPasswordReset p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic DoAdminPasswordReset$ResetPasswordAsyncTask(org.owasp.goatdroid.fourgoats.activities.DoAdminPasswordReset p1, org.owasp.goatdroid.fourgoats.activities.DoAdminPasswordReset$ResetPasswordAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        java.util.HashMap v2_1 = new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest v1_1 = new org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest(this.this$0.context);
        try {
            String v3 = v4_1.getSessionToken();
        } catch (String v5_11) {
            v4_1.close();
            throw v5_11;
        } catch (Exception v0) {
            v2_1.put("errors", v0.getMessage());
            v2_1.put("success", "false");
            v4_1.close();
            return v2_1;
        }
        if (!v3.equals("")) {
            v2_1 = v1_1.resetUserPassword(v3, this.this$0.bundle.getString("userName"), this.this$0.passwordEditText.getText().toString());
        } else {
            v2_1.put("errors", "Invalid session");
            v2_1.put("success", "false");
        }
        v4_1.close();
        return v2_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            if (!((String) p4.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p4.get("errors")), 1);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                this.this$0.launchLogin();
            }
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Password was successfully reset", 1);
            this.this$0.launchHome();
        }
        return;
    }

    public DoAdminPasswordReset()
    {
        return;
    }

    public void doPasswordReset(android.view.View p6)
    {
        if (!this.passwordEditText.getText().toString().equals(this.passwordConfirmEditText.getText().toString())) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "Passwords didn\'t match", 1);
        } else {
            org.owasp.goatdroid.fourgoats.activities.DoAdminPasswordReset$ResetPasswordAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.DoAdminPasswordReset$ResetPasswordAsyncTask(this, 0);
            android.content.Context v1_4 = new Void[2];
            v1_4[0] = 0;
            v1_4[1] = 0;
            v0_1.execute(v1_4);
        }
        return;
    }

    public void launchAdminHome(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminHome));
        return;
    }

    public void launchHome()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.AdminHome));
        return;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.setContentView(2130903074);
        this.context = this.getApplicationContext();
        this.userNameEditText = ((android.widget.EditText) this.findViewById(2130968643));
        this.passwordEditText = ((android.widget.EditText) this.findViewById(2130968644));
        this.passwordConfirmEditText = ((android.widget.EditText) this.findViewById(2130968645));
        this.bundle = this.getIntent().getExtras();
        this.userNameEditText.setText(this.bundle.getString("userName"));
        return;
    }

    private DoComment$DoCommentAsyncTask(org.owasp.goatdroid.fourgoats.activities.DoComment p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic DoComment$DoCommentAsyncTask(org.owasp.goatdroid.fourgoats.activities.DoComment p1, org.owasp.goatdroid.fourgoats.activities.DoComment$DoCommentAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p9)
    {
        new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        try {
            java.util.HashMap v0_1 = new org.owasp.goatdroid.fourgoats.rest.comments.CommentsRequest(this.this$0.context).addComment(v4_1.getSessionToken(), this.this$0.commentEditText.getText().toString(), this.this$0.bundle.getString("checkinID"));
            v4_1.close();
        } catch (String v5_7) {
            v4_1.close();
            throw v5_7;
        } catch (Exception v1) {
            v0_1.put("errors", v1.getMessage());
            v4_1.close();
        }
        return v0_1;
    }

    public void launchViewCheckin(android.os.Bundle p4)
    {
        android.content.Intent v0_1 = new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.ViewCheckin);
        v0_1.putExtras(p4);
        this.this$0.startActivity(v0_1);
        return;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    protected void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p4.get("errors")), 1);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Your comment has been posted!", 1);
            this.launchViewCheckin(this.this$0.bundle);
        }
        return;
    }

    public DoComment()
    {
        return;
    }

    public boolean areFieldsCompleted()
    {
        int v0_1;
        if (this.commentEditText.getText().toString().equals("")) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.setContentView(2130903072);
        this.context = this.getApplicationContext();
        this.commentEditText = ((android.widget.EditText) this.findViewById(2130968639));
        this.bundle = this.getIntent().getExtras();
        return;
    }

    public void submitComment(android.view.View p6)
    {
        if (this.areFieldsCompleted()) {
            org.owasp.goatdroid.fourgoats.activities.DoComment$DoCommentAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.DoComment$DoCommentAsyncTask(this, 0);
            Void[] v1_3 = new Void[2];
            v1_3[0] = 0;
            v1_3[1] = 0;
            v0_1.execute(v1_3);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "All fields are required", 1);
        }
        return;
    }

    public Friends()
    {
        return;
    }

    public void onCreate(android.os.Bundle p6)
    {
        super.onCreate(p6);
        com.actionbarsherlock.app.ActionBar v0 = this.getSupportActionBar();
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296292), org.owasp.goatdroid.fourgoats.fragments.MyFriends, 0);
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296294), org.owasp.goatdroid.fourgoats.fragments.SearchForFriends, 0);
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296296), org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests, 0);
        return;
    }

    public GenericWebViewActivity()
    {
        return;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903077);
        android.webkit.WebView v1_1 = ((android.webkit.WebView) this.findViewById(2130968649));
        v1_1.getSettings().setJavaScriptEnabled(1);
        v1_1.loadUrl(this.getIntent().getExtras().getString("url"));
        return;
    }

    private History$GetHistory(org.owasp.goatdroid.fourgoats.activities.History p3)
    {
        this.this$0 = p3;
        this.success = 0;
        this.errors = "";
        this.htmlResponse = "";
        this.isSelf = 0;
        return;
    }

    synthetic History$GetHistory(org.owasp.goatdroid.fourgoats.activities.History p1, org.owasp.goatdroid.fourgoats.activities.History$GetHistory p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.ArrayList doInBackground(Void[] p9)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        org.owasp.goatdroid.fourgoats.rest.history.HistoryRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.history.HistoryRequest(this.this$0.context);
        try {
            String v3 = v4_1.getSessionToken();
        } catch (String v5_26) {
            v4_1.close();
            throw v5_26;
        } catch (Exception v0) {
            this.errors = "Could not contact the remote service";
            v4_1.close();
            return v1_1;
        }
        if (!v3.equals("")) {
            v1_1 = v2_1.getUserHistory(v3, this.this$0.bundle.getString("userName"));
            if (!((String) ((java.util.HashMap) v1_1.get(0)).get("success")).equals("true")) {
                this.errors = ((String) ((java.util.HashMap) v1_1.get(0)).get("errors"));
            } else {
                this.success = 1;
                this.htmlResponse = this.this$0.generateHistoryHTML(v1_1);
            }
        } else {
            this.errors = "Invalid session";
        }
        if (v4_1.getUserName().equals(this.this$0.bundle.getString("userName"))) {
            this.isSelf = 1;
        }
        v4_1.close();
        return v1_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.ArrayList) p1));
        return;
    }

    public void onPostExecute(java.util.ArrayList p5)
    {
        if (!this.success) {
            if (!this.errors.equals("Invalid session")) {
                if (!this.errors.equals("You have never checked in")) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, this.errors, 1);
                } else {
                    if (!this.isSelf) {
                        this.this$0.noCheckinsTextView.setText("This person has never checked in. Pretty boring, if you ask me!");
                    } else {
                        this.this$0.noCheckinsTextView.setText("You have never checked in anywhere. You should try it sometime, it\'s fun!");
                    }
                    this.this$0.noCheckinsTextView.setVisibility(1);
                }
            } else {
                this.this$0.launchLogin();
            }
        } else {
            this.this$0.webview.loadData(this.htmlResponse, "text/html", "UTF-8");
        }
        return;
    }

    public History()
    {
        return;
    }

    public String generateHistoryHTML(java.util.ArrayList p8)
    {
        String v1_0 = "<html><head><style type=\"text/css\">body{color: white; background-color: #000;}</style></head><body>";
        if (p8.size() <= 1) {
            v1_0 = new StringBuilder(String.valueOf("<html><head><style type=\"text/css\">body{color: white; background-color: #000;}</style></head><body>")).append("<p><p>You have not checked in yet, grasshopper").toString();
        } else {
            String v4_0 = p8.iterator();
            while (v4_0.hasNext()) {
                java.util.HashMap v0_1 = ((java.util.HashMap) v4_0.next());
                if ((v0_1.get("venueName") != null) && ((v0_1.get("checkinID") != null) && ((v0_1.get("dateTime") != null) && ((v0_1.get("latitude") != null) && ((v0_1.get("longitude") != null) && (v0_1.get("venueWebsite") != null)))))) {
                    String[] v2 = ((String) v0_1.get("dateTime")).split(" ");
                    v1_0 = new StringBuilder(String.valueOf(v1_0)).append("<p><b>").append(((String) v0_1.get("venueName"))).append("</b><br><b>Date:</b> ").append(v2[0]).append("<br><b>Time:</b> ").append(v2[1]).append("<br><b>Latitude:</b> ").append(((String) v0_1.get("latitude"))).append("<br><b>Longitude:</b> ").append(((String) v0_1.get("longitude"))).append("<br>").append("<button style=\"color: white; background-color:#2E9AFE\" ").append("type=\"button\" onclick=\"window.jsInterface.launchViewCheckinActivity(\'").append(((String) v0_1.get("venueName"))).append("\',\'").append(((String) v0_1.get("venueWebsite"))).append("\',\'").append(((String) v0_1.get("dateTime"))).append("\',\'").append(((String) v0_1.get("latitude"))).append("\',\'").append(((String) v0_1.get("longitude"))).append("\',\'").append(((String) v0_1.get("checkinID"))).append("\')\">View Checkin</button><br>").toString();
                }
            }
        }
        return new StringBuilder(String.valueOf(v1_0)).append("</body></html>").toString();
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p8)
    {
        super.onCreate(p8);
        this.setContentView(2130903078);
        this.context = this.getApplicationContext();
        this.webview = ((android.webkit.WebView) this.findViewById(2130968651));
        this.bundle = this.getIntent().getExtras();
        android.webkit.WebSettings v1 = this.webview.getSettings();
        this.webview.addJavascriptInterface(new org.owasp.goatdroid.fourgoats.javascriptinterfaces.ViewCheckinJSInterface(this), "jsInterface");
        v1.setJavaScriptEnabled(1);
        this.noCheckinsTextView = ((android.widget.TextView) this.findViewById(2130968650));
        org.owasp.goatdroid.fourgoats.activities.History$GetHistory v0_1 = new org.owasp.goatdroid.fourgoats.activities.History$GetHistory(this, 0);
        Void[] v2_11 = new Void[2];
        v2_11[0] = 0;
        v2_11[1] = 0;
        v0_1.execute(v2_11);
        return;
    }

    public Home()
    {
        return;
    }

    public void launchCheckins(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Checkins));
        return;
    }

    public void launchFriends(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Friends));
        return;
    }

    public void launchRewards(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Rewards));
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.getSupportActionBar().setTitle("Home");
        this.getSupportActionBar().setDisplayHomeAsUpEnabled(0);
        this.setContentView(2130903079);
        this.startService(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.services.LocationService));
        return;
    }

    public Login$ValidateCredsAsyncTask(org.owasp.goatdroid.fourgoats.activities.Login p1, org.owasp.goatdroid.fourgoats.activities.Login p2)
    {
        this.this$0 = p1;
        this.mActivity = p2;
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p11)
    {
        org.owasp.goatdroid.fourgoats.rest.login.LoginRequest v0_1 = new org.owasp.goatdroid.fourgoats.rest.login.LoginRequest(this.this$0.context);
        String v6 = this.this$0.userNameEditText.getText().toString();
        String v3 = this.this$0.passwordEditText.getText().toString();
        boolean v4 = this.this$0.rememberMeCheckBox.isChecked();
        java.util.HashMap v5_1 = new java.util.HashMap();
        if (!this.this$0.allFieldsCompleted(v6, v3)) {
            v5_1.put("error", "All fields are required");
            v5_1.put("success", "false");
        } else {
            org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v1_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
            try {
                v5_1 = v0_1.validateCredentials(v6, v3);
            } catch (String v7_2) {
                v1_1.close();
                throw v7_2;
            } catch (Exception v2) {
                v5_1.put("errors", "Could not contact the remote service");
                v5_1.put("success", "false");
                android.util.Log.w("Failed login", new StringBuilder("Login with ").append(this.this$0.userNameEditText.getText().toString()).append(" ").append(this.this$0.passwordEditText.getText().toString()).append(" failed").toString());
                v1_1.close();
            }
            if (!((String) v5_1.get("success")).equals("false")) {
                v1_1.deleteInfo();
                v1_1.insertSettings(v5_1);
                if (v4) {
                    this.this$0.saveCredentials(v6, v3);
                }
                if ((v6.equals("customerservice")) && (v3.equals("Acc0uNTM@n@g3mEnT"))) {
                    v5_1.put("isAdmin", "true");
                }
            } else {
                v5_1.put("errors", "Login failed. Try again.");
            }
            v1_1.close();
        }
        return v5_1;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    protected void onPostExecute(java.util.HashMap p6)
    {
        if (!((String) p6.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p6.get("errors")), 1);
        } else {
            if (this.this$0.previousActivity.isEmpty()) {
                if (!((String) p6.get("isAdmin")).equals("true")) {
                    this.this$0.startActivity(new android.content.Intent(this.mActivity, org.owasp.goatdroid.fourgoats.activities.Home));
                } else {
                    this.this$0.startActivity(new android.content.Intent(this.mActivity, org.owasp.goatdroid.fourgoats.activities.AdminHome));
                }
            } else {
                android.content.ComponentName v1_1 = new android.content.ComponentName("org.owasp.goatdroid.fourgoats", this.this$0.previousActivity);
                android.content.Intent v0_5 = new android.content.Intent();
                v0_5.addCategory("android.intent.category.LAUNCHER");
                v0_5.setComponent(v1_1);
                v0_5.setFlags(268435456);
                this.this$0.startActivity(v0_5);
            }
        }
        return;
    }

    public Login()
    {
        return;
    }

    public boolean allFieldsCompleted(String p2, String p3)
    {
        if ((p2.equals("")) || (p3.equals(""))) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public void checkCredentials(android.view.View p6)
    {
        if (!this.allFieldsCompleted(this.userNameEditText.getText().toString(), this.passwordEditText.getText().toString())) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "All fields are required", 1);
        } else {
            org.owasp.goatdroid.fourgoats.activities.Login$ValidateCredsAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.Login$ValidateCredsAsyncTask(this, this);
            android.content.Context v1_4 = new Void[2];
            v1_4[0] = 0;
            v1_4[1] = 0;
            v0_1.execute(v1_4);
        }
        return;
    }

    public void launchAdminHome()
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminHome));
        return;
    }

    public void launchHome()
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Home));
        return;
    }

    public void launchRegistration(android.view.View p3)
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Register));
        return;
    }

    public void onCreate(android.os.Bundle p7)
    {
        super.onCreate(p7);
        this.setContentView(2130903081);
        this.context = this.getApplicationContext();
        this.userNameEditText = ((android.widget.EditText) this.findViewById(2130968646));
        this.passwordEditText = ((android.widget.EditText) this.findViewById(2130968652));
        this.rememberMeCheckBox = ((android.widget.CheckBox) this.findViewById(2130968653));
        android.content.SharedPreferences v1 = this.getSharedPreferences("credentials", 1);
        try {
            this.previousActivity = this.getIntent().getExtras().getString("previousActivity");
        } catch (NullPointerException v0) {
            this.previousActivity = "";
        }
        this.userNameEditText.setText(v1.getString("username", ""));
        this.passwordEditText.setText(v1.getString("password", ""));
        if (!v1.getBoolean("remember", 1)) {
            this.rememberMeCheckBox.setChecked(0);
        } else {
            this.rememberMeCheckBox.setChecked(1);
        }
        return;
    }

    public void saveCredentials(String p5, String p6)
    {
        android.content.SharedPreferences$Editor v1 = this.getSharedPreferences("credentials", 1).edit();
        v1.putString("username", p5);
        v1.putString("password", p6);
        v1.putBoolean("remember", 1);
        v1.commit();
        return;
    }

    private Main$CheckSessionToken(org.owasp.goatdroid.fourgoats.activities.Main p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic Main$CheckSessionToken(org.owasp.goatdroid.fourgoats.activities.Main p1, org.owasp.goatdroid.fourgoats.activities.Main$CheckSessionToken p2)
    {
        this(p1);
        return;
    }

    protected varargs Boolean doInBackground(Void[] p10)
    {
        Boolean v6_7;
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v5_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v4 = v5_1.getSessionToken();
        if (!v4.equals("")) {
            try {
                if (!new org.owasp.goatdroid.fourgoats.rest.login.LoginRequest(this.this$0.context).isSessionValid(v4)) {
                    v5_1.deleteInfo();
                    this.this$0.startActivity(new android.content.Intent(this.this$0, org.owasp.goatdroid.fourgoats.activities.Login));
                    v6_7 = Boolean.valueOf(0);
                    v5_1.close();
                } else {
                    if (!v5_1.getIsAdmin()) {
                        this.this$0.startActivity(new android.content.Intent(this.this$0, org.owasp.goatdroid.fourgoats.activities.Home));
                    } else {
                        this.this$0.startActivity(new android.content.Intent(this.this$0, org.owasp.goatdroid.fourgoats.activities.AdminHome));
                    }
                    v6_7 = Boolean.valueOf(1);
                    v5_1.close();
                }
            } catch (Boolean v6_16) {
                v5_1.close();
                throw v6_16;
            } catch (Exception v0) {
                v5_1.close();
                this.this$0.startActivity(new android.content.Intent(this.this$0, org.owasp.goatdroid.fourgoats.activities.Login));
                v6_7 = Boolean.valueOf(0);
                v5_1.close();
            }
        } else {
            v5_1.close();
            this.this$0.startActivity(new android.content.Intent(this.this$0, org.owasp.goatdroid.fourgoats.activities.Login));
            v6_7 = Boolean.valueOf(0);
        }
        return v6_7;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    public Main()
    {
        return;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903080);
        this.context = this.getApplicationContext();
        org.owasp.goatdroid.fourgoats.activities.Main$CheckSessionToken v0_1 = new org.owasp.goatdroid.fourgoats.activities.Main$CheckSessionToken(this, 0);
        Void[] v1_0 = new Void[2];
        v1_0[0] = 0;
        v1_0[1] = 0;
        v0_1.execute(v1_0);
        return;
    }

    private Preferences$GetExistingPreferences(org.owasp.goatdroid.fourgoats.activities.Preferences p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic Preferences$GetExistingPreferences(org.owasp.goatdroid.fourgoats.activities.Preferences p1, org.owasp.goatdroid.fourgoats.activities.Preferences$GetExistingPreferences p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v3_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v2 = v3_1.getSessionToken();
        java.util.HashMap v1_1 = v3_1.getPreferences();
        v3_1.close();
        if (!v2.equals("")) {
            if (v1_1.size() <= 0) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Something weird happened", 1);
            }
        } else {
            this.this$0.startActivity(new android.content.Intent(this.this$0, org.owasp.goatdroid.fourgoats.activities.Login));
        }
        return v1_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p5)
    {
        if (!((String) p5.get("isPublic")).equals("true")) {
            this.this$0.isPublic.setChecked(0);
        } else {
            this.this$0.isPublic.setChecked(1);
        }
        if (!((String) p5.get("autoCheckin")).equals("true")) {
            this.this$0.autoCheckin.setChecked(0);
        } else {
            this.this$0.autoCheckin.setChecked(1);
        }
        return;
    }

    private Preferences$UpdatePreferencesAsyncTask(org.owasp.goatdroid.fourgoats.activities.Preferences p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic Preferences$UpdatePreferencesAsyncTask(org.owasp.goatdroid.fourgoats.activities.Preferences p1, org.owasp.goatdroid.fourgoats.activities.Preferences$UpdatePreferencesAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        v4_1.updatePreferences(Boolean.toString(this.this$0.isPublic.isChecked()), Boolean.toString(this.this$0.autoCheckin.isChecked()));
        org.owasp.goatdroid.fourgoats.rest.preferences.PreferencesRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.preferences.PreferencesRequest(this.this$0.context);
        new java.util.HashMap();
        try {
            java.util.HashMap v1_1 = v2_1.updatePreferences(v4_1.getSessionToken(), Boolean.toString(this.this$0.isPublic.isChecked()), Boolean.toString(this.this$0.autoCheckin.isChecked()));
            v1_1.put("isAdmin", Boolean.toString(v4_1.getIsAdmin()));
            v4_1.close();
        } catch (String v5_13) {
            v4_1.close();
            throw v5_13;
        } catch (Exception v0) {
            v1_1.put("errors", v0.getMessage());
            v1_1.put("success", "false");
            v4_1.close();
        }
        return v1_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p4.get("errors")), 1);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Preferences have been updated!", 1);
            this.this$0.launchHome(((String) p4.get("isAdmin")));
        }
        return;
    }

    public Preferences()
    {
        return;
    }

    public void launchHome(String p3)
    {
        android.content.Intent v0_1;
        if (!p3.equals("true")) {
            v0_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Home);
        } else {
            v0_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminHome);
        }
        this.startActivity(v0_1);
        return;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903085);
        this.context = this.getApplicationContext();
        this.isPublic = ((android.widget.CheckBox) this.findViewById(2130968660));
        this.autoCheckin = ((android.widget.CheckBox) this.findViewById(2130968661));
        org.owasp.goatdroid.fourgoats.activities.Preferences$GetExistingPreferences v0_1 = new org.owasp.goatdroid.fourgoats.activities.Preferences$GetExistingPreferences(this, 0);
        Void[] v1_6 = new Void[2];
        v1_6[0] = 0;
        v1_6[1] = 0;
        v0_1.execute(v1_6);
        return;
    }

    public void submitChanges(android.view.View p5)
    {
        org.owasp.goatdroid.fourgoats.activities.Preferences$UpdatePreferencesAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.Preferences$UpdatePreferencesAsyncTask(this, 0);
        Void[] v1_1 = new Void[2];
        v1_1[0] = 0;
        v1_1[1] = 0;
        v0_1.execute(v1_1);
        return;
    }

    public Register$RegisterAsyncTask(org.owasp.goatdroid.fourgoats.activities.Register p1, org.owasp.goatdroid.fourgoats.activities.Register p2)
    {
        this.this$0 = p1;
        this.mActivity = p2;
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p16)
    {
        org.owasp.goatdroid.fourgoats.rest.register.RegisterRequest v0_1 = new org.owasp.goatdroid.fourgoats.rest.register.RegisterRequest(this.this$0.context);
        android.widget.EditText v5_1 = ((android.widget.EditText) this.this$0.findViewById(2130968667));
        android.widget.EditText v12_1 = ((android.widget.EditText) this.this$0.findViewById(2130968668));
        android.widget.EditText v9_1 = ((android.widget.EditText) this.this$0.findViewById(2130968669));
        android.widget.EditText v8_1 = ((android.widget.EditText) this.this$0.findViewById(2130968671));
        String v2 = ((android.widget.EditText) this.this$0.findViewById(2130968665)).getText().toString();
        String v4 = v5_1.getText().toString();
        String v11 = v12_1.getText().toString();
        String v6 = v9_1.getText().toString();
        String v7 = v8_1.getText().toString();
        java.util.HashMap v10_1 = new java.util.HashMap();
        try {
            if (!v6.equals(v7)) {
                v10_1.put("errors", "Passwords didn\'t match");
                v10_1.put("success", "false");
            } else {
                if (!this.this$0.allFieldsCompleted(v2, v4, v11, v6)) {
                    v10_1.put("errors", "All fields are required");
                    v10_1.put("success", "false");
                } else {
                    v10_1 = v0_1.validateRegistration(v2, v4, v11, v6);
                }
            }
        } catch (Exception v1) {
            v10_1.put("errors", "Could not contact the remote service");
            v10_1.put("success", "false");
        }
        return v10_1;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    protected void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.mActivity, ((String) p4.get("errors")), 1);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Registration complete!", 1);
            this.this$0.launchLogin();
        }
        return;
    }

    public Register()
    {
        return;
    }

    public boolean allFieldsCompleted(String p2, String p3, String p4, String p5)
    {
        if ((p2.equals("")) || ((p3.equals("")) || ((p4.equals("")) || (p5.equals(""))))) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.setContentView(2130903087);
        this.context = this.getApplicationContext();
        return;
    }

    public void submitRegistration(android.view.View p5)
    {
        org.owasp.goatdroid.fourgoats.activities.Register$RegisterAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.Register$RegisterAsyncTask(this, this);
        Void[] v1_1 = new Void[2];
        v1_1[0] = 0;
        v1_1[1] = 0;
        v0_1.execute(v1_1);
        return;
    }

    public Rewards()
    {
        return;
    }

    public void onCreate(android.os.Bundle p6)
    {
        super.onCreate(p6);
        com.actionbarsherlock.app.ActionBar v0 = this.getSupportActionBar();
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296301), org.owasp.goatdroid.fourgoats.fragments.MyRewards, 0);
        this.mTabsAdapter.addTab(v0.newTab().setText(2131296302), org.owasp.goatdroid.fourgoats.fragments.AvailableRewards, 0);
        return;
    }

    public SendSMS()
    {
        return;
    }

    public boolean areFieldsCompleted()
    {
        if ((this.phoneNumberEditText.getText().toString().equals("")) || (this.smsMessageEditText.getText().toString().equals(""))) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903092);
        this.context = this.getApplicationContext();
        this.bundle = this.getIntent().getExtras();
        this.phoneNumberEditText = ((android.widget.EditText) this.findViewById(2130968675));
        this.smsMessageEditText = ((android.widget.EditText) this.findViewById(2130968676));
        this.smsMessageEditText.setText(new StringBuilder("I checked in at ").append(this.bundle.getString("venueName")).append(" on ").append(this.bundle.getString("dateTime")).toString());
        return;
    }

    public void sendSMS(android.view.View p8)
    {
        android.telephony.SmsManager v0 = android.telephony.SmsManager.getDefault();
        if (!this.areFieldsCompleted()) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "All fields are required", 1);
        } else {
            v0.sendTextMessage(this.phoneNumberEditText.getText().toString(), 0, this.smsMessageEditText.getText().toString(), 0, 0);
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "Your text message has been sent!", 1);
        }
        return;
    }

    private SocialAPIAuthentication$AuthenticateAsyncTask(org.owasp.goatdroid.fourgoats.activities.SocialAPIAuthentication p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic SocialAPIAuthentication$AuthenticateAsyncTask(org.owasp.goatdroid.fourgoats.activities.SocialAPIAuthentication p1, org.owasp.goatdroid.fourgoats.activities.SocialAPIAuthentication$AuthenticateAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p10)
    {
        org.owasp.goatdroid.fourgoats.rest.login.LoginRequest v0_1 = new org.owasp.goatdroid.fourgoats.rest.login.LoginRequest(this.this$0.context);
        String v5 = this.this$0.userNameEditText.getText().toString();
        String v2 = this.this$0.passwordEditText.getText().toString();
        java.util.HashMap v4_1 = new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v3_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        try {
            this.this$0.sessionToken = v3_1.getSessionToken();
        } catch (String v6_29) {
            v3_1.close();
            throw v6_29;
        } catch (Exception v1) {
            v4_1.put("errors", v1.getMessage());
            v4_1.put("success", "false");
            android.util.Log.w("Failed login", new StringBuilder("Login with ").append(v5).append(" ").append(v2).append(" failed").toString());
            v3_1.close();
            return v4_1;
        }
        if (!this.this$0.allFieldsCompleted(v5, v2)) {
            if (this.this$0.sessionToken == null) {
                v4_1.put("success", "false");
                v4_1.put("errors", "Invalid session");
            } else {
                this.this$0.isAuthenticated = 1;
                v4_1.put("success", "true");
            }
        } else {
            if ((!this.this$0.sessionToken.isEmpty()) && (this.this$0.sessionToken != null)) {
                v4_1 = v0_1.validateCredentialsAPI(v5, v2);
            } else {
                v4_1.put("errors", "Invalid session");
                v4_1.put("success", "false");
            }
        }
        v3_1.close();
        return v4_1;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    protected void onPostExecute(java.util.HashMap p6)
    {
        if (!((String) p6.get("success")).equals("true")) {
            if (!((String) p6.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.getApplicationContext(), ((String) p6.get("errors")), 0);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                this.this$0.launchLogin();
            }
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "You have successfully authenticated.", 1);
            this.this$0.sessionToken = ((String) p6.get("sessionToken"));
        }
        android.content.Intent v0_1 = new android.content.Intent();
        v0_1.putExtra("sessionToken", this.this$0.sessionToken);
        if (this.this$0.getParent() != null) {
            this.this$0.getParent().setResult(-1, v0_1);
        } else {
            this.this$0.setResult(-1, v0_1);
        }
        this.this$0.finish();
        return;
    }

    public SocialAPIAuthentication()
    {
        return;
    }

    public boolean allFieldsCompleted(String p2, String p3)
    {
        if ((p2.equals("")) || (p3.equals(""))) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public void doAuthenticateAPI(android.view.View p5)
    {
        org.owasp.goatdroid.fourgoats.activities.SocialAPIAuthentication$AuthenticateAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.SocialAPIAuthentication$AuthenticateAsyncTask(this, 0);
        Void[] v1_1 = new Void[2];
        v1_1[0] = 0;
        v1_1[1] = 0;
        v0_1.execute(v1_1);
        return;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.setContentView(2130903095);
        this.userNameEditText = ((android.widget.EditText) this.findViewById(2130968646));
        this.passwordEditText = ((android.widget.EditText) this.findViewById(2130968652));
        this.context = this.getApplicationContext();
        this.sessionToken = "";
        return;
    }

    private ViewCheckin$GetCommentData(org.owasp.goatdroid.fourgoats.activities.ViewCheckin p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ViewCheckin$GetCommentData(org.owasp.goatdroid.fourgoats.activities.ViewCheckin p1, org.owasp.goatdroid.fourgoats.activities.ViewCheckin$GetCommentData p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        try {
            java.util.HashMap v0_1 = new org.owasp.goatdroid.fourgoats.rest.viewcheckin.ViewCheckinRequest(this.this$0.context).getCheckin(v4_1.getSessionToken(), this.this$0.bundle.getString("checkinID"));
        } catch (String v5_13) {
            v4_1.close();
            throw v5_13;
        } catch (Exception v1) {
            v0_1.put("errors", v1.getMessage());
            v0_1.put("success", "false");
            v4_1.close();
            return v0_1;
        }
        if (((String) v0_1.get("success")).equals("true")) {
            v0_1.put("htmlResponse", this.this$0.generateViewCheckinHTML(v0_1));
        }
        v4_1.close();
        return v0_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p5)
    {
        if (!((String) p5.get("success")).equals("true")) {
            if (!((String) p5.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p5.get("errors")), 1);
            } else {
                this.this$0.launchLogin();
            }
        } else {
            this.this$0.webview.loadData(((String) p5.get("htmlResponse")), "text/html", "UTF-8");
        }
        return;
    }

    public ViewCheckin()
    {
        return;
    }

    public String generateComments(java.util.HashMap p13)
    {
        String v1_0 = "";
        if (p13.size() > 3) {
            int v8;
            if (((p13.size() / 6) - 3) != -2) {
                v8 = (p13.size() / 6);
            } else {
                v8 = 1;
            }
            v1_0 = new StringBuilder(String.valueOf("")).append("<b><big>Comments:</big></b><p>").toString();
            int v2 = 0;
            while (v2 < v8) {
                String v5_1 = ((String) p13.get(new StringBuilder("firstName").append(v2).toString()));
                String v6_1 = ((String) p13.get(new StringBuilder("lastName").append(v2).toString()));
                String[] v4 = ((String) p13.get(new StringBuilder("dateTime").append(v2).toString())).split(" ");
                v1_0 = new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(v1_0)).append("<p><b>").append(v5_1).append(" ").append(v6_1).append("</b><br>").append(v4[0]).append("<br>").append(v4[1]).append("<br>").toString())).append("<b>\"").append(((String) p13.get(new StringBuilder("comment").append(v2).toString()))).append("\"</b><br>").toString())).append("<button style=\"color: white; background-color:#2E9AFE\" type=\"button\" onclick=\"window.viewCheckinJSInterface.deleteComment(\'").append(((String) p13.get(new StringBuilder("commentID").append(v2).toString()))).append("\',\'").append(this.bundle.getString("venueName")).append("\',\'").append(this.bundle.getString("venueWebsite")).append("\',\'").append(this.bundle.getString("dateTime")).append("\',\'").append(this.bundle.getString("latitude")).append("\',\'").append(this.bundle.getString("longitude")).append("\',\'").append(this.bundle.getString("checkinID")).append("\')\">").append("Delete Comment</button><br>").toString();
                v2++;
            }
        }
        return v1_0;
    }

    public String generateViewCheckinHTML(java.util.HashMap p6)
    {
        String v1_3 = new StringBuilder(String.valueOf("")).append("<p><b>").append(this.bundle.getString("venueName")).append("</b></p>").toString();
        String[] v0 = this.bundle.getString("dateTime").split(" ");
        return new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(v1_3)).append("<p><b>Date:</b> ").append(v0[0]).append(" <b>Time:</b> ").append(v0[1]).append("</p>").toString())).append("<button style=\"color: white; background-color:#2E9AFE\" type=\"button\" onclick=\"window.webViewJSInterface.launchWebView(\'").append(this.bundle.getString("venueWebsite")).append("\')\">").append("Visit Website</button><br><br>").toString())).append("<button style=\"color: white; background-color:#2E9AFE\" type=\"button\" onclick=\"window.smsJSInterface.launchSendSMSActivity(\'").append(this.bundle.getString("venueName")).append("\',\'").append(this.bundle.getString("dateTime")).append("\')\">").append("Text This To A Friend</button><p>").toString())).append("<button style=\"color: white; background-color:#2E9AFE\" type=\"button\" onclick=\"window.viewCheckinJSInterface.launchDoCommentActivity(\'").append(this.bundle.getString("venueName")).append("\',\'").append(this.bundle.getString("venueWebsite")).append("\',\'").append(this.bundle.getString("dateTime")).append("\',\'").append(this.bundle.getString("latitude")).append("\',\'").append(this.bundle.getString("longitude")).append("\',\'").append(this.bundle.getString("checkinID")).append("\')\">").append("Leave a Comment</button><br><br>").toString())).append(this.generateComments(p6)).toString();
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p7)
    {
        super.onCreate(p7);
        this.setContentView(2130903097);
        this.context = this.getApplicationContext();
        this.bundle = this.getIntent().getExtras();
        this.webview = ((android.webkit.WebView) this.findViewById(2130968678));
        this.webview.getSettings().setJavaScriptEnabled(1);
        this.webview.addJavascriptInterface(new org.owasp.goatdroid.fourgoats.javascriptinterfaces.SmsJSInterface(this), "smsJSInterface");
        this.webview.addJavascriptInterface(new org.owasp.goatdroid.fourgoats.javascriptinterfaces.ViewCheckinJSInterface(this), "viewCheckinJSInterface");
        this.webview.addJavascriptInterface(new org.owasp.goatdroid.fourgoats.javascriptinterfaces.WebViewJSInterface(this), "webViewJSInterface");
        org.owasp.goatdroid.fourgoats.activities.ViewCheckin$GetCommentData v0_1 = new org.owasp.goatdroid.fourgoats.activities.ViewCheckin$GetCommentData(this, 0);
        Void[] v1_11 = new Void[2];
        v1_11[0] = 0;
        v1_11[1] = 0;
        v0_1.execute(v1_11);
        return;
    }

    private ViewFriendRequest$AcceptRequestAsyncTask(org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ViewFriendRequest$AcceptRequestAsyncTask(org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest p1, org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest$AcceptRequestAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        java.util.HashMap v1_1 = new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest(this.this$0.context);
        try {
            String v3 = v4_1.getSessionToken();
        } catch (String v5_10) {
            v4_1.close();
            throw v5_10;
        } catch (Exception v0) {
            v1_1.put("errors", v0.getMessage());
            v1_1.put("success", "false");
            v4_1.close();
            return v1_1;
        }
        if (!v3.equals("")) {
            v1_1 = v2_1.acceptFriendRequest(v3, this.this$0.bundle.getString("userName"));
        } else {
            v1_1.put("errors", "Invalid session");
            v1_1.put("success", "false");
        }
        v4_1.close();
        return v1_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p4.get("errors")), 1);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Friend request has been accepted!", 1);
        }
        return;
    }

    private ViewFriendRequest$DenyRequestAsyncTask(org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ViewFriendRequest$DenyRequestAsyncTask(org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest p1, org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest$DenyRequestAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        java.util.HashMap v1_1 = new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest(this.this$0.context);
        try {
            String v3 = v4_1.getSessionToken();
        } catch (String v5_9) {
            v4_1.close();
            throw v5_9;
        } catch (Exception v0) {
            v1_1.put("errors", v0.getMessage());
            v1_1.put("success", "false");
            v4_1.close();
            return v1_1;
        }
        if (!v3.equals("")) {
            v1_1 = v2_1.denyFriendRequest(v3, this.this$0.bundle.getString("userName"));
        } else {
            v1_1.put("errors", "Invalid session");
        }
        v4_1.close();
        return v1_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p4.get("errors")), 1);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Friend request has been declined!", 1);
        }
        return;
    }

    public ViewFriendRequest()
    {
        return;
    }

    public void acceptFriendRequest(android.view.View p5)
    {
        org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest$AcceptRequestAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest$AcceptRequestAsyncTask(this, 0);
        Void[] v1_1 = new Void[2];
        v1_1[0] = 0;
        v1_1[1] = 0;
        v0_1.execute(v1_1);
        return;
    }

    public void denyFriendRequest(android.view.View p5)
    {
        org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest$DenyRequestAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest$DenyRequestAsyncTask(this, 0);
        Void[] v1_1 = new Void[2];
        v1_1[0] = 0;
        v1_1[1] = 0;
        v0_1.execute(v1_1);
        return;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903075);
        this.context = this.getApplicationContext();
        this.bundle = this.getIntent().getExtras();
        this.userName = ((android.widget.TextView) this.findViewById(2130968646));
        this.fullName = ((android.widget.TextView) this.findViewById(2130968647));
        this.userName.setText(new StringBuilder("Username: ").append(this.bundle.getString("userName")).toString());
        this.fullName.setText(new StringBuilder("Full Name: ").append(this.bundle.getString("fullName")).toString());
        return;
    }

    private ViewProfile$GetProfileInfo(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ViewProfile$GetProfileInfo(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1, org.owasp.goatdroid.fourgoats.activities.ViewProfile$GetProfileInfo p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p9)
    {
        java.util.HashMap v1_1 = new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v5_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$0(this.this$0));
        String v4 = v5_1.getSessionToken();
        v5_1.close();
        org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest v3_1 = new org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$0(this.this$0));
        try {
            java.util.HashMap v2;
            if (!v4.equals("")) {
                v1_1 = v3_1.getProfile(v4, org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$1(this.this$0).getString("userName"));
                if (!((String) v1_1.get("success")).equals("true")) {
                    v5_1.close();
                    v2 = v1_1;
                } else {
                    v5_1.close();
                    v2 = v1_1;
                }
            } else {
                v1_1.put("errors", "Invalid session");
                v1_1.put("success", "false");
                v5_1.close();
                v2 = v1_1;
            }
        } catch (String v6_14) {
            v5_1.close();
            throw v6_14;
        } catch (Exception v0) {
            v1_1.put("errors", v0.getMessage());
            v1_1.put("success", "false");
            v5_1.close();
        }
        return v2;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p6)
    {
        if (!((String) p6.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$0(this.this$0), "Something weird happened", 1);
        } else {
            org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$2(this.this$0).setText(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$1(this.this$0).getString("userName"));
            org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$3(this.this$0).setText(new StringBuilder(String.valueOf(((String) p6.get("firstName")))).append(" ").append(((String) p6.get("lastName"))).toString());
            if (!((String) p6.get("lastCheckinTime")).equals("")) {
                String[] v0 = ((String) p6.get("lastCheckinTime")).split(" ");
                org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$4(this.this$0).setText(new StringBuilder("Date: ").append(v0[0]).append("\nTime: ").append(v0[1]).append("\nLatitude: ").append(((String) p6.get("lastLatitude"))).append("\nLongitude: ").append(((String) p6.get("lastLongitude"))).toString());
            } else {
                org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$4(this.this$0).setText("User has never checked in");
            }
        }
        return;
    }

    private ViewProfile$RequestFriendAsyncTask(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ViewProfile$RequestFriendAsyncTask(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1, org.owasp.goatdroid.fourgoats.activities.ViewProfile$RequestFriendAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p8)
    {
        org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest v1_1 = new org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$0(this.this$0));
        new java.util.HashMap();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_0 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$0(this.this$0));
        try {
            java.util.HashMap v2_0 = v1_1.doFriendRequest(v4_0.getSessionToken(), org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$1(this.this$0).getString("userName"));
            v4_0.close();
        } catch (String v5_8) {
            v4_0.close();
            throw v5_8;
        } catch (Exception v0) {
            v2_0.put("errors", v0.getMessage());
            v2_0.put("success", "false");
            v4_0.close();
        }
        return v2_0;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p4)
    {
        if (!((String) p4.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$0(this.this$0), ((String) p4.get("errors")), 1);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(org.owasp.goatdroid.fourgoats.activities.ViewProfile.access$0(this.this$0), "Friend request sent!", 1);
        }
        return;
    }

    public ViewProfile()
    {
        return;
    }

    static synthetic android.content.Context access$0(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1)
    {
        return p1.context;
    }

    static synthetic android.os.Bundle access$1(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1)
    {
        return p1.bundle;
    }

    static synthetic android.widget.TextView access$2(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1)
    {
        return p1.userNameTextView;
    }

    static synthetic android.widget.TextView access$3(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1)
    {
        return p1.nameTextView;
    }

    static synthetic android.widget.TextView access$4(org.owasp.goatdroid.fourgoats.activities.ViewProfile p1)
    {
        return p1.lastCheckinTextView;
    }

    public void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.setContentView(2130903086);
        this.context = this.getApplicationContext();
        this.bundle = this.getIntent().getExtras();
        this.userNameTextView = ((android.widget.TextView) this.findViewById(2130968640));
        this.nameTextView = ((android.widget.TextView) this.findViewById(2130968662));
        this.lastCheckinTextView = ((android.widget.TextView) this.findViewById(2130968663));
        org.owasp.goatdroid.fourgoats.activities.ViewProfile$GetProfileInfo v0_1 = new org.owasp.goatdroid.fourgoats.activities.ViewProfile$GetProfileInfo(this, 0);
        Void[] v1_12 = new Void[2];
        v1_12[0] = 0;
        v1_12[1] = 0;
        v0_1.execute(v1_12);
        return;
    }

    public void requestAsFriend(android.view.View p5)
    {
        org.owasp.goatdroid.fourgoats.activities.ViewProfile$RequestFriendAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.activities.ViewProfile$RequestFriendAsyncTask(this, 0);
        Void[] v1_1 = new Void[2];
        v1_1[0] = 0;
        v1_1[1] = 0;
        v0_1.execute(v1_1);
        return;
    }

    public void viewUserCheckinHistory(android.view.View p4)
    {
        android.content.Intent v0_1 = new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.History);
        v0_1.putExtras(this.bundle);
        this.startActivity(v0_1);
        return;
    }

    AvailableRewardsAdapter$ViewHolder()
    {
        return;
    }

    public AvailableRewardsAdapter(android.app.Activity p2, String[] p3)
    {
        super(p2, 2130903091, p3);
        super.activity = p2;
        super.values = p3;
        return;
    }

    public android.view.View getView(int p10, android.view.View p11, android.view.ViewGroup p12)
    {
        android.view.View v3 = p11;
        if (p11 == null) {
            v3 = this.activity.getLayoutInflater().inflate(2130903066, 0);
            org.owasp.goatdroid.fourgoats.adapter.AvailableRewardsAdapter$ViewHolder v6_0 = new org.owasp.goatdroid.fourgoats.adapter.AvailableRewardsAdapter$ViewHolder();
            v6_0.name = ((android.widget.TextView) v3.findViewById(2130968625));
            v6_0.description = ((android.widget.TextView) v3.findViewById(2130968627));
            v6_0.venue = ((android.widget.TextView) v3.findViewById(2130968628));
            v6_0.latitude = ((android.widget.TextView) v3.findViewById(2130968629));
            v6_0.longitude = ((android.widget.TextView) v3.findViewById(2130968630));
            v6_0.checkins = ((android.widget.TextView) v3.findViewById(2130968631));
            v3.setTag(v6_0);
        }
        org.owasp.goatdroid.fourgoats.adapter.AvailableRewardsAdapter$ViewHolder v1_1 = ((org.owasp.goatdroid.fourgoats.adapter.AvailableRewardsAdapter$ViewHolder) v3.getTag());
        String[] v5 = this.values[p10].split("\n");
        v1_1.name.setText(v5[0]);
        v1_1.description.setText(v5[1]);
        v1_1.venue.setText(v5[2]);
        v1_1.latitude.setText(v5[3]);
        v1_1.longitude.setText(v5[4]);
        v1_1.checkins.setText(v5[5]);
        return v3;
    }

    SearchForFriendsAdapter$ViewHolder()
    {
        return;
    }

    public SearchForFriendsAdapter(android.app.Activity p2, String[] p3)
    {
        super(p2, 2130903091, p3);
        super.activity = p2;
        super.values = p3;
        return;
    }

    public android.view.View getView(int p10, android.view.View p11, android.view.ViewGroup p12)
    {
        android.view.View v3 = p11;
        if (p11 == null) {
            v3 = this.activity.getLayoutInflater().inflate(2130903091, 0);
            org.owasp.goatdroid.fourgoats.adapter.SearchForFriendsAdapter$ViewHolder v6_0 = new org.owasp.goatdroid.fourgoats.adapter.SearchForFriendsAdapter$ViewHolder();
            v6_0.name = ((android.widget.TextView) v3.findViewById(2130968625));
            v6_0.username = ((android.widget.TextView) v3.findViewById(2130968674));
            v3.setTag(v6_0);
        }
        org.owasp.goatdroid.fourgoats.adapter.SearchForFriendsAdapter$ViewHolder v1_1 = ((org.owasp.goatdroid.fourgoats.adapter.SearchForFriendsAdapter$ViewHolder) v3.getTag());
        String[] v5 = this.values[p10].split("\n");
        v1_1.name.setText(v5[0]);
        v1_1.username.setText(v5[1]);
        return v3;
    }

    public BaseActivity$LogOutAsyncTask(org.owasp.goatdroid.fourgoats.base.BaseActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p7)
    {
        org.owasp.goatdroid.fourgoats.rest.login.LoginRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.login.LoginRequest(this.this$0.context);
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v3_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        new java.util.HashMap();
        try {
            java.util.HashMap v1_0 = v2_1.logOut(v3_1.getSessionToken());
            v3_1.deleteInfo();
            v3_1.close();
        } catch (String v4_5) {
            v3_1.close();
            throw v4_5;
        } catch (Exception v0) {
            v1_0.put("errors", v0.getMessage());
            v1_0.put("success", "false");
            v3_1.close();
        }
        return v1_0;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p5)
    {
        if (!((String) p5.get("success")).equals("true")) {
            if (!((String) p5.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p5.get("errors")), 1);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
            }
        } else {
            this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
        }
        return;
    }

    public BaseFragmentActivity$LogOutAsyncTask(org.owasp.goatdroid.fourgoats.base.BaseFragmentActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p7)
    {
        org.owasp.goatdroid.fourgoats.rest.login.LoginRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.login.LoginRequest(this.this$0.context);
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v3_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        new java.util.HashMap();
        try {
            java.util.HashMap v1_0 = v2_1.logOut(v3_1.getSessionToken());
            v3_1.deleteInfo();
            v3_1.close();
        } catch (String v4_5) {
            v3_1.close();
            throw v4_5;
        } catch (Exception v0) {
            v1_0.put("errors", v0.getMessage());
            v1_0.put("success", "false");
            v3_1.close();
        }
        return v1_0;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p5)
    {
        if (!((String) p5.get("success")).equals("true")) {
            if (!((String) p5.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p5.get("errors")), 1);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
            }
        } else {
            this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
        }
        return;
    }

    public BaseFragmentActivity()
    {
        return;
    }

    public void launchHome()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Home));
        return;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.getSupportActionBar().setIcon(2130837628);
        if (android.os.Build$VERSION.SDK_INT < 14) {
            this.getSupportActionBar().setHomeButtonEnabled(1);
            this.getSupportActionBar().setDisplayHomeAsUpEnabled(1);
        } else {
            this.getActionBar().setHomeButtonEnabled(1);
            this.getActionBar().setDisplayHomeAsUpEnabled(1);
        }
        return;
    }

    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu p3)
    {
        this.getSupportMenuInflater().inflate(2131492865, p3);
        this.context = this.getApplicationContext();
        return super.onCreateOptionsMenu(p3);
    }

    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem p15)
    {
        int v5 = p15.getItemId();
        if (v5 != 16908332) {
            if (v5 != 2130968680) {
                if (v5 != 2130968681) {
                    if (v5 != 2130968683) {
                        if (v5 == 2130968682) {
                            this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.About));
                        }
                    } else {
                        org.owasp.goatdroid.fourgoats.base.BaseFragmentActivity$LogOutAsyncTask v8_1 = new org.owasp.goatdroid.fourgoats.base.BaseFragmentActivity$LogOutAsyncTask(this);
                        Class v10_4 = new Void[2];
                        v10_4[0] = 0;
                        v10_4[1] = 0;
                        v8_1.execute(v10_4);
                    }
                } else {
                    android.content.Intent v6_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.ViewProfile);
                    android.os.Bundle v1_1 = new android.os.Bundle();
                    org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v7_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.context);
                    String v9 = v7_1.getUserName();
                    v7_1.close();
                    v1_1.putString("userName", v9);
                    v6_1.putExtras(v1_1);
                    this.startActivity(v6_1);
                }
            } else {
                this.startActivity(new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Preferences));
            }
        } else {
            org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v3_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.context);
            try {
                android.content.Intent v2_1;
                if (!v3_1.getIsAdmin()) {
                    v2_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.Home);
                } else {
                    v2_1 = new android.content.Intent(this, org.owasp.goatdroid.fourgoats.activities.AdminHome);
                }
            } catch (Class v10_14) {
                v3_1.close();
                throw v10_14;
            }
            v3_1.close();
            this.startActivity(v2_1);
        }
        return 1;
    }

    public BaseTabsViewPagerActivity$LogOutAsyncTask(org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p7)
    {
        org.owasp.goatdroid.fourgoats.rest.login.LoginRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.login.LoginRequest(this.this$0.context);
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v3_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        new java.util.HashMap();
        try {
            java.util.HashMap v1_0 = v2_1.logOut(v3_1.getSessionToken());
            v3_1.deleteInfo();
            v3_1.close();
        } catch (String v4_5) {
            v3_1.close();
            throw v4_5;
        } catch (Exception v0) {
            v1_0.put("errors", v0.getMessage());
            v1_0.put("success", "false");
            v3_1.close();
        }
        return v1_0;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    public void onPostExecute(java.util.HashMap p5)
    {
        if (!((String) p5.get("success")).equals("true")) {
            if (!((String) p5.get("errors")).equals("Invalid session")) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p5.get("errors")), 1);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
            }
        } else {
            this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
        }
        return;
    }

    BaseTabsViewPagerActivity$TabsAdapter$TabInfo(Class p1, android.os.Bundle p2)
    {
        this.clss = p1;
        this.args = p2;
        return;
    }

    static synthetic Class access$0(org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo p1)
    {
        return p1.clss;
    }

    static synthetic android.os.Bundle access$1(org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo p1)
    {
        return p1.args;
    }

    public BaseTabsViewPagerActivity$TabsAdapter(com.actionbarsherlock.app.SherlockFragmentActivity p2, android.support.v4.view.ViewPager p3)
    {
        super(p2.getSupportFragmentManager());
        super.mTabs = new java.util.ArrayList();
        super.mContext = p2;
        super.mActionBar = p2.getSupportActionBar();
        super.mViewPager = p3;
        super.mViewPager.setAdapter(super);
        super.mViewPager.setOnPageChangeListener(super);
        return;
    }

    public void addTab(com.actionbarsherlock.app.ActionBar$Tab p3, Class p4, android.os.Bundle p5)
    {
        org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo v0_1 = new org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo(p4, p5);
        p3.setTag(v0_1);
        p3.setTabListener(this);
        this.mTabs.add(v0_1);
        this.mActionBar.addTab(p3);
        this.notifyDataSetChanged();
        return;
    }

    public int getCount()
    {
        return this.mTabs.size();
    }

    public android.support.v4.app.Fragment getItem(int p5)
    {
        org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo v0_1 = ((org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo) this.mTabs.get(p5));
        return android.support.v4.app.Fragment.instantiate(this.mContext, org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo.access$0(v0_1).getName(), org.owasp.goatdroid.fourgoats.base.BaseTabsViewPagerActivity$TabsAdapter$TabInfo.access$1(v0_1));
    }

    public void onPageScrollStateChanged(int p1)
    {
        return;
    }

    public void onPageScrolled(int p1, float p2, int p3)
    {
        return;
    }

    public void onPageSelected(int p2)
    {
        this.mActionBar.setSelectedNavigationItem(p2);
        return;
    }

    public void onTabReselected(com.actionbarsherlock.app.ActionBar$Tab p1, android.support.v4.app.FragmentTransaction p2)
    {
        return;
    }

    public void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab p4, android.support.v4.app.FragmentTransaction p5)
    {
        Object v1 = p4.getTag();
        int v0 = 0;
        while (v0 < this.mTabs.size()) {
            if (this.mTabs.get(v0) == v1) {
                this.mViewPager.setCurrentItem(v0);
            }
            v0++;
        }
        return;
    }

    public void onTabUnselected(com.actionbarsherlock.app.ActionBar$Tab p1, android.support.v4.app.FragmentTransaction p2)
    {
        return;
    }

    public RequestBase()
    {
        return;
    }

    public ResponseBase()
    {
        return;
    }

    public static boolean isSuccess(String p3)
    {
        int v1_0;
        if (!new org.json.JSONObject(p3).getString("success").equals("false")) {
            v1_0 = 1;
        } else {
            v1_0 = 0;
        }
        return v1_0;
    }

    public static java.util.HashMap parseStatusAndErrors(String p8)
    {
        java.util.HashMap v5_1 = new java.util.HashMap();
        String v3 = "";
        try {
            if (p8 != null) {
                org.json.JSONObject v4_1 = new org.json.JSONObject(p8);
                if (!v4_1.getString("success").equals("false")) {
                    v5_1.put("success", "true");
                    v5_1.put("errors", v3);
                } else {
                    v5_1.put("success", "false");
                    try {
                        org.json.JSONArray v2 = v4_1.getJSONArray("errors");
                        int v0 = 0;
                    } catch (org.json.JSONException v1) {
                        v3 = new StringBuilder(String.valueOf(v3)).append(v4_1.getString("errors")).toString();
                    }
                    while (v0 < v2.length()) {
                        v3 = new StringBuilder(String.valueOf(v3)).append("-").append(v2.getString(v0).toString()).append("\n\n").toString();
                        v0++;
                    }
                }
            } else {
                v3 = new StringBuilder(String.valueOf("")).append("Could not contact the remote service").toString();
                v5_1.put("success", "false");
            }
        } catch (StringBuilder v6_23) {
            v5_1.put("errors", v3);
            throw v6_23;
        } catch (org.json.JSONException v1) {
            v5_1.put("success", "false");
            v5_1.put("errors", v3);
        } catch (org.json.JSONException v1) {
            v5_1.put("success", "false");
            v5_1.put("errors", v3);
        }
        return v5_1;
    }

    public SendSMSNowReceiver()
    {
        return;
    }

    public void onReceive(android.content.Context p8, android.content.Intent p9)
    {
        this.context = p8;
        android.telephony.SmsManager v0 = android.telephony.SmsManager.getDefault();
        android.os.Bundle v6 = p9.getExtras();
        v0.sendTextMessage(v6.getString("phoneNumber"), 0, v6.getString("message"), 0, 0);
        org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "Your text message has been sent!", 1);
        return;
    }

    public CheckinDBHelper$CheckinOpenHelper(org.owasp.goatdroid.fourgoats.db.CheckinDBHelper p4, android.content.Context p5)
    {
        this.this$0 = p4;
        super(p5, "checkins.db", 0, 1);
        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase p2)
    {
        p2.execSQL("CREATE TABLE checkins(id INTEGER PRIMARY KEY, checkinID TEXT, venueName TEXT, dateTime TEXT, latitude TEXT, longitude TEXT)");
        p2.execSQL("CREATE TABLE autocheckin(id INTEGER PRIMARY KEY, dateTime TEXT, latitude TEXT, longitude TEXT)");
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase p3, int p4, int p5)
    {
        android.util.Log.w("Oh snap", "Upgrading");
        p3.execSQL("DROP TABLE IF EXISTS checkins");
        p3.execSQL("DROP TABLE IF EXISTS autocheckin");
        this.onCreate(p3);
        return;
    }

    public CheckinDBHelper(android.content.Context p4)
    {
        this.context = p4;
        this.db = new org.owasp.goatdroid.fourgoats.db.CheckinDBHelper$CheckinOpenHelper(this, this.context).getWritableDatabase();
        this.insertStmt = this.db.compileStatement("insert into checkins (checkinID, venueName, dateTime, latitude, longitude) values (?,?,?,?,?)");
        this.insertAutoCheckinStmt = this.db.compileStatement("insert into autocheckin (latitude, longitude, dateTime) values (?,?,?)");
        return;
    }

    public void close()
    {
        this.db.close();
        return;
    }

    public java.util.ArrayList getCheckins()
    {
        int v3 = 0;
        String v0_0 = this.db;
        String[] v2_1 = new String[5];
        v2_1[0] = "checkinID";
        v2_1[1] = "venueName";
        v2_1[2] = "dateTime";
        v2_1[3] = "latitude";
        v2_1[4] = "longitude";
        android.database.Cursor v10 = v0_0.query("checkins", v2_1, v3, v3, v3, 0, 0);
        java.util.ArrayList v9_1 = new java.util.ArrayList();
        java.util.HashMap v8_1 = new java.util.HashMap();
        while (v10.moveToNext()) {
            v8_1.put("checkinID", v10.getString(v10.getColumnIndex("checkinID")));
            v8_1.put("venueName", v10.getString(v10.getColumnIndex("venueName")));
            v8_1.put("dateTime", v10.getString(v10.getColumnIndex("dateTime")));
            v8_1.put("latitude", v10.getString(v10.getColumnIndex("latitude")));
            v8_1.put("longitude", v10.getString(v10.getColumnIndex("longitude")));
            v9_1.add(v8_1);
        }
        return v9_1;
    }

    public void insertAutoCheckin(String p3, String p4, String p5)
    {
        this.insertAutoCheckinStmt.bindString(1, p3);
        this.insertAutoCheckinStmt.bindString(2, p4);
        this.insertAutoCheckinStmt.bindString(3, p5);
        this.insertAutoCheckinStmt.executeInsert();
        return;
    }

    public void insertCheckin(java.util.HashMap p4)
    {
        this.insertStmt.bindString(1, ((String) p4.get("checkinID")));
        this.insertStmt.bindString(2, ((String) p4.get("venueName")));
        this.insertStmt.bindString(3, ((String) p4.get("dateTime")));
        this.insertStmt.bindString(4, ((String) p4.get("latitude")));
        this.insertStmt.bindString(5, ((String) p4.get("longitude")));
        this.insertStmt.executeInsert();
        return;
    }

    public UserInfoDBHelper$UserInfoOpenHelper(org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper p4, android.content.Context p5)
    {
        this.this$0 = p4;
        super(p5, "userinfo.db", 0, 1);
        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase p2)
    {
        try {
            p2.execSQL("CREATE TABLE info(id INTEGER PRIMARY KEY, sessionToken TEXT, userName TEXT, isPublic INT, autoCheckin INT, isAdmin INT)");
        } catch (RuntimeException v0) {
        }
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase p3, int p4, int p5)
    {
        android.util.Log.w("Oh snap", "Upgrading");
        p3.execSQL("DROP TABLE IF EXISTS info");
        this.onCreate(p3);
        return;
    }

    public UserInfoDBHelper(android.content.Context p4)
    {
        this.context = p4;
        this.db = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper$UserInfoOpenHelper(this, this.context).getWritableDatabase();
        this.insertStmt = this.db.compileStatement("insert into info (sessionToken, userName, isPublic, autoCheckin, isAdmin) values (?,?,?,?,?)");
        this.updateStmt = this.db.compileStatement("update info set isPublic = ?, autoCheckin = ? where id = 1");
        this.deleteStmt = this.db.compileStatement("delete from info");
        return;
    }

    public void close()
    {
        this.db.close();
        return;
    }

    public void deleteInfo()
    {
        this.deleteStmt.executeInsert();
        return;
    }

    public boolean getIsAdmin()
    {
        int v0_1;
        int v0_4 = this.db;
        String[] v2 = new String[1];
        v2[0] = "isAdmin";
        android.database.Cursor v8 = v0_4.query("info", v2, 0, 0, 0, 0, 0);
        if (!v8.moveToFirst()) {
            v0_1 = 0;
        } else {
            if (!v8.getString(0).equals("true")) {
                v0_1 = 0;
            } else {
                v0_1 = 1;
            }
        }
        return v0_1;
    }

    public java.util.HashMap getPreferences()
    {
        java.util.HashMap v9_1 = new java.util.HashMap();
        String v0_3 = this.db;
        String[] v2_1 = new String[2];
        v2_1[0] = "isPublic";
        v2_1[1] = "autoCheckin";
        android.database.Cursor v8 = v0_3.query("info", v2_1, 0, 0, 0, 0, 0);
        if (v8.moveToFirst()) {
            v9_1.put("isPublic", v8.getString(0));
            v9_1.put("autoCheckin", v8.getString(1));
        }
        return v9_1;
    }

    public String getSessionToken()
    {
        String v0_1;
        String v0_2 = this.db;
        String[] v2_1 = new String[1];
        v2_1[0] = "sessionToken";
        android.database.Cursor v8 = v0_2.query("info", v2_1, 0, 0, 0, 0, 0);
        if (!v8.moveToFirst()) {
            v0_1 = "";
        } else {
            v0_1 = v8.getString(0);
        }
        return v0_1;
    }

    public String getUserName()
    {
        String v0_1;
        String v0_2 = this.db;
        String[] v2_1 = new String[1];
        v2_1[0] = "userName";
        android.database.Cursor v8 = v0_2.query("info", v2_1, 0, 0, 0, 0, 0);
        if (!v8.moveToFirst()) {
            v0_1 = "";
        } else {
            v0_1 = v8.getString(0);
        }
        return v0_1;
    }

    public void insertSettings(java.util.HashMap p4)
    {
        this.insertStmt.bindString(1, ((String) p4.get("sessionToken")));
        this.insertStmt.bindString(2, ((String) p4.get("userName")));
        this.insertStmt.bindString(3, ((String) p4.get("isPublic")));
        this.insertStmt.bindString(4, ((String) p4.get("autoCheckin")));
        this.insertStmt.bindString(5, ((String) p4.get("isAdmin")));
        this.insertStmt.executeInsert();
        return;
    }

    public void updatePreferences(String p3, String p4)
    {
        this.updateStmt.bindString(1, p3);
        this.updateStmt.bindString(2, p4);
        this.updateStmt.executeInsert();
        return;
    }

    private AvailableRewards$GetAvailableRewards(org.owasp.goatdroid.fourgoats.fragments.AvailableRewards p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic AvailableRewards$GetAvailableRewards(org.owasp.goatdroid.fourgoats.fragments.AvailableRewards p1, org.owasp.goatdroid.fourgoats.fragments.AvailableRewards$GetAvailableRewards p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs String[] doInBackground(Void[] p11)
    {
        new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v5_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v4 = v5_1.getSessionToken();
        v5_1.close();
        org.owasp.goatdroid.fourgoats.rest.rewards.RewardsRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.rewards.RewardsRequest(this.this$0.context);
        try {
            String[] v6_8;
            if (!v4.equals("")) {
                java.util.ArrayList v3_1 = v2_1.getAllRewards(v4);
                if (v3_1.size() <= 1) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Something weird happened", 1);
                    v6_8 = new String[0];
                } else {
                    v6_8 = this.this$0.bindListView(v3_1);
                }
            } else {
                this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
                v6_8 = new String[0];
            }
        } catch (Exception v0) {
            this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
            v6_8 = new String[0];
        }
        return v6_8;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String[]) p1));
        return;
    }

    public void onPostExecute(String[] p4)
    {
        if (this.this$0.getActivity() != null) {
            this.this$0.listView.setAdapter(new org.owasp.goatdroid.fourgoats.adapter.AvailableRewardsAdapter(this.this$0.getActivity(), p4));
        }
        return;
    }

    public AvailableRewards()
    {
        return;
    }

    public String[] bindListView(java.util.ArrayList p7)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        java.util.Iterator v4 = p7.iterator();
        while (v4.hasNext()) {
            java.util.HashMap v0_1 = ((java.util.HashMap) v4.next());
            if ((v0_1.get("rewardName") != null) && ((v0_1.get("rewardDescription") != null) && ((v0_1.get("venueName") != null) && ((v0_1.get("latitude") != null) && ((v0_1.get("longitude") != null) && (v0_1.get("checkinsRequired") != null)))))) {
                v1_1.add(new StringBuilder(String.valueOf(((String) v0_1.get("rewardName")))).append("\n").append(((String) v0_1.get("rewardDescription"))).append("\nVenue: ").append(((String) v0_1.get("venueName"))).append("\nLatitude: ").append(((String) v0_1.get("latitude"))).append("\nLongitude: ").append(((String) v0_1.get("longitude"))).append("\nCheckins Required: ").append(((String) v0_1.get("checkinsRequired"))).toString());
            }
        }
        String[] v2_0 = new String[v1_1.size()];
        return ((String[]) v1_1.toArray(v2_0));
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.context = this.getActivity();
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p6, android.view.ViewGroup p7, android.os.Bundle p8)
    {
        android.view.View v1 = p6.inflate(2130903065, p7, 0);
        this.listView = ((android.widget.ListView) v1.findViewById(2130968624));
        org.owasp.goatdroid.fourgoats.fragments.AvailableRewards$GetAvailableRewards v0_1 = new org.owasp.goatdroid.fourgoats.fragments.AvailableRewards$GetAvailableRewards(this, 0);
        Void[] v2_1 = new Void[2];
        v2_1[0] = 0;
        v2_1[1] = 0;
        v0_1.execute(v2_1);
        return v1;
    }

    DeleteUsers$1(org.owasp.goatdroid.fourgoats.fragments.DeleteUsers p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p8, android.view.View p9, int p10, long p11)
    {
        String v3 = ((String) this.this$0.listView.getItemAtPosition(p10)).split("\n")[1];
        android.content.Intent v0_1 = new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.DoAdminDeleteUser);
        android.os.Bundle v4_1 = new android.os.Bundle();
        v4_1.putString("userName", v3);
        v0_1.putExtras(v4_1);
        this.this$0.startActivity(v0_1);
        return;
    }

    private DeleteUsers$SearchForUsers(org.owasp.goatdroid.fourgoats.fragments.DeleteUsers p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic DeleteUsers$SearchForUsers(org.owasp.goatdroid.fourgoats.fragments.DeleteUsers p1, org.owasp.goatdroid.fourgoats.fragments.DeleteUsers$SearchForUsers p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs String[] doInBackground(Void[] p11)
    {
        new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v3 = v4_1.getSessionToken();
        v4_1.close();
        org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest(this.this$0.context);
        try {
            String v6_22;
            if (!v3.equals("")) {
                java.util.ArrayList v5_1 = v2_1.getUsers(v3);
                if (v5_1.size() <= 0) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Something weird happened", 1);
                    v6_22 = new String[0];
                } else {
                    if (!((String) ((java.util.HashMap) v5_1.get(0)).get("success")).equals("true")) {
                        org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) ((java.util.HashMap) v5_1.get(1)).get("errors")), 1);
                    } else {
                        v6_22 = this.this$0.bindListView(v5_1);
                    }
                }
            } else {
                this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
            }
        } catch (Exception v0) {
            this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
        }
        return v6_22;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String[]) p1));
        return;
    }

    public void onPostExecute(String[] p4)
    {
        if (this.this$0.getActivity() != null) {
            this.this$0.listView.setAdapter(new org.owasp.goatdroid.fourgoats.adapter.SearchForFriendsAdapter(this.this$0.getActivity(), p4));
        }
        return;
    }

    public DeleteUsers()
    {
        return;
    }

    public String[] bindListView(java.util.ArrayList p7)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        java.util.Iterator v4 = p7.iterator();
        while (v4.hasNext()) {
            java.util.HashMap v0_1 = ((java.util.HashMap) v4.next());
            if ((v0_1.get("firstName") != null) && ((v0_1.get("lastName") != null) && (v0_1.get("userName") != null))) {
                v1_1.add(new StringBuilder(String.valueOf(((String) v0_1.get("firstName")))).append(" ").append(((String) v0_1.get("lastName"))).append("\n").append(((String) v0_1.get("userName"))).toString());
            }
        }
        String[] v2_0 = new String[v1_1.size()];
        return ((String[]) v1_1.toArray(v2_0));
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.context = this.getActivity();
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p7, android.view.ViewGroup p8, android.os.Bundle p9)
    {
        android.view.View v1 = p7.inflate(2130903069, p8, 0);
        this.listView = ((android.widget.ListView) v1.findViewById(2130968633));
        this.listView.setOnItemClickListener(new org.owasp.goatdroid.fourgoats.fragments.DeleteUsers$1(this));
        org.owasp.goatdroid.fourgoats.fragments.DeleteUsers$SearchForUsers v0_1 = new org.owasp.goatdroid.fourgoats.fragments.DeleteUsers$SearchForUsers(this, 0);
        Void[] v2_2 = new Void[2];
        v2_2[0] = 0;
        v2_2[1] = 0;
        v0_1.execute(v2_2);
        return v1;
    }

    DoCheckin$1(org.owasp.goatdroid.fourgoats.fragments.DoCheckin p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        this.this$0.sendCheckin(p2);
        return;
    }

    private DoCheckin$DoCheckinAsyncTask(org.owasp.goatdroid.fourgoats.fragments.DoCheckin p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic DoCheckin$DoCheckinAsyncTask(org.owasp.goatdroid.fourgoats.fragments.DoCheckin p1, org.owasp.goatdroid.fourgoats.fragments.DoCheckin$DoCheckinAsyncTask p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.HashMap doInBackground(Void[] p9)
    {
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v2_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        new java.util.HashMap();
        try {
            java.util.HashMap v0_0 = new org.owasp.goatdroid.fourgoats.rest.checkin.CheckinRequest(this.this$0.context).doCheckin(v2_1.getSessionToken(), this.this$0.latitude, this.this$0.longitude);
        } catch (String v6_14) {
            v2_1.close();
            throw v6_14;
        } catch (Exception v3) {
            v0_0.put("errors", v3.getMessage());
            v2_1.close();
            return v0_0;
        }
        if (((String) v0_0.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.db.CheckinDBHelper v1_1 = new org.owasp.goatdroid.fourgoats.db.CheckinDBHelper(this.this$0.context);
            v0_0.put("latitude", this.this$0.latitude);
            v0_0.put("longitude", this.this$0.longitude);
            v1_1.insertCheckin(v0_0);
        }
        v2_1.close();
        return v0_0;
    }

    public void launchAddVenue(android.os.Bundle p4)
    {
        android.content.Intent v0_1 = new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.AddVenue);
        v0_1.putExtras(p4);
        this.this$0.startActivity(v0_1);
        return;
    }

    public void launchViewCheckin(android.os.Bundle p4)
    {
        android.content.Intent v0_1 = new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.ViewCheckin);
        v0_1.putExtras(p4);
        this.this$0.startActivity(v0_1);
        return;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.HashMap) p1));
        return;
    }

    protected void onPostExecute(java.util.HashMap p8)
    {
        if (!((String) p8.get("success")).equals("true")) {
            if (!((String) p8.get("errors")).equals("Venue does not exist")) {
                if (!((String) p8.get("errors")).equals("Invalid session")) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) p8.get("errors")), 1);
                } else {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Invalid session", 1);
                    this.this$0.startActivity(new android.content.Intent(this.this$0.context, org.owasp.goatdroid.fourgoats.activities.Login));
                }
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Venue does not exist", 1);
                android.os.Bundle v0_1 = new android.os.Bundle();
                v0_1.putString("latitude", this.this$0.latitude);
                v0_1.putString("longitude", this.this$0.longitude);
                this.launchAddVenue(v0_1);
            }
        } else {
            if (p8.size() != 4) {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, new StringBuilder("You\'ve earned a reward:  ").append(((String) p8.get("rewardName"))).toString(), 1);
            } else {
                org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Checkin complete, great success!", 1);
            }
            android.os.Bundle v0_3 = new android.os.Bundle();
            v0_3.putString("checkinID", ((String) p8.get("checkinID")));
            v0_3.putString("venueName", ((String) p8.get("venueName")));
            v0_3.putString("venueWebsite", ((String) p8.get("venueWebsite")));
            v0_3.putString("dateTime", ((String) p8.get("dateTime")));
            v0_3.putString("latitude", this.this$0.latitude);
            v0_3.putString("longitude", this.this$0.longitude);
            this.launchViewCheckin(v0_3);
            org.owasp.goatdroid.fourgoats.db.CheckinDBHelper v1_1 = new org.owasp.goatdroid.fourgoats.db.CheckinDBHelper(this.this$0.context);
            p8.put("latitude", this.this$0.latitude);
            p8.put("longitude", this.this$0.longitude);
            v1_1.insertCheckin(p8);
        }
        return;
    }

    private DoCheckin$MyLocationListener(org.owasp.goatdroid.fourgoats.fragments.DoCheckin p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic DoCheckin$MyLocationListener(org.owasp.goatdroid.fourgoats.fragments.DoCheckin p1, org.owasp.goatdroid.fourgoats.fragments.DoCheckin$MyLocationListener p2)
    {
        this(p1);
        return;
    }

    public void onLocationChanged(android.location.Location p4)
    {
        this.this$0.latitude = Double.toString(p4.getLatitude());
        this.this$0.longitude = Double.toString(p4.getLongitude());
        this.this$0.gpsCoordsText.setText(new StringBuilder("Latitude: ").append(this.this$0.latitude).append("\n\nLongitude: ").append(this.this$0.longitude).toString());
        return;
    }

    public void onProviderDisabled(String p1)
    {
        return;
    }

    public void onProviderEnabled(String p1)
    {
        return;
    }

    public void onStatusChanged(String p1, int p2, android.os.Bundle p3)
    {
        return;
    }

    public DoCheckin()
    {
        return;
    }

    public void getLocation()
    {
        ((android.location.LocationManager) this.context.getSystemService("location")).requestLocationUpdates("gps", 0, 0, new org.owasp.goatdroid.fourgoats.fragments.DoCheckin$MyLocationListener(this, 0));
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.context = this.getActivity().getApplicationContext();
        this.getLocation();
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p4, android.view.ViewGroup p5, android.os.Bundle p6)
    {
        android.view.View v0 = p4.inflate(2130903071, p5, 0);
        this.gpsCoordsText = ((android.widget.TextView) v0.findViewById(2130968638));
        this.sendCheckin = ((android.widget.Button) v0.findViewById(2130968623));
        this.sendCheckin.setOnClickListener(new org.owasp.goatdroid.fourgoats.fragments.DoCheckin$1(this));
        return v0;
    }

    public void sendCheckin(android.view.View p6)
    {
        if (!this.gpsCoordsText.getText().toString().startsWith("Getting your location")) {
            org.owasp.goatdroid.fourgoats.fragments.DoCheckin$DoCheckinAsyncTask v0_1 = new org.owasp.goatdroid.fourgoats.fragments.DoCheckin$DoCheckinAsyncTask(this, 0);
            Void[] v1_1 = new Void[2];
            v1_1[0] = 0;
            v1_1[1] = 0;
            v0_1.execute(v1_1);
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.context, "I don\'t know where you are. I need your location", 1);
        }
        return;
    }

    private HistoryDialogFragment$GetHistory(org.owasp.goatdroid.fourgoats.fragments.HistoryDialogFragment p2)
    {
        this.this$0 = p2;
        this.success = 0;
        this.errors = "";
        this.htmlResponse = "";
        return;
    }

    synthetic HistoryDialogFragment$GetHistory(org.owasp.goatdroid.fourgoats.fragments.HistoryDialogFragment p1, org.owasp.goatdroid.fourgoats.fragments.HistoryDialogFragment$GetHistory p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.ArrayList doInBackground(Void[] p8)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v3 = v4_1.getSessionToken();
        org.owasp.goatdroid.fourgoats.rest.history.HistoryRequest v2_0 = new org.owasp.goatdroid.fourgoats.rest.history.HistoryRequest(this.this$0.context);
        try {
            if (!v3.equals("")) {
                v1_1 = v2_0.getHistory(v3);
                if (!((String) ((java.util.HashMap) v1_1.get(0)).get("success")).equals("true")) {
                    this.errors = ((String) ((java.util.HashMap) v1_1.get(0)).get("errors"));
                    v4_1.close();
                } else {
                    this.htmlResponse = this.this$0.generateHistoryHTML(v1_1);
                    this.success = 1;
                }
            } else {
                this.errors = "Invalid session";
            }
        } catch (String v5_21) {
            v4_1.close();
            throw v5_21;
        } catch (Exception v0) {
            this.errors = "Could not contact the remote service";
            v4_1.close();
        }
        return v1_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.ArrayList) p1));
        return;
    }

    public void onPostExecute(java.util.ArrayList p5)
    {
        if (!this.success) {
            if (!this.errors.equals("Invalid session")) {
                if (!this.errors.equals("You have never checked in")) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, this.errors, 1);
                } else {
                    this.this$0.noCheckinsTextView.setVisibility(1);
                }
            } else {
                this.this$0.launchLogin();
            }
        } else {
            this.this$0.webview.loadData(this.htmlResponse, "text/html", "UTF-8");
        }
        return;
    }

    public HistoryDialogFragment()
    {
        return;
    }

    public String generateHistoryHTML(java.util.ArrayList p14)
    {
        String v3 = "";
        String v7_0 = "";
        String v1_0 = "";
        String v2_0 = "";
        String v4_0 = "";
        String v5_0 = "";
        String v8_0 = "";
        if (p14.size() <= 1) {
            v3 = new StringBuilder(String.valueOf("")).append("<p><p>You have not checked in yet, grasshopper").toString();
        } else {
            StringBuilder v9_3 = p14.iterator();
            while (v9_3.hasNext()) {
                java.util.HashMap v0_1 = ((java.util.HashMap) v9_3.next());
                if (v0_1.get("venueName") != null) {
                    v7_0 = ((String) v0_1.get("venueName"));
                }
                if (v0_1.get("checkinID") != null) {
                    v1_0 = ((String) v0_1.get("checkinID"));
                }
                if (v0_1.get("dateTime") != null) {
                    v2_0 = ((String) v0_1.get("dateTime"));
                }
                if (v0_1.get("latitude") != null) {
                    v4_0 = ((String) v0_1.get("latitude"));
                }
                if (v0_1.get("longitude") != null) {
                    v5_0 = ((String) v0_1.get("longitude"));
                }
                if (v0_1.get("venueWebsite") != null) {
                    v8_0 = ((String) v0_1.get("venueWebsite"));
                }
                String[] v6 = v2_0.split(" ");
                v3 = new StringBuilder(String.valueOf(v3)).append("<p><b>").append(v7_0).append("</b><br><b>Date:</b> ").append(v6[0]).append("<br><b>Time:</b> ").append(v6[1]).append("<br><b>Latitude:</b> ").append(v4_0).append("<br><b>Longitude:</b> ").append(v5_0).append("<br>").append("<button style=\"color: white; background-color:#2E9AFE\" ").append("type=\"button\" onclick=\"window.jsInterface.launchViewCheckinActivity(\'").append(v7_0).append("\',\'").append(v8_0).append("\',\'").append(v2_0).append("\',\'").append(v4_0).append("\',\'").append(v5_0).append("\',\'").append(v1_0).append("\')\">View Checkin</button><br>").toString();
            }
        }
        return v3;
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.context = this.getActivity();
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p10, android.view.ViewGroup p11, android.os.Bundle p12)
    {
        android.view.View v1 = p10.inflate(2130903078, p11, 0);
        this.webview = ((android.webkit.WebView) v1.findViewById(2130968651));
        android.webkit.WebSettings v2 = this.webview.getSettings();
        this.webview.addJavascriptInterface(new org.owasp.goatdroid.fourgoats.javascriptinterfaces.ViewCheckinJSInterface(this.context), "jsInterface");
        v2.setJavaScriptEnabled(1);
        this.noCheckinsTextView = ((android.widget.TextView) v1.findViewById(2130968650));
        org.owasp.goatdroid.fourgoats.fragments.HistoryDialogFragment$GetHistory v0_1 = new org.owasp.goatdroid.fourgoats.fragments.HistoryDialogFragment$GetHistory(this, 0);
        Void[] v3_6 = new Void[2];
        v3_6[0] = 0;
        v3_6[1] = 0;
        v0_1.execute(v3_6);
        return v1;
    }

    private HistoryFragment$GetHistory(org.owasp.goatdroid.fourgoats.fragments.HistoryFragment p2)
    {
        this.this$0 = p2;
        this.success = 0;
        this.errors = "";
        this.htmlResponse = "";
        return;
    }

    synthetic HistoryFragment$GetHistory(org.owasp.goatdroid.fourgoats.fragments.HistoryFragment p1, org.owasp.goatdroid.fourgoats.fragments.HistoryFragment$GetHistory p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs java.util.ArrayList doInBackground(Void[] p8)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v3 = v4_1.getSessionToken();
        org.owasp.goatdroid.fourgoats.rest.history.HistoryRequest v2_0 = new org.owasp.goatdroid.fourgoats.rest.history.HistoryRequest(this.this$0.context);
        try {
            if (!v3.equals("")) {
                v1_1 = v2_0.getHistory(v3);
                if ((v1_1.size() <= 0) || (!((String) ((java.util.HashMap) v1_1.get(0)).get("success")).equals("true"))) {
                    v4_1.close();
                } else {
                    this.success = 1;
                    this.htmlResponse = this.this$0.generateHistoryHTML(v1_1);
                }
            } else {
                this.errors = "Invalid session";
            }
        } catch (String v5_17) {
            v4_1.close();
            throw v5_17;
        } catch (Exception v0) {
            this.errors = "Could not contact the remote service";
            v4_1.close();
        }
        return v1_1;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((java.util.ArrayList) p1));
        return;
    }

    public void onPostExecute(java.util.ArrayList p5)
    {
        if (!this.success) {
            if (!this.errors.equals("Invalid session")) {
                if (!this.errors.equals("You have never checked in")) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, this.errors, 1);
                } else {
                    this.this$0.noCheckinsTextView.setVisibility(1);
                }
            } else {
                this.this$0.launchLogin();
            }
        } else {
            this.this$0.webview.loadData(this.htmlResponse, "text/html", "UTF-8");
        }
        return;
    }

    public HistoryFragment()
    {
        return;
    }

    public String generateHistoryHTML(java.util.ArrayList p8)
    {
        String v1_0 = "<html><head><style type=\"text/css\">body{color: white; background-color: #000;}</style></head><body>";
        if (p8.size() <= 1) {
            v1_0 = new StringBuilder(String.valueOf("<html><head><style type=\"text/css\">body{color: white; background-color: #000;}</style></head><body>")).append("<p><p>You have not checked in yet, grasshopper").toString();
        } else {
            String v4_0 = p8.iterator();
            while (v4_0.hasNext()) {
                java.util.HashMap v0_1 = ((java.util.HashMap) v4_0.next());
                if ((v0_1.get("venueName") != null) && ((v0_1.get("checkinID") != null) && ((v0_1.get("dateTime") != null) && ((v0_1.get("latitude") != null) && ((v0_1.get("longitude") != null) && (v0_1.get("venueWebsite") != null)))))) {
                    String[] v2 = ((String) v0_1.get("dateTime")).split(" ");
                    v1_0 = new StringBuilder(String.valueOf(v1_0)).append("<p><b>").append(((String) v0_1.get("venueName"))).append("</b><br><b>Date:</b> ").append(v2[0]).append("<br><b>Time:</b> ").append(v2[1]).append("<br><b>Latitude:</b> ").append(((String) v0_1.get("latitude"))).append("<br><b>Longitude:</b> ").append(((String) v0_1.get("longitude"))).append("<br>").append("<button style=\"color: white; background-color:#2E9AFE\" ").append("type=\"button\" onclick=\"window.jsInterface.launchViewCheckinActivity(\'").append(((String) v0_1.get("venueName"))).append("\',\'").append(((String) v0_1.get("venueWebsite"))).append("\',\'").append(((String) v0_1.get("dateTime"))).append("\',\'").append(((String) v0_1.get("latitude"))).append("\',\'").append(((String) v0_1.get("longitude"))).append("\',\'").append(((String) v0_1.get("checkinID"))).append("\')\">View Checkin</button><br>").toString();
                }
            }
        }
        return new StringBuilder(String.valueOf(v1_0)).append("</body></html>").toString();
    }

    public void launchLogin()
    {
        this.startActivity(new android.content.Intent(this.context, org.owasp.goatdroid.fourgoats.activities.Login));
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.context = this.getActivity();
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p10, android.view.ViewGroup p11, android.os.Bundle p12)
    {
        android.view.View v1 = p10.inflate(2130903078, p11, 0);
        this.webview = ((android.webkit.WebView) v1.findViewById(2130968651));
        android.webkit.WebSettings v2 = this.webview.getSettings();
        this.webview.addJavascriptInterface(new org.owasp.goatdroid.fourgoats.javascriptinterfaces.ViewCheckinJSInterface(this.context), "jsInterface");
        this.webview.setBackgroundColor(android.graphics.Color.parseColor("#000000"));
        v2.setJavaScriptEnabled(1);
        this.noCheckinsTextView = ((android.widget.TextView) v1.findViewById(2130968650));
        org.owasp.goatdroid.fourgoats.fragments.HistoryFragment$GetHistory v0_1 = new org.owasp.goatdroid.fourgoats.fragments.HistoryFragment$GetHistory(this, 0);
        Void[] v3_8 = new Void[2];
        v3_8[0] = 0;
        v3_8[1] = 0;
        v0_1.execute(v3_8);
        return v1;
    }

    MyFriends$1(org.owasp.goatdroid.fourgoats.fragments.MyFriends p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p8, android.view.View p9, int p10, long p11)
    {
        String v4 = ((String) this.this$0.listView.getItemAtPosition(p10)).split("\n")[1];
        android.content.Intent v0_1 = new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.ViewProfile);
        android.os.Bundle v1_1 = new android.os.Bundle();
        v1_1.putString("userName", v4);
        v0_1.putExtras(v1_1);
        this.this$0.startActivity(v0_1);
        return;
    }

    private MyFriends$SearchFriends(org.owasp.goatdroid.fourgoats.fragments.MyFriends p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic MyFriends$SearchFriends(org.owasp.goatdroid.fourgoats.fragments.MyFriends p1, org.owasp.goatdroid.fourgoats.fragments.MyFriends$SearchFriends p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs String[] doInBackground(Void[] p10)
    {
        new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.getActivity());
        String v3 = v4_1.getSessionToken();
        org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest v2_0 = new org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest(this.this$0.getActivity());
        try {
            String[] v6_9;
            if (!v3.equals("")) {
                java.util.ArrayList v5_1 = v2_0.getFriends(v3);
                if (v5_1.size() <= 0) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.getActivity(), "Something weird happened", 1);
                    v6_9 = new String[0];
                    v4_1.close();
                } else {
                    if (!((String) ((java.util.HashMap) v5_1.get(0)).get("success")).equals("true")) {
                        v6_9 = new String[0];
                        v4_1.close();
                    } else {
                        v6_9 = this.this$0.bindListView(v5_1);
                        v4_1.close();
                    }
                }
            } else {
                this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
                v6_9 = new String[0];
                v4_1.close();
            }
        } catch (String[] v6_22) {
            v4_1.close();
            throw v6_22;
        } catch (Exception v0) {
            this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
            v6_9 = new String[0];
            v4_1.close();
        }
        return v6_9;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String[]) p1));
        return;
    }

    public void onPostExecute(String[] p5)
    {
        if (this.this$0.getActivity() != null) {
            if (p5.length <= 0) {
                this.this$0.noFriendsTextView.setVisibility(1);
            } else {
                this.this$0.listView.setAdapter(new android.widget.ArrayAdapter(this.this$0.getActivity(), 17367043, p5));
            }
        }
        return;
    }

    public MyFriends()
    {
        return;
    }

    public String[] bindListView(java.util.ArrayList p7)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        java.util.Iterator v4 = p7.iterator();
        while (v4.hasNext()) {
            java.util.HashMap v0_1 = ((java.util.HashMap) v4.next());
            if ((v0_1.get("firstName") != null) && ((v0_1.get("lastName") != null) && ((v0_1.get("userID") != null) && (v0_1.get("userName") != null)))) {
                v1_1.add(new StringBuilder(String.valueOf(((String) v0_1.get("firstName")))).append(" ").append(((String) v0_1.get("lastName"))).append("\n").append(((String) v0_1.get("userName"))).toString());
            }
        }
        String[] v2_0 = new String[v1_1.size()];
        return ((String[]) v1_1.toArray(v2_0));
    }

    public android.view.View onCreateView(android.view.LayoutInflater p7, android.view.ViewGroup p8, android.os.Bundle p9)
    {
        android.view.View v1 = p7.inflate(2130903082, p8, 0);
        this.noFriendsTextView = ((android.widget.TextView) v1.findViewById(2130968654));
        this.listView = ((android.widget.ListView) v1.findViewById(2130968655));
        this.listView.setOnItemClickListener(new org.owasp.goatdroid.fourgoats.fragments.MyFriends$1(this));
        org.owasp.goatdroid.fourgoats.fragments.MyFriends$SearchFriends v0_1 = new org.owasp.goatdroid.fourgoats.fragments.MyFriends$SearchFriends(this, 0);
        Void[] v2_6 = new Void[2];
        v2_6[0] = 0;
        v2_6[1] = 0;
        v0_1.execute(v2_6);
        return v1;
    }

    private MyRewards$GetMyRewards(org.owasp.goatdroid.fourgoats.fragments.MyRewards p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic MyRewards$GetMyRewards(org.owasp.goatdroid.fourgoats.fragments.MyRewards p1, org.owasp.goatdroid.fourgoats.fragments.MyRewards$GetMyRewards p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs String[] doInBackground(Void[] p10)
    {
        new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v5_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v4 = v5_1.getSessionToken();
        v5_1.close();
        org.owasp.goatdroid.fourgoats.rest.rewards.RewardsRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.rewards.RewardsRequest(this.this$0.context);
        try {
            String[] v6_6;
            if (!v4.equals("")) {
                java.util.ArrayList v3_1 = v2_1.getMyRewards(v4);
                if (v3_1.size() <= 1) {
                    v6_6 = new String[0];
                } else {
                    v6_6 = this.this$0.bindListView(v3_1);
                }
            } else {
                this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
                v6_6 = new String[0];
            }
        } catch (Exception v0) {
            this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
            v6_6 = new String[0];
        }
        return v6_6;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String[]) p1));
        return;
    }

    public void onPostExecute(String[] p5)
    {
        if (this.this$0.getActivity() != null) {
            if (p5.length <= 0) {
                this.this$0.noRewardsTextView.setVisibility(1);
            } else {
                this.this$0.listView.setAdapter(new android.widget.ArrayAdapter(this.this$0.getActivity(), 17367043, p5));
            }
        }
        return;
    }

    public MyRewards()
    {
        return;
    }

    public String[] bindListView(java.util.ArrayList p7)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        java.util.Iterator v4 = p7.iterator();
        while (v4.hasNext()) {
            java.util.HashMap v0_1 = ((java.util.HashMap) v4.next());
            if ((v0_1.get("rewardName") != null) && ((v0_1.get("rewardDescription") != null) && (v0_1.get("timeEarned") != null))) {
                v1_1.add(new StringBuilder(String.valueOf(((String) v0_1.get("rewardName")))).append("\n").append(((String) v0_1.get("rewardDescription"))).append("\nEarned On: ").append(((String) v0_1.get("timeEarned"))).toString());
            }
        }
        String[] v2_0 = new String[v1_1.size()];
        return ((String[]) v1_1.toArray(v2_0));
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.context = this.getActivity();
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p6, android.view.ViewGroup p7, android.os.Bundle p8)
    {
        android.view.View v1 = p6.inflate(2130903083, p7, 0);
        this.listView = ((android.widget.ListView) v1.findViewById(2130968657));
        this.noRewardsTextView = ((android.widget.TextView) v1.findViewById(2130968656));
        org.owasp.goatdroid.fourgoats.fragments.MyRewards$GetMyRewards v0_1 = new org.owasp.goatdroid.fourgoats.fragments.MyRewards$GetMyRewards(this, 0);
        Void[] v2_4 = new Void[2];
        v2_4[0] = 0;
        v2_4[1] = 0;
        v0_1.execute(v2_4);
        return v1;
    }

    PendingFriendRequests$1(org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p7, android.view.View p8, int p9, long p10)
    {
        String[] v3 = ((String) this.this$0.listView.getItemAtPosition(p9)).split("\n");
        android.content.Intent v0_0 = new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.ViewFriendRequest);
        android.os.Bundle v1_1 = new android.os.Bundle();
        v1_1.putString("userName", v3[0]);
        v1_1.putString("fullName", v3[1]);
        v0_0.putExtras(v1_1);
        this.this$0.startActivity(v0_0);
        return;
    }

    private PendingFriendRequests$GetPendingFriendRequests(org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic PendingFriendRequests$GetPendingFriendRequests(org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests p1, org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests$GetPendingFriendRequests p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs String[] doInBackground(Void[] p11)
    {
        new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v5_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.getActivity());
        String v4 = v5_1.getSessionToken();
        v5_1.close();
        org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest v3_1 = new org.owasp.goatdroid.fourgoats.rest.friends.FriendRequest(this.this$0.getActivity());
        try {
            String[] v6_6;
            if (!v4.equals("")) {
                java.util.ArrayList v2_1 = v3_1.getPendingFriendRequests(v4);
                if (v2_1.size() <= 0) {
                    v6_6 = new String[0];
                } else {
                    if (!((String) ((java.util.HashMap) v2_1.get(0)).get("success")).equals("true")) {
                        org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.getActivity(), "Something weird happened", 1);
                        v6_6 = new String[0];
                    } else {
                        if (v2_1.size() <= 1) {
                            v6_6 = new String[0];
                        } else {
                            v6_6 = this.this$0.bindListView(v2_1);
                        }
                    }
                }
            } else {
                this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
                v6_6 = new String[0];
            }
        } catch (Exception v0) {
            this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
            v6_6 = new String[0];
        }
        return v6_6;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String[]) p1));
        return;
    }

    public void onPostExecute(String[] p5)
    {
        if (this.this$0.getActivity() != null) {
            if (p5.length <= 0) {
                this.this$0.noPendingFriendRequestsTextView.setVisibility(1);
            } else {
                this.this$0.listView.setAdapter(new android.widget.ArrayAdapter(this.this$0.getActivity(), 17367043, p5));
            }
        }
        return;
    }

    public PendingFriendRequests()
    {
        return;
    }

    public String[] bindListView(java.util.ArrayList p7)
    {
        java.util.ArrayList v2_1 = new java.util.ArrayList();
        java.util.Iterator v4 = p7.iterator();
        while (v4.hasNext()) {
            java.util.HashMap v0_1 = ((java.util.HashMap) v4.next());
            if ((v0_1.get("userName") != null) && ((v0_1.get("firstName") != null) && (v0_1.get("lastName") != null))) {
                v2_1.add(new StringBuilder(String.valueOf(((String) v0_1.get("userName")))).append("\n").append(((String) v0_1.get("firstName"))).append(" ").append(((String) v0_1.get("lastName"))).toString());
            }
        }
        String[] v1_0 = new String[v2_1.size()];
        return ((String[]) v2_1.toArray(v1_0));
    }

    public android.view.View onCreateView(android.view.LayoutInflater p7, android.view.ViewGroup p8, android.os.Bundle p9)
    {
        android.view.View v1 = p7.inflate(2130903084, p8, 0);
        this.noPendingFriendRequestsTextView = ((android.widget.TextView) v1.findViewById(2130968658));
        this.listView = ((android.widget.ListView) v1.findViewById(2130968659));
        this.listView.setOnItemClickListener(new org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests$1(this));
        org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests$GetPendingFriendRequests v0_1 = new org.owasp.goatdroid.fourgoats.fragments.PendingFriendRequests$GetPendingFriendRequests(this, 0);
        Void[] v2_6 = new Void[2];
        v2_6[0] = 0;
        v2_6[1] = 0;
        v0_1.execute(v2_6);
        return v1;
    }

    ResetUserPasswords$1(org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p8, android.view.View p9, int p10, long p11)
    {
        String v3 = ((String) this.this$0.listView.getItemAtPosition(p10)).split("\n")[1];
        android.content.Intent v0_1 = new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.DoAdminPasswordReset);
        android.os.Bundle v4_1 = new android.os.Bundle();
        v4_1.putString("userName", v3);
        v0_1.putExtras(v4_1);
        this.this$0.startActivity(v0_1);
        return;
    }

    private ResetUserPasswords$SearchForUsers(org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ResetUserPasswords$SearchForUsers(org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords p1, org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords$SearchForUsers p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs String[] doInBackground(Void[] p11)
    {
        new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.context);
        String v3 = v4_1.getSessionToken();
        v4_1.close();
        org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.admin.AdminRequest(this.this$0.context);
        try {
            String v6_22;
            if (!v3.equals("")) {
                java.util.ArrayList v5_1 = v2_1.getUsers(v3);
                if (v5_1.size() <= 0) {
                    org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, "Something weird happened", 1);
                    v6_22 = new String[0];
                } else {
                    if (!((String) ((java.util.HashMap) v5_1.get(0)).get("success")).equals("true")) {
                        org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.context, ((String) ((java.util.HashMap) v5_1.get(1)).get("errors")), 1);
                    } else {
                        v6_22 = this.this$0.bindListView(v5_1);
                    }
                }
            } else {
                this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
            }
        } catch (Exception v0) {
            this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
        }
        return v6_22;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String[]) p1));
        return;
    }

    public void onPostExecute(String[] p4)
    {
        if (this.this$0.getActivity() != null) {
            this.this$0.listView.setAdapter(new org.owasp.goatdroid.fourgoats.adapter.SearchForFriendsAdapter(this.this$0.getActivity(), p4));
        }
        return;
    }

    public ResetUserPasswords()
    {
        return;
    }

    public String[] bindListView(java.util.ArrayList p7)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        java.util.Iterator v4 = p7.iterator();
        while (v4.hasNext()) {
            java.util.HashMap v0_1 = ((java.util.HashMap) v4.next());
            if ((v0_1.get("firstName") != null) && ((v0_1.get("lastName") != null) && (v0_1.get("userName") != null))) {
                v1_1.add(new StringBuilder(String.valueOf(((String) v0_1.get("firstName")))).append(" ").append(((String) v0_1.get("lastName"))).append("\n").append(((String) v0_1.get("userName"))).toString());
            }
        }
        String[] v2_0 = new String[v1_1.size()];
        return ((String[]) v1_1.toArray(v2_0));
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.context = this.getActivity();
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p7, android.view.ViewGroup p8, android.os.Bundle p9)
    {
        android.view.View v1 = p7.inflate(2130903088, p8, 0);
        this.listView = ((android.widget.ListView) v1.findViewById(2130968633));
        this.listView.setOnItemClickListener(new org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords$1(this));
        org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords$SearchForUsers v0_1 = new org.owasp.goatdroid.fourgoats.fragments.ResetUserPasswords$SearchForUsers(this, 0);
        Void[] v2_2 = new Void[2];
        v2_2[0] = 0;
        v2_2[1] = 0;
        v0_1.execute(v2_2);
        return v1;
    }

    SearchForFriends$1(org.owasp.goatdroid.fourgoats.fragments.SearchForFriends p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p8, android.view.View p9, int p10, long p11)
    {
        String v4 = ((String) this.this$0.listView.getItemAtPosition(p10)).split("\n")[1];
        android.content.Intent v0_1 = new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.ViewProfile);
        android.os.Bundle v1_1 = new android.os.Bundle();
        v1_1.putString("userName", v4);
        v0_1.putExtras(v1_1);
        this.this$0.startActivity(v0_1);
        return;
    }

    private SearchForFriends$SearchFriends(org.owasp.goatdroid.fourgoats.fragments.SearchForFriends p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic SearchForFriends$SearchFriends(org.owasp.goatdroid.fourgoats.fragments.SearchForFriends p1, org.owasp.goatdroid.fourgoats.fragments.SearchForFriends$SearchFriends p2)
    {
        this(p1);
        return;
    }

    protected varargs bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs String[] doInBackground(Void[] p11)
    {
        new java.util.ArrayList();
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v4_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.this$0.getActivity());
        String v3 = v4_1.getSessionToken();
        v4_1.close();
        org.owasp.goatdroid.fourgoats.rest.searchforfriends.SearchForFriendsRequest v2_1 = new org.owasp.goatdroid.fourgoats.rest.searchforfriends.SearchForFriendsRequest(this.this$0.getActivity());
        try {
            String[] v6_6;
            if (!v3.equals("")) {
                java.util.ArrayList v5_1 = v2_1.getUsers(v3);
                if (v5_1.size() <= 0) {
                    v6_6 = new String[0];
                } else {
                    if (!((String) ((java.util.HashMap) v5_1.get(0)).get("success")).equals("true")) {
                        org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.this$0.getActivity(), "Something weird happened", 1);
                        v6_6 = new String[0];
                    } else {
                        v6_6 = this.this$0.bindListView(v5_1);
                    }
                }
            } else {
                this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
                v6_6 = new String[0];
            }
        } catch (Exception v0) {
            this.this$0.startActivity(new android.content.Intent(this.this$0.getActivity(), org.owasp.goatdroid.fourgoats.activities.Login));
            v6_6 = new String[0];
        }
        return v6_6;
    }

    public bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String[]) p1));
        return;
    }

    public void onPostExecute(String[] p4)
    {
        if (this.this$0.getActivity() != null) {
            this.this$0.listView.setAdapter(new org.owasp.goatdroid.fourgoats.adapter.SearchForFriendsAdapter(this.this$0.getActivity(), p4));
        }
        return;
    }

    public SearchForFriends()
    {
        return;
    }

    public String[] bindListView(java.util.ArrayList p7)
    {
        java.util.ArrayList v1_1 = new java.util.ArrayList();
        java.util.Iterator v4 = p7.iterator();
        while (v4.hasNext()) {
            java.util.HashMap v0_1 = ((java.util.HashMap) v4.next());
            if ((v0_1.get("firstName") != null) && ((v0_1.get("lastName") != null) && ((v0_1.get("userID") != null) && (v0_1.get("userName") != null)))) {
                v1_1.add(new StringBuilder(String.valueOf(((String) v0_1.get("firstName")))).append(" ").append(((String) v0_1.get("lastName"))).append("\n").append(((String) v0_1.get("userName"))).toString());
            }
        }
        String[] v2_0 = new String[v1_1.size()];
        return ((String[]) v1_1.toArray(v2_0));
    }

    public android.view.View onCreateView(android.view.LayoutInflater p7, android.view.ViewGroup p8, android.os.Bundle p9)
    {
        android.view.View v1 = p7.inflate(2130903090, p8, 0);
        this.listView = ((android.widget.ListView) v1.findViewById(2130968673));
        this.listView.setOnItemClickListener(new org.owasp.goatdroid.fourgoats.fragments.SearchForFriends$1(this));
        org.owasp.goatdroid.fourgoats.fragments.SearchForFriends$SearchFriends v0_1 = new org.owasp.goatdroid.fourgoats.fragments.SearchForFriends$SearchFriends(this, 0);
        Void[] v2_2 = new Void[2];
        v2_2[0] = 0;
        v2_2[1] = 0;
        v0_1.execute(v2_2);
        return v1;
    }

    public SmsJSInterface(android.content.Context p1)
    {
        this.mContext = p1;
        return;
    }

    public void launchSendSMSActivity(String p5, String p6)
    {
        android.content.Intent v1_1 = new android.content.Intent(this.mContext, org.owasp.goatdroid.fourgoats.activities.SendSMS);
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("venueName", p5);
        v0_1.putString("dateTime", p6);
        v1_1.putExtras(v0_1);
        this.mContext.startActivity(v1_1);
        return;
    }

    public void sendSMS(String p7, String p8)
    {
        android.telephony.SmsManager.getDefault().sendTextMessage(p7, 0, p8, 0, 0);
        return;
    }

    public ViewCheckinJSInterface(android.content.Context p1)
    {
        this.mContext = p1;
        return;
    }

    public void deleteComment(String p12, String p13, String p14, String p15, String p16, String p17, String p18)
    {
        org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper v7_1 = new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.mContext);
        String v6 = v7_1.getSessionToken();
        v7_1.close();
        try {
            java.util.HashMap v2 = new org.owasp.goatdroid.fourgoats.rest.comments.CommentsRequest(this.mContext).removeComment(v6, p12);
        } catch (Exception v3) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.mContext, "Something weird happened", 1);
            return;
        }
        if (!((String) v2.get("success")).equals("true")) {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.mContext, ((String) v2.get("errors")), 1);
            return;
        } else {
            org.owasp.goatdroid.fourgoats.misc.Utils.makeToast(this.mContext, "Comment has been removed!", 1);
            android.content.Intent v4_1 = new android.content.Intent(this.mContext, org.owasp.goatdroid.fourgoats.activities.ViewCheckin);
            android.os.Bundle v1_1 = new android.os.Bundle();
            v1_1.putString("venueName", p13);
            v1_1.putString("venueWebsite", p14);
            v1_1.putString("dateTime", p15);
            v1_1.putString("latitude", p16);
            v1_1.putString("longitude", p17);
            v1_1.putString("checkinID", p18);
            v4_1.putExtras(v1_1);
            this.mContext.startActivity(v4_1);
            return;
        }
    }

    public void launchDoCommentActivity(String p5, String p6, String p7, String p8, String p9, String p10)
    {
        android.content.Intent v1_1 = new android.content.Intent(this.mContext, org.owasp.goatdroid.fourgoats.activities.DoComment);
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("venueName", p5);
        v0_1.putString("venueWebsite", p6);
        v0_1.putString("dateTime", p7);
        v0_1.putString("latitude", p8);
        v0_1.putString("longitude", p9);
        v0_1.putString("checkinID", p10);
        v1_1.putExtras(v0_1);
        this.mContext.startActivity(v1_1);
        return;
    }

    public void launchViewCheckinActivity(String p5, String p6, String p7, String p8, String p9, String p10)
    {
        android.content.Intent v1_1 = new android.content.Intent(this.mContext, org.owasp.goatdroid.fourgoats.activities.ViewCheckin);
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("venueName", p5);
        v0_1.putString("venueWebsite", p6);
        v0_1.putString("dateTime", p7);
        v0_1.putString("latitude", p8);
        v0_1.putString("longitude", p9);
        v0_1.putString("checkinID", p10);
        v1_1.putExtras(v0_1);
        this.mContext.startActivity(v1_1);
        return;
    }

    public WebViewJSInterface(android.content.Context p1)
    {
        this.mContext = p1;
        return;
    }

    public void launchWebView(String p5)
    {
        android.content.Intent v1_1 = new android.content.Intent(this.mContext, org.owasp.goatdroid.fourgoats.activities.GenericWebViewActivity);
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("url", p5);
        v1_1.putExtras(v0_1);
        this.mContext.startActivity(v1_1);
        return;
    }

    public Constants()
    {
        return;
    }

    public Utils()
    {
        return;
    }

    public static String getCurrentDateTime()
    {
        return new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(java.util.Calendar.getInstance().getTime());
    }

    public static String getDestinationInfo(android.content.Context p5)
    {
        android.content.SharedPreferences v1 = p5.getSharedPreferences("destination_info", 1);
        return new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf("")).append(v1.getString("host", "")).toString())).append(":").toString())).append(v1.getString("port", "")).toString();
    }

    public static java.util.HashMap getDestinationInfoMap(android.content.Context p5)
    {
        java.util.HashMap v0_1 = new java.util.HashMap();
        android.content.SharedPreferences v1 = p5.getSharedPreferences("destination_info", 1);
        v0_1.put("host", v1.getString("host", ""));
        v0_1.put("port", v1.getString("port", ""));
        return v0_1;
    }

    public static java.util.HashMap getProxyMap(android.content.Context p5)
    {
        java.util.HashMap v0_1 = new java.util.HashMap();
        android.content.SharedPreferences v1 = p5.getSharedPreferences("proxy_info", 1);
        v0_1.put("proxyHost", v1.getString("proxyHost", ""));
        v0_1.put("proxyPort", v1.getString("proxyPort", ""));
        return v0_1;
    }

    public static void makeToast(android.content.Context p1, String p2, int p3)
    {
        android.widget.Toast.makeText(p1, p2, p3).show();
        return;
    }

    public static void writeDestinationInfo(android.content.Context p4, String p5, String p6)
    {
        android.content.SharedPreferences$Editor v1 = p4.getSharedPreferences("destination_info", 1).edit();
        v1.putString("host", p5);
        v1.putString("port", p6);
        v1.commit();
        return;
    }

    public static void writeProxyInfo(android.content.Context p4, String p5, String p6)
    {
        android.content.SharedPreferences$Editor v1 = p4.getSharedPreferences("proxy_info", 1).edit();
        v1.putString("proxyHost", p5);
        v1.putString("proxyPort", p6);
        v1.commit();
        return;
    }

    static synthetic int[] $SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod()
    {
        int[] v0_0 = org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient.$SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod;
        if (v0_0 == null) {
            v0_0 = new int[org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.values().length];
            try {
                org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET.ordinal()[NoSuchFieldError v1_3] = 1;
                try {
                    org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST.ordinal()[NoSuchFieldError v1_1] = 2;
                } catch (NoSuchFieldError v1) {
                }
                org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient.$SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod = v0_0;
            } catch (NoSuchFieldError v1) {
            }
        }
        return v0_0;
    }

    public AuthenticatedRestClient(String p2, String p3)
    {
        this.url = p2;
        this.sessionToken = p3;
        this.params = new java.util.ArrayList();
        this.headers = new java.util.ArrayList();
        return;
    }

    private static String convertStreamToString(java.io.InputStream p5)
    {
        java.io.BufferedReader v1_1 = new java.io.BufferedReader(new java.io.InputStreamReader(p5));
        StringBuilder v2_1 = new StringBuilder();
        try {
            while(true) {
                String v0 = v1_1.readLine();
                v2_1.append(new StringBuilder(String.valueOf(v0)).append("\n").toString());
            }
            try {
                p5.close();
            } catch (java.io.IOException v3) {
            }
            return v2_1.toString();
        } catch (java.io.IOException v3_6) {
            try {
                p5.close();
            } catch (java.io.IOException v4) {
            }
            throw v3_6;
        } catch (java.io.IOException v3) {
            try {
                p5.close();
            } catch (java.io.IOException v3) {
            }
            return v2_1.toString();
        }
        if (v0 != null) {
        }
    }

    private void executeRequest(org.apache.http.client.methods.HttpUriRequest p12, String p13, android.content.Context p14)
    {
        org.apache.http.client.HttpClient v0 = org.owasp.goatdroid.fourgoats.requestresponse.CustomSSLSocketFactory.getNewHttpClient();
        java.util.HashMap v7 = org.owasp.goatdroid.fourgoats.misc.Utils.getProxyMap(p14);
        String v6_1 = ((String) v7.get("proxyHost"));
        String v8_1 = ((String) v7.get("proxyPort"));
        if ((!v6_1.equals("")) && (!v8_1.equals(""))) {
            v0.getParams().setParameter("http.route.default-proxy", new org.apache.http.HttpHost(v6_1, Integer.parseInt(v8_1)));
        }
        try {
            org.apache.http.HttpResponse v3 = v0.execute(p12);
            this.responseCode = v3.getStatusLine().getStatusCode();
            this.message = v3.getStatusLine().getReasonPhrase();
            org.apache.http.HttpEntity v2 = v3.getEntity();
        } catch (java.io.IOException v1) {
            v0.getConnectionManager().shutdown();
            return;
        } catch (java.io.IOException v1) {
            v0.getConnectionManager().shutdown();
            return;
        }
        if (v2 == null) {
            return;
        } else {
            java.io.InputStream v4 = v2.getContent();
            this.response = org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient.convertStreamToString(v4);
            v4.close();
            return;
        }
    }

    public void AddHeader(String p3, String p4)
    {
        this.headers.add(new org.apache.http.message.BasicNameValuePair(p3, p4));
        return;
    }

    public void AddParam(String p3, String p4)
    {
        this.params.add(new org.apache.http.message.BasicNameValuePair(p3, p4));
        return;
    }

    public void Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod p10, android.content.Context p11)
    {
        switch (org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient.$SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod()[p10.ordinal()]) {
            case 1:
                String v0 = "";
                if (!this.params.isEmpty()) {
                    v0 = new StringBuilder(String.valueOf("")).append("?").toString();
                    String v5_23 = this.params.iterator();
                    while (v5_23.hasNext()) {
                        org.apache.http.NameValuePair v2_1 = ((org.apache.http.NameValuePair) v5_23.next());
                        String v3 = new StringBuilder(String.valueOf(v2_1.getName())).append("=").append(java.net.URLEncoder.encode(v2_1.getValue(), "UTF-8")).toString();
                        if (v0.length() <= 1) {
                            v0 = new StringBuilder(String.valueOf(v0)).append(v3).toString();
                        } else {
                            v0 = new StringBuilder(String.valueOf(v0)).append("&").append(v3).toString();
                        }
                    }
                }
                org.apache.http.client.methods.HttpGet v4_1 = new org.apache.http.client.methods.HttpGet(new StringBuilder(String.valueOf(this.url)).append(v0).toString());
                String v5_7 = this.headers.iterator();
                while (v5_7.hasNext()) {
                    org.apache.http.NameValuePair v1_1 = ((org.apache.http.NameValuePair) v5_7.next());
                    v4_1.addHeader(v1_1.getName(), v1_1.getValue());
                }
                v4_1.addHeader("Cookie", new StringBuilder("SESS=").append(this.sessionToken).toString());
                this.executeRequest(v4_1, this.url, p11);
                break;
            case 2:
                org.apache.http.client.methods.HttpGet v4_3 = new org.apache.http.client.methods.HttpPost(this.url);
                String v5_2 = this.headers.iterator();
                while (v5_2.hasNext()) {
                    org.apache.http.NameValuePair v1_3 = ((org.apache.http.NameValuePair) v5_2.next());
                    v4_3.addHeader(v1_3.getName(), v1_3.getValue());
                }
                if (!this.params.isEmpty()) {
                    v4_3.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(this.params, "UTF-8"));
                }
                v4_3.addHeader("Cookie", new StringBuilder("SESS=").append(this.sessionToken).toString());
                this.executeRequest(v4_3, this.url, p11);
                break;
        }
        return;
    }

    public String getErrorMessage()
    {
        return this.message;
    }

    public String getResponse()
    {
        return this.response;
    }

    public int getResponseCode()
    {
        return this.responseCode;
    }

    CustomSSLSocketFactory$1(org.owasp.goatdroid.fourgoats.requestresponse.CustomSSLSocketFactory p1)
    {
        this.this$0 = p1;
        return;
    }

    public void checkClientTrusted(java.security.cert.X509Certificate[] p1, String p2)
    {
        return;
    }

    public void checkServerTrusted(java.security.cert.X509Certificate[] p1, String p2)
    {
        return;
    }

    public java.security.cert.X509Certificate[] getAcceptedIssuers()
    {
        return 0;
    }

    public CustomSSLSocketFactory(java.security.KeyStore p6)
    {
        super(p6);
        super.sslContext = javax.net.ssl.SSLContext.getInstance("TLS");
        javax.net.ssl.SSLContext v1_2 = super.sslContext;
        javax.net.ssl.TrustManager[] v2_0 = new javax.net.ssl.TrustManager[1];
        v2_0[0] = new org.owasp.goatdroid.fourgoats.requestresponse.CustomSSLSocketFactory$1(super);
        v1_2.init(0, v2_0, 0);
        return;
    }

    public static org.apache.http.client.HttpClient getNewHttpClient()
    {
        try {
            java.security.KeyStore v5 = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType());
            v5.load(0, 0);
            org.owasp.goatdroid.fourgoats.requestresponse.CustomSSLSocketFactory v4_1 = new org.owasp.goatdroid.fourgoats.requestresponse.CustomSSLSocketFactory(v5);
            v4_1.setHostnameVerifier(org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
            org.apache.http.params.BasicHttpParams v2_1 = new org.apache.http.params.BasicHttpParams();
            org.apache.http.conn.scheme.SchemeRegistry v3_1 = new org.apache.http.conn.scheme.SchemeRegistry();
            v3_1.register(new org.apache.http.conn.scheme.Scheme("http", org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory(), 80));
            v3_1.register(new org.apache.http.conn.scheme.Scheme("https", v4_1, 443));
            org.apache.http.impl.client.DefaultHttpClient v6_6 = new org.apache.http.impl.client.DefaultHttpClient(new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager(v2_1, v3_1), v2_1);
        } catch (Exception v1) {
            v6_6 = new org.apache.http.impl.client.DefaultHttpClient();
        }
        return v6_6;
    }

    public java.net.Socket createSocket()
    {
        return this.sslContext.getSocketFactory().createSocket();
    }

    public java.net.Socket createSocket(java.net.Socket p2, String p3, int p4, boolean p5)
    {
        return this.sslContext.getSocketFactory().createSocket(p2, p3, p4, p5);
    }

    static RequestMethod()
    {
        org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET = new org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod("GET", 0);
        org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST = new org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod("POST", 1);
        org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod[] v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod[2];
        v0_1[0] = org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET;
        v0_1[1] = org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST;
        org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.ENUM$VALUES = v0_1;
        return;
    }

    private RequestMethod(String p1, int p2)
    {
        super(p1, p2);
        return;
    }

    public static org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod valueOf(String p1)
    {
        return ((org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod) Enum.valueOf(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod, p1));
    }

    public static org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod[] values()
    {
        org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod[] v0 = org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.ENUM$VALUES;
        int v1 = v0.length;
        org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod[] v2 = new org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod[v1];
        System.arraycopy(v0, 0, v2, 0, v1);
        return v2;
    }

    public ResponseBase()
    {
        return;
    }

    public static java.util.HashMap getSuccessAndErrors(String p5)
    {
        java.util.HashMap v2_1 = new java.util.HashMap();
        try {
            if (!new org.json.JSONObject(p5).getString("success").equals("false")) {
                v2_1.put("success", "true");
            } else {
                v2_1.put("success", "false");
            }
        } catch (org.json.JSONException v0) {
            v2_1.put("success", "false");
        }
        return v2_1;
    }

    static synthetic int[] $SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod()
    {
        int[] v0_0 = org.owasp.goatdroid.fourgoats.requestresponse.RestClient.$SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod;
        if (v0_0 == null) {
            v0_0 = new int[org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.values().length];
            try {
                org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET.ordinal()[NoSuchFieldError v1_3] = 1;
                try {
                    org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST.ordinal()[NoSuchFieldError v1_1] = 2;
                } catch (NoSuchFieldError v1) {
                }
                org.owasp.goatdroid.fourgoats.requestresponse.RestClient.$SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod = v0_0;
            } catch (NoSuchFieldError v1) {
            }
        }
        return v0_0;
    }

    public RestClient(String p2)
    {
        this.url = p2;
        this.params = new java.util.ArrayList();
        this.headers = new java.util.ArrayList();
        return;
    }

    private static String convertStreamToString(java.io.InputStream p5)
    {
        java.io.BufferedReader v1_1 = new java.io.BufferedReader(new java.io.InputStreamReader(p5));
        StringBuilder v2_1 = new StringBuilder();
        try {
            while(true) {
                String v0 = v1_1.readLine();
                v2_1.append(new StringBuilder(String.valueOf(v0)).append("\n").toString());
            }
            try {
                p5.close();
            } catch (java.io.IOException v3) {
            }
            return v2_1.toString();
        } catch (java.io.IOException v3_6) {
            try {
                p5.close();
            } catch (java.io.IOException v4) {
            }
            throw v3_6;
        } catch (java.io.IOException v3) {
            try {
                p5.close();
            } catch (java.io.IOException v3) {
            }
            return v2_1.toString();
        }
        if (v0 != null) {
        }
    }

    private void executeRequest(org.apache.http.client.methods.HttpUriRequest p12, String p13, android.content.Context p14)
    {
        org.apache.http.client.HttpClient v0 = org.owasp.goatdroid.fourgoats.requestresponse.CustomSSLSocketFactory.getNewHttpClient();
        java.util.HashMap v7 = org.owasp.goatdroid.fourgoats.misc.Utils.getProxyMap(p14);
        String v6_1 = ((String) v7.get("proxyHost"));
        String v8_1 = ((String) v7.get("proxyPort"));
        if ((!v6_1.equals("")) && (!v8_1.equals(""))) {
            v0.getParams().setParameter("http.route.default-proxy", new org.apache.http.HttpHost(v6_1, Integer.parseInt(v8_1)));
        }
        try {
            org.apache.http.HttpResponse v3 = v0.execute(p12);
            this.responseCode = v3.getStatusLine().getStatusCode();
            this.message = v3.getStatusLine().getReasonPhrase();
            org.apache.http.HttpEntity v2 = v3.getEntity();
        } catch (java.io.IOException v1) {
            v0.getConnectionManager().shutdown();
            return;
        } catch (java.io.IOException v1) {
            v0.getConnectionManager().shutdown();
            return;
        }
        if (v2 == null) {
            return;
        } else {
            java.io.InputStream v4 = v2.getContent();
            this.response = org.owasp.goatdroid.fourgoats.requestresponse.RestClient.convertStreamToString(v4);
            v4.close();
            return;
        }
    }

    public void AddHeader(String p3, String p4)
    {
        this.headers.add(new org.apache.http.message.BasicNameValuePair(p3, p4));
        return;
    }

    public void AddParam(String p3, String p4)
    {
        this.params.add(new org.apache.http.message.BasicNameValuePair(p3, p4));
        return;
    }

    public void Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod p10, android.content.Context p11)
    {
        switch (org.owasp.goatdroid.fourgoats.requestresponse.RestClient.$SWITCH_TABLE$org$owasp$goatdroid$fourgoats$requestresponse$RequestMethod()[p10.ordinal()]) {
            case 1:
                String v0 = "";
                if (!this.params.isEmpty()) {
                    v0 = new StringBuilder(String.valueOf("")).append("?").toString();
                    String v5_20 = this.params.iterator();
                    while (v5_20.hasNext()) {
                        org.apache.http.NameValuePair v2_1 = ((org.apache.http.NameValuePair) v5_20.next());
                        String v3 = new StringBuilder(String.valueOf(v2_1.getName())).append("=").append(java.net.URLEncoder.encode(v2_1.getValue(), "UTF-8")).toString();
                        if (v0.length() <= 1) {
                            v0 = new StringBuilder(String.valueOf(v0)).append(v3).toString();
                        } else {
                            v0 = new StringBuilder(String.valueOf(v0)).append("&").append(v3).toString();
                        }
                    }
                }
                org.apache.http.client.methods.HttpGet v4_0 = new org.apache.http.client.methods.HttpGet(new StringBuilder(String.valueOf(this.url)).append(v0).toString());
                String v5_6 = this.headers.iterator();
                while (v5_6.hasNext()) {
                    org.apache.http.NameValuePair v1_1 = ((org.apache.http.NameValuePair) v5_6.next());
                    v4_0.addHeader(v1_1.getName(), v1_1.getValue());
                }
                this.executeRequest(v4_0, this.url, p11);
                break;
            case 2:
                org.apache.http.client.methods.HttpGet v4_2 = new org.apache.http.client.methods.HttpPost(this.url);
                String v5_5 = this.headers.iterator();
                while (v5_5.hasNext()) {
                    org.apache.http.NameValuePair v1_3 = ((org.apache.http.NameValuePair) v5_5.next());
                    v4_2.addHeader(v1_3.getName(), v1_3.getValue());
                }
                if (!this.params.isEmpty()) {
                    v4_2.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(this.params, "UTF-8"));
                }
                this.executeRequest(v4_2, this.url, p11);
                break;
        }
        return;
    }

    public String getErrorMessage()
    {
        return this.message;
    }

    public String getResponse()
    {
        return this.response;
    }

    public int getResponseCode()
    {
        return this.responseCode;
    }

    public AddVenueRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.HashMap doAddVenue(String p4, String p5, String p6, String p7, String p8)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/venues/add").toString(), p4);
        v0_1.AddParam("venueName", p5);
        v0_1.AddParam("venueWebsite", p6);
        v0_1.AddParam("latitude", p7);
        v0_1.AddParam("longitude", p8);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.addvenue.AddVenueResponse.parseAddVenueResponse(v0_1.getResponse());
    }

    public AddVenueResponse()
    {
        return;
    }

    public static java.util.HashMap parseAddVenueResponse(String p8)
    {
        java.util.HashMap v5_1 = new java.util.HashMap();
        String v3 = "";
        try {
            org.json.JSONObject v4_1 = new org.json.JSONObject(p8);
        } catch (org.json.JSONException v1) {
            v5_1.put("success", "false");
            v5_1.put("errors", "Something weird happened");
            return v5_1;
        }
        if (!v4_1.getString("success").equals("false")) {
            v5_1.put("success", "true");
            return v5_1;
        } else {
            v5_1.put("success", "false");
            try {
                org.json.JSONArray v2 = v4_1.getJSONArray("errors");
                int v0 = 0;
            } catch (org.json.JSONException v1) {
                v3 = new StringBuilder(String.valueOf(v3)).append(v4_1.getString("errors")).toString();
                v5_1.put("errors", v3);
                return v5_1;
            }
            while (v0 < v2.length()) {
                v3 = new StringBuilder(String.valueOf(v3)).append(v2.getString(v0).toString()).append("\n\n").toString();
                v0++;
            }
        }
    }

    public AdminRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.HashMap deleteUser(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/admin/delete_user").toString(), p4);
        v0_1.AddParam("userName", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.admin.AdminResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public java.util.ArrayList getUsers(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/admin/get_users").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.admin.AdminResponse.parseGetUsersResponse(v0_1.getResponse());
    }

    public java.util.HashMap resetUserPassword(String p4, String p5, String p6)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/admin/reset_password").toString(), p4);
        v0_1.AddParam("userName", p5);
        v0_1.AddParam("newPassword", p6);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.admin.AdminResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public AdminResponse()
    {
        return;
    }

    public static java.util.ArrayList parseGetUsersResponse(String p13)
    {
        java.util.ArrayList v8_1 = new java.util.ArrayList();
        String v4 = "";
        try {
            org.json.JSONObject v5_3 = new org.json.JSONObject(p13);
        } catch (org.json.JSONException v1) {
            try {
                org.json.JSONObject v5_1 = new org.json.JSONObject(p13);
                java.util.HashMap v9_2 = new java.util.HashMap();
                v9_2.put("success", "true");
                v8_1.add(v9_2);
                java.util.HashMap v6_1 = new java.util.HashMap();
            } catch (org.json.JSONException v2) {
                v2.getMessage();
                return v8_1;
            }
            if (v5_1.getJSONObject("users").has("userName")) {
                v6_1.put("userName", ((String) v5_1.getJSONObject("users").get("userName")));
            }
            if (v5_1.getJSONObject("users").has("firstName")) {
                v6_1.put("firstName", ((String) v5_1.getJSONObject("users").get("firstName")));
            }
            if (v5_1.getJSONObject("users").has("lastName")) {
                v6_1.put("lastName", ((String) v5_1.getJSONObject("users").get("lastName")));
            }
            if (v6_1.size() <= 0) {
                return v8_1;
            } else {
                v8_1.add(v6_1);
                return v8_1;
            }
        }
        if (!v5_3.getString("success").equals("true")) {
            java.util.HashMap v9_3 = new java.util.HashMap();
            v9_3.put("success", "false");
            try {
                org.json.JSONArray v3 = v5_3.getJSONArray("errors");
                int v0_1 = 0;
            } catch (org.json.JSONException v1) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v5_3.getString("errors")).toString();
                v9_3.put("errors", v4);
                v8_1.add(v9_3);
                return v8_1;
            }
            while (v0_1 < v3.length()) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v3.getString(v0_1).toString()).append("\n\n").toString();
                v0_1++;
            }
        } else {
            org.json.JSONArray v7 = v5_3.getJSONArray("users");
            int v0_0 = 0;
            while (v0_0 < v7.length()) {
                java.util.HashMap v9_5 = new java.util.HashMap();
                v9_5.put("success", "true");
                java.util.HashMap v6_3 = new java.util.HashMap();
                if (v7.getJSONObject(v0_0).has("userName")) {
                    v6_3.put("userName", ((String) v7.getJSONObject(v0_0).get("userName")));
                }
                if (v7.getJSONObject(v0_0).has("firstName")) {
                    v6_3.put("firstName", ((String) v7.getJSONObject(v0_0).get("firstName")));
                }
                if (v7.getJSONObject(v0_0).has("lastName")) {
                    v6_3.put("lastName", ((String) v7.getJSONObject(v0_0).get("lastName")));
                }
                v8_1.add(v9_5);
                if (v6_3.size() > 0) {
                    v8_1.add(v6_3);
                }
                v0_0++;
            }
            return v8_1;
        }
    }

    public CheckinRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.HashMap doCheckin(String p4, String p5, String p6)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/checkin").toString(), p4);
        v0_1.AddParam("latitude", p5);
        v0_1.AddParam("longitude", p6);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.checkin.CheckinResponse.parseCheckinResponse(v0_1.getResponse());
    }

    public CheckinResponse()
    {
        return;
    }

    public static java.util.HashMap parseCheckinResponse(String p11)
    {
        java.util.HashMap v7_1 = new java.util.HashMap();
        String v5 = "";
        try {
            org.json.JSONObject v6_1 = new org.json.JSONObject(p11);
        } catch (org.json.JSONException v2) {
            v7_1.put("success", "false");
            v7_1.put("errors", "Something weird happened");
            return v7_1;
        }
        if (!v6_1.getString("success").equals("false")) {
            v7_1.put("success", "true");
            v7_1.put("checkinID", v6_1.getString("checkinID"));
            v7_1.put("venueName", v6_1.getString("venueName"));
            v7_1.put("dateTime", v6_1.getString("dateTime"));
            try {
                org.json.JSONArray v3 = v6_1.getJSONObject("rewardEarned").getJSONArray("entry");
                int v1_0 = 0;
            } catch (String v8) {
                return v7_1;
            }
            while (v1_0 < v3.length()) {
                v7_1.put(v3.getJSONObject(v1_0).getString("key"), v3.getJSONObject(v1_0).getString("value"));
                v1_0++;
            }
            return v7_1;
        } else {
            v7_1.put("success", "false");
            try {
                org.json.JSONArray v4 = v6_1.getJSONArray("errors");
                int v1_1 = 0;
            } catch (org.json.JSONException v2) {
                v5 = new StringBuilder(String.valueOf(v5)).append(v6_1.getString("errors")).toString();
                v7_1.put("errors", v5);
                return v7_1;
            }
            while (v1_1 < v4.length()) {
                v5 = new StringBuilder(String.valueOf(v5)).append(v4.getString(v1_1).toString()).append("\n\n").toString();
                v1_1++;
            }
        }
    }

    public CommentsRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.HashMap addComment(String p4, String p5, String p6)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/comments/add").toString(), p4);
        v0_1.AddParam("comment", p5);
        v0_1.AddParam("checkinID", p6);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.comments.CommentsResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public java.util.HashMap getComments(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/comments/get").toString(), p4);
        v0_1.AddParam("checkinID", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.comments.CommentsResponse.parseGetCommentsResponse(v0_1.getResponse());
    }

    public java.util.HashMap removeComment(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/comments/remove").toString(), p4);
        v0_1.AddParam("commentID", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.comments.CommentsResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public CommentsResponse()
    {
        return;
    }

    public static java.util.HashMap parseGetCommentsResponse(String p8)
    {
        java.util.HashMap v5_1 = new java.util.HashMap();
        String v3 = "";
        try {
            org.json.JSONObject v4_1 = new org.json.JSONObject(p8);
        } catch (org.json.JSONException v1) {
            v5_1.put("success", "false");
            v5_1.put("errors", "Something weird happened");
            return v5_1;
        }
        if (!v4_1.getString("success").equals("false")) {
            v5_1.put("success", "true");
            v5_1.put("checkinID", v4_1.getString("checkinID"));
            v5_1.put("venueName", v4_1.getString("venueName"));
            v5_1.put("dateTime", v4_1.getString("dateTime"));
            return v5_1;
        } else {
            v5_1.put("success", "false");
            try {
                org.json.JSONArray v2 = v4_1.getJSONArray("errors");
                int v0 = 0;
            } catch (org.json.JSONException v1) {
                v3 = new StringBuilder(String.valueOf(v3)).append(v4_1.getString("errors")).toString();
                v5_1.put("errors", v3);
                return v5_1;
            }
            while (v0 < v2.length()) {
                v3 = new StringBuilder(String.valueOf(v3)).append(v2.getString(v0).toString()).append("\n\n").toString();
                v0++;
            }
        }
    }

    public FriendRequest(android.content.Context p2)
    {
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        this.context = p2;
        return;
    }

    public java.util.HashMap acceptFriendRequest(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/accept_friend_request").toString(), p4);
        v0_1.AddParam("userName", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.friends.FriendResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public java.util.HashMap denyFriendRequest(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/deny_friend_request").toString(), p4);
        v0_1.AddParam("userName", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.friends.FriendResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public java.util.HashMap doFriendRequest(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/request_friend").toString(), p4);
        v0_1.AddParam("userName", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.friends.FriendResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public java.util.ArrayList getFriends(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/list_friends").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.friends.FriendResponse.parseListFriendsResponse(v0_1.getResponse());
    }

    public java.util.ArrayList getPendingFriendRequests(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/get_pending_requests").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.friends.FriendResponse.parsePendingFriendRequestsResponse(v0_1.getResponse());
    }

    public java.util.HashMap getProfile(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/view_profile/").append(p5).toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.friends.FriendResponse.parseProfileResponse(v0_1.getResponse());
    }

    public java.util.HashMap removeFriendRequest(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/remove_friend").toString(), p4);
        v0_1.AddParam("userName", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.friends.FriendResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public FriendResponse()
    {
        return;
    }

    public static java.util.ArrayList parseListFriendsResponse(String p13)
    {
        java.util.ArrayList v8_1 = new java.util.ArrayList();
        String v4 = "";
        try {
            org.json.JSONObject v7_3 = new org.json.JSONObject(p13);
        } catch (org.json.JSONException v1) {
            try {
                org.json.JSONObject v7_1 = new org.json.JSONObject(p13);
                java.util.HashMap v9_3 = new java.util.HashMap();
                v9_3.put("success", "true");
                v8_1.add(v9_3);
                java.util.HashMap v5_1 = new java.util.HashMap();
            } catch (org.json.JSONException v2) {
                v2.getMessage();
                return v8_1;
            }
            if (v7_1.getJSONObject("friends").has("userID")) {
                v5_1.put("userID", ((String) v7_1.getJSONObject("friends").get("userID")));
            }
            if (v7_1.getJSONObject("friends").has("userName")) {
                v5_1.put("userName", ((String) v7_1.getJSONObject("friends").get("userName")));
            }
            if (v7_1.getJSONObject("friends").has("firstName")) {
                v5_1.put("firstName", ((String) v7_1.getJSONObject("friends").get("firstName")));
            }
            if (v7_1.getJSONObject("friends").has("lastName")) {
                v5_1.put("lastName", ((String) v7_1.getJSONObject("friends").get("lastName")));
            }
            if (v5_1.size() <= 0) {
                return v8_1;
            } else {
                v8_1.add(v5_1);
                return v8_1;
            }
        }
        if (!v7_3.getString("success").equals("true")) {
            java.util.HashMap v9_1 = new java.util.HashMap();
            v9_1.put("success", "false");
            try {
                org.json.JSONArray v3 = v7_3.getJSONArray("errors");
                int v0_1 = 0;
            } catch (org.json.JSONException v1) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v7_3.getString("errors")).toString();
                v9_1.put("errors", v4);
                v8_1.add(v9_1);
                return v8_1;
            }
            while (v0_1 < v3.length()) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v3.getString(v0_1).toString()).append("\n\n").toString();
                v0_1++;
            }
        } else {
            org.json.JSONArray v6 = v7_3.getJSONArray("friends");
            int v0_0 = 0;
            while (v0_0 < v6.length()) {
                java.util.HashMap v9_5 = new java.util.HashMap();
                v9_5.put("success", "true");
                java.util.HashMap v5_3 = new java.util.HashMap();
                if (v6.getJSONObject(v0_0).has("userID")) {
                    v5_3.put("userID", ((String) v6.getJSONObject(v0_0).get("userID")));
                }
                if (v6.getJSONObject(v0_0).has("userName")) {
                    v5_3.put("userName", ((String) v6.getJSONObject(v0_0).get("userName")));
                }
                if (v6.getJSONObject(v0_0).has("firstName")) {
                    v5_3.put("firstName", ((String) v6.getJSONObject(v0_0).get("firstName")));
                }
                if (v6.getJSONObject(v0_0).has("lastName")) {
                    v5_3.put("lastName", ((String) v6.getJSONObject(v0_0).get("lastName")));
                }
                v8_1.add(v9_5);
                if (v5_3.size() > 0) {
                    v8_1.add(v5_3);
                }
                v0_0++;
            }
            return v8_1;
        }
    }

    public static java.util.ArrayList parsePendingFriendRequestsResponse(String p13)
    {
        java.util.ArrayList v8_1 = new java.util.ArrayList();
        String v4 = "";
        try {
            org.json.JSONObject v5_3 = new org.json.JSONObject(p13);
        } catch (org.json.JSONException v1) {
            try {
                org.json.JSONObject v5_1 = new org.json.JSONObject(p13);
                java.util.HashMap v9_3 = new java.util.HashMap();
                v9_3.put("success", "true");
                v8_1.add(v9_3);
                java.util.HashMap v6_1 = new java.util.HashMap();
            } catch (org.json.JSONException v2) {
                v2.getMessage();
                return v8_1;
            }
            if (v5_1.getJSONObject("pendingFriendRequests").has("requestID")) {
                v6_1.put("requestID", ((String) v5_1.getJSONObject("pendingFriendRequests").get("requestID")));
            }
            if (v5_1.getJSONObject("pendingFriendRequests").has("userName")) {
                v6_1.put("userName", ((String) v5_1.getJSONObject("pendingFriendRequests").get("userName")));
            }
            if (v5_1.getJSONObject("pendingFriendRequests").has("firstName")) {
                v6_1.put("firstName", ((String) v5_1.getJSONObject("pendingFriendRequests").get("firstName")));
            }
            if (v5_1.getJSONObject("pendingFriendRequests").has("lastName")) {
                v6_1.put("lastName", ((String) v5_1.getJSONObject("pendingFriendRequests").get("lastName")));
            }
            if (v6_1.size() <= 0) {
                return v8_1;
            } else {
                v8_1.add(v6_1);
                return v8_1;
            }
        }
        if (!v5_3.getString("success").equals("true")) {
            java.util.HashMap v9_1 = new java.util.HashMap();
            v9_1.put("success", "false");
            try {
                org.json.JSONArray v3 = v5_3.getJSONArray("errors");
                int v0_1 = 0;
            } catch (org.json.JSONException v1) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v5_3.getString("errors")).toString();
                v9_1.put("errors", v4);
                v8_1.add(v9_1);
                return v8_1;
            }
            while (v0_1 < v3.length()) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v3.getString(v0_1).toString()).append("\n\n").toString();
                v0_1++;
            }
        } else {
            org.json.JSONArray v7 = v5_3.getJSONArray("pendingFriendRequests");
            int v0_0 = 0;
            while (v0_0 < v7.length()) {
                java.util.HashMap v9_5 = new java.util.HashMap();
                v9_5.put("success", "true");
                java.util.HashMap v6_3 = new java.util.HashMap();
                if (v7.getJSONObject(v0_0).has("requestId")) {
                    v6_3.put("requestId", ((String) v7.getJSONObject(v0_0).get("requestId")));
                }
                if (v7.getJSONObject(v0_0).has("userName")) {
                    v6_3.put("userName", ((String) v7.getJSONObject(v0_0).get("userName")));
                }
                if (v7.getJSONObject(v0_0).has("firstName")) {
                    v6_3.put("firstName", ((String) v7.getJSONObject(v0_0).get("firstName")));
                }
                if (v7.getJSONObject(v0_0).has("lastName")) {
                    v6_3.put("lastName", ((String) v7.getJSONObject(v0_0).get("lastName")));
                }
                v8_1.add(v9_5);
                if (v6_3.size() > 0) {
                    v8_1.add(v6_3);
                }
                v0_0++;
            }
            return v8_1;
        }
    }

    public static java.util.HashMap parseProfileResponse(String p11)
    {
        java.util.HashMap v7_1 = new java.util.HashMap();
        String v5 = "";
        try {
            org.json.JSONObject v6_1 = new org.json.JSONObject(p11);
        } catch (org.json.JSONException v2) {
            v7_1.put("success", "false");
            v7_1.put("errors", "Something weird happened");
            return v7_1;
        }
        if (!v6_1.getString("success").equals("false")) {
            v7_1.put("success", "true");
            org.json.JSONArray v3 = v6_1.getJSONObject("profile").getJSONArray("entry");
            int v1_0 = 0;
            while (v1_0 < v3.length()) {
                v7_1.put(v3.getJSONObject(v1_0).getString("key"), v3.getJSONObject(v1_0).getString("value"));
                v1_0++;
            }
            return v7_1;
        } else {
            v7_1.put("success", "false");
            try {
                org.json.JSONArray v4 = v6_1.getJSONArray("errors");
                int v1_1 = 0;
            } catch (org.json.JSONException v2) {
                v5 = new StringBuilder(String.valueOf(v5)).append(v6_1.getString("errors")).toString();
                v7_1.put("errors", v5);
                return v7_1;
            }
            while (v1_1 < v4.length()) {
                v5 = new StringBuilder(String.valueOf(v5)).append(v4.getString(v1_1).toString()).append("\n\n").toString();
                v1_1++;
            }
        }
    }

    public HistoryRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.ArrayList getHistory(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/history/list").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.history.HistoryResponse.parseHistoryResponse(v0_1.getResponse());
    }

    public java.util.ArrayList getUserHistory(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/history/get_user_history/").append(p5).toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.history.HistoryResponse.parseHistoryResponse(v0_1.getResponse());
    }

    public HistoryResponse()
    {
        return;
    }

    public static java.util.ArrayList parseHistoryResponse(String p13)
    {
        java.util.ArrayList v8_1 = new java.util.ArrayList();
        String v6 = "";
        try {
            org.json.JSONObject v7_3 = new org.json.JSONObject(p13);
        } catch (org.json.JSONException v3) {
            try {
                org.json.JSONObject v7_1 = new org.json.JSONObject(p13);
                java.util.HashMap v9_3 = new java.util.HashMap();
                v9_3.put("success", "true");
                v8_1.add(v9_3);
                java.util.HashMap v0_1 = new java.util.HashMap();
            } catch (org.json.JSONException v4) {
                v4.getMessage();
                return v8_1;
            }
            if (v7_1.getJSONObject("history").has("dateTime")) {
                v0_1.put("dateTime", ((String) v7_1.getJSONObject("history").get("dateTime")));
            }
            if (v7_1.getJSONObject("history").has("checkinID")) {
                v0_1.put("checkinID", ((String) v7_1.getJSONObject("history").get("checkinID")));
            }
            if (v7_1.getJSONObject("history").has("latitude")) {
                v0_1.put("latitude", ((String) v7_1.getJSONObject("history").get("latitude")));
            }
            if (v7_1.getJSONObject("history").has("longitude")) {
                v0_1.put("longitude", ((String) v7_1.getJSONObject("history").get("longitude")));
            }
            if (v7_1.getJSONObject("history").has("venueName")) {
                v0_1.put("venueName", ((String) v7_1.getJSONObject("history").get("venueName")));
            }
            if (v7_1.getJSONObject("history").has("venueWebsite")) {
                v0_1.put("venueWebsite", ((String) v7_1.getJSONObject("history").get("venueWebsite")));
            }
            if (v0_1.size() <= 0) {
                return v8_1;
            } else {
                v8_1.add(v0_1);
                return v8_1;
            }
        }
        if (!v7_3.getString("success").equals("true")) {
            java.util.HashMap v9_1 = new java.util.HashMap();
            v9_1.put("success", "false");
            try {
                org.json.JSONArray v5 = v7_3.getJSONArray("errors");
                int v2_1 = 0;
            } catch (org.json.JSONException v3) {
                v6 = new StringBuilder(String.valueOf(v6)).append(v7_3.getString("errors")).toString();
                v9_1.put("errors", v6);
                v8_1.add(v9_1);
                return v8_1;
            }
            while (v2_1 < v5.length()) {
                v6 = new StringBuilder(String.valueOf(v6)).append(v5.getString(v2_1).toString()).append("\n\n").toString();
                v2_1++;
            }
        } else {
            org.json.JSONArray v1 = v7_3.getJSONArray("history");
            int v2_0 = 0;
            while (v2_0 < v1.length()) {
                java.util.HashMap v9_5 = new java.util.HashMap();
                v9_5.put("success", "true");
                java.util.HashMap v0_3 = new java.util.HashMap();
                if (v1.getJSONObject(v2_0).has("dateTime")) {
                    v0_3.put("dateTime", ((String) v1.getJSONObject(v2_0).get("dateTime")));
                }
                if (v1.getJSONObject(v2_0).has("checkinID")) {
                    v0_3.put("checkinID", ((String) v1.getJSONObject(v2_0).get("checkinID")));
                }
                if (v1.getJSONObject(v2_0).has("latitude")) {
                    v0_3.put("latitude", ((String) v1.getJSONObject(v2_0).get("latitude")));
                }
                if (v1.getJSONObject(v2_0).has("longitude")) {
                    v0_3.put("longitude", ((String) v1.getJSONObject(v2_0).get("longitude")));
                }
                if (v1.getJSONObject(v2_0).has("venueName")) {
                    v0_3.put("venueName", ((String) v1.getJSONObject(v2_0).get("venueName")));
                }
                if (v1.getJSONObject(v2_0).has("venueWebsite")) {
                    v0_3.put("venueWebsite", ((String) v1.getJSONObject(v2_0).get("venueWebsite")));
                }
                v8_1.add(v9_5);
                if (v0_3.size() > 0) {
                    v8_1.add(v0_3);
                }
                v2_0++;
            }
            return v8_1;
        }
    }

    public LoginRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public boolean isSessionValid(String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.RestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.RestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/login/check_session").toString());
        v0_1.AddHeader("Cookie", new StringBuilder("SESS=").append(p5).toString());
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.login.LoginResponse.isSuccess(v0_1.getResponse());
    }

    public java.util.HashMap logOut(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/login/sign_out").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.login.LoginResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public java.util.HashMap validateCredentials(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.RestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.RestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/login/authenticate").toString());
        v0_1.AddParam("userName", p4);
        v0_1.AddParam("password", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.login.LoginResponse.parseLoginResponse(v0_1.getResponse());
    }

    public java.util.HashMap validateCredentialsAPI(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.RestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.RestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/login/validate_api").toString());
        v0_1.AddParam("userName", p4);
        v0_1.AddParam("password", p5);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.login.LoginResponse.parseAPILoginResponse(v0_1.getResponse());
    }

    public LoginResponse()
    {
        return;
    }

    public static java.util.HashMap parseAPILoginResponse(String p5)
    {
        java.util.HashMap v2_1 = new java.util.HashMap();
        try {
            org.json.JSONObject v1_1 = new org.json.JSONObject(p5);
        } catch (org.json.JSONException v0) {
            v2_1.put("success", "false");
            return v2_1;
        }
        if (!v1_1.getString("success").equals("false")) {
            v2_1.put("success", "true");
            v2_1.put("sessionToken", v1_1.getString("sessionToken"));
            return v2_1;
        } else {
            v2_1.put("success", "false");
            return v2_1;
        }
    }

    public static java.util.HashMap parseLoginResponse(String p9)
    {
        java.util.HashMap v5_1 = new java.util.HashMap();
        try {
            org.json.JSONObject v3_1 = new org.json.JSONObject(p9);
        } catch (org.json.JSONException v1) {
            v5_1.put("errors", v1.getMessage());
            v5_1.put("success", "false");
            return v5_1;
        }
        if (!v3_1.getString("success").equals("false")) {
            v5_1.put("success", "true");
            v5_1.put("sessionToken", v3_1.getString("sessionToken"));
            v5_1.put("userName", v3_1.getString("userName"));
            org.json.JSONArray v2 = v3_1.getJSONObject("preferences").getJSONArray("entry");
            int v0 = 0;
            while (v0 < v2.length()) {
                v5_1.put(v2.getJSONObject(v0).getString("key"), v2.getJSONObject(v0).getString("value"));
                v0++;
            }
            return v5_1;
        } else {
            v5_1.put("success", "false");
            return v5_1;
        }
    }

    public PreferencesRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.HashMap updatePreferences(String p4, String p5, String p6)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/preferences/modify_preferences").toString(), p4);
        v0_1.AddParam("isPublic", p5);
        v0_1.AddParam("autoCheckin", p6);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.preferences.PreferencesResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public PreferencesResponse()
    {
        return;
    }

    public RegisterRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.HashMap validateRegistration(String p4, String p5, String p6, String p7)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.RestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.RestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/register").toString());
        v0_1.AddParam("firstName", p4);
        v0_1.AddParam("lastName", p5);
        v0_1.AddParam("userName", p6);
        v0_1.AddParam("password", p7);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.POST, this.context);
        return org.owasp.goatdroid.fourgoats.rest.register.RegisterResponse.parseStatusAndErrors(v0_1.getResponse());
    }

    public RegisterResponse()
    {
        return;
    }

    public RewardsRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.ArrayList getAllRewards(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/rewards/all_rewards").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.rewards.RewardsResponse.parseRewardsResponse(v0_1.getResponse());
    }

    public java.util.ArrayList getMyRewards(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/rewards/my_rewards").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.rewards.RewardsResponse.parseRewardsResponse(v0_1.getResponse());
    }

    public RewardsResponse()
    {
        return;
    }

    public static java.util.ArrayList parseRewardsResponse(String p13)
    {
        java.util.ArrayList v6_1 = new java.util.ArrayList();
        String v4 = "";
        try {
            org.json.JSONObject v5_3 = new org.json.JSONObject(p13);
        } catch (org.json.JSONException v1) {
            try {
                org.json.JSONObject v5_1 = new org.json.JSONObject(p13);
                java.util.HashMap v7_3 = new java.util.HashMap();
                v7_3.put("success", "true");
                java.util.HashMap v8_1 = new java.util.HashMap();
            } catch (org.json.JSONException v2) {
                v2.getMessage();
                return v6_1;
            }
            if (v5_1.getJSONObject("rewards").has("rewardName")) {
                v8_1.put("rewardName", ((String) v5_1.getJSONObject("rewards").get("rewardName")));
            }
            if (v5_1.getJSONObject("rewards").has("rewardDescription")) {
                v8_1.put("rewardDescription", ((String) v5_1.getJSONObject("rewards").get("rewardDescription")));
            }
            if (v5_1.getJSONObject("rewards").has("venueName")) {
                v8_1.put("venueName", ((String) v5_1.getJSONObject("rewards").get("venueName")));
            }
            if (v5_1.getJSONObject("rewards").has("checkinsRequired")) {
                v8_1.put("checkinsRequired", ((String) v5_1.getJSONObject("rewards").get("checkinsRequired")));
            }
            if (v5_1.getJSONObject("rewards").has("latitude")) {
                v8_1.put("latitude", ((String) v5_1.getJSONObject("rewards").get("latitude")));
            }
            if (v5_1.getJSONObject("rewards").has("longitude")) {
                v8_1.put("longitude", ((String) v5_1.getJSONObject("rewards").get("longitude")));
            }
            if (v5_1.getJSONObject("rewards").has("timeEarned")) {
                v8_1.put("timeEarned", ((String) v5_1.getJSONObject("rewards").get("timeEarned")));
            }
            v6_1.add(v7_3);
            if (v8_1.size() <= 0) {
                return v6_1;
            } else {
                v6_1.add(v8_1);
                return v6_1;
            }
        }
        if (!v5_3.getString("success").equals("true")) {
            java.util.HashMap v7_1 = new java.util.HashMap();
            v7_1.put("success", "false");
            try {
                org.json.JSONArray v3 = v5_3.getJSONArray("errors");
                int v0_1 = 0;
            } catch (org.json.JSONException v1) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v5_3.getString("errors")).toString();
                v7_1.put("errors", v4);
                v6_1.add(v7_1);
                return v6_1;
            }
            while (v0_1 < v3.length()) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v3.getString(v0_1).toString()).append("\n\n").toString();
                v0_1++;
            }
        } else {
            org.json.JSONArray v9 = v5_3.getJSONArray("rewards");
            int v0_0 = 0;
            while (v0_0 < v9.length()) {
                java.util.HashMap v7_5 = new java.util.HashMap();
                v7_5.put("success", "true");
                java.util.HashMap v8_3 = new java.util.HashMap();
                if (v9.getJSONObject(v0_0).has("rewardName")) {
                    v8_3.put("rewardName", ((String) v9.getJSONObject(v0_0).get("rewardName")));
                }
                if (v9.getJSONObject(v0_0).has("rewardDescription")) {
                    v8_3.put("rewardDescription", ((String) v9.getJSONObject(v0_0).get("rewardDescription")));
                }
                if (v9.getJSONObject(v0_0).has("venueName")) {
                    v8_3.put("venueName", ((String) v9.getJSONObject(v0_0).get("venueName")));
                }
                if (v9.getJSONObject(v0_0).has("checkinsRequired")) {
                    v8_3.put("checkinsRequired", ((String) v9.getJSONObject(v0_0).get("checkinsRequired")));
                }
                if (v9.getJSONObject(v0_0).has("latitude")) {
                    v8_3.put("latitude", ((String) v9.getJSONObject(v0_0).get("latitude")));
                }
                if (v9.getJSONObject(v0_0).has("longitude")) {
                    v8_3.put("longitude", ((String) v9.getJSONObject(v0_0).get("longitude")));
                }
                if (v9.getJSONObject(v0_0).has("timeEarned")) {
                    v8_3.put("timeEarned", ((String) v9.getJSONObject(v0_0).get("timeEarned")));
                }
                v6_1.add(v7_5);
                if (v8_3.size() > 0) {
                    v6_1.add(v8_3);
                }
                v0_0++;
            }
            return v6_1;
        }
    }

    public SearchForFriendsRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.ArrayList getUsers(String p4)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/friends/search_users").toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.searchforfriends.SearchForFriendsResponse.parseSearchForFriendsResponse(v0_1.getResponse());
    }

    public SearchForFriendsResponse()
    {
        return;
    }

    public static java.util.ArrayList parseSearchForFriendsResponse(String p13)
    {
        java.util.ArrayList v8_1 = new java.util.ArrayList();
        String v4 = "";
        try {
            org.json.JSONObject v7_3 = new org.json.JSONObject(p13);
        } catch (org.json.JSONException v1) {
            try {
                org.json.JSONObject v7_1 = new org.json.JSONObject(p13);
                java.util.HashMap v9_3 = new java.util.HashMap();
                v9_3.put("success", "true");
                v8_1.add(v9_3);
                java.util.HashMap v5_1 = new java.util.HashMap();
            } catch (org.json.JSONException v2) {
                v2.getMessage();
                return v8_1;
            }
            if (v7_1.getJSONObject("users").has("userID")) {
                v5_1.put("userID", ((String) v7_1.getJSONObject("users").get("userID")));
            }
            if (v7_1.getJSONObject("users").has("userName")) {
                v5_1.put("userName", ((String) v7_1.getJSONObject("users").get("userName")));
            }
            if (v7_1.getJSONObject("users").has("firstName")) {
                v5_1.put("firstName", ((String) v7_1.getJSONObject("users").get("firstName")));
            }
            if (v7_1.getJSONObject("users").has("lastName")) {
                v5_1.put("lastName", ((String) v7_1.getJSONObject("users").get("lastName")));
            }
            if (v5_1.size() <= 0) {
                return v8_1;
            } else {
                v8_1.add(v5_1);
                return v8_1;
            }
        }
        if (!v7_3.getString("success").equals("true")) {
            java.util.HashMap v9_1 = new java.util.HashMap();
            v9_1.put("success", "false");
            try {
                org.json.JSONArray v3 = v7_3.getJSONArray("errors");
                int v0_1 = 0;
            } catch (org.json.JSONException v1) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v7_3.getString("errors")).toString();
                v9_1.put("errors", v4);
                v8_1.add(v9_1);
                return v8_1;
            }
            while (v0_1 < v3.length()) {
                v4 = new StringBuilder(String.valueOf(v4)).append(v3.getString(v0_1).toString()).append("\n\n").toString();
                v0_1++;
            }
        } else {
            org.json.JSONArray v6 = v7_3.getJSONArray("users");
            int v0_0 = 0;
            while (v0_0 < v6.length()) {
                java.util.HashMap v9_5 = new java.util.HashMap();
                v9_5.put("success", "true");
                java.util.HashMap v5_3 = new java.util.HashMap();
                if (v6.getJSONObject(v0_0).has("userID")) {
                    v5_3.put("userID", ((String) v6.getJSONObject(v0_0).get("userID")));
                }
                if (v6.getJSONObject(v0_0).has("userName")) {
                    v5_3.put("userName", ((String) v6.getJSONObject(v0_0).get("userName")));
                }
                if (v6.getJSONObject(v0_0).has("firstName")) {
                    v5_3.put("firstName", ((String) v6.getJSONObject(v0_0).get("firstName")));
                }
                if (v6.getJSONObject(v0_0).has("lastName")) {
                    v5_3.put("lastName", ((String) v6.getJSONObject(v0_0).get("lastName")));
                }
                v8_1.add(v9_5);
                if (v5_3.size() > 0) {
                    v8_1.add(v5_3);
                }
                v0_0++;
            }
            return v8_1;
        }
    }

    public ViewCheckinRequest(android.content.Context p2)
    {
        this.context = p2;
        this.destinationInfo = org.owasp.goatdroid.fourgoats.misc.Utils.getDestinationInfo(p2);
        return;
    }

    public java.util.HashMap getCheckin(String p4, String p5)
    {
        org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient v0_1 = new org.owasp.goatdroid.fourgoats.requestresponse.AuthenticatedRestClient(new StringBuilder("https://").append(this.destinationInfo).append("/fourgoats/api/v1/comments/get/").append(p5).toString(), p4);
        v0_1.Execute(org.owasp.goatdroid.fourgoats.requestresponse.RequestMethod.GET, this.context);
        return org.owasp.goatdroid.fourgoats.rest.viewcheckin.ViewCheckinResponse.parseCheckinResponse(v0_1.getResponse());
    }

    public ViewCheckinResponse()
    {
        return;
    }

    public static java.util.HashMap parseCheckinResponse(String p11)
    {
        java.util.HashMap v7_1 = new java.util.HashMap();
        String v5 = "";
        try {
            org.json.JSONObject v6_1 = new org.json.JSONObject(p11);
        } catch (org.json.JSONException v2) {
            v7_1.put("success", "false");
            v7_1.put("errors", "Something weird happened");
            return v7_1;
        }
        if (!v6_1.getString("success").equals("false")) {
            v7_1.put("success", "true");
            try {
                org.json.JSONArray v3 = v6_1.getJSONObject("comments").getJSONArray("entry");
                int v1_0 = 0;
            } catch (String v8) {
                return v7_1;
            }
            while (v1_0 < v3.length()) {
                v7_1.put(v3.getJSONObject(v1_0).getString("key"), v3.getJSONObject(v1_0).getString("value"));
                v1_0++;
            }
            return v7_1;
        } else {
            v7_1.put("success", "false");
            try {
                org.json.JSONArray v4 = v6_1.getJSONArray("errors");
                int v1_1 = 0;
            } catch (org.json.JSONException v2) {
                v5 = new StringBuilder(String.valueOf(v5)).append(v6_1.getString("errors")).toString();
                v7_1.put("errors", v5);
                return v7_1;
            }
            while (v1_1 < v4.length()) {
                v5 = new StringBuilder(String.valueOf(v5)).append(v4.getString(v1_1).toString()).append("\n\n").toString();
                v1_1++;
            }
        }
    }

    LocationService$1(org.owasp.goatdroid.fourgoats.services.LocationService p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        while (this.this$0.latitude == null) {
            if (this.this$0.longitude != null) {
                break;
            }
        }
        while(true) {
            org.owasp.goatdroid.fourgoats.db.CheckinDBHelper v0_0 = new org.owasp.goatdroid.fourgoats.db.CheckinDBHelper(this.this$0.getApplicationContext());
            v0_0.insertAutoCheckin(this.this$0.latitude, this.this$0.longitude, org.owasp.goatdroid.fourgoats.misc.Utils.getCurrentDateTime());
            v0_0.close();
            org.owasp.goatdroid.fourgoats.services.LocationService$1.sleep(300000);
        }
    }

    private LocationService$MyLocationListener(org.owasp.goatdroid.fourgoats.services.LocationService p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic LocationService$MyLocationListener(org.owasp.goatdroid.fourgoats.services.LocationService p1, org.owasp.goatdroid.fourgoats.services.LocationService$MyLocationListener p2)
    {
        this(p1);
        return;
    }

    public void onLocationChanged(android.location.Location p4)
    {
        this.this$0.latitude = Double.toString(p4.getLatitude());
        this.this$0.longitude = Double.toString(p4.getLongitude());
        return;
    }

    public void onProviderDisabled(String p1)
    {
        return;
    }

    public void onProviderEnabled(String p1)
    {
        return;
    }

    public void onStatusChanged(String p1, int p2, android.os.Bundle p3)
    {
        return;
    }

    public LocationService()
    {
        return;
    }

    public void getLocation()
    {
        this.locationManager = ((android.location.LocationManager) this.getSystemService("location"));
        this.locationManager.requestLocationUpdates("gps", 0, 0, new org.owasp.goatdroid.fourgoats.services.LocationService$MyLocationListener(this, 0));
        return;
    }

    public void getLocationLoop()
    {
        new org.owasp.goatdroid.fourgoats.services.LocationService$1(this).start();
        return;
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return 0;
    }

    public void onCreate()
    {
        super.onCreate();
        if (!((String) new org.owasp.goatdroid.fourgoats.db.UserInfoDBHelper(this.getApplicationContext()).getPreferences().get("autoCheckin")).equals("true")) {
            this.stopSelf();
        } else {
            this.getLocation();
            this.getLocationLoop();
        }
        return;
    }
